package gtk

/*
#include <stdlib.h>
#include <stdint.h>

typedef size_t GType;

extern void _Gtk_go_callback_cleanup(void *gofunc);
static void _c_callback_cleanup(void *userdata)
{
	_Gtk_go_callback_cleanup(userdata);
}
typedef struct _Display Display;
struct _Display {};
typedef struct _Screen Screen;
struct _Screen {};
typedef struct _Visual Visual;
struct _Visual {};
typedef struct _XEvent XEvent;
struct _XEvent {};
typedef struct _XConfigureEvent XConfigureEvent;
struct _XConfigureEvent {};
typedef struct _XImage XImage;
struct _XImage {};
typedef struct _XFontStruct XFontStruct;
struct _XFontStruct {};
typedef struct _XTrapezoid XTrapezoid;
struct _XTrapezoid {};
typedef struct _XVisualInfo XVisualInfo;
struct _XVisualInfo {};
typedef struct _XWindowAttributes XWindowAttributes;
struct _XWindowAttributes {};
typedef struct _cairoContext cairoContext;
struct _cairoContext {};
typedef struct _cairoSurface cairoSurface;
struct _cairoSurface {};
typedef struct _cairoMatrix cairoMatrix;
struct _cairoMatrix {};
typedef struct _cairoPattern cairoPattern;
struct _cairoPattern {};
typedef struct _cairoRegion cairoRegion;
struct _cairoRegion {};
typedef uint32_t cairoContent;
typedef struct _cairoFontOptions cairoFontOptions;
struct _cairoFontOptions {};
typedef struct _cairoFontType cairoFontType;
struct _cairoFontType {};
typedef struct _cairoFontFace cairoFontFace;
struct _cairoFontFace {};
typedef struct _cairoScaledFont cairoScaledFont;
struct _cairoScaledFont {};
typedef struct _cairoPath cairoPath;
struct _cairoPath {};
typedef struct _cairoRectangleInt cairoRectangleInt;
struct _cairoRectangleInt { uint8_t _data[16]; };
typedef uint32_t PangoAlignment;
typedef struct _PangoAnalysis PangoAnalysis;
struct _PangoAnalysis { uint8_t _data[48]; };
typedef struct _PangoAttrClass PangoAttrClass;
struct _PangoAttrClass { uint8_t _data[32]; };
typedef struct _PangoAttrColor PangoAttrColor;
struct _PangoAttrColor { uint8_t _data[24]; };
typedef void* PangoAttrFilterFunc;
extern void _PangoAttrFilterFunc_c_wrapper();
extern void _PangoAttrFilterFunc_c_wrapper_once();
typedef struct _PangoAttrFloat PangoAttrFloat;
struct _PangoAttrFloat { uint8_t _data[24]; };
typedef struct _PangoAttrFontDesc PangoAttrFontDesc;
struct _PangoAttrFontDesc { uint8_t _data[24]; };
typedef struct _PangoAttrInt PangoAttrInt;
struct _PangoAttrInt { uint8_t _data[24]; };
typedef struct _PangoAttrIterator PangoAttrIterator;
struct _PangoAttrIterator {};
typedef struct _PangoAttrLanguage PangoAttrLanguage;
struct _PangoAttrLanguage { uint8_t _data[24]; };
typedef struct _PangoAttrList PangoAttrList;
struct _PangoAttrList {};
typedef struct _PangoAttrShape PangoAttrShape;
struct _PangoAttrShape { uint8_t _data[72]; };
typedef struct _PangoAttrSize PangoAttrSize;
struct _PangoAttrSize { uint8_t _data[24]; };
typedef struct _PangoAttrString PangoAttrString;
struct _PangoAttrString { uint8_t _data[24]; };
typedef uint32_t PangoAttrType;
typedef struct _PangoAttribute PangoAttribute;
struct _PangoAttribute { uint8_t _data[16]; };
typedef uint32_t PangoBidiType;
typedef struct _PangoColor PangoColor;
struct _PangoColor { uint8_t _data[6]; };
typedef struct _PangoContext PangoContext;
typedef struct _PangoContextClass PangoContextClass;
struct _PangoContextClass {};
typedef struct _PangoCoverage PangoCoverage;
struct _PangoCoverage {};
typedef uint32_t PangoCoverageLevel;
typedef uint32_t PangoDirection;
typedef uint32_t PangoEllipsizeMode;
typedef struct _PangoEngineLang PangoEngineLang;
struct _PangoEngineLang {};
typedef struct _PangoEngineShape PangoEngineShape;
struct _PangoEngineShape {};
typedef struct _PangoFont PangoFont;
typedef struct _PangoFontDescription PangoFontDescription;
struct _PangoFontDescription {};
typedef struct _PangoFontFace PangoFontFace;
typedef struct _PangoFontFamily PangoFontFamily;
typedef struct _PangoFontMap PangoFontMap;
typedef uint32_t PangoFontMask;
typedef struct _PangoFontMetrics PangoFontMetrics;
struct _PangoFontMetrics {};
typedef struct _PangoFontset PangoFontset;
typedef void* PangoFontsetForeachFunc;
extern void _PangoFontsetForeachFunc_c_wrapper();
extern void _PangoFontsetForeachFunc_c_wrapper_once();
typedef struct _PangoGlyphGeometry PangoGlyphGeometry;
struct _PangoGlyphGeometry { uint8_t _data[12]; };
typedef struct _PangoGlyphInfo PangoGlyphInfo;
struct _PangoGlyphInfo { uint8_t _data[20]; };
typedef struct _PangoGlyphItem PangoGlyphItem;
struct _PangoGlyphItem { uint8_t _data[16]; };
typedef struct _PangoGlyphItemIter PangoGlyphItemIter;
struct _PangoGlyphItemIter { uint8_t _data[40]; };
typedef struct _PangoGlyphString PangoGlyphString;
struct _PangoGlyphString { uint8_t _data[32]; };
typedef struct _PangoGlyphVisAttr PangoGlyphVisAttr;
struct _PangoGlyphVisAttr { uint8_t _data[4]; };
typedef uint32_t PangoGravity;
typedef uint32_t PangoGravityHint;
typedef struct _PangoItem PangoItem;
struct _PangoItem { uint8_t _data[64]; };
typedef struct _PangoLanguage PangoLanguage;
struct _PangoLanguage {};
typedef struct _PangoLayout PangoLayout;
typedef struct _PangoLayoutClass PangoLayoutClass;
struct _PangoLayoutClass {};
typedef struct _PangoLayoutIter PangoLayoutIter;
struct _PangoLayoutIter {};
typedef struct _PangoLayoutLine PangoLayoutLine;
struct _PangoLayoutLine { uint8_t _data[32]; };
typedef struct _PangoLogAttr PangoLogAttr;
struct _PangoLogAttr { uint8_t _data[52]; };
typedef struct _PangoMatrix PangoMatrix;
struct _PangoMatrix { uint8_t _data[48]; };
typedef struct _PangoRectangle PangoRectangle;
struct _PangoRectangle { uint8_t _data[16]; };
typedef uint32_t PangoRenderPart;
typedef struct _PangoRenderer PangoRenderer;
typedef struct _PangoRendererClass PangoRendererClass;
struct _PangoRendererClass { uint8_t _data[248]; };
typedef struct _PangoRendererPrivate PangoRendererPrivate;
struct _PangoRendererPrivate {};
typedef int32_t PangoScript;
typedef struct _PangoScriptIter PangoScriptIter;
struct _PangoScriptIter {};
typedef uint32_t PangoStretch;
typedef uint32_t PangoStyle;
typedef uint32_t PangoTabAlign;
typedef struct _PangoTabArray PangoTabArray;
struct _PangoTabArray {};
typedef uint32_t PangoUnderline;
typedef uint32_t PangoVariant;
typedef uint32_t PangoWeight;
typedef uint32_t PangoWrapMode;
typedef struct _Pango_ScriptForLang Pango_ScriptForLang;
struct _Pango_ScriptForLang { uint8_t _data[20]; };
typedef struct _GAction GAction;
typedef struct _GActionEntry GActionEntry;
struct _GActionEntry { uint8_t _data[64]; };
typedef struct _GActionGroup GActionGroup;
typedef struct _GActionGroupInterface GActionGroupInterface;
struct _GActionGroupInterface { uint8_t _data[120]; };
typedef struct _GActionInterface GActionInterface;
struct _GActionInterface { uint8_t _data[80]; };
typedef struct _GAppInfo GAppInfo;
typedef uint32_t GAppInfoCreateFlags;
typedef struct _GAppInfoIface GAppInfoIface;
struct _GAppInfoIface { uint8_t _data[192]; };
typedef struct _GAppLaunchContext GAppLaunchContext;
typedef struct _GAppLaunchContextClass GAppLaunchContextClass;
struct _GAppLaunchContextClass { uint8_t _data[200]; };
typedef struct _GAppLaunchContextPrivate GAppLaunchContextPrivate;
struct _GAppLaunchContextPrivate {};
typedef struct _GApplication GApplication;
typedef struct _GApplicationClass GApplicationClass;
struct _GApplicationClass { uint8_t _data[312]; };
typedef struct _GApplicationCommandLine GApplicationCommandLine;
typedef struct _GApplicationCommandLineClass GApplicationCommandLineClass;
struct _GApplicationCommandLineClass { uint8_t _data[248]; };
typedef struct _GApplicationCommandLinePrivate GApplicationCommandLinePrivate;
struct _GApplicationCommandLinePrivate {};
typedef uint32_t GApplicationFlags;
typedef struct _GApplicationPrivate GApplicationPrivate;
struct _GApplicationPrivate {};
typedef uint32_t GAskPasswordFlags;
typedef struct _GAsyncInitable GAsyncInitable;
typedef struct _GAsyncInitableIface GAsyncInitableIface;
struct _GAsyncInitableIface { uint8_t _data[32]; };
typedef void* GAsyncReadyCallback;
extern void _GAsyncReadyCallback_c_wrapper();
extern void _GAsyncReadyCallback_c_wrapper_once();
typedef struct _GAsyncResult GAsyncResult;
typedef struct _GAsyncResultIface GAsyncResultIface;
struct _GAsyncResultIface { uint8_t _data[32]; };
typedef struct _GBufferedInputStream GBufferedInputStream;
typedef struct _GBufferedInputStreamClass GBufferedInputStreamClass;
struct _GBufferedInputStreamClass { uint8_t _data[336]; };
typedef struct _GBufferedInputStreamPrivate GBufferedInputStreamPrivate;
struct _GBufferedInputStreamPrivate {};
typedef struct _GBufferedOutputStream GBufferedOutputStream;
typedef struct _GBufferedOutputStreamClass GBufferedOutputStreamClass;
struct _GBufferedOutputStreamClass { uint8_t _data[336]; };
typedef struct _GBufferedOutputStreamPrivate GBufferedOutputStreamPrivate;
struct _GBufferedOutputStreamPrivate {};
typedef void* GBusAcquiredCallback;
extern void _GBusAcquiredCallback_c_wrapper();
extern void _GBusAcquiredCallback_c_wrapper_once();
typedef void* GBusNameAcquiredCallback;
extern void _GBusNameAcquiredCallback_c_wrapper();
extern void _GBusNameAcquiredCallback_c_wrapper_once();
typedef void* GBusNameAppearedCallback;
extern void _GBusNameAppearedCallback_c_wrapper();
extern void _GBusNameAppearedCallback_c_wrapper_once();
typedef void* GBusNameLostCallback;
extern void _GBusNameLostCallback_c_wrapper();
extern void _GBusNameLostCallback_c_wrapper_once();
typedef uint32_t GBusNameOwnerFlags;
typedef void* GBusNameVanishedCallback;
extern void _GBusNameVanishedCallback_c_wrapper();
extern void _GBusNameVanishedCallback_c_wrapper_once();
typedef uint32_t GBusNameWatcherFlags;
typedef int32_t GBusType;
typedef struct _GCancellable GCancellable;
typedef struct _GCancellableClass GCancellableClass;
struct _GCancellableClass { uint8_t _data[184]; };
typedef struct _GCancellablePrivate GCancellablePrivate;
struct _GCancellablePrivate {};
typedef void* GCancellableSourceFunc;
extern void _GCancellableSourceFunc_c_wrapper();
extern void _GCancellableSourceFunc_c_wrapper_once();
typedef struct _GCharsetConverter GCharsetConverter;
typedef struct _GCharsetConverterClass GCharsetConverterClass;
struct _GCharsetConverterClass { uint8_t _data[136]; };
typedef struct _GConverter GConverter;
typedef uint32_t GConverterFlags;
typedef struct _GConverterIface GConverterIface;
struct _GConverterIface { uint8_t _data[32]; };
typedef struct _GConverterInputStream GConverterInputStream;
typedef struct _GConverterInputStreamClass GConverterInputStreamClass;
struct _GConverterInputStreamClass { uint8_t _data[312]; };
typedef struct _GConverterInputStreamPrivate GConverterInputStreamPrivate;
struct _GConverterInputStreamPrivate {};
typedef struct _GConverterOutputStream GConverterOutputStream;
typedef struct _GConverterOutputStreamClass GConverterOutputStreamClass;
struct _GConverterOutputStreamClass { uint8_t _data[360]; };
typedef struct _GConverterOutputStreamPrivate GConverterOutputStreamPrivate;
struct _GConverterOutputStreamPrivate {};
typedef uint32_t GConverterResult;
typedef struct _GCredentials GCredentials;
typedef struct _GCredentialsClass GCredentialsClass;
struct _GCredentialsClass {};
typedef uint32_t GCredentialsType;
typedef struct _GDBusAnnotationInfo GDBusAnnotationInfo;
struct _GDBusAnnotationInfo { uint8_t _data[32]; };
typedef struct _GDBusArgInfo GDBusArgInfo;
struct _GDBusArgInfo { uint8_t _data[32]; };
typedef struct _GDBusAuthObserver GDBusAuthObserver;
typedef uint32_t GDBusCallFlags;
typedef uint32_t GDBusCapabilityFlags;
typedef struct _GDBusConnection GDBusConnection;
typedef uint32_t GDBusConnectionFlags;
typedef uint32_t GDBusError;
typedef struct _GDBusErrorEntry GDBusErrorEntry;
struct _GDBusErrorEntry { uint8_t _data[16]; };
typedef struct _GDBusInterface GDBusInterface;
typedef void* GDBusInterfaceGetPropertyFunc;
extern void _GDBusInterfaceGetPropertyFunc_c_wrapper();
extern void _GDBusInterfaceGetPropertyFunc_c_wrapper_once();
typedef struct _GDBusInterfaceIface GDBusInterfaceIface;
struct _GDBusInterfaceIface { uint8_t _data[40]; };
typedef struct _GDBusInterfaceInfo GDBusInterfaceInfo;
struct _GDBusInterfaceInfo { uint8_t _data[48]; };
typedef void* GDBusInterfaceMethodCallFunc;
extern void _GDBusInterfaceMethodCallFunc_c_wrapper();
extern void _GDBusInterfaceMethodCallFunc_c_wrapper_once();
typedef void* GDBusInterfaceSetPropertyFunc;
extern void _GDBusInterfaceSetPropertyFunc_c_wrapper();
extern void _GDBusInterfaceSetPropertyFunc_c_wrapper_once();
typedef struct _GDBusInterfaceSkeleton GDBusInterfaceSkeleton;
typedef struct _GDBusInterfaceSkeletonClass GDBusInterfaceSkeletonClass;
struct _GDBusInterfaceSkeletonClass { uint8_t _data[304]; };
typedef uint32_t GDBusInterfaceSkeletonFlags;
typedef struct _GDBusInterfaceSkeletonPrivate GDBusInterfaceSkeletonPrivate;
struct _GDBusInterfaceSkeletonPrivate {};
typedef struct _GDBusInterfaceVTable GDBusInterfaceVTable;
struct _GDBusInterfaceVTable { uint8_t _data[88]; };
typedef struct _GDBusMessage GDBusMessage;
typedef uint32_t GDBusMessageByteOrder;
typedef void* GDBusMessageFilterFunction;
extern void _GDBusMessageFilterFunction_c_wrapper();
extern void _GDBusMessageFilterFunction_c_wrapper_once();
typedef uint32_t GDBusMessageFlags;
typedef uint32_t GDBusMessageHeaderField;
typedef uint32_t GDBusMessageType;
typedef struct _GDBusMethodInfo GDBusMethodInfo;
struct _GDBusMethodInfo { uint8_t _data[40]; };
typedef struct _GDBusMethodInvocation GDBusMethodInvocation;
typedef struct _GDBusNodeInfo GDBusNodeInfo;
struct _GDBusNodeInfo { uint8_t _data[40]; };
typedef struct _GDBusObject GDBusObject;
typedef struct _GDBusObjectIface GDBusObjectIface;
struct _GDBusObjectIface { uint8_t _data[56]; };
typedef struct _GDBusObjectManager GDBusObjectManager;
typedef struct _GDBusObjectManagerClient GDBusObjectManagerClient;
typedef struct _GDBusObjectManagerClientClass GDBusObjectManagerClientClass;
struct _GDBusObjectManagerClientClass { uint8_t _data[216]; };
typedef uint32_t GDBusObjectManagerClientFlags;
typedef struct _GDBusObjectManagerClientPrivate GDBusObjectManagerClientPrivate;
struct _GDBusObjectManagerClientPrivate {};
typedef struct _GDBusObjectManagerIface GDBusObjectManagerIface;
struct _GDBusObjectManagerIface { uint8_t _data[80]; };
typedef struct _GDBusObjectManagerServer GDBusObjectManagerServer;
typedef struct _GDBusObjectManagerServerClass GDBusObjectManagerServerClass;
struct _GDBusObjectManagerServerClass { uint8_t _data[200]; };
typedef struct _GDBusObjectManagerServerPrivate GDBusObjectManagerServerPrivate;
struct _GDBusObjectManagerServerPrivate {};
typedef struct _GDBusObjectProxy GDBusObjectProxy;
typedef struct _GDBusObjectProxyClass GDBusObjectProxyClass;
struct _GDBusObjectProxyClass { uint8_t _data[200]; };
typedef struct _GDBusObjectProxyPrivate GDBusObjectProxyPrivate;
struct _GDBusObjectProxyPrivate {};
typedef struct _GDBusObjectSkeleton GDBusObjectSkeleton;
typedef struct _GDBusObjectSkeletonClass GDBusObjectSkeletonClass;
struct _GDBusObjectSkeletonClass { uint8_t _data[208]; };
typedef struct _GDBusObjectSkeletonPrivate GDBusObjectSkeletonPrivate;
struct _GDBusObjectSkeletonPrivate {};
typedef struct _GDBusPropertyInfo GDBusPropertyInfo;
struct _GDBusPropertyInfo { uint8_t _data[40]; };
typedef uint32_t GDBusPropertyInfoFlags;
typedef struct _GDBusProxy GDBusProxy;
typedef struct _GDBusProxyClass GDBusProxyClass;
struct _GDBusProxyClass { uint8_t _data[408]; };
typedef uint32_t GDBusProxyFlags;
typedef struct _GDBusProxyPrivate GDBusProxyPrivate;
struct _GDBusProxyPrivate {};
typedef void* GDBusProxyTypeFunc;
extern void _GDBusProxyTypeFunc_c_wrapper();
extern void _GDBusProxyTypeFunc_c_wrapper_once();
typedef uint32_t GDBusSendMessageFlags;
typedef struct _GDBusServer GDBusServer;
typedef uint32_t GDBusServerFlags;
typedef void* GDBusSignalCallback;
extern void _GDBusSignalCallback_c_wrapper();
extern void _GDBusSignalCallback_c_wrapper_once();
typedef uint32_t GDBusSignalFlags;
typedef struct _GDBusSignalInfo GDBusSignalInfo;
struct _GDBusSignalInfo { uint8_t _data[32]; };
typedef void* GDBusSubtreeDispatchFunc;
extern void _GDBusSubtreeDispatchFunc_c_wrapper();
extern void _GDBusSubtreeDispatchFunc_c_wrapper_once();
typedef uint32_t GDBusSubtreeFlags;
typedef void* GDBusSubtreeIntrospectFunc;
extern void _GDBusSubtreeIntrospectFunc_c_wrapper();
extern void _GDBusSubtreeIntrospectFunc_c_wrapper_once();
typedef struct _GDBusSubtreeVTable GDBusSubtreeVTable;
struct _GDBusSubtreeVTable { uint8_t _data[88]; };
typedef struct _GDataInputStream GDataInputStream;
typedef struct _GDataInputStreamClass GDataInputStreamClass;
struct _GDataInputStreamClass { uint8_t _data[376]; };
typedef struct _GDataInputStreamPrivate GDataInputStreamPrivate;
struct _GDataInputStreamPrivate {};
typedef struct _GDataOutputStream GDataOutputStream;
typedef struct _GDataOutputStreamClass GDataOutputStreamClass;
struct _GDataOutputStreamClass { uint8_t _data[360]; };
typedef struct _GDataOutputStreamPrivate GDataOutputStreamPrivate;
struct _GDataOutputStreamPrivate {};
typedef uint32_t GDataStreamByteOrder;
typedef uint32_t GDataStreamNewlineType;
typedef struct _GDesktopAppInfo GDesktopAppInfo;
typedef struct _GDesktopAppInfoClass GDesktopAppInfoClass;
struct _GDesktopAppInfoClass { uint8_t _data[136]; };
typedef struct _GDesktopAppInfoLookup GDesktopAppInfoLookup;
typedef struct _GDesktopAppInfoLookupIface GDesktopAppInfoLookupIface;
struct _GDesktopAppInfoLookupIface { uint8_t _data[24]; };
typedef void* GDesktopAppLaunchCallback;
extern void _GDesktopAppLaunchCallback_c_wrapper();
extern void _GDesktopAppLaunchCallback_c_wrapper_once();
typedef struct _GDrive GDrive;
typedef struct _GDriveIface GDriveIface;
struct _GDriveIface { uint8_t _data[248]; };
typedef uint32_t GDriveStartFlags;
typedef uint32_t GDriveStartStopType;
typedef struct _GEmblem GEmblem;
typedef struct _GEmblemClass GEmblemClass;
struct _GEmblemClass {};
typedef uint32_t GEmblemOrigin;
typedef struct _GEmblemedIcon GEmblemedIcon;
typedef struct _GEmblemedIconClass GEmblemedIconClass;
struct _GEmblemedIconClass { uint8_t _data[136]; };
typedef struct _GEmblemedIconPrivate GEmblemedIconPrivate;
struct _GEmblemedIconPrivate {};
typedef struct _GFile GFile;
typedef struct _GFileAttributeInfo GFileAttributeInfo;
struct _GFileAttributeInfo { uint8_t _data[16]; };
typedef uint32_t GFileAttributeInfoFlags;
typedef struct _GFileAttributeInfoList GFileAttributeInfoList;
struct _GFileAttributeInfoList { uint8_t _data[16]; };
typedef struct _GFileAttributeMatcher GFileAttributeMatcher;
struct _GFileAttributeMatcher {};
typedef uint32_t GFileAttributeStatus;
typedef uint32_t GFileAttributeType;
typedef uint32_t GFileCopyFlags;
typedef uint32_t GFileCreateFlags;
typedef struct _GFileDescriptorBased GFileDescriptorBased;
typedef struct _GFileDescriptorBasedIface GFileDescriptorBasedIface;
struct _GFileDescriptorBasedIface { uint8_t _data[24]; };
typedef struct _GFileEnumerator GFileEnumerator;
typedef struct _GFileEnumeratorClass GFileEnumeratorClass;
struct _GFileEnumeratorClass { uint8_t _data[240]; };
typedef struct _GFileEnumeratorPrivate GFileEnumeratorPrivate;
struct _GFileEnumeratorPrivate {};
typedef struct _GFileIOStream GFileIOStream;
typedef struct _GFileIOStreamClass GFileIOStreamClass;
struct _GFileIOStreamClass { uint8_t _data[368]; };
typedef struct _GFileIOStreamPrivate GFileIOStreamPrivate;
struct _GFileIOStreamPrivate {};
typedef struct _GFileIcon GFileIcon;
typedef struct _GFileIconClass GFileIconClass;
struct _GFileIconClass {};
typedef struct _GFileIface GFileIface;
struct _GFileIface { uint8_t _data[816]; };
typedef struct _GFileInfo GFileInfo;
typedef struct _GFileInfoClass GFileInfoClass;
struct _GFileInfoClass {};
typedef struct _GFileInputStream GFileInputStream;
typedef struct _GFileInputStreamClass GFileInputStreamClass;
struct _GFileInputStreamClass { uint8_t _data[336]; };
typedef struct _GFileInputStreamPrivate GFileInputStreamPrivate;
struct _GFileInputStreamPrivate {};
typedef struct _GFileMonitor GFileMonitor;
typedef struct _GFileMonitorClass GFileMonitorClass;
struct _GFileMonitorClass { uint8_t _data[192]; };
typedef uint32_t GFileMonitorEvent;
typedef uint32_t GFileMonitorFlags;
typedef struct _GFileMonitorPrivate GFileMonitorPrivate;
struct _GFileMonitorPrivate {};
typedef struct _GFileOutputStream GFileOutputStream;
typedef struct _GFileOutputStreamClass GFileOutputStreamClass;
struct _GFileOutputStreamClass { uint8_t _data[408]; };
typedef struct _GFileOutputStreamPrivate GFileOutputStreamPrivate;
struct _GFileOutputStreamPrivate {};
typedef void* GFileProgressCallback;
extern void _GFileProgressCallback_c_wrapper();
extern void _GFileProgressCallback_c_wrapper_once();
typedef uint32_t GFileQueryInfoFlags;
typedef void* GFileReadMoreCallback;
extern void _GFileReadMoreCallback_c_wrapper();
extern void _GFileReadMoreCallback_c_wrapper_once();
typedef uint32_t GFileType;
typedef struct _GFilenameCompleter GFilenameCompleter;
typedef struct _GFilenameCompleterClass GFilenameCompleterClass;
struct _GFilenameCompleterClass { uint8_t _data[168]; };
typedef uint32_t GFilesystemPreviewType;
typedef struct _GFilterInputStream GFilterInputStream;
typedef struct _GFilterInputStreamClass GFilterInputStreamClass;
struct _GFilterInputStreamClass { uint8_t _data[272]; };
typedef struct _GFilterOutputStream GFilterOutputStream;
typedef struct _GFilterOutputStreamClass GFilterOutputStreamClass;
struct _GFilterOutputStreamClass { uint8_t _data[320]; };
typedef uint32_t GIOErrorEnum;
typedef struct _GIOExtension GIOExtension;
struct _GIOExtension {};
typedef struct _GIOExtensionPoint GIOExtensionPoint;
struct _GIOExtensionPoint {};
typedef struct _GIOModule GIOModule;
typedef struct _GIOModuleClass GIOModuleClass;
struct _GIOModuleClass {};
typedef struct _GIOModuleScope GIOModuleScope;
struct _GIOModuleScope {};
typedef uint32_t GIOModuleScopeFlags;
typedef struct _GIOSchedulerJob GIOSchedulerJob;
struct _GIOSchedulerJob {};
typedef void* GIOSchedulerJobFunc;
extern void _GIOSchedulerJobFunc_c_wrapper();
extern void _GIOSchedulerJobFunc_c_wrapper_once();
typedef struct _GIOStream GIOStream;
typedef struct _GIOStreamAdapter GIOStreamAdapter;
struct _GIOStreamAdapter {};
typedef struct _GIOStreamClass GIOStreamClass;
struct _GIOStreamClass { uint8_t _data[256]; };
typedef struct _GIOStreamPrivate GIOStreamPrivate;
struct _GIOStreamPrivate {};
typedef uint32_t GIOStreamSpliceFlags;
typedef struct _GIcon GIcon;
typedef struct _GIconIface GIconIface;
struct _GIconIface { uint8_t _data[48]; };
typedef struct _GInetAddress GInetAddress;
typedef struct _GInetAddressClass GInetAddressClass;
struct _GInetAddressClass { uint8_t _data[152]; };
typedef struct _GInetAddressPrivate GInetAddressPrivate;
struct _GInetAddressPrivate {};
typedef struct _GInetSocketAddress GInetSocketAddress;
typedef struct _GInetSocketAddressClass GInetSocketAddressClass;
struct _GInetSocketAddressClass { uint8_t _data[160]; };
typedef struct _GInetSocketAddressPrivate GInetSocketAddressPrivate;
struct _GInetSocketAddressPrivate {};
typedef struct _GInitable GInitable;
typedef struct _GInitableIface GInitableIface;
struct _GInitableIface { uint8_t _data[24]; };
typedef struct _GInputStream GInputStream;
typedef struct _GInputStreamClass GInputStreamClass;
struct _GInputStreamClass { uint8_t _data[248]; };
typedef struct _GInputStreamPrivate GInputStreamPrivate;
struct _GInputStreamPrivate {};
typedef struct _GInputVector GInputVector;
struct _GInputVector { uint8_t _data[16]; };
typedef struct _GLoadableIcon GLoadableIcon;
typedef struct _GLoadableIconIface GLoadableIconIface;
struct _GLoadableIconIface { uint8_t _data[40]; };
typedef struct _GMemoryInputStream GMemoryInputStream;
typedef struct _GMemoryInputStreamClass GMemoryInputStreamClass;
struct _GMemoryInputStreamClass { uint8_t _data[288]; };
typedef struct _GMemoryInputStreamPrivate GMemoryInputStreamPrivate;
struct _GMemoryInputStreamPrivate {};
typedef struct _GMemoryOutputStream GMemoryOutputStream;
typedef struct _GMemoryOutputStreamClass GMemoryOutputStreamClass;
struct _GMemoryOutputStreamClass { uint8_t _data[336]; };
typedef struct _GMemoryOutputStreamPrivate GMemoryOutputStreamPrivate;
struct _GMemoryOutputStreamPrivate {};
typedef struct _GMount GMount;
typedef struct _GMountIface GMountIface;
struct _GMountIface { uint8_t _data[216]; };
typedef uint32_t GMountMountFlags;
typedef struct _GMountOperation GMountOperation;
typedef struct _GMountOperationClass GMountOperationClass;
struct _GMountOperationClass { uint8_t _data[256]; };
typedef struct _GMountOperationPrivate GMountOperationPrivate;
struct _GMountOperationPrivate {};
typedef uint32_t GMountOperationResult;
typedef uint32_t GMountUnmountFlags;
typedef struct _GNativeVolumeMonitor GNativeVolumeMonitor;
typedef struct _GNativeVolumeMonitorClass GNativeVolumeMonitorClass;
struct _GNativeVolumeMonitorClass { uint8_t _data[344]; };
typedef struct _GNetworkAddress GNetworkAddress;
typedef struct _GNetworkAddressClass GNetworkAddressClass;
struct _GNetworkAddressClass { uint8_t _data[136]; };
typedef struct _GNetworkAddressPrivate GNetworkAddressPrivate;
struct _GNetworkAddressPrivate {};
typedef struct _GNetworkService GNetworkService;
typedef struct _GNetworkServiceClass GNetworkServiceClass;
struct _GNetworkServiceClass { uint8_t _data[136]; };
typedef struct _GNetworkServicePrivate GNetworkServicePrivate;
struct _GNetworkServicePrivate {};
typedef struct _GOutputStream GOutputStream;
typedef struct _GOutputStreamClass GOutputStreamClass;
struct _GOutputStreamClass { uint8_t _data[296]; };
typedef struct _GOutputStreamPrivate GOutputStreamPrivate;
struct _GOutputStreamPrivate {};
typedef uint32_t GOutputStreamSpliceFlags;
typedef struct _GOutputVector GOutputVector;
struct _GOutputVector { uint8_t _data[16]; };
typedef uint32_t GPasswordSave;
typedef struct _GPermission GPermission;
typedef struct _GPermissionClass GPermissionClass;
struct _GPermissionClass { uint8_t _data[312]; };
typedef struct _GPermissionPrivate GPermissionPrivate;
struct _GPermissionPrivate {};
typedef struct _GPollableInputStream GPollableInputStream;
typedef struct _GPollableInputStreamInterface GPollableInputStreamInterface;
struct _GPollableInputStreamInterface { uint8_t _data[48]; };
typedef struct _GPollableOutputStream GPollableOutputStream;
typedef struct _GPollableOutputStreamInterface GPollableOutputStreamInterface;
struct _GPollableOutputStreamInterface { uint8_t _data[48]; };
typedef void* GPollableSourceFunc;
extern void _GPollableSourceFunc_c_wrapper();
extern void _GPollableSourceFunc_c_wrapper_once();
typedef struct _GProxy GProxy;
typedef struct _GProxyAddress GProxyAddress;
typedef struct _GProxyAddressClass GProxyAddressClass;
struct _GProxyAddressClass { uint8_t _data[160]; };
typedef struct _GProxyAddressEnumerator GProxyAddressEnumerator;
typedef struct _GProxyAddressEnumeratorClass GProxyAddressEnumeratorClass;
struct _GProxyAddressEnumeratorClass { uint8_t _data[216]; };
typedef struct _GProxyAddressEnumeratorPrivate GProxyAddressEnumeratorPrivate;
struct _GProxyAddressEnumeratorPrivate {};
typedef struct _GProxyAddressPrivate GProxyAddressPrivate;
struct _GProxyAddressPrivate {};
typedef struct _GProxyInterface GProxyInterface;
struct _GProxyInterface { uint8_t _data[48]; };
typedef struct _GProxyResolver GProxyResolver;
typedef struct _GProxyResolverInterface GProxyResolverInterface;
struct _GProxyResolverInterface { uint8_t _data[48]; };
typedef struct _GResolver GResolver;
typedef struct _GResolverClass GResolverClass;
struct _GResolverClass { uint8_t _data[264]; };
typedef uint32_t GResolverError;
typedef struct _GResolverPrivate GResolverPrivate;
struct _GResolverPrivate {};
typedef struct _GSeekable GSeekable;
typedef struct _GSeekableIface GSeekableIface;
struct _GSeekableIface { uint8_t _data[56]; };
typedef struct _GSettings GSettings;
typedef struct _GSettingsBackend GSettingsBackend;
struct _GSettingsBackend {};
typedef uint32_t GSettingsBindFlags;
typedef void* GSettingsBindGetMapping;
extern void _GSettingsBindGetMapping_c_wrapper();
extern void _GSettingsBindGetMapping_c_wrapper_once();
typedef void* GSettingsBindSetMapping;
extern void _GSettingsBindSetMapping_c_wrapper();
extern void _GSettingsBindSetMapping_c_wrapper_once();
typedef struct _GSettingsClass GSettingsClass;
struct _GSettingsClass { uint8_t _data[328]; };
typedef void* GSettingsGetMapping;
extern void _GSettingsGetMapping_c_wrapper();
extern void _GSettingsGetMapping_c_wrapper_once();
typedef struct _GSettingsPrivate GSettingsPrivate;
struct _GSettingsPrivate {};
typedef struct _GSimpleAction GSimpleAction;
typedef struct _GSimpleActionGroup GSimpleActionGroup;
typedef struct _GSimpleActionGroupClass GSimpleActionGroupClass;
struct _GSimpleActionGroupClass { uint8_t _data[232]; };
typedef struct _GSimpleActionGroupPrivate GSimpleActionGroupPrivate;
struct _GSimpleActionGroupPrivate {};
typedef struct _GSimpleAsyncResult GSimpleAsyncResult;
typedef struct _GSimpleAsyncResultClass GSimpleAsyncResultClass;
struct _GSimpleAsyncResultClass {};
typedef void* GSimpleAsyncThreadFunc;
extern void _GSimpleAsyncThreadFunc_c_wrapper();
extern void _GSimpleAsyncThreadFunc_c_wrapper_once();
typedef struct _GSimplePermission GSimplePermission;
typedef struct _GSocket GSocket;
typedef struct _GSocketAddress GSocketAddress;
typedef struct _GSocketAddressClass GSocketAddressClass;
struct _GSocketAddressClass { uint8_t _data[160]; };
typedef struct _GSocketAddressEnumerator GSocketAddressEnumerator;
typedef struct _GSocketAddressEnumeratorClass GSocketAddressEnumeratorClass;
struct _GSocketAddressEnumeratorClass { uint8_t _data[160]; };
typedef struct _GSocketClass GSocketClass;
struct _GSocketClass { uint8_t _data[216]; };
typedef struct _GSocketClient GSocketClient;
typedef struct _GSocketClientClass GSocketClientClass;
struct _GSocketClientClass { uint8_t _data[176]; };
typedef struct _GSocketClientPrivate GSocketClientPrivate;
struct _GSocketClientPrivate {};
typedef struct _GSocketConnectable GSocketConnectable;
typedef struct _GSocketConnectableIface GSocketConnectableIface;
struct _GSocketConnectableIface { uint8_t _data[32]; };
typedef struct _GSocketConnection GSocketConnection;
typedef struct _GSocketConnectionClass GSocketConnectionClass;
struct _GSocketConnectionClass { uint8_t _data[304]; };
typedef struct _GSocketConnectionPrivate GSocketConnectionPrivate;
struct _GSocketConnectionPrivate {};
typedef struct _GSocketControlMessage GSocketControlMessage;
typedef struct _GSocketControlMessageClass GSocketControlMessageClass;
struct _GSocketControlMessageClass { uint8_t _data[216]; };
typedef struct _GSocketControlMessagePrivate GSocketControlMessagePrivate;
struct _GSocketControlMessagePrivate {};
typedef uint32_t GSocketFamily;
typedef struct _GSocketListener GSocketListener;
typedef struct _GSocketListenerClass GSocketListenerClass;
struct _GSocketListenerClass { uint8_t _data[192]; };
typedef struct _GSocketListenerPrivate GSocketListenerPrivate;
struct _GSocketListenerPrivate {};
typedef uint32_t GSocketMsgFlags;
typedef struct _GSocketPrivate GSocketPrivate;
struct _GSocketPrivate {};
typedef int32_t GSocketProtocol;
typedef struct _GSocketService GSocketService;
typedef struct _GSocketServiceClass GSocketServiceClass;
struct _GSocketServiceClass { uint8_t _data[248]; };
typedef struct _GSocketServicePrivate GSocketServicePrivate;
struct _GSocketServicePrivate {};
typedef void* GSocketSourceFunc;
extern void _GSocketSourceFunc_c_wrapper();
extern void _GSocketSourceFunc_c_wrapper_once();
typedef uint32_t GSocketType;
typedef struct _GSrvTarget GSrvTarget;
struct _GSrvTarget {};
typedef struct _GTcpConnection GTcpConnection;
typedef struct _GTcpConnectionClass GTcpConnectionClass;
struct _GTcpConnectionClass { uint8_t _data[304]; };
typedef struct _GTcpConnectionPrivate GTcpConnectionPrivate;
struct _GTcpConnectionPrivate {};
typedef struct _GTcpWrapperConnection GTcpWrapperConnection;
typedef struct _GTcpWrapperConnectionClass GTcpWrapperConnectionClass;
struct _GTcpWrapperConnectionClass { uint8_t _data[304]; };
typedef struct _GTcpWrapperConnectionPrivate GTcpWrapperConnectionPrivate;
struct _GTcpWrapperConnectionPrivate {};
typedef struct _GThemedIcon GThemedIcon;
typedef struct _GThemedIconClass GThemedIconClass;
struct _GThemedIconClass {};
typedef struct _GThreadedSocketService GThreadedSocketService;
typedef struct _GThreadedSocketServiceClass GThreadedSocketServiceClass;
struct _GThreadedSocketServiceClass { uint8_t _data[296]; };
typedef struct _GThreadedSocketServicePrivate GThreadedSocketServicePrivate;
struct _GThreadedSocketServicePrivate {};
typedef uint32_t GTlsAuthenticationMode;
typedef struct _GTlsBackend GTlsBackend;
typedef struct _GTlsBackendInterface GTlsBackendInterface;
struct _GTlsBackendInterface { uint8_t _data[64]; };
typedef struct _GTlsCertificate GTlsCertificate;
typedef struct _GTlsCertificateClass GTlsCertificateClass;
struct _GTlsCertificateClass { uint8_t _data[208]; };
typedef uint32_t GTlsCertificateFlags;
typedef struct _GTlsCertificatePrivate GTlsCertificatePrivate;
struct _GTlsCertificatePrivate {};
typedef struct _GTlsClientConnection GTlsClientConnection;
typedef struct _GTlsClientConnectionInterface GTlsClientConnectionInterface;
struct _GTlsClientConnectionInterface { uint8_t _data[16]; };
typedef struct _GTlsConnection GTlsConnection;
typedef struct _GTlsConnectionClass GTlsConnectionClass;
struct _GTlsConnectionClass { uint8_t _data[352]; };
typedef struct _GTlsConnectionPrivate GTlsConnectionPrivate;
struct _GTlsConnectionPrivate {};
typedef struct _GTlsDatabase GTlsDatabase;
typedef struct _GTlsDatabaseClass GTlsDatabaseClass;
struct _GTlsDatabaseClass { uint8_t _data[368]; };
typedef uint32_t GTlsDatabaseLookupFlags;
typedef struct _GTlsDatabasePrivate GTlsDatabasePrivate;
struct _GTlsDatabasePrivate {};
typedef uint32_t GTlsDatabaseVerifyFlags;
typedef uint32_t GTlsError;
typedef struct _GTlsFileDatabase GTlsFileDatabase;
typedef struct _GTlsFileDatabaseInterface GTlsFileDatabaseInterface;
struct _GTlsFileDatabaseInterface { uint8_t _data[80]; };
typedef struct _GTlsInteraction GTlsInteraction;
typedef struct _GTlsInteractionClass GTlsInteractionClass;
struct _GTlsInteractionClass { uint8_t _data[352]; };
typedef struct _GTlsInteractionPrivate GTlsInteractionPrivate;
struct _GTlsInteractionPrivate {};
typedef uint32_t GTlsInteractionResult;
typedef struct _GTlsPassword GTlsPassword;
typedef struct _GTlsPasswordClass GTlsPasswordClass;
struct _GTlsPasswordClass { uint8_t _data[192]; };
typedef uint32_t GTlsPasswordFlags;
typedef struct _GTlsPasswordPrivate GTlsPasswordPrivate;
struct _GTlsPasswordPrivate {};
typedef uint32_t GTlsRehandshakeMode;
typedef struct _GTlsServerConnection GTlsServerConnection;
typedef struct _GTlsServerConnectionInterface GTlsServerConnectionInterface;
struct _GTlsServerConnectionInterface { uint8_t _data[16]; };
typedef struct _GUnixConnection GUnixConnection;
typedef struct _GUnixConnectionClass GUnixConnectionClass;
struct _GUnixConnectionClass { uint8_t _data[304]; };
typedef struct _GUnixConnectionPrivate GUnixConnectionPrivate;
struct _GUnixConnectionPrivate {};
typedef struct _GUnixCredentialsMessage GUnixCredentialsMessage;
typedef struct _GUnixCredentialsMessageClass GUnixCredentialsMessageClass;
struct _GUnixCredentialsMessageClass { uint8_t _data[232]; };
typedef struct _GUnixCredentialsMessagePrivate GUnixCredentialsMessagePrivate;
struct _GUnixCredentialsMessagePrivate {};
typedef struct _GUnixFDList GUnixFDList;
typedef struct _GUnixFDListClass GUnixFDListClass;
struct _GUnixFDListClass { uint8_t _data[176]; };
typedef struct _GUnixFDListPrivate GUnixFDListPrivate;
struct _GUnixFDListPrivate {};
typedef struct _GUnixFDMessage GUnixFDMessage;
typedef struct _GUnixFDMessageClass GUnixFDMessageClass;
struct _GUnixFDMessageClass { uint8_t _data[232]; };
typedef struct _GUnixFDMessagePrivate GUnixFDMessagePrivate;
struct _GUnixFDMessagePrivate {};
typedef struct _GUnixInputStream GUnixInputStream;
typedef struct _GUnixInputStreamClass GUnixInputStreamClass;
struct _GUnixInputStreamClass { uint8_t _data[288]; };
typedef struct _GUnixInputStreamPrivate GUnixInputStreamPrivate;
struct _GUnixInputStreamPrivate {};
typedef struct _GUnixMountEntry GUnixMountEntry;
struct _GUnixMountEntry {};
typedef struct _GUnixMountMonitor GUnixMountMonitor;
typedef struct _GUnixMountMonitorClass GUnixMountMonitorClass;
struct _GUnixMountMonitorClass {};
typedef struct _GUnixMountPoint GUnixMountPoint;
struct _GUnixMountPoint {};
typedef struct _GUnixOutputStream GUnixOutputStream;
typedef struct _GUnixOutputStreamClass GUnixOutputStreamClass;
struct _GUnixOutputStreamClass { uint8_t _data[336]; };
typedef struct _GUnixOutputStreamPrivate GUnixOutputStreamPrivate;
struct _GUnixOutputStreamPrivate {};
typedef struct _GUnixSocketAddress GUnixSocketAddress;
typedef struct _GUnixSocketAddressClass GUnixSocketAddressClass;
struct _GUnixSocketAddressClass { uint8_t _data[160]; };
typedef struct _GUnixSocketAddressPrivate GUnixSocketAddressPrivate;
struct _GUnixSocketAddressPrivate {};
typedef uint32_t GUnixSocketAddressType;
typedef struct _GVfs GVfs;
typedef struct _GVfsClass GVfsClass;
struct _GVfsClass { uint8_t _data[272]; };
typedef struct _GVolume GVolume;
typedef struct _GVolumeIface GVolumeIface;
struct _GVolumeIface { uint8_t _data[168]; };
typedef struct _GVolumeMonitor GVolumeMonitor;
typedef struct _GVolumeMonitorClass GVolumeMonitorClass;
struct _GVolumeMonitorClass { uint8_t _data[336]; };
typedef struct _GZlibCompressor GZlibCompressor;
typedef struct _GZlibCompressorClass GZlibCompressorClass;
struct _GZlibCompressorClass { uint8_t _data[136]; };
typedef uint32_t GZlibCompressorFormat;
typedef struct _GZlibDecompressor GZlibDecompressor;
typedef struct _GZlibDecompressorClass GZlibDecompressorClass;
struct _GZlibDecompressorClass { uint8_t _data[136]; };
typedef uint32_t GdkColorspace;
typedef uint32_t GdkInterpType;
typedef struct _GdkPixbuf GdkPixbuf;
typedef uint32_t GdkPixbufAlphaMode;
typedef struct _GdkPixbufAnimation GdkPixbufAnimation;
typedef struct _GdkPixbufAnimationIter GdkPixbufAnimationIter;
typedef void* GdkPixbufDestroyNotify;
extern void _GdkPixbufDestroyNotify_c_wrapper();
extern void _GdkPixbufDestroyNotify_c_wrapper_once();
typedef uint32_t GdkPixbufError;
typedef struct _GdkPixbufFormat GdkPixbufFormat;
struct _GdkPixbufFormat {};
typedef struct _GdkPixbufLoader GdkPixbufLoader;
typedef struct _GdkPixbufLoaderClass GdkPixbufLoaderClass;
struct _GdkPixbufLoaderClass { uint8_t _data[168]; };
typedef uint32_t GdkPixbufRotation;
typedef void* GdkPixbufSaveFunc;
extern void _GdkPixbufSaveFunc_c_wrapper();
extern void _GdkPixbufSaveFunc_c_wrapper_once();
typedef struct _GdkPixbufSimpleAnim GdkPixbufSimpleAnim;
typedef struct _GdkPixbufSimpleAnimClass GdkPixbufSimpleAnimClass;
struct _GdkPixbufSimpleAnimClass {};
typedef struct _GdkPixbufSimpleAnimIter GdkPixbufSimpleAnimIter;
typedef struct _GdkPixdata GdkPixdata;
struct _GdkPixdata { uint8_t _data[32]; };
typedef uint32_t GdkPixdataDumpType;
typedef uint32_t GdkPixdataType;
typedef struct _GdkAppLaunchContext GdkAppLaunchContext;
typedef void *GdkAtom;
typedef uint32_t GdkAxisUse;
typedef uint32_t GdkByteOrder;
typedef struct _GdkColor GdkColor;
struct _GdkColor { uint8_t _data[12]; };
typedef uint32_t GdkCrossingMode;
typedef struct _GdkCursor GdkCursor;
typedef int32_t GdkCursorType;
typedef struct _GdkDevice GdkDevice;
typedef struct _GdkDeviceManager GdkDeviceManager;
typedef uint32_t GdkDeviceType;
typedef struct _GdkDisplay GdkDisplay;
typedef struct _GdkDisplayManager GdkDisplayManager;
typedef uint32_t GdkDragAction;
typedef struct _GdkDragContext GdkDragContext;
typedef uint32_t GdkDragProtocol;
typedef struct _GdkEvent GdkEvent;
struct _GdkEvent { uint8_t _data[88]; };
typedef struct _GdkEventAny GdkEventAny;
struct _GdkEventAny { uint8_t _data[24]; };
typedef struct _GdkEventButton GdkEventButton;
struct _GdkEventButton { uint8_t _data[80]; };
typedef struct _GdkEventConfigure GdkEventConfigure;
struct _GdkEventConfigure { uint8_t _data[40]; };
typedef struct _GdkEventCrossing GdkEventCrossing;
struct _GdkEventCrossing { uint8_t _data[88]; };
typedef struct _GdkEventDND GdkEventDND;
struct _GdkEventDND { uint8_t _data[40]; };
typedef struct _GdkEventExpose GdkEventExpose;
struct _GdkEventExpose { uint8_t _data[56]; };
typedef struct _GdkEventFocus GdkEventFocus;
struct _GdkEventFocus { uint8_t _data[24]; };
typedef void* GdkEventFunc;
extern void _GdkEventFunc_c_wrapper();
extern void _GdkEventFunc_c_wrapper_once();
typedef struct _GdkEventGrabBroken GdkEventGrabBroken;
struct _GdkEventGrabBroken { uint8_t _data[40]; };
typedef struct _GdkEventKey GdkEventKey;
struct _GdkEventKey { uint8_t _data[56]; };
typedef uint32_t GdkEventMask;
typedef struct _GdkEventMotion GdkEventMotion;
struct _GdkEventMotion { uint8_t _data[80]; };
typedef struct _GdkEventOwnerChange GdkEventOwnerChange;
struct _GdkEventOwnerChange { uint8_t _data[56]; };
typedef struct _GdkEventProperty GdkEventProperty;
struct _GdkEventProperty { uint8_t _data[40]; };
typedef struct _GdkEventProximity GdkEventProximity;
struct _GdkEventProximity { uint8_t _data[32]; };
typedef struct _GdkEventScroll GdkEventScroll;
struct _GdkEventScroll { uint8_t _data[72]; };
typedef struct _GdkEventSelection GdkEventSelection;
struct _GdkEventSelection { uint8_t _data[64]; };
typedef struct _GdkEventSetting GdkEventSetting;
struct _GdkEventSetting { uint8_t _data[32]; };
typedef int32_t GdkEventType;
typedef struct _GdkEventVisibility GdkEventVisibility;
struct _GdkEventVisibility { uint8_t _data[24]; };
typedef struct _GdkEventWindowState GdkEventWindowState;
struct _GdkEventWindowState { uint8_t _data[32]; };
typedef uint32_t GdkExtensionMode;
typedef void* GdkFilterFunc;
extern void _GdkFilterFunc_c_wrapper();
extern void _GdkFilterFunc_c_wrapper_once();
typedef uint32_t GdkFilterReturn;
typedef struct _GdkGeometry GdkGeometry;
struct _GdkGeometry { uint8_t _data[56]; };
typedef uint32_t GdkGrabOwnership;
typedef uint32_t GdkGrabStatus;
typedef uint32_t GdkGravity;
typedef uint32_t GdkInputMode;
typedef uint32_t GdkInputSource;
typedef struct _GdkKeymap GdkKeymap;
typedef struct _GdkKeymapKey GdkKeymapKey;
struct _GdkKeymapKey { uint8_t _data[12]; };
typedef uint32_t GdkModifierType;
typedef uint32_t GdkNotifyType;
typedef uint32_t GdkOwnerChange;
typedef struct _GdkPoint GdkPoint;
struct _GdkPoint { uint8_t _data[8]; };
typedef uint32_t GdkPropMode;
typedef uint32_t GdkPropertyState;
typedef struct _GdkRGBA GdkRGBA;
struct _GdkRGBA { uint8_t _data[32]; };
typedef struct _GdkScreen GdkScreen;
typedef uint32_t GdkScrollDirection;
typedef uint32_t GdkSettingAction;
typedef int32_t GdkStatus;
typedef struct _GdkTimeCoord GdkTimeCoord;
struct _GdkTimeCoord { uint8_t _data[1032]; };
typedef uint32_t GdkVisibilityState;
typedef struct _GdkVisual GdkVisual;
typedef uint32_t GdkVisualType;
typedef uint32_t GdkWMDecoration;
typedef uint32_t GdkWMFunction;
typedef struct _GdkWindow GdkWindow;
typedef struct _GdkWindowAttr GdkWindowAttr;
struct _GdkWindowAttr { uint8_t _data[80]; };
typedef uint32_t GdkWindowAttributesType;
typedef void* GdkWindowChildFunc;
extern void _GdkWindowChildFunc_c_wrapper();
extern void _GdkWindowChildFunc_c_wrapper_once();
typedef struct _GdkWindowClass GdkWindowClass;
struct _GdkWindowClass { uint8_t _data[232]; };
typedef uint32_t GdkWindowEdge;
typedef uint32_t GdkWindowHints;
typedef struct _GdkWindowRedirect GdkWindowRedirect;
struct _GdkWindowRedirect {};
typedef uint32_t GdkWindowState;
typedef uint32_t GdkWindowType;
typedef uint32_t GdkWindowTypeHint;
typedef uint32_t GdkWindowWindowClass;
typedef void* GBaseFinalizeFunc;
extern void _GBaseFinalizeFunc_c_wrapper();
extern void _GBaseFinalizeFunc_c_wrapper_once();
typedef void* GBaseInitFunc;
extern void _GBaseInitFunc_c_wrapper();
extern void _GBaseInitFunc_c_wrapper_once();
typedef struct _GBinding GBinding;
typedef uint32_t GBindingFlags;
typedef void* GBindingTransformFunc;
extern void _GBindingTransformFunc_c_wrapper();
extern void _GBindingTransformFunc_c_wrapper_once();
typedef void* GBoxedFreeFunc;
extern void _GBoxedFreeFunc_c_wrapper();
extern void _GBoxedFreeFunc_c_wrapper_once();
typedef struct _GCClosure GCClosure;
struct _GCClosure { uint8_t _data[72]; };
typedef void* GCallback;
extern void _GCallback_c_wrapper();
extern void _GCallback_c_wrapper_once();
typedef void* GClassFinalizeFunc;
extern void _GClassFinalizeFunc_c_wrapper();
extern void _GClassFinalizeFunc_c_wrapper_once();
typedef void* GClassInitFunc;
extern void _GClassInitFunc_c_wrapper();
extern void _GClassInitFunc_c_wrapper_once();
typedef struct _GClosure GClosure;
struct _GClosure { uint8_t _data[64]; };
typedef void* GClosureMarshal;
extern void _GClosureMarshal_c_wrapper();
extern void _GClosureMarshal_c_wrapper_once();
typedef void* GClosureNotify;
extern void _GClosureNotify_c_wrapper();
extern void _GClosureNotify_c_wrapper_once();
typedef struct _GClosureNotifyData GClosureNotifyData;
struct _GClosureNotifyData { uint8_t _data[16]; };
typedef uint32_t GConnectFlags;
typedef struct _GEnumClass GEnumClass;
struct _GEnumClass { uint8_t _data[32]; };
typedef struct _GEnumValue GEnumValue;
struct _GEnumValue { uint8_t _data[24]; };
typedef struct _GFlagsClass GFlagsClass;
struct _GFlagsClass { uint8_t _data[24]; };
typedef struct _GFlagsValue GFlagsValue;
struct _GFlagsValue { uint8_t _data[24]; };
typedef struct _GInitiallyUnowned GInitiallyUnowned;
typedef struct _GInitiallyUnownedClass GInitiallyUnownedClass;
struct _GInitiallyUnownedClass { uint8_t _data[136]; };
typedef void* GInstanceInitFunc;
extern void _GInstanceInitFunc_c_wrapper();
extern void _GInstanceInitFunc_c_wrapper_once();
typedef void* GInterfaceFinalizeFunc;
extern void _GInterfaceFinalizeFunc_c_wrapper();
extern void _GInterfaceFinalizeFunc_c_wrapper_once();
typedef struct _GInterfaceInfo GInterfaceInfo;
struct _GInterfaceInfo { uint8_t _data[24]; };
typedef void* GInterfaceInitFunc;
extern void _GInterfaceInitFunc_c_wrapper();
extern void _GInterfaceInitFunc_c_wrapper_once();
typedef struct _GObject GObject;
typedef struct _GObjectClass GObjectClass;
struct _GObjectClass { uint8_t _data[136]; };
typedef struct _GObjectConstructParam GObjectConstructParam;
struct _GObjectConstructParam { uint8_t _data[16]; };
typedef void* GObjectFinalizeFunc;
extern void _GObjectFinalizeFunc_c_wrapper();
extern void _GObjectFinalizeFunc_c_wrapper_once();
typedef void* GObjectGetPropertyFunc;
extern void _GObjectGetPropertyFunc_c_wrapper();
extern void _GObjectGetPropertyFunc_c_wrapper_once();
typedef void* GObjectSetPropertyFunc;
extern void _GObjectSetPropertyFunc_c_wrapper();
extern void _GObjectSetPropertyFunc_c_wrapper_once();
typedef uint32_t GParamFlags;
typedef struct _GParamSpec GParamSpec;
typedef struct _GParamSpecBoolean GParamSpecBoolean;
typedef struct _GParamSpecBoxed GParamSpecBoxed;
typedef struct _GParamSpecChar GParamSpecChar;
typedef struct _GParamSpecClass GParamSpecClass;
struct _GParamSpecClass { uint8_t _data[80]; };
typedef struct _GParamSpecDouble GParamSpecDouble;
typedef struct _GParamSpecEnum GParamSpecEnum;
typedef struct _GParamSpecFlags GParamSpecFlags;
typedef struct _GParamSpecFloat GParamSpecFloat;
typedef struct _GParamSpecGType GParamSpecGType;
typedef struct _GParamSpecInt GParamSpecInt;
typedef struct _GParamSpecInt64 GParamSpecInt64;
typedef struct _GParamSpecLong GParamSpecLong;
typedef struct _GParamSpecObject GParamSpecObject;
typedef struct _GParamSpecOverride GParamSpecOverride;
typedef struct _GParamSpecParam GParamSpecParam;
typedef struct _GParamSpecPointer GParamSpecPointer;
typedef struct _GParamSpecPool GParamSpecPool;
struct _GParamSpecPool {};
typedef struct _GParamSpecString GParamSpecString;
typedef struct _GParamSpecTypeInfo GParamSpecTypeInfo;
struct _GParamSpecTypeInfo { uint8_t _data[56]; };
typedef struct _GParamSpecUChar GParamSpecUChar;
typedef struct _GParamSpecUInt GParamSpecUInt;
typedef struct _GParamSpecUInt64 GParamSpecUInt64;
typedef struct _GParamSpecULong GParamSpecULong;
typedef struct _GParamSpecUnichar GParamSpecUnichar;
typedef struct _GParamSpecValueArray GParamSpecValueArray;
typedef struct _GParamSpecVariant GParamSpecVariant;
typedef struct _GParameter GParameter;
struct _GParameter { uint8_t _data[32]; };
typedef void* GSignalAccumulator;
extern void _GSignalAccumulator_c_wrapper();
extern void _GSignalAccumulator_c_wrapper_once();
typedef void* GSignalEmissionHook;
extern void _GSignalEmissionHook_c_wrapper();
extern void _GSignalEmissionHook_c_wrapper_once();
typedef uint32_t GSignalFlags;
typedef struct _GSignalInvocationHint GSignalInvocationHint;
struct _GSignalInvocationHint { uint8_t _data[12]; };
typedef uint32_t GSignalMatchType;
typedef struct _GSignalQuery GSignalQuery;
struct _GSignalQuery { uint8_t _data[56]; };
typedef void* GToggleNotify;
extern void _GToggleNotify_c_wrapper();
extern void _GToggleNotify_c_wrapper_once();
typedef struct _GTypeCValue GTypeCValue;
struct _GTypeCValue { uint8_t _data[8]; };
typedef struct _GTypeClass GTypeClass;
struct _GTypeClass { uint8_t _data[8]; };
typedef void* GTypeClassCacheFunc;
extern void _GTypeClassCacheFunc_c_wrapper();
extern void _GTypeClassCacheFunc_c_wrapper_once();
typedef uint32_t GTypeDebugFlags;
typedef uint32_t GTypeFlags;
typedef uint32_t GTypeFundamentalFlags;
typedef struct _GTypeFundamentalInfo GTypeFundamentalInfo;
struct _GTypeFundamentalInfo { uint8_t _data[4]; };
typedef struct _GTypeInfo GTypeInfo;
struct _GTypeInfo { uint8_t _data[72]; };
typedef struct _GTypeInstance GTypeInstance;
struct _GTypeInstance { uint8_t _data[8]; };
typedef struct _GTypeInterface GTypeInterface;
struct _GTypeInterface { uint8_t _data[16]; };
typedef void* GTypeInterfaceCheckFunc;
extern void _GTypeInterfaceCheckFunc_c_wrapper();
extern void _GTypeInterfaceCheckFunc_c_wrapper_once();
typedef struct _GTypeModule GTypeModule;
typedef struct _GTypeModuleClass GTypeModuleClass;
struct _GTypeModuleClass { uint8_t _data[184]; };
typedef struct _GTypePlugin GTypePlugin;
typedef struct _GTypePluginClass GTypePluginClass;
struct _GTypePluginClass { uint8_t _data[48]; };
typedef void* GTypePluginCompleteInterfaceInfo;
extern void _GTypePluginCompleteInterfaceInfo_c_wrapper();
extern void _GTypePluginCompleteInterfaceInfo_c_wrapper_once();
typedef void* GTypePluginCompleteTypeInfo;
extern void _GTypePluginCompleteTypeInfo_c_wrapper();
extern void _GTypePluginCompleteTypeInfo_c_wrapper_once();
typedef void* GTypePluginUnuse;
extern void _GTypePluginUnuse_c_wrapper();
extern void _GTypePluginUnuse_c_wrapper_once();
typedef void* GTypePluginUse;
extern void _GTypePluginUse_c_wrapper();
extern void _GTypePluginUse_c_wrapper_once();
typedef struct _GTypeQuery GTypeQuery;
struct _GTypeQuery { uint8_t _data[24]; };
typedef struct _GTypeValueTable GTypeValueTable;
struct _GTypeValueTable { uint8_t _data[64]; };
typedef struct _GValue GValue;
struct _GValue { uint8_t _data[24]; };
typedef struct _GValueArray GValueArray;
struct _GValueArray { uint8_t _data[24]; };
typedef void* GValueTransform;
extern void _GValueTransform_c_wrapper();
extern void _GValueTransform_c_wrapper_once();
typedef void* GWeakNotify;
extern void _GWeakNotify_c_wrapper();
extern void _GWeakNotify_c_wrapper_once();
typedef struct _G_Value__data__union G_Value__data__union;
struct _G_Value__data__union { uint8_t _data[8]; };
typedef struct _GModule GModule;
struct _GModule {};
typedef void* GModuleCheckInit;
extern void _GModuleCheckInit_c_wrapper();
extern void _GModuleCheckInit_c_wrapper_once();
typedef uint32_t GModuleFlags;
typedef void* GModuleUnload;
extern void _GModuleUnload_c_wrapper();
extern void _GModuleUnload_c_wrapper_once();
typedef struct _GAllocator GAllocator;
struct _GAllocator {};
typedef struct _GArray GArray;
struct _GArray { uint8_t _data[16]; };
typedef uint32_t GAsciiType;
typedef struct _GAsyncQueue GAsyncQueue;
struct _GAsyncQueue {};
typedef struct _GBookmarkFile GBookmarkFile;
struct _GBookmarkFile {};
typedef uint32_t GBookmarkFileError;
typedef struct _GByteArray GByteArray;
struct _GByteArray { uint8_t _data[16]; };
typedef struct _GCache GCache;
struct _GCache {};
typedef void* GCacheDestroyFunc;
extern void _GCacheDestroyFunc_c_wrapper();
extern void _GCacheDestroyFunc_c_wrapper_once();
typedef struct _GChecksum GChecksum;
struct _GChecksum {};
typedef uint32_t GChecksumType;
typedef void* GChildWatchFunc;
extern void _GChildWatchFunc_c_wrapper();
extern void _GChildWatchFunc_c_wrapper_once();
typedef void* GCompareDataFunc;
extern void _GCompareDataFunc_c_wrapper();
extern void _GCompareDataFunc_c_wrapper_once();
typedef void* GCompareFunc;
extern void _GCompareFunc_c_wrapper();
extern void _GCompareFunc_c_wrapper_once();
typedef struct _GCompletion GCompletion;
struct _GCompletion { uint8_t _data[40]; };
typedef void* GCompletionFunc;
extern void _GCompletionFunc_c_wrapper();
extern void _GCompletionFunc_c_wrapper_once();
typedef void* GCompletionStrncmpFunc;
extern void _GCompletionStrncmpFunc_c_wrapper();
extern void _GCompletionStrncmpFunc_c_wrapper_once();
typedef struct _GCond GCond;
struct _GCond {};
typedef uint32_t GConvertError;
typedef struct _GData GData;
struct _GData {};
typedef void* GDataForeachFunc;
extern void _GDataForeachFunc_c_wrapper();
extern void _GDataForeachFunc_c_wrapper_once();
typedef struct _GDate GDate;
struct _GDate { uint8_t _data[24]; };
typedef uint32_t GDateDMY;
typedef uint32_t GDateMonth;
typedef struct _GDateTime GDateTime;
struct _GDateTime {};
typedef uint32_t GDateWeekday;
typedef struct _GDebugKey GDebugKey;
struct _GDebugKey { uint8_t _data[16]; };
typedef void* GDestroyNotify;
extern void _GDestroyNotify_c_wrapper();
extern void _GDestroyNotify_c_wrapper_once();
typedef struct _GDir GDir;
struct _GDir {};
typedef struct _GDoubleIEEE754 GDoubleIEEE754;
struct _GDoubleIEEE754 { uint8_t _data[8]; };
typedef void* GEqualFunc;
extern void _GEqualFunc_c_wrapper();
extern void _GEqualFunc_c_wrapper_once();
typedef struct _GError GError;
struct _GError { uint8_t _data[16]; };
typedef uint32_t GErrorType;
typedef uint32_t GFileError;
typedef uint32_t GFileTest;
typedef struct _GFloatIEEE754 GFloatIEEE754;
struct _GFloatIEEE754 { uint8_t _data[4]; };
typedef uint32_t GFormatSizeFlags;
typedef void* GFreeFunc;
extern void _GFreeFunc_c_wrapper();
extern void _GFreeFunc_c_wrapper_once();
typedef void* GFunc;
extern void _GFunc_c_wrapper();
extern void _GFunc_c_wrapper_once();
typedef void* GHFunc;
extern void _GHFunc_c_wrapper();
extern void _GHFunc_c_wrapper_once();
typedef void* GHRFunc;
extern void _GHRFunc_c_wrapper();
extern void _GHRFunc_c_wrapper_once();
typedef void* GHashFunc;
extern void _GHashFunc_c_wrapper();
extern void _GHashFunc_c_wrapper_once();
typedef struct _GHashTable GHashTable;
struct _GHashTable {};
typedef struct _GHashTableIter GHashTableIter;
struct _GHashTableIter { uint8_t _data[40]; };
typedef struct _GHmac GHmac;
struct _GHmac {};
typedef struct _GHook GHook;
struct _GHook { uint8_t _data[64]; };
typedef void* GHookCheckFunc;
extern void _GHookCheckFunc_c_wrapper();
extern void _GHookCheckFunc_c_wrapper_once();
typedef void* GHookCheckMarshaller;
extern void _GHookCheckMarshaller_c_wrapper();
extern void _GHookCheckMarshaller_c_wrapper_once();
typedef void* GHookCompareFunc;
extern void _GHookCompareFunc_c_wrapper();
extern void _GHookCompareFunc_c_wrapper_once();
typedef void* GHookFinalizeFunc;
extern void _GHookFinalizeFunc_c_wrapper();
extern void _GHookFinalizeFunc_c_wrapper_once();
typedef void* GHookFindFunc;
extern void _GHookFindFunc_c_wrapper();
extern void _GHookFindFunc_c_wrapper_once();
typedef uint32_t GHookFlagMask;
typedef void* GHookFunc;
extern void _GHookFunc_c_wrapper();
extern void _GHookFunc_c_wrapper_once();
typedef struct _GHookList GHookList;
struct _GHookList { uint8_t _data[56]; };
typedef void* GHookMarshaller;
extern void _GHookMarshaller_c_wrapper();
extern void _GHookMarshaller_c_wrapper_once();
typedef struct _GIConv GIConv;
struct _GIConv {};
typedef struct _GIOChannel GIOChannel;
struct _GIOChannel { uint8_t _data[136]; };
typedef uint32_t GIOChannelError;
typedef uint32_t GIOCondition;
typedef uint32_t GIOError;
typedef uint32_t GIOFlags;
typedef void* GIOFunc;
extern void _GIOFunc_c_wrapper();
extern void _GIOFunc_c_wrapper_once();
typedef struct _GIOFuncs GIOFuncs;
struct _GIOFuncs { uint8_t _data[64]; };
typedef uint32_t GIOStatus;
typedef struct _GKeyFile GKeyFile;
struct _GKeyFile {};
typedef uint32_t GKeyFileError;
typedef uint32_t GKeyFileFlags;
typedef struct _GList GList;
struct _GList { uint8_t _data[24]; };
typedef void* GLogFunc;
extern void _GLogFunc_c_wrapper();
extern void _GLogFunc_c_wrapper_once();
typedef int32_t GLogLevelFlags;
typedef struct _GMainContext GMainContext;
struct _GMainContext {};
typedef struct _GMainLoop GMainLoop;
struct _GMainLoop {};
typedef struct _GMappedFile GMappedFile;
struct _GMappedFile {};
typedef uint32_t GMarkupCollectType;
typedef uint32_t GMarkupError;
typedef struct _GMarkupParseContext GMarkupParseContext;
struct _GMarkupParseContext {};
typedef uint32_t GMarkupParseFlags;
typedef struct _GMarkupParser GMarkupParser;
struct _GMarkupParser { uint8_t _data[40]; };
typedef struct _GMatchInfo GMatchInfo;
struct _GMatchInfo {};
typedef struct _GMemChunk GMemChunk;
struct _GMemChunk {};
typedef struct _GMemVTable GMemVTable;
struct _GMemVTable { uint8_t _data[48]; };
typedef struct _GMutex GMutex;
struct _GMutex {};
typedef struct _GNode GNode;
struct _GNode { uint8_t _data[40]; };
typedef void* GNodeForeachFunc;
extern void _GNodeForeachFunc_c_wrapper();
extern void _GNodeForeachFunc_c_wrapper_once();
typedef void* GNodeTraverseFunc;
extern void _GNodeTraverseFunc_c_wrapper();
extern void _GNodeTraverseFunc_c_wrapper_once();
typedef uint32_t GNormalizeMode;
typedef struct _GOnce GOnce;
struct _GOnce { uint8_t _data[16]; };
typedef uint32_t GOnceStatus;
typedef uint32_t GOptionArg;
typedef void* GOptionArgFunc;
extern void _GOptionArgFunc_c_wrapper();
extern void _GOptionArgFunc_c_wrapper_once();
typedef struct _GOptionContext GOptionContext;
struct _GOptionContext {};
typedef struct _GOptionEntry GOptionEntry;
struct _GOptionEntry { uint8_t _data[48]; };
typedef uint32_t GOptionError;
typedef void* GOptionErrorFunc;
extern void _GOptionErrorFunc_c_wrapper();
extern void _GOptionErrorFunc_c_wrapper_once();
typedef uint32_t GOptionFlags;
typedef struct _GOptionGroup GOptionGroup;
struct _GOptionGroup {};
typedef void* GOptionParseFunc;
extern void _GOptionParseFunc_c_wrapper();
extern void _GOptionParseFunc_c_wrapper_once();
typedef struct _GPatternSpec GPatternSpec;
struct _GPatternSpec {};
typedef struct _GPollFD GPollFD;
struct _GPollFD { uint8_t _data[8]; };
typedef void* GPollFunc;
extern void _GPollFunc_c_wrapper();
extern void _GPollFunc_c_wrapper_once();
typedef void* GPrintFunc;
extern void _GPrintFunc_c_wrapper();
extern void _GPrintFunc_c_wrapper_once();
typedef struct _GPrivate GPrivate;
struct _GPrivate {};
typedef struct _GPtrArray GPtrArray;
struct _GPtrArray { uint8_t _data[16]; };
typedef struct _GQueue GQueue;
struct _GQueue { uint8_t _data[24]; };
typedef struct _GRand GRand;
struct _GRand {};
typedef struct _GRegex GRegex;
struct _GRegex {};
typedef uint32_t GRegexCompileFlags;
typedef uint32_t GRegexError;
typedef void* GRegexEvalCallback;
extern void _GRegexEvalCallback_c_wrapper();
extern void _GRegexEvalCallback_c_wrapper_once();
typedef uint32_t GRegexMatchFlags;
typedef struct _GRelation GRelation;
struct _GRelation {};
typedef struct _GSList GSList;
struct _GSList { uint8_t _data[16]; };
typedef struct _GScanner GScanner;
struct _GScanner { uint8_t _data[144]; };
typedef struct _GScannerConfig GScannerConfig;
struct _GScannerConfig { uint8_t _data[128]; };
typedef void* GScannerMsgFunc;
extern void _GScannerMsgFunc_c_wrapper();
extern void _GScannerMsgFunc_c_wrapper_once();
typedef uint32_t GSeekType;
typedef struct _GSequence GSequence;
struct _GSequence {};
typedef struct _GSequenceIter GSequenceIter;
struct _GSequenceIter {};
typedef void* GSequenceIterCompareFunc;
extern void _GSequenceIterCompareFunc_c_wrapper();
extern void _GSequenceIterCompareFunc_c_wrapper_once();
typedef uint32_t GShellError;
typedef uint32_t GSliceConfig;
typedef struct _GSource GSource;
struct _GSource { uint8_t _data[96]; };
typedef struct _GSourceCallbackFuncs GSourceCallbackFuncs;
struct _GSourceCallbackFuncs { uint8_t _data[24]; };
typedef void* GSourceDummyMarshal;
extern void _GSourceDummyMarshal_c_wrapper();
extern void _GSourceDummyMarshal_c_wrapper_once();
typedef void* GSourceFunc;
extern void _GSourceFunc_c_wrapper();
extern void _GSourceFunc_c_wrapper_once();
typedef struct _GSourceFuncs GSourceFuncs;
struct _GSourceFuncs { uint8_t _data[48]; };
typedef struct _GSourcePrivate GSourcePrivate;
struct _GSourcePrivate {};
typedef void* GSpawnChildSetupFunc;
extern void _GSpawnChildSetupFunc_c_wrapper();
extern void _GSpawnChildSetupFunc_c_wrapper_once();
typedef uint32_t GSpawnError;
typedef uint32_t GSpawnFlags;
typedef struct _GStatBuf GStatBuf;
struct _GStatBuf {};
typedef struct _GStaticMutex GStaticMutex;
struct _GStaticMutex { uint8_t _data[8]; };
typedef struct _GStaticPrivate GStaticPrivate;
struct _GStaticPrivate { uint8_t _data[4]; };
typedef struct _GStaticRWLock GStaticRWLock;
struct _GStaticRWLock { uint8_t _data[40]; };
typedef struct _GStaticRecMutex GStaticRecMutex;
struct _GStaticRecMutex { uint8_t _data[24]; };
typedef struct _GString GString;
struct _GString { uint8_t _data[24]; };
typedef struct _GStringChunk GStringChunk;
struct _GStringChunk {};
typedef struct _GSystemThread GSystemThread;
struct _GSystemThread { uint8_t _data[8]; };
typedef struct _GTestCase GTestCase;
struct _GTestCase {};
typedef struct _GTestConfig GTestConfig;
struct _GTestConfig { uint8_t _data[20]; };
typedef void* GTestDataFunc;
extern void _GTestDataFunc_c_wrapper();
extern void _GTestDataFunc_c_wrapper_once();
typedef void* GTestFixtureFunc;
extern void _GTestFixtureFunc_c_wrapper();
extern void _GTestFixtureFunc_c_wrapper_once();
typedef void* GTestFunc;
extern void _GTestFunc_c_wrapper();
extern void _GTestFunc_c_wrapper_once();
typedef struct _GTestLogBuffer GTestLogBuffer;
struct _GTestLogBuffer { uint8_t _data[16]; };
typedef void* GTestLogFatalFunc;
extern void _GTestLogFatalFunc_c_wrapper();
extern void _GTestLogFatalFunc_c_wrapper_once();
typedef struct _GTestLogMsg GTestLogMsg;
struct _GTestLogMsg { uint8_t _data[32]; };
typedef uint32_t GTestLogType;
typedef struct _GTestSuite GTestSuite;
struct _GTestSuite {};
typedef uint32_t GTestTrapFlags;
typedef struct _GThread GThread;
struct _GThread { uint8_t _data[24]; };
typedef uint32_t GThreadError;
typedef struct _GThreadFunctions GThreadFunctions;
struct _GThreadFunctions { uint8_t _data[168]; };
typedef struct _GThreadPool GThreadPool;
struct _GThreadPool { uint8_t _data[24]; };
typedef uint32_t GThreadPriority;
typedef uint32_t GTimeType;
typedef struct _GTimeVal GTimeVal;
struct _GTimeVal { uint8_t _data[16]; };
typedef struct _GTimeZone GTimeZone;
struct _GTimeZone {};
typedef struct _GTimer GTimer;
struct _GTimer {};
typedef uint32_t GTokenType;
typedef struct _GTokenValue GTokenValue;
struct _GTokenValue { uint8_t _data[8]; };
typedef void* GTranslateFunc;
extern void _GTranslateFunc_c_wrapper();
extern void _GTranslateFunc_c_wrapper_once();
typedef struct _GTrashStack GTrashStack;
struct _GTrashStack { uint8_t _data[8]; };
typedef uint32_t GTraverseFlags;
typedef void* GTraverseFunc;
extern void _GTraverseFunc_c_wrapper();
extern void _GTraverseFunc_c_wrapper_once();
typedef uint32_t GTraverseType;
typedef struct _GTree GTree;
struct _GTree {};
typedef struct _GTuples GTuples;
struct _GTuples { uint8_t _data[4]; };
typedef uint32_t GUnicodeBreakType;
typedef int32_t GUnicodeScript;
typedef uint32_t GUnicodeType;
typedef uint32_t GUserDirectory;
typedef struct _GVariant GVariant;
struct _GVariant {};
typedef struct _GVariantBuilder GVariantBuilder;
struct _GVariantBuilder { uint8_t _data[128]; };
typedef uint32_t GVariantClass;
typedef uint32_t GVariantParseError;
typedef struct _GVariantType GVariantType;
struct _GVariantType {};
typedef void* GVoidFunc;
extern void _GVoidFunc_c_wrapper();
extern void _GVoidFunc_c_wrapper_once();
typedef struct _G_StaticAssert_347 G_StaticAssert_347;
struct _G_StaticAssert_347 { uint8_t _data[1]; };
typedef struct _AtkAction AtkAction;
typedef struct _AtkActionIface AtkActionIface;
struct _AtkActionIface { uint8_t _data[80]; };
typedef struct _AtkAttribute AtkAttribute;
struct _AtkAttribute { uint8_t _data[16]; };
typedef struct _AtkComponent AtkComponent;
typedef struct _AtkComponentIface AtkComponentIface;
struct _AtkComponentIface { uint8_t _data[136]; };
typedef uint32_t AtkCoordType;
typedef struct _AtkDocument AtkDocument;
typedef struct _AtkDocumentIface AtkDocumentIface;
struct _AtkDocumentIface { uint8_t _data[96]; };
typedef struct _AtkEditableText AtkEditableText;
typedef struct _AtkEditableTextIface AtkEditableTextIface;
struct _AtkEditableTextIface { uint8_t _data[88]; };
typedef void* AtkEventListener;
extern void _AtkEventListener_c_wrapper();
extern void _AtkEventListener_c_wrapper_once();
typedef void* AtkEventListenerInit;
extern void _AtkEventListenerInit_c_wrapper();
extern void _AtkEventListenerInit_c_wrapper_once();
typedef void* AtkFocusHandler;
extern void _AtkFocusHandler_c_wrapper();
extern void _AtkFocusHandler_c_wrapper_once();
typedef void* AtkFunction;
extern void _AtkFunction_c_wrapper();
extern void _AtkFunction_c_wrapper_once();
typedef struct _AtkGObjectAccessible AtkGObjectAccessible;
typedef struct _AtkGObjectAccessibleClass AtkGObjectAccessibleClass;
struct _AtkGObjectAccessibleClass { uint8_t _data[368]; };
typedef struct _AtkHyperlink AtkHyperlink;
typedef struct _AtkHyperlinkClass AtkHyperlinkClass;
struct _AtkHyperlinkClass { uint8_t _data[216]; };
typedef struct _AtkHyperlinkImpl AtkHyperlinkImpl;
typedef struct _AtkHyperlinkImplIface AtkHyperlinkImplIface;
struct _AtkHyperlinkImplIface { uint8_t _data[32]; };
typedef uint32_t AtkHyperlinkStateFlags;
typedef struct _AtkHypertext AtkHypertext;
typedef struct _AtkHypertextIface AtkHypertextIface;
struct _AtkHypertextIface { uint8_t _data[72]; };
typedef struct _AtkImage AtkImage;
typedef struct _AtkImageIface AtkImageIface;
struct _AtkImageIface { uint8_t _data[64]; };
typedef struct _AtkImplementor AtkImplementor;
struct _AtkImplementor {};
typedef struct _AtkImplementorIface AtkImplementorIface;
typedef struct _AtkKeyEventStruct AtkKeyEventStruct;
struct _AtkKeyEventStruct { uint8_t _data[32]; };
typedef uint32_t AtkKeyEventType;
typedef void* AtkKeySnoopFunc;
extern void _AtkKeySnoopFunc_c_wrapper();
extern void _AtkKeySnoopFunc_c_wrapper_once();
typedef uint32_t AtkLayer;
typedef struct _AtkMisc AtkMisc;
typedef struct _AtkMiscClass AtkMiscClass;
struct _AtkMiscClass { uint8_t _data[408]; };
typedef struct _AtkNoOpObject AtkNoOpObject;
typedef struct _AtkNoOpObjectClass AtkNoOpObjectClass;
struct _AtkNoOpObjectClass { uint8_t _data[352]; };
typedef struct _AtkNoOpObjectFactory AtkNoOpObjectFactory;
typedef struct _AtkNoOpObjectFactoryClass AtkNoOpObjectFactoryClass;
struct _AtkNoOpObjectFactoryClass { uint8_t _data[176]; };
typedef struct _AtkObject AtkObject;
typedef struct _AtkObjectClass AtkObjectClass;
struct _AtkObjectClass { uint8_t _data[352]; };
typedef struct _AtkObjectFactory AtkObjectFactory;
typedef struct _AtkObjectFactoryClass AtkObjectFactoryClass;
struct _AtkObjectFactoryClass { uint8_t _data[176]; };
typedef struct _AtkPlug AtkPlug;
typedef struct _AtkPlugClass AtkPlugClass;
struct _AtkPlugClass { uint8_t _data[360]; };
typedef struct _AtkRectangle AtkRectangle;
struct _AtkRectangle { uint8_t _data[16]; };
typedef struct _AtkRegistry AtkRegistry;
typedef struct _AtkRelation AtkRelation;
typedef struct _AtkRelationClass AtkRelationClass;
struct _AtkRelationClass { uint8_t _data[136]; };
typedef struct _AtkRelationSet AtkRelationSet;
typedef struct _AtkRelationSetClass AtkRelationSetClass;
struct _AtkRelationSetClass { uint8_t _data[152]; };
typedef uint32_t AtkRelationType;
typedef uint32_t AtkRole;
typedef struct _AtkSelection AtkSelection;
typedef struct _AtkSelectionIface AtkSelectionIface;
struct _AtkSelectionIface { uint8_t _data[96]; };
typedef struct _AtkSocket AtkSocket;
typedef struct _AtkSocketClass AtkSocketClass;
struct _AtkSocketClass { uint8_t _data[360]; };
typedef struct _AtkStateSet AtkStateSet;
typedef struct _AtkStateSetClass AtkStateSetClass;
struct _AtkStateSetClass { uint8_t _data[136]; };
typedef uint32_t AtkStateType;
typedef struct _AtkStreamableContent AtkStreamableContent;
typedef struct _AtkStreamableContentIface AtkStreamableContentIface;
struct _AtkStreamableContentIface { uint8_t _data[72]; };
typedef struct _AtkTable AtkTable;
typedef struct _AtkTableIface AtkTableIface;
struct _AtkTableIface { uint8_t _data[336]; };
typedef struct _AtkText AtkText;
typedef uint32_t AtkTextAttribute;
typedef uint32_t AtkTextBoundary;
typedef uint32_t AtkTextClipType;
typedef struct _AtkTextIface AtkTextIface;
struct _AtkTextIface { uint8_t _data[208]; };
typedef struct _AtkTextRange AtkTextRange;
struct _AtkTextRange { uint8_t _data[32]; };
typedef struct _AtkTextRectangle AtkTextRectangle;
struct _AtkTextRectangle { uint8_t _data[16]; };
typedef struct _AtkUtil AtkUtil;
typedef struct _AtkUtilClass AtkUtilClass;
struct _AtkUtilClass { uint8_t _data[192]; };
typedef struct _AtkValue AtkValue;
typedef struct _AtkValueIface AtkValueIface;
struct _AtkValueIface { uint8_t _data[64]; };
typedef struct _AtkWindow AtkWindow;
typedef struct _AtkWindowIface AtkWindowIface;
struct _AtkWindowIface { uint8_t _data[144]; };
typedef struct _Atk_PropertyValues Atk_PropertyValues;
struct _Atk_PropertyValues { uint8_t _data[56]; };
typedef struct _Atk_Registry Atk_Registry;
struct _Atk_Registry { uint8_t _data[40]; };
typedef struct _Atk_RegistryClass Atk_RegistryClass;
struct _Atk_RegistryClass { uint8_t _data[136]; };
typedef struct _GtkAboutDialog GtkAboutDialog;
typedef struct _GtkAboutDialogClass GtkAboutDialogClass;
typedef struct _GtkAboutDialogPrivate GtkAboutDialogPrivate;
typedef uint32_t GtkAccelFlags;
typedef struct _GtkAccelGroup GtkAccelGroup;
typedef void* GtkAccelGroupActivate;
extern void _GtkAccelGroupActivate_c_wrapper();
extern void _GtkAccelGroupActivate_c_wrapper_once();
typedef struct _GtkAccelGroupClass GtkAccelGroupClass;
typedef struct _GtkAccelGroupEntry GtkAccelGroupEntry;
typedef void* GtkAccelGroupFindFunc;
extern void _GtkAccelGroupFindFunc_c_wrapper();
extern void _GtkAccelGroupFindFunc_c_wrapper_once();
typedef struct _GtkAccelGroupPrivate GtkAccelGroupPrivate;
typedef struct _GtkAccelKey GtkAccelKey;
typedef struct _GtkAccelLabel GtkAccelLabel;
typedef struct _GtkAccelLabelClass GtkAccelLabelClass;
typedef struct _GtkAccelLabelPrivate GtkAccelLabelPrivate;
typedef struct _GtkAccelMap GtkAccelMap;
typedef struct _GtkAccelMapClass GtkAccelMapClass;
typedef void* GtkAccelMapForeach;
extern void _GtkAccelMapForeach_c_wrapper();
extern void _GtkAccelMapForeach_c_wrapper_once();
typedef struct _GtkAccessible GtkAccessible;
typedef struct _GtkAccessibleClass GtkAccessibleClass;
typedef struct _GtkAccessiblePrivate GtkAccessiblePrivate;
typedef struct _GtkAction GtkAction;
typedef struct _GtkActionClass GtkActionClass;
typedef struct _GtkActionEntry GtkActionEntry;
typedef struct _GtkActionGroup GtkActionGroup;
typedef struct _GtkActionGroupClass GtkActionGroupClass;
typedef struct _GtkActionGroupPrivate GtkActionGroupPrivate;
typedef struct _GtkActionPrivate GtkActionPrivate;
typedef struct _GtkActivatable GtkActivatable;
typedef struct _GtkActivatableIface GtkActivatableIface;
typedef struct _GtkAdjustment GtkAdjustment;
typedef struct _GtkAdjustmentClass GtkAdjustmentClass;
typedef struct _GtkAdjustmentPrivate GtkAdjustmentPrivate;
typedef uint32_t GtkAlign;
typedef struct _GtkAlignment GtkAlignment;
typedef struct _GtkAlignmentClass GtkAlignmentClass;
typedef struct _GtkAlignmentPrivate GtkAlignmentPrivate;
typedef struct _GtkAppChooser GtkAppChooser;
typedef struct _GtkAppChooserButton GtkAppChooserButton;
typedef struct _GtkAppChooserButtonClass GtkAppChooserButtonClass;
typedef struct _GtkAppChooserButtonPrivate GtkAppChooserButtonPrivate;
typedef struct _GtkAppChooserDialog GtkAppChooserDialog;
typedef struct _GtkAppChooserDialogClass GtkAppChooserDialogClass;
typedef struct _GtkAppChooserDialogPrivate GtkAppChooserDialogPrivate;
typedef struct _GtkAppChooserWidget GtkAppChooserWidget;
typedef struct _GtkAppChooserWidgetClass GtkAppChooserWidgetClass;
typedef struct _GtkAppChooserWidgetPrivate GtkAppChooserWidgetPrivate;
typedef struct _GtkApplication GtkApplication;
typedef struct _GtkApplicationClass GtkApplicationClass;
typedef struct _GtkApplicationPrivate GtkApplicationPrivate;
typedef struct _GtkArrow GtkArrow;
typedef struct _GtkArrowClass GtkArrowClass;
typedef uint32_t GtkArrowPlacement;
typedef struct _GtkArrowPrivate GtkArrowPrivate;
typedef uint32_t GtkArrowType;
typedef struct _GtkAspectFrame GtkAspectFrame;
typedef struct _GtkAspectFrameClass GtkAspectFrameClass;
typedef struct _GtkAspectFramePrivate GtkAspectFramePrivate;
typedef struct _GtkAssistant GtkAssistant;
typedef struct _GtkAssistantClass GtkAssistantClass;
typedef void* GtkAssistantPageFunc;
extern void _GtkAssistantPageFunc_c_wrapper();
extern void _GtkAssistantPageFunc_c_wrapper_once();
typedef uint32_t GtkAssistantPageType;
typedef struct _GtkAssistantPrivate GtkAssistantPrivate;
typedef uint32_t GtkAttachOptions;
typedef struct _GtkBin GtkBin;
typedef struct _GtkBinClass GtkBinClass;
typedef struct _GtkBinPrivate GtkBinPrivate;
typedef struct _GtkBindingArg GtkBindingArg;
typedef struct _GtkBindingEntry GtkBindingEntry;
typedef struct _GtkBindingSet GtkBindingSet;
typedef struct _GtkBindingSignal GtkBindingSignal;
typedef struct _GtkBorder GtkBorder;
typedef uint32_t GtkBorderStyle;
typedef struct _GtkBox GtkBox;
typedef struct _GtkBoxClass GtkBoxClass;
typedef struct _GtkBoxPrivate GtkBoxPrivate;
typedef struct _GtkBuildable GtkBuildable;
typedef struct _GtkBuildableIface GtkBuildableIface;
typedef struct _GtkBuilder GtkBuilder;
typedef struct _GtkBuilderClass GtkBuilderClass;
typedef void* GtkBuilderConnectFunc;
extern void _GtkBuilderConnectFunc_c_wrapper();
extern void _GtkBuilderConnectFunc_c_wrapper_once();
typedef uint32_t GtkBuilderError;
typedef struct _GtkBuilderPrivate GtkBuilderPrivate;
typedef struct _GtkButton GtkButton;
typedef struct _GtkButtonBox GtkButtonBox;
typedef struct _GtkButtonBoxClass GtkButtonBoxClass;
typedef struct _GtkButtonBoxPrivate GtkButtonBoxPrivate;
typedef uint32_t GtkButtonBoxStyle;
typedef struct _GtkButtonClass GtkButtonClass;
typedef struct _GtkButtonPrivate GtkButtonPrivate;
typedef uint32_t GtkButtonsType;
typedef struct _GtkCalendar GtkCalendar;
typedef struct _GtkCalendarClass GtkCalendarClass;
typedef void* GtkCalendarDetailFunc;
extern void _GtkCalendarDetailFunc_c_wrapper();
extern void _GtkCalendarDetailFunc_c_wrapper_once();
typedef uint32_t GtkCalendarDisplayOptions;
typedef struct _GtkCalendarPrivate GtkCalendarPrivate;
typedef void* GtkCallback;
extern void _GtkCallback_c_wrapper();
extern void _GtkCallback_c_wrapper_once();
typedef void* GtkCellAllocCallback;
extern void _GtkCellAllocCallback_c_wrapper();
extern void _GtkCellAllocCallback_c_wrapper_once();
typedef struct _GtkCellArea GtkCellArea;
typedef struct _GtkCellAreaBox GtkCellAreaBox;
typedef struct _GtkCellAreaBoxClass GtkCellAreaBoxClass;
typedef struct _GtkCellAreaBoxPrivate GtkCellAreaBoxPrivate;
typedef struct _GtkCellAreaClass GtkCellAreaClass;
typedef struct _GtkCellAreaContext GtkCellAreaContext;
typedef struct _GtkCellAreaContextClass GtkCellAreaContextClass;
typedef struct _GtkCellAreaContextPrivate GtkCellAreaContextPrivate;
typedef struct _GtkCellAreaPrivate GtkCellAreaPrivate;
typedef void* GtkCellCallback;
extern void _GtkCellCallback_c_wrapper();
extern void _GtkCellCallback_c_wrapper_once();
typedef struct _GtkCellEditable GtkCellEditable;
typedef struct _GtkCellEditableIface GtkCellEditableIface;
typedef struct _GtkCellLayout GtkCellLayout;
typedef void* GtkCellLayoutDataFunc;
extern void _GtkCellLayoutDataFunc_c_wrapper();
extern void _GtkCellLayoutDataFunc_c_wrapper_once();
typedef struct _GtkCellLayoutIface GtkCellLayoutIface;
typedef struct _GtkCellRenderer GtkCellRenderer;
typedef struct _GtkCellRendererAccel GtkCellRendererAccel;
typedef struct _GtkCellRendererAccelClass GtkCellRendererAccelClass;
typedef uint32_t GtkCellRendererAccelMode;
typedef struct _GtkCellRendererAccelPrivate GtkCellRendererAccelPrivate;
typedef struct _GtkCellRendererClass GtkCellRendererClass;
typedef struct _GtkCellRendererCombo GtkCellRendererCombo;
typedef struct _GtkCellRendererComboClass GtkCellRendererComboClass;
typedef struct _GtkCellRendererComboPrivate GtkCellRendererComboPrivate;
typedef uint32_t GtkCellRendererMode;
typedef struct _GtkCellRendererPixbuf GtkCellRendererPixbuf;
typedef struct _GtkCellRendererPixbufClass GtkCellRendererPixbufClass;
typedef struct _GtkCellRendererPixbufPrivate GtkCellRendererPixbufPrivate;
typedef struct _GtkCellRendererPrivate GtkCellRendererPrivate;
typedef struct _GtkCellRendererProgress GtkCellRendererProgress;
typedef struct _GtkCellRendererProgressClass GtkCellRendererProgressClass;
typedef struct _GtkCellRendererProgressPrivate GtkCellRendererProgressPrivate;
typedef struct _GtkCellRendererSpin GtkCellRendererSpin;
typedef struct _GtkCellRendererSpinClass GtkCellRendererSpinClass;
typedef struct _GtkCellRendererSpinPrivate GtkCellRendererSpinPrivate;
typedef struct _GtkCellRendererSpinner GtkCellRendererSpinner;
typedef struct _GtkCellRendererSpinnerClass GtkCellRendererSpinnerClass;
typedef struct _GtkCellRendererSpinnerPrivate GtkCellRendererSpinnerPrivate;
typedef uint32_t GtkCellRendererState;
typedef struct _GtkCellRendererText GtkCellRendererText;
typedef struct _GtkCellRendererTextClass GtkCellRendererTextClass;
typedef struct _GtkCellRendererTextPrivate GtkCellRendererTextPrivate;
typedef struct _GtkCellRendererToggle GtkCellRendererToggle;
typedef struct _GtkCellRendererToggleClass GtkCellRendererToggleClass;
typedef struct _GtkCellRendererTogglePrivate GtkCellRendererTogglePrivate;
typedef struct _GtkCellView GtkCellView;
typedef struct _GtkCellViewClass GtkCellViewClass;
typedef struct _GtkCellViewPrivate GtkCellViewPrivate;
typedef struct _GtkCheckButton GtkCheckButton;
typedef struct _GtkCheckButtonClass GtkCheckButtonClass;
typedef struct _GtkCheckMenuItem GtkCheckMenuItem;
typedef struct _GtkCheckMenuItemClass GtkCheckMenuItemClass;
typedef struct _GtkCheckMenuItemPrivate GtkCheckMenuItemPrivate;
typedef struct _GtkClipboard GtkClipboard;
typedef void* GtkClipboardClearFunc;
extern void _GtkClipboardClearFunc_c_wrapper();
extern void _GtkClipboardClearFunc_c_wrapper_once();
typedef void* GtkClipboardGetFunc;
extern void _GtkClipboardGetFunc_c_wrapper();
extern void _GtkClipboardGetFunc_c_wrapper_once();
typedef void* GtkClipboardImageReceivedFunc;
extern void _GtkClipboardImageReceivedFunc_c_wrapper();
extern void _GtkClipboardImageReceivedFunc_c_wrapper_once();
typedef void* GtkClipboardReceivedFunc;
extern void _GtkClipboardReceivedFunc_c_wrapper();
extern void _GtkClipboardReceivedFunc_c_wrapper_once();
typedef void* GtkClipboardRichTextReceivedFunc;
extern void _GtkClipboardRichTextReceivedFunc_c_wrapper();
extern void _GtkClipboardRichTextReceivedFunc_c_wrapper_once();
typedef void* GtkClipboardTargetsReceivedFunc;
extern void _GtkClipboardTargetsReceivedFunc_c_wrapper();
extern void _GtkClipboardTargetsReceivedFunc_c_wrapper_once();
typedef void* GtkClipboardTextReceivedFunc;
extern void _GtkClipboardTextReceivedFunc_c_wrapper();
extern void _GtkClipboardTextReceivedFunc_c_wrapper_once();
typedef void* GtkClipboardURIReceivedFunc;
extern void _GtkClipboardURIReceivedFunc_c_wrapper();
extern void _GtkClipboardURIReceivedFunc_c_wrapper_once();
typedef struct _GtkColorButton GtkColorButton;
typedef struct _GtkColorButtonClass GtkColorButtonClass;
typedef struct _GtkColorButtonPrivate GtkColorButtonPrivate;
typedef struct _GtkColorSelection GtkColorSelection;
typedef void* GtkColorSelectionChangePaletteFunc;
extern void _GtkColorSelectionChangePaletteFunc_c_wrapper();
extern void _GtkColorSelectionChangePaletteFunc_c_wrapper_once();
typedef void* GtkColorSelectionChangePaletteWithScreenFunc;
extern void _GtkColorSelectionChangePaletteWithScreenFunc_c_wrapper();
extern void _GtkColorSelectionChangePaletteWithScreenFunc_c_wrapper_once();
typedef struct _GtkColorSelectionClass GtkColorSelectionClass;
typedef struct _GtkColorSelectionDialog GtkColorSelectionDialog;
typedef struct _GtkColorSelectionDialogClass GtkColorSelectionDialogClass;
typedef struct _GtkColorSelectionDialogPrivate GtkColorSelectionDialogPrivate;
typedef struct _GtkColorSelectionPrivate GtkColorSelectionPrivate;
typedef struct _GtkComboBox GtkComboBox;
typedef struct _GtkComboBoxClass GtkComboBoxClass;
typedef struct _GtkComboBoxPrivate GtkComboBoxPrivate;
typedef struct _GtkComboBoxText GtkComboBoxText;
typedef struct _GtkComboBoxTextClass GtkComboBoxTextClass;
typedef struct _GtkComboBoxTextPrivate GtkComboBoxTextPrivate;
typedef struct _GtkContainer GtkContainer;
typedef struct _GtkContainerClass GtkContainerClass;
typedef struct _GtkContainerPrivate GtkContainerPrivate;
typedef uint32_t GtkCornerType;
typedef struct _GtkCssProvider GtkCssProvider;
typedef struct _GtkCssProviderClass GtkCssProviderClass;
typedef uint32_t GtkCssProviderError;
typedef struct _GtkCssProviderPrivate GtkCssProviderPrivate;
typedef struct _GtkCssSection GtkCssSection;
typedef uint32_t GtkCssSectionType;
typedef uint32_t GtkDebugFlag;
typedef uint32_t GtkDeleteType;
typedef uint32_t GtkDestDefaults;
typedef struct _GtkDialog GtkDialog;
typedef struct _GtkDialogClass GtkDialogClass;
typedef uint32_t GtkDialogFlags;
typedef struct _GtkDialogPrivate GtkDialogPrivate;
typedef uint32_t GtkDirectionType;
typedef uint32_t GtkDragResult;
typedef struct _GtkDrawingArea GtkDrawingArea;
typedef struct _GtkDrawingAreaClass GtkDrawingAreaClass;
typedef struct _GtkEditable GtkEditable;
typedef struct _GtkEditableInterface GtkEditableInterface;
typedef struct _GtkEntry GtkEntry;
typedef struct _GtkEntryBuffer GtkEntryBuffer;
typedef struct _GtkEntryBufferClass GtkEntryBufferClass;
typedef struct _GtkEntryBufferPrivate GtkEntryBufferPrivate;
typedef struct _GtkEntryClass GtkEntryClass;
typedef struct _GtkEntryCompletion GtkEntryCompletion;
typedef struct _GtkEntryCompletionClass GtkEntryCompletionClass;
typedef void* GtkEntryCompletionMatchFunc;
extern void _GtkEntryCompletionMatchFunc_c_wrapper();
extern void _GtkEntryCompletionMatchFunc_c_wrapper_once();
typedef struct _GtkEntryCompletionPrivate GtkEntryCompletionPrivate;
typedef uint32_t GtkEntryIconPosition;
typedef struct _GtkEntryPrivate GtkEntryPrivate;
typedef struct _GtkEventBox GtkEventBox;
typedef struct _GtkEventBoxClass GtkEventBoxClass;
typedef struct _GtkEventBoxPrivate GtkEventBoxPrivate;
typedef struct _GtkExpander GtkExpander;
typedef struct _GtkExpanderClass GtkExpanderClass;
typedef struct _GtkExpanderPrivate GtkExpanderPrivate;
typedef uint32_t GtkExpanderStyle;
typedef struct _GtkFileChooser GtkFileChooser;
typedef uint32_t GtkFileChooserAction;
typedef struct _GtkFileChooserButton GtkFileChooserButton;
typedef struct _GtkFileChooserButtonClass GtkFileChooserButtonClass;
typedef struct _GtkFileChooserButtonPrivate GtkFileChooserButtonPrivate;
typedef uint32_t GtkFileChooserConfirmation;
typedef struct _GtkFileChooserDialog GtkFileChooserDialog;
typedef struct _GtkFileChooserDialogClass GtkFileChooserDialogClass;
typedef struct _GtkFileChooserDialogPrivate GtkFileChooserDialogPrivate;
typedef uint32_t GtkFileChooserError;
typedef struct _GtkFileChooserWidget GtkFileChooserWidget;
typedef struct _GtkFileChooserWidgetClass GtkFileChooserWidgetClass;
typedef struct _GtkFileChooserWidgetPrivate GtkFileChooserWidgetPrivate;
typedef struct _GtkFileFilter GtkFileFilter;
typedef uint32_t GtkFileFilterFlags;
typedef void* GtkFileFilterFunc;
extern void _GtkFileFilterFunc_c_wrapper();
extern void _GtkFileFilterFunc_c_wrapper_once();
typedef struct _GtkFileFilterInfo GtkFileFilterInfo;
typedef struct _GtkFixed GtkFixed;
typedef struct _GtkFixedChild GtkFixedChild;
typedef struct _GtkFixedClass GtkFixedClass;
typedef struct _GtkFixedPrivate GtkFixedPrivate;
typedef struct _GtkFontButton GtkFontButton;
typedef struct _GtkFontButtonClass GtkFontButtonClass;
typedef struct _GtkFontButtonPrivate GtkFontButtonPrivate;
typedef struct _GtkFontChooser GtkFontChooser;
typedef struct _GtkFontChooserDialog GtkFontChooserDialog;
typedef struct _GtkFontChooserDialogClass GtkFontChooserDialogClass;
typedef struct _GtkFontChooserDialogPrivate GtkFontChooserDialogPrivate;
typedef struct _GtkFontChooserIface GtkFontChooserIface;
typedef struct _GtkFontChooserWidget GtkFontChooserWidget;
typedef struct _GtkFontChooserWidgetClass GtkFontChooserWidgetClass;
typedef struct _GtkFontChooserWidgetPrivate GtkFontChooserWidgetPrivate;
typedef void* GtkFontFilterFunc;
extern void _GtkFontFilterFunc_c_wrapper();
extern void _GtkFontFilterFunc_c_wrapper_once();
typedef struct _GtkFontSelection GtkFontSelection;
typedef struct _GtkFontSelectionClass GtkFontSelectionClass;
typedef struct _GtkFontSelectionDialog GtkFontSelectionDialog;
typedef struct _GtkFontSelectionDialogClass GtkFontSelectionDialogClass;
typedef struct _GtkFontSelectionDialogPrivate GtkFontSelectionDialogPrivate;
typedef struct _GtkFontSelectionPrivate GtkFontSelectionPrivate;
typedef struct _GtkFrame GtkFrame;
typedef struct _GtkFrameClass GtkFrameClass;
typedef struct _GtkFramePrivate GtkFramePrivate;
typedef struct _GtkGradient GtkGradient;
typedef struct _GtkGrid GtkGrid;
typedef struct _GtkGridClass GtkGridClass;
typedef struct _GtkGridPrivate GtkGridPrivate;
typedef struct _GtkHBox GtkHBox;
typedef struct _GtkHBoxClass GtkHBoxClass;
typedef struct _GtkHButtonBox GtkHButtonBox;
typedef struct _GtkHButtonBoxClass GtkHButtonBoxClass;
typedef struct _GtkHPaned GtkHPaned;
typedef struct _GtkHPanedClass GtkHPanedClass;
typedef struct _GtkHSV GtkHSV;
typedef struct _GtkHSVClass GtkHSVClass;
typedef struct _GtkHSVPrivate GtkHSVPrivate;
typedef struct _GtkHScale GtkHScale;
typedef struct _GtkHScaleClass GtkHScaleClass;
typedef struct _GtkHScrollbar GtkHScrollbar;
typedef struct _GtkHScrollbarClass GtkHScrollbarClass;
typedef struct _GtkHSeparator GtkHSeparator;
typedef struct _GtkHSeparatorClass GtkHSeparatorClass;
typedef struct _GtkHandleBox GtkHandleBox;
typedef struct _GtkHandleBoxClass GtkHandleBoxClass;
typedef struct _GtkHandleBoxPrivate GtkHandleBoxPrivate;
typedef struct _GtkIMContext GtkIMContext;
typedef struct _GtkIMContextClass GtkIMContextClass;
typedef struct _GtkIMContextInfo GtkIMContextInfo;
typedef struct _GtkIMContextSimple GtkIMContextSimple;
typedef struct _GtkIMContextSimpleClass GtkIMContextSimpleClass;
typedef struct _GtkIMContextSimplePrivate GtkIMContextSimplePrivate;
typedef struct _GtkIMMulticontext GtkIMMulticontext;
typedef struct _GtkIMMulticontextClass GtkIMMulticontextClass;
typedef struct _GtkIMMulticontextPrivate GtkIMMulticontextPrivate;
typedef uint32_t GtkIMPreeditStyle;
typedef uint32_t GtkIMStatusStyle;
typedef struct _GtkIconFactory GtkIconFactory;
typedef struct _GtkIconFactoryClass GtkIconFactoryClass;
typedef struct _GtkIconFactoryPrivate GtkIconFactoryPrivate;
typedef struct _GtkIconInfo GtkIconInfo;
typedef uint32_t GtkIconLookupFlags;
typedef struct _GtkIconSet GtkIconSet;
typedef uint32_t GtkIconSize;
typedef struct _GtkIconSource GtkIconSource;
typedef struct _GtkIconTheme GtkIconTheme;
typedef struct _GtkIconThemeClass GtkIconThemeClass;
typedef uint32_t GtkIconThemeError;
typedef struct _GtkIconThemePrivate GtkIconThemePrivate;
typedef struct _GtkIconView GtkIconView;
typedef struct _GtkIconViewClass GtkIconViewClass;
typedef uint32_t GtkIconViewDropPosition;
typedef void* GtkIconViewForeachFunc;
extern void _GtkIconViewForeachFunc_c_wrapper();
extern void _GtkIconViewForeachFunc_c_wrapper_once();
typedef struct _GtkIconViewPrivate GtkIconViewPrivate;
typedef struct _GtkImage GtkImage;
typedef struct _GtkImageClass GtkImageClass;
typedef struct _GtkImageMenuItem GtkImageMenuItem;
typedef struct _GtkImageMenuItemClass GtkImageMenuItemClass;
typedef struct _GtkImageMenuItemPrivate GtkImageMenuItemPrivate;
typedef struct _GtkImagePrivate GtkImagePrivate;
typedef uint32_t GtkImageType;
typedef struct _GtkInfoBar GtkInfoBar;
typedef struct _GtkInfoBarClass GtkInfoBarClass;
typedef struct _GtkInfoBarPrivate GtkInfoBarPrivate;
typedef struct _GtkInvisible GtkInvisible;
typedef struct _GtkInvisibleClass GtkInvisibleClass;
typedef struct _GtkInvisiblePrivate GtkInvisiblePrivate;
typedef uint32_t GtkJunctionSides;
typedef uint32_t GtkJustification;
typedef void* GtkKeySnoopFunc;
extern void _GtkKeySnoopFunc_c_wrapper();
extern void _GtkKeySnoopFunc_c_wrapper_once();
typedef struct _GtkLabel GtkLabel;
typedef struct _GtkLabelClass GtkLabelClass;
typedef struct _GtkLabelPrivate GtkLabelPrivate;
typedef struct _GtkLabelSelectionInfo GtkLabelSelectionInfo;
typedef struct _GtkLayout GtkLayout;
typedef struct _GtkLayoutClass GtkLayoutClass;
typedef struct _GtkLayoutPrivate GtkLayoutPrivate;
typedef uint32_t GtkLicense;
typedef struct _GtkLinkButton GtkLinkButton;
typedef struct _GtkLinkButtonClass GtkLinkButtonClass;
typedef struct _GtkLinkButtonPrivate GtkLinkButtonPrivate;
typedef struct _GtkListStore GtkListStore;
typedef struct _GtkListStoreClass GtkListStoreClass;
typedef struct _GtkListStorePrivate GtkListStorePrivate;
typedef struct _GtkLockButton GtkLockButton;
typedef struct _GtkLockButtonClass GtkLockButtonClass;
typedef struct _GtkLockButtonPrivate GtkLockButtonPrivate;
typedef struct _GtkMenu GtkMenu;
typedef struct _GtkMenuBar GtkMenuBar;
typedef struct _GtkMenuBarClass GtkMenuBarClass;
typedef struct _GtkMenuBarPrivate GtkMenuBarPrivate;
typedef struct _GtkMenuClass GtkMenuClass;
typedef void* GtkMenuDetachFunc;
extern void _GtkMenuDetachFunc_c_wrapper();
extern void _GtkMenuDetachFunc_c_wrapper_once();
typedef uint32_t GtkMenuDirectionType;
typedef struct _GtkMenuItem GtkMenuItem;
typedef struct _GtkMenuItemClass GtkMenuItemClass;
typedef struct _GtkMenuItemPrivate GtkMenuItemPrivate;
typedef void* GtkMenuPositionFunc;
extern void _GtkMenuPositionFunc_c_wrapper();
extern void _GtkMenuPositionFunc_c_wrapper_once();
typedef struct _GtkMenuPrivate GtkMenuPrivate;
typedef struct _GtkMenuShell GtkMenuShell;
typedef struct _GtkMenuShellClass GtkMenuShellClass;
typedef struct _GtkMenuShellPrivate GtkMenuShellPrivate;
typedef struct _GtkMenuToolButton GtkMenuToolButton;
typedef struct _GtkMenuToolButtonClass GtkMenuToolButtonClass;
typedef struct _GtkMenuToolButtonPrivate GtkMenuToolButtonPrivate;
typedef struct _GtkMessageDialog GtkMessageDialog;
typedef struct _GtkMessageDialogClass GtkMessageDialogClass;
typedef struct _GtkMessageDialogPrivate GtkMessageDialogPrivate;
typedef uint32_t GtkMessageType;
typedef struct _GtkMisc GtkMisc;
typedef struct _GtkMiscClass GtkMiscClass;
typedef struct _GtkMiscPrivate GtkMiscPrivate;
typedef void* GtkModuleDisplayInitFunc;
extern void _GtkModuleDisplayInitFunc_c_wrapper();
extern void _GtkModuleDisplayInitFunc_c_wrapper_once();
typedef void* GtkModuleInitFunc;
extern void _GtkModuleInitFunc_c_wrapper();
extern void _GtkModuleInitFunc_c_wrapper_once();
typedef struct _GtkMountOperation GtkMountOperation;
typedef struct _GtkMountOperationClass GtkMountOperationClass;
typedef struct _GtkMountOperationPrivate GtkMountOperationPrivate;
typedef uint32_t GtkMovementStep;
typedef struct _GtkNotebook GtkNotebook;
typedef struct _GtkNotebookClass GtkNotebookClass;
typedef struct _GtkNotebookPrivate GtkNotebookPrivate;
typedef uint32_t GtkNotebookTab;
typedef uint32_t GtkNumberUpLayout;
typedef struct _GtkNumerableIcon GtkNumerableIcon;
typedef struct _GtkNumerableIconClass GtkNumerableIconClass;
typedef struct _GtkNumerableIconPrivate GtkNumerableIconPrivate;
typedef struct _GtkOffscreenWindow GtkOffscreenWindow;
typedef struct _GtkOffscreenWindowClass GtkOffscreenWindowClass;
typedef struct _GtkOrientable GtkOrientable;
typedef struct _GtkOrientableIface GtkOrientableIface;
typedef uint32_t GtkOrientation;
typedef struct _GtkOverlay GtkOverlay;
typedef struct _GtkOverlayClass GtkOverlayClass;
typedef struct _GtkOverlayPrivate GtkOverlayPrivate;
typedef uint32_t GtkPackDirection;
typedef uint32_t GtkPackType;
typedef uint32_t GtkPageOrientation;
typedef struct _GtkPageRange GtkPageRange;
typedef uint32_t GtkPageSet;
typedef struct _GtkPageSetup GtkPageSetup;
typedef void* GtkPageSetupDoneFunc;
extern void _GtkPageSetupDoneFunc_c_wrapper();
extern void _GtkPageSetupDoneFunc_c_wrapper_once();
typedef struct _GtkPaned GtkPaned;
typedef struct _GtkPanedClass GtkPanedClass;
typedef struct _GtkPanedPrivate GtkPanedPrivate;
typedef struct _GtkPaperSize GtkPaperSize;
typedef uint32_t GtkPathPriorityType;
typedef uint32_t GtkPathType;
typedef struct _GtkPlug GtkPlug;
typedef struct _GtkPlugClass GtkPlugClass;
typedef struct _GtkPlugPrivate GtkPlugPrivate;
typedef uint32_t GtkPolicyType;
typedef uint32_t GtkPositionType;
typedef struct _GtkPrintContext GtkPrintContext;
typedef uint32_t GtkPrintDuplex;
typedef uint32_t GtkPrintError;
typedef struct _GtkPrintOperation GtkPrintOperation;
typedef uint32_t GtkPrintOperationAction;
typedef struct _GtkPrintOperationClass GtkPrintOperationClass;
typedef struct _GtkPrintOperationPreview GtkPrintOperationPreview;
typedef struct _GtkPrintOperationPreviewIface GtkPrintOperationPreviewIface;
typedef struct _GtkPrintOperationPrivate GtkPrintOperationPrivate;
typedef uint32_t GtkPrintOperationResult;
typedef uint32_t GtkPrintPages;
typedef uint32_t GtkPrintQuality;
typedef struct _GtkPrintSettings GtkPrintSettings;
typedef void* GtkPrintSettingsFunc;
extern void _GtkPrintSettingsFunc_c_wrapper();
extern void _GtkPrintSettingsFunc_c_wrapper_once();
typedef uint32_t GtkPrintStatus;
typedef struct _GtkProgressBar GtkProgressBar;
typedef struct _GtkProgressBarClass GtkProgressBarClass;
typedef struct _GtkProgressBarPrivate GtkProgressBarPrivate;
typedef struct _GtkRadioAction GtkRadioAction;
typedef struct _GtkRadioActionClass GtkRadioActionClass;
typedef struct _GtkRadioActionEntry GtkRadioActionEntry;
typedef struct _GtkRadioActionPrivate GtkRadioActionPrivate;
typedef struct _GtkRadioButton GtkRadioButton;
typedef struct _GtkRadioButtonClass GtkRadioButtonClass;
typedef struct _GtkRadioButtonPrivate GtkRadioButtonPrivate;
typedef struct _GtkRadioMenuItem GtkRadioMenuItem;
typedef struct _GtkRadioMenuItemClass GtkRadioMenuItemClass;
typedef struct _GtkRadioMenuItemPrivate GtkRadioMenuItemPrivate;
typedef struct _GtkRadioToolButton GtkRadioToolButton;
typedef struct _GtkRadioToolButtonClass GtkRadioToolButtonClass;
typedef struct _GtkRange GtkRange;
typedef struct _GtkRangeClass GtkRangeClass;
typedef struct _GtkRangePrivate GtkRangePrivate;
typedef struct _GtkRcContext GtkRcContext;
typedef uint32_t GtkRcFlags;
typedef struct _GtkRcProperty GtkRcProperty;
typedef void* GtkRcPropertyParser;
extern void _GtkRcPropertyParser_c_wrapper();
extern void _GtkRcPropertyParser_c_wrapper_once();
typedef struct _GtkRcStyle GtkRcStyle;
typedef struct _GtkRcStyleClass GtkRcStyleClass;
typedef uint32_t GtkRcTokenType;
typedef struct _GtkRecentAction GtkRecentAction;
typedef struct _GtkRecentActionClass GtkRecentActionClass;
typedef struct _GtkRecentActionPrivate GtkRecentActionPrivate;
typedef struct _GtkRecentChooser GtkRecentChooser;
typedef struct _GtkRecentChooserDialog GtkRecentChooserDialog;
typedef struct _GtkRecentChooserDialogClass GtkRecentChooserDialogClass;
typedef struct _GtkRecentChooserDialogPrivate GtkRecentChooserDialogPrivate;
typedef uint32_t GtkRecentChooserError;
typedef struct _GtkRecentChooserIface GtkRecentChooserIface;
typedef struct _GtkRecentChooserMenu GtkRecentChooserMenu;
typedef struct _GtkRecentChooserMenuClass GtkRecentChooserMenuClass;
typedef struct _GtkRecentChooserMenuPrivate GtkRecentChooserMenuPrivate;
typedef struct _GtkRecentChooserWidget GtkRecentChooserWidget;
typedef struct _GtkRecentChooserWidgetClass GtkRecentChooserWidgetClass;
typedef struct _GtkRecentChooserWidgetPrivate GtkRecentChooserWidgetPrivate;
typedef struct _GtkRecentData GtkRecentData;
typedef struct _GtkRecentFilter GtkRecentFilter;
typedef uint32_t GtkRecentFilterFlags;
typedef void* GtkRecentFilterFunc;
extern void _GtkRecentFilterFunc_c_wrapper();
extern void _GtkRecentFilterFunc_c_wrapper_once();
typedef struct _GtkRecentFilterInfo GtkRecentFilterInfo;
typedef struct _GtkRecentInfo GtkRecentInfo;
typedef struct _GtkRecentManager GtkRecentManager;
typedef struct _GtkRecentManagerClass GtkRecentManagerClass;
typedef uint32_t GtkRecentManagerError;
typedef struct _GtkRecentManagerPrivate GtkRecentManagerPrivate;
typedef void* GtkRecentSortFunc;
extern void _GtkRecentSortFunc_c_wrapper();
extern void _GtkRecentSortFunc_c_wrapper_once();
typedef uint32_t GtkRecentSortType;
typedef uint32_t GtkRegionFlags;
typedef uint32_t GtkReliefStyle;
typedef struct _GtkRequestedSize GtkRequestedSize;
typedef struct _GtkRequisition GtkRequisition;
typedef uint32_t GtkResizeMode;
typedef int32_t GtkResponseType;
typedef struct _GtkScale GtkScale;
typedef struct _GtkScaleButton GtkScaleButton;
typedef struct _GtkScaleButtonClass GtkScaleButtonClass;
typedef struct _GtkScaleButtonPrivate GtkScaleButtonPrivate;
typedef struct _GtkScaleClass GtkScaleClass;
typedef struct _GtkScalePrivate GtkScalePrivate;
typedef uint32_t GtkScrollStep;
typedef uint32_t GtkScrollType;
typedef struct _GtkScrollable GtkScrollable;
typedef struct _GtkScrollableInterface GtkScrollableInterface;
typedef uint32_t GtkScrollablePolicy;
typedef struct _GtkScrollbar GtkScrollbar;
typedef struct _GtkScrollbarClass GtkScrollbarClass;
typedef struct _GtkScrolledWindow GtkScrolledWindow;
typedef struct _GtkScrolledWindowClass GtkScrolledWindowClass;
typedef struct _GtkScrolledWindowPrivate GtkScrolledWindowPrivate;
typedef struct _GtkSelectionData GtkSelectionData;
typedef uint32_t GtkSelectionMode;
typedef uint32_t GtkSensitivityType;
typedef struct _GtkSeparator GtkSeparator;
typedef struct _GtkSeparatorClass GtkSeparatorClass;
typedef struct _GtkSeparatorMenuItem GtkSeparatorMenuItem;
typedef struct _GtkSeparatorMenuItemClass GtkSeparatorMenuItemClass;
typedef struct _GtkSeparatorPrivate GtkSeparatorPrivate;
typedef struct _GtkSeparatorToolItem GtkSeparatorToolItem;
typedef struct _GtkSeparatorToolItemClass GtkSeparatorToolItemClass;
typedef struct _GtkSeparatorToolItemPrivate GtkSeparatorToolItemPrivate;
typedef struct _GtkSettings GtkSettings;
typedef struct _GtkSettingsClass GtkSettingsClass;
typedef struct _GtkSettingsPrivate GtkSettingsPrivate;
typedef struct _GtkSettingsValue GtkSettingsValue;
typedef uint32_t GtkShadowType;
typedef struct _GtkSizeGroup GtkSizeGroup;
typedef struct _GtkSizeGroupClass GtkSizeGroupClass;
typedef uint32_t GtkSizeGroupMode;
typedef struct _GtkSizeGroupPrivate GtkSizeGroupPrivate;
typedef uint32_t GtkSizeRequestMode;
typedef struct _GtkSocket GtkSocket;
typedef struct _GtkSocketClass GtkSocketClass;
typedef struct _GtkSocketPrivate GtkSocketPrivate;
typedef uint32_t GtkSortType;
typedef struct _GtkSpinButton GtkSpinButton;
typedef struct _GtkSpinButtonClass GtkSpinButtonClass;
typedef struct _GtkSpinButtonPrivate GtkSpinButtonPrivate;
typedef uint32_t GtkSpinButtonUpdatePolicy;
typedef uint32_t GtkSpinType;
typedef struct _GtkSpinner GtkSpinner;
typedef struct _GtkSpinnerClass GtkSpinnerClass;
typedef struct _GtkSpinnerPrivate GtkSpinnerPrivate;
typedef uint32_t GtkStateFlags;
typedef uint32_t GtkStateType;
typedef struct _GtkStatusIcon GtkStatusIcon;
typedef struct _GtkStatusIconClass GtkStatusIconClass;
typedef struct _GtkStatusIconPrivate GtkStatusIconPrivate;
typedef struct _GtkStatusbar GtkStatusbar;
typedef struct _GtkStatusbarClass GtkStatusbarClass;
typedef struct _GtkStatusbarPrivate GtkStatusbarPrivate;
typedef struct _GtkStockItem GtkStockItem;
typedef struct _GtkStyle GtkStyle;
typedef struct _GtkStyleClass GtkStyleClass;
typedef struct _GtkStyleContext GtkStyleContext;
typedef struct _GtkStyleContextClass GtkStyleContextClass;
typedef struct _GtkStyleContextPrivate GtkStyleContextPrivate;
typedef struct _GtkStyleProperties GtkStyleProperties;
typedef struct _GtkStylePropertiesClass GtkStylePropertiesClass;
typedef void* GtkStylePropertyParser;
extern void _GtkStylePropertyParser_c_wrapper();
extern void _GtkStylePropertyParser_c_wrapper_once();
typedef struct _GtkStyleProvider GtkStyleProvider;
typedef struct _GtkStyleProviderIface GtkStyleProviderIface;
typedef struct _GtkSwitch GtkSwitch;
typedef struct _GtkSwitchClass GtkSwitchClass;
typedef struct _GtkSwitchPrivate GtkSwitchPrivate;
typedef struct _GtkSymbolicColor GtkSymbolicColor;
typedef struct _GtkTable GtkTable;
typedef struct _GtkTableChild GtkTableChild;
typedef struct _GtkTableClass GtkTableClass;
typedef struct _GtkTablePrivate GtkTablePrivate;
typedef struct _GtkTableRowCol GtkTableRowCol;
typedef struct _GtkTargetEntry GtkTargetEntry;
typedef uint32_t GtkTargetFlags;
typedef struct _GtkTargetList GtkTargetList;
typedef struct _GtkTearoffMenuItem GtkTearoffMenuItem;
typedef struct _GtkTearoffMenuItemClass GtkTearoffMenuItemClass;
typedef struct _GtkTearoffMenuItemPrivate GtkTearoffMenuItemPrivate;
typedef struct _GtkTextAppearance GtkTextAppearance;
typedef struct _GtkTextAttributes GtkTextAttributes;
typedef struct _GtkTextBTree GtkTextBTree;
typedef struct _GtkTextBuffer GtkTextBuffer;
typedef struct _GtkTextBufferClass GtkTextBufferClass;
typedef void* GtkTextBufferDeserializeFunc;
extern void _GtkTextBufferDeserializeFunc_c_wrapper();
extern void _GtkTextBufferDeserializeFunc_c_wrapper_once();
typedef struct _GtkTextBufferPrivate GtkTextBufferPrivate;
typedef void* GtkTextBufferSerializeFunc;
extern void _GtkTextBufferSerializeFunc_c_wrapper();
extern void _GtkTextBufferSerializeFunc_c_wrapper_once();
typedef int32_t GtkTextBufferTargetInfo;
typedef void* GtkTextCharPredicate;
extern void _GtkTextCharPredicate_c_wrapper();
extern void _GtkTextCharPredicate_c_wrapper_once();
typedef struct _GtkTextChildAnchor GtkTextChildAnchor;
typedef struct _GtkTextChildAnchorClass GtkTextChildAnchorClass;
typedef uint32_t GtkTextDirection;
typedef struct _GtkTextIter GtkTextIter;
typedef struct _GtkTextMark GtkTextMark;
typedef struct _GtkTextMarkClass GtkTextMarkClass;
typedef uint32_t GtkTextSearchFlags;
typedef struct _GtkTextTag GtkTextTag;
typedef struct _GtkTextTagClass GtkTextTagClass;
typedef struct _GtkTextTagPrivate GtkTextTagPrivate;
typedef struct _GtkTextTagTable GtkTextTagTable;
typedef struct _GtkTextTagTableClass GtkTextTagTableClass;
typedef void* GtkTextTagTableForeach;
extern void _GtkTextTagTableForeach_c_wrapper();
extern void _GtkTextTagTableForeach_c_wrapper_once();
typedef struct _GtkTextTagTablePrivate GtkTextTagTablePrivate;
typedef struct _GtkTextView GtkTextView;
typedef struct _GtkTextViewClass GtkTextViewClass;
typedef struct _GtkTextViewPrivate GtkTextViewPrivate;
typedef uint32_t GtkTextWindowType;
typedef struct _GtkThemeEngine GtkThemeEngine;
typedef struct _GtkThemingEngine GtkThemingEngine;
typedef struct _GtkThemingEngineClass GtkThemingEngineClass;
typedef struct _GtkThemingEnginePrivate GtkThemingEnginePrivate;
typedef struct _GtkToggleAction GtkToggleAction;
typedef struct _GtkToggleActionClass GtkToggleActionClass;
typedef struct _GtkToggleActionEntry GtkToggleActionEntry;
typedef struct _GtkToggleActionPrivate GtkToggleActionPrivate;
typedef struct _GtkToggleButton GtkToggleButton;
typedef struct _GtkToggleButtonClass GtkToggleButtonClass;
typedef struct _GtkToggleButtonPrivate GtkToggleButtonPrivate;
typedef struct _GtkToggleToolButton GtkToggleToolButton;
typedef struct _GtkToggleToolButtonClass GtkToggleToolButtonClass;
typedef struct _GtkToggleToolButtonPrivate GtkToggleToolButtonPrivate;
typedef struct _GtkToolButton GtkToolButton;
typedef struct _GtkToolButtonClass GtkToolButtonClass;
typedef struct _GtkToolButtonPrivate GtkToolButtonPrivate;
typedef struct _GtkToolItem GtkToolItem;
typedef struct _GtkToolItemClass GtkToolItemClass;
typedef struct _GtkToolItemGroup GtkToolItemGroup;
typedef struct _GtkToolItemGroupClass GtkToolItemGroupClass;
typedef struct _GtkToolItemGroupPrivate GtkToolItemGroupPrivate;
typedef struct _GtkToolItemPrivate GtkToolItemPrivate;
typedef struct _GtkToolPalette GtkToolPalette;
typedef struct _GtkToolPaletteClass GtkToolPaletteClass;
typedef uint32_t GtkToolPaletteDragTargets;
typedef struct _GtkToolPalettePrivate GtkToolPalettePrivate;
typedef struct _GtkToolShell GtkToolShell;
typedef struct _GtkToolShellIface GtkToolShellIface;
typedef struct _GtkToolbar GtkToolbar;
typedef struct _GtkToolbarClass GtkToolbarClass;
typedef struct _GtkToolbarPrivate GtkToolbarPrivate;
typedef uint32_t GtkToolbarSpaceStyle;
typedef uint32_t GtkToolbarStyle;
typedef struct _GtkTooltip GtkTooltip;
typedef void* GtkTranslateFunc;
extern void _GtkTranslateFunc_c_wrapper();
extern void _GtkTranslateFunc_c_wrapper_once();
typedef void* GtkTreeCellDataFunc;
extern void _GtkTreeCellDataFunc_c_wrapper();
extern void _GtkTreeCellDataFunc_c_wrapper_once();
typedef void* GtkTreeDestroyCountFunc;
extern void _GtkTreeDestroyCountFunc_c_wrapper();
extern void _GtkTreeDestroyCountFunc_c_wrapper_once();
typedef struct _GtkTreeDragDest GtkTreeDragDest;
typedef struct _GtkTreeDragDestIface GtkTreeDragDestIface;
typedef struct _GtkTreeDragSource GtkTreeDragSource;
typedef struct _GtkTreeDragSourceIface GtkTreeDragSourceIface;
typedef struct _GtkTreeIter GtkTreeIter;
typedef void* GtkTreeIterCompareFunc;
extern void _GtkTreeIterCompareFunc_c_wrapper();
extern void _GtkTreeIterCompareFunc_c_wrapper_once();
typedef struct _GtkTreeModel GtkTreeModel;
typedef struct _GtkTreeModelFilter GtkTreeModelFilter;
typedef struct _GtkTreeModelFilterClass GtkTreeModelFilterClass;
typedef void* GtkTreeModelFilterModifyFunc;
extern void _GtkTreeModelFilterModifyFunc_c_wrapper();
extern void _GtkTreeModelFilterModifyFunc_c_wrapper_once();
typedef struct _GtkTreeModelFilterPrivate GtkTreeModelFilterPrivate;
typedef void* GtkTreeModelFilterVisibleFunc;
extern void _GtkTreeModelFilterVisibleFunc_c_wrapper();
extern void _GtkTreeModelFilterVisibleFunc_c_wrapper_once();
typedef uint32_t GtkTreeModelFlags;
typedef void* GtkTreeModelForeachFunc;
extern void _GtkTreeModelForeachFunc_c_wrapper();
extern void _GtkTreeModelForeachFunc_c_wrapper_once();
typedef struct _GtkTreeModelIface GtkTreeModelIface;
typedef struct _GtkTreeModelSort GtkTreeModelSort;
typedef struct _GtkTreeModelSortClass GtkTreeModelSortClass;
typedef struct _GtkTreeModelSortPrivate GtkTreeModelSortPrivate;
typedef struct _GtkTreePath GtkTreePath;
typedef struct _GtkTreeRowReference GtkTreeRowReference;
typedef struct _GtkTreeSelection GtkTreeSelection;
typedef struct _GtkTreeSelectionClass GtkTreeSelectionClass;
typedef void* GtkTreeSelectionForeachFunc;
extern void _GtkTreeSelectionForeachFunc_c_wrapper();
extern void _GtkTreeSelectionForeachFunc_c_wrapper_once();
typedef void* GtkTreeSelectionFunc;
extern void _GtkTreeSelectionFunc_c_wrapper();
extern void _GtkTreeSelectionFunc_c_wrapper_once();
typedef struct _GtkTreeSelectionPrivate GtkTreeSelectionPrivate;
typedef struct _GtkTreeSortable GtkTreeSortable;
typedef struct _GtkTreeSortableIface GtkTreeSortableIface;
typedef struct _GtkTreeStore GtkTreeStore;
typedef struct _GtkTreeStoreClass GtkTreeStoreClass;
typedef struct _GtkTreeStorePrivate GtkTreeStorePrivate;
typedef struct _GtkTreeView GtkTreeView;
typedef struct _GtkTreeViewClass GtkTreeViewClass;
typedef struct _GtkTreeViewColumn GtkTreeViewColumn;
typedef struct _GtkTreeViewColumnClass GtkTreeViewColumnClass;
typedef void* GtkTreeViewColumnDropFunc;
extern void _GtkTreeViewColumnDropFunc_c_wrapper();
extern void _GtkTreeViewColumnDropFunc_c_wrapper_once();
typedef struct _GtkTreeViewColumnPrivate GtkTreeViewColumnPrivate;
typedef uint32_t GtkTreeViewColumnSizing;
typedef uint32_t GtkTreeViewDropPosition;
typedef uint32_t GtkTreeViewGridLines;
typedef void* GtkTreeViewMappingFunc;
extern void _GtkTreeViewMappingFunc_c_wrapper();
extern void _GtkTreeViewMappingFunc_c_wrapper_once();
typedef struct _GtkTreeViewPrivate GtkTreeViewPrivate;
typedef void* GtkTreeViewRowSeparatorFunc;
extern void _GtkTreeViewRowSeparatorFunc_c_wrapper();
extern void _GtkTreeViewRowSeparatorFunc_c_wrapper_once();
typedef void* GtkTreeViewSearchEqualFunc;
extern void _GtkTreeViewSearchEqualFunc_c_wrapper();
extern void _GtkTreeViewSearchEqualFunc_c_wrapper_once();
typedef void* GtkTreeViewSearchPositionFunc;
extern void _GtkTreeViewSearchPositionFunc_c_wrapper();
extern void _GtkTreeViewSearchPositionFunc_c_wrapper_once();
typedef struct _GtkUIManager GtkUIManager;
typedef struct _GtkUIManagerClass GtkUIManagerClass;
typedef uint32_t GtkUIManagerItemType;
typedef struct _GtkUIManagerPrivate GtkUIManagerPrivate;
typedef uint32_t GtkUnit;
typedef struct _GtkVBox GtkVBox;
typedef struct _GtkVBoxClass GtkVBoxClass;
typedef struct _GtkVButtonBox GtkVButtonBox;
typedef struct _GtkVButtonBoxClass GtkVButtonBoxClass;
typedef struct _GtkVPaned GtkVPaned;
typedef struct _GtkVPanedClass GtkVPanedClass;
typedef struct _GtkVScale GtkVScale;
typedef struct _GtkVScaleClass GtkVScaleClass;
typedef struct _GtkVScrollbar GtkVScrollbar;
typedef struct _GtkVScrollbarClass GtkVScrollbarClass;
typedef struct _GtkVSeparator GtkVSeparator;
typedef struct _GtkVSeparatorClass GtkVSeparatorClass;
typedef struct _GtkViewport GtkViewport;
typedef struct _GtkViewportClass GtkViewportClass;
typedef struct _GtkViewportPrivate GtkViewportPrivate;
typedef struct _GtkVolumeButton GtkVolumeButton;
typedef struct _GtkVolumeButtonClass GtkVolumeButtonClass;
typedef struct _GtkWidget GtkWidget;
typedef struct _GtkWidgetAuxInfo GtkWidgetAuxInfo;
typedef struct _GtkWidgetClass GtkWidgetClass;
typedef struct _GtkWidgetClassPrivate GtkWidgetClassPrivate;
typedef uint32_t GtkWidgetHelpType;
typedef struct _GtkWidgetPath GtkWidgetPath;
typedef struct _GtkWidgetPrivate GtkWidgetPrivate;
typedef struct _GtkWindow GtkWindow;
typedef struct _GtkWindowClass GtkWindowClass;
typedef struct _GtkWindowGeometryInfo GtkWindowGeometryInfo;
typedef struct _GtkWindowGroup GtkWindowGroup;
typedef struct _GtkWindowGroupClass GtkWindowGroupClass;
typedef struct _GtkWindowGroupPrivate GtkWindowGroupPrivate;
typedef uint32_t GtkWindowPosition;
typedef struct _GtkWindowPrivate GtkWindowPrivate;
typedef uint32_t GtkWindowType;
typedef uint32_t GtkWrapMode;
extern GtkWidget* gtk_about_dialog_new();
extern char** gtk_about_dialog_get_artists(GtkAboutDialog*);
extern char** gtk_about_dialog_get_authors(GtkAboutDialog*);
extern char* gtk_about_dialog_get_comments(GtkAboutDialog*);
extern char* gtk_about_dialog_get_copyright(GtkAboutDialog*);
extern char** gtk_about_dialog_get_documenters(GtkAboutDialog*);
extern char* gtk_about_dialog_get_license(GtkAboutDialog*);
extern GtkLicense gtk_about_dialog_get_license_type(GtkAboutDialog*);
extern GdkPixbuf* gtk_about_dialog_get_logo(GtkAboutDialog*);
extern char* gtk_about_dialog_get_logo_icon_name(GtkAboutDialog*);
extern char* gtk_about_dialog_get_program_name(GtkAboutDialog*);
extern char* gtk_about_dialog_get_translator_credits(GtkAboutDialog*);
extern char* gtk_about_dialog_get_version(GtkAboutDialog*);
extern char* gtk_about_dialog_get_website(GtkAboutDialog*);
extern char* gtk_about_dialog_get_website_label(GtkAboutDialog*);
extern int gtk_about_dialog_get_wrap_license(GtkAboutDialog*);
extern void gtk_about_dialog_set_artists(GtkAboutDialog*, char**);
extern void gtk_about_dialog_set_authors(GtkAboutDialog*, char**);
extern void gtk_about_dialog_set_comments(GtkAboutDialog*, char*);
extern void gtk_about_dialog_set_copyright(GtkAboutDialog*, char*);
extern void gtk_about_dialog_set_documenters(GtkAboutDialog*, char**);
extern void gtk_about_dialog_set_license(GtkAboutDialog*, char*);
extern void gtk_about_dialog_set_license_type(GtkAboutDialog*, GtkLicense);
extern void gtk_about_dialog_set_logo(GtkAboutDialog*, GdkPixbuf*);
extern void gtk_about_dialog_set_logo_icon_name(GtkAboutDialog*, char*);
extern void gtk_about_dialog_set_program_name(GtkAboutDialog*, char*);
extern void gtk_about_dialog_set_translator_credits(GtkAboutDialog*, char*);
extern void gtk_about_dialog_set_version(GtkAboutDialog*, char*);
extern void gtk_about_dialog_set_website(GtkAboutDialog*, char*);
extern void gtk_about_dialog_set_website_label(GtkAboutDialog*, char*);
extern void gtk_about_dialog_set_wrap_license(GtkAboutDialog*, int);
extern GType gtk_about_dialog_get_type();
extern GtkAccelGroup* gtk_accel_group_new();
extern GtkAccelGroup* gtk_accel_group_from_accel_closure(GClosure*);
extern int gtk_accel_group_activate(GtkAccelGroup*, uint32_t, GObject*, uint32_t, GdkModifierType);
extern void gtk_accel_group_connect(GtkAccelGroup*, uint32_t, GdkModifierType, GtkAccelFlags, GClosure*);
extern void gtk_accel_group_connect_by_path(GtkAccelGroup*, char*, GClosure*);
extern int gtk_accel_group_disconnect(GtkAccelGroup*, GClosure*);
extern int gtk_accel_group_disconnect_key(GtkAccelGroup*, uint32_t, GdkModifierType);
extern GtkAccelKey* gtk_accel_group_find(GtkAccelGroup*, GtkAccelGroupFindFunc, void*);
#pragma GCC diagnostic ignored "-Wunused-function"
static GtkAccelKey* _gtk_accel_group_find(GtkAccelGroup* this, void* gofunc) {
	if (gofunc) {
		return gtk_accel_group_find(this, _GtkAccelGroupFindFunc_c_wrapper, gofunc);
	} else {
		return gtk_accel_group_find(this, 0, 0);
	}
}
extern int gtk_accel_group_get_is_locked(GtkAccelGroup*);
extern GdkModifierType gtk_accel_group_get_modifier_mask(GtkAccelGroup*);
extern void gtk_accel_group_lock(GtkAccelGroup*);
extern GtkAccelGroupEntry* gtk_accel_group_query(GtkAccelGroup*, uint32_t, GdkModifierType, uint32_t*);
extern void gtk_accel_group_unlock(GtkAccelGroup*);
extern GType gtk_accel_group_get_type();
extern GtkWidget* gtk_accel_label_new(char*);
extern GtkWidget* gtk_accel_label_get_accel_widget(GtkAccelLabel*);
extern uint32_t gtk_accel_label_get_accel_width(GtkAccelLabel*);
extern int gtk_accel_label_refetch(GtkAccelLabel*);
extern void gtk_accel_label_set_accel_closure(GtkAccelLabel*, GClosure*);
extern void gtk_accel_label_set_accel_widget(GtkAccelLabel*, GtkWidget*);
extern GType gtk_accel_label_get_type();
extern void gtk_accel_map_add_entry(char*, uint32_t, GdkModifierType);
extern void gtk_accel_map_add_filter(char*);
extern int gtk_accel_map_change_entry(char*, uint32_t, GdkModifierType, int);
extern void gtk_accel_map_foreach(void*, GtkAccelMapForeach);
extern void gtk_accel_map_foreach_unfiltered(void*, GtkAccelMapForeach);
extern GtkAccelMap* gtk_accel_map_get();
extern void gtk_accel_map_load(char*);
extern void gtk_accel_map_load_fd(int32_t);
extern void gtk_accel_map_load_scanner(GScanner*);
extern void gtk_accel_map_lock_path(char*);
extern int gtk_accel_map_lookup_entry(char*, GtkAccelKey*);
extern void gtk_accel_map_save(char*);
extern void gtk_accel_map_save_fd(int32_t);
extern void gtk_accel_map_unlock_path(char*);
extern GType gtk_accel_map_get_type();
extern void gtk_accessible_connect_widget_destroyed(GtkAccessible*);
extern GtkWidget* gtk_accessible_get_widget(GtkAccessible*);
extern void gtk_accessible_set_widget(GtkAccessible*, GtkWidget*);
extern GType gtk_accessible_get_type();
extern GtkAction* gtk_action_new(char*, char*, char*, char*);
extern void gtk_action_activate(GtkAction*);
extern void gtk_action_block_activate(GtkAction*);
extern void gtk_action_connect_accelerator(GtkAction*);
extern GtkWidget* gtk_action_create_icon(GtkAction*, int32_t);
extern GtkWidget* gtk_action_create_menu(GtkAction*);
extern GtkWidget* gtk_action_create_menu_item(GtkAction*);
extern GtkWidget* gtk_action_create_tool_item(GtkAction*);
extern void gtk_action_disconnect_accelerator(GtkAction*);
extern GClosure* gtk_action_get_accel_closure(GtkAction*);
extern char* gtk_action_get_accel_path(GtkAction*);
extern int gtk_action_get_always_show_image(GtkAction*);
extern GIcon* gtk_action_get_gicon(GtkAction*);
extern char* gtk_action_get_icon_name(GtkAction*);
extern int gtk_action_get_is_important(GtkAction*);
extern char* gtk_action_get_label(GtkAction*);
extern char* gtk_action_get_name(GtkAction*);
extern GSList* gtk_action_get_proxies(GtkAction*);
extern int gtk_action_get_sensitive(GtkAction*);
extern char* gtk_action_get_short_label(GtkAction*);
extern char* gtk_action_get_stock_id(GtkAction*);
extern char* gtk_action_get_tooltip(GtkAction*);
extern int gtk_action_get_visible(GtkAction*);
extern int gtk_action_get_visible_horizontal(GtkAction*);
extern int gtk_action_get_visible_vertical(GtkAction*);
extern int gtk_action_is_sensitive(GtkAction*);
extern int gtk_action_is_visible(GtkAction*);
extern void gtk_action_set_accel_group(GtkAction*, GtkAccelGroup*);
extern void gtk_action_set_accel_path(GtkAction*, char*);
extern void gtk_action_set_always_show_image(GtkAction*, int);
extern void gtk_action_set_gicon(GtkAction*, GIcon*);
extern void gtk_action_set_icon_name(GtkAction*, char*);
extern void gtk_action_set_is_important(GtkAction*, int);
extern void gtk_action_set_label(GtkAction*, char*);
extern void gtk_action_set_sensitive(GtkAction*, int);
extern void gtk_action_set_short_label(GtkAction*, char*);
extern void gtk_action_set_stock_id(GtkAction*, char*);
extern void gtk_action_set_tooltip(GtkAction*, char*);
extern void gtk_action_set_visible(GtkAction*, int);
extern void gtk_action_set_visible_horizontal(GtkAction*, int);
extern void gtk_action_set_visible_vertical(GtkAction*, int);
extern void gtk_action_unblock_activate(GtkAction*);
extern GType gtk_action_get_type();
extern GtkActionGroup* gtk_action_group_new(char*);
extern void gtk_action_group_add_action(GtkActionGroup*, GtkAction*);
extern void gtk_action_group_add_action_with_accel(GtkActionGroup*, GtkAction*, char*);
extern GtkAction* gtk_action_group_get_action(GtkActionGroup*, char*);
extern char* gtk_action_group_get_name(GtkActionGroup*);
extern int gtk_action_group_get_sensitive(GtkActionGroup*);
extern int gtk_action_group_get_visible(GtkActionGroup*);
extern GList* gtk_action_group_list_actions(GtkActionGroup*);
extern void gtk_action_group_remove_action(GtkActionGroup*, GtkAction*);
extern void gtk_action_group_set_sensitive(GtkActionGroup*, int);
extern void gtk_action_group_set_translate_func(GtkActionGroup*, GtkTranslateFunc, void*, GDestroyNotify);
#pragma GCC diagnostic ignored "-Wunused-function"
static void _gtk_action_group_set_translate_func(GtkActionGroup* this, void* gofunc) {
	if (gofunc) {
		gtk_action_group_set_translate_func(this, _GtkTranslateFunc_c_wrapper, gofunc, _c_callback_cleanup);
	} else {
		gtk_action_group_set_translate_func(this, 0, 0, 0);
	}
}
extern void gtk_action_group_set_translation_domain(GtkActionGroup*, char*);
extern void gtk_action_group_set_visible(GtkActionGroup*, int);
extern char* gtk_action_group_translate_string(GtkActionGroup*, char*);
extern GType gtk_action_group_get_type();
extern void gtk_activatable_do_set_related_action(GtkActivatable*, GtkAction*);
extern GtkAction* gtk_activatable_get_related_action(GtkActivatable*);
extern int gtk_activatable_get_use_action_appearance(GtkActivatable*);
extern void gtk_activatable_set_related_action(GtkActivatable*, GtkAction*);
extern void gtk_activatable_set_use_action_appearance(GtkActivatable*, int);
extern void gtk_activatable_sync_action_properties(GtkActivatable*, GtkAction*);
extern GType gtk_activatable_get_type();
extern GtkAdjustment* gtk_adjustment_new(double, double, double, double, double, double);
extern void gtk_adjustment_changed(GtkAdjustment*);
extern void gtk_adjustment_clamp_page(GtkAdjustment*, double, double);
extern void gtk_adjustment_configure(GtkAdjustment*, double, double, double, double, double, double);
extern double gtk_adjustment_get_lower(GtkAdjustment*);
extern double gtk_adjustment_get_minimum_increment(GtkAdjustment*);
extern double gtk_adjustment_get_page_increment(GtkAdjustment*);
extern double gtk_adjustment_get_page_size(GtkAdjustment*);
extern double gtk_adjustment_get_step_increment(GtkAdjustment*);
extern double gtk_adjustment_get_upper(GtkAdjustment*);
extern double gtk_adjustment_get_value(GtkAdjustment*);
extern void gtk_adjustment_set_lower(GtkAdjustment*, double);
extern void gtk_adjustment_set_page_increment(GtkAdjustment*, double);
extern void gtk_adjustment_set_page_size(GtkAdjustment*, double);
extern void gtk_adjustment_set_step_increment(GtkAdjustment*, double);
extern void gtk_adjustment_set_upper(GtkAdjustment*, double);
extern void gtk_adjustment_set_value(GtkAdjustment*, double);
extern void gtk_adjustment_value_changed(GtkAdjustment*);
extern GType gtk_adjustment_get_type();
extern GtkWidget* gtk_alignment_new(float, float, float, float);
extern void gtk_alignment_get_padding(GtkAlignment*, uint32_t*, uint32_t*, uint32_t*, uint32_t*);
extern void gtk_alignment_set(GtkAlignment*, float, float, float, float);
extern void gtk_alignment_set_padding(GtkAlignment*, uint32_t, uint32_t, uint32_t, uint32_t);
extern GType gtk_alignment_get_type();
extern GAppInfo* gtk_app_chooser_get_app_info(GtkAppChooser*);
extern char* gtk_app_chooser_get_content_type(GtkAppChooser*);
extern void gtk_app_chooser_refresh(GtkAppChooser*);
extern GType gtk_app_chooser_get_type();
extern GtkWidget* gtk_app_chooser_button_new(char*);
extern void gtk_app_chooser_button_append_custom_item(GtkAppChooserButton*, char*, char*, GIcon*);
extern void gtk_app_chooser_button_append_separator(GtkAppChooserButton*);
extern char* gtk_app_chooser_button_get_heading(GtkAppChooserButton*);
extern int gtk_app_chooser_button_get_show_default_item(GtkAppChooserButton*);
extern int gtk_app_chooser_button_get_show_dialog_item(GtkAppChooserButton*);
extern void gtk_app_chooser_button_set_active_custom_item(GtkAppChooserButton*, char*);
extern void gtk_app_chooser_button_set_heading(GtkAppChooserButton*, char*);
extern void gtk_app_chooser_button_set_show_default_item(GtkAppChooserButton*, int);
extern void gtk_app_chooser_button_set_show_dialog_item(GtkAppChooserButton*, int);
extern GType gtk_app_chooser_button_get_type();
extern GtkWidget* gtk_app_chooser_dialog_new(GtkWindow*, GtkDialogFlags, GFile*);
extern GtkWidget* gtk_app_chooser_dialog_new_for_content_type(GtkWindow*, GtkDialogFlags, char*);
extern char* gtk_app_chooser_dialog_get_heading(GtkAppChooserDialog*);
extern GtkWidget* gtk_app_chooser_dialog_get_widget(GtkAppChooserDialog*);
extern void gtk_app_chooser_dialog_set_heading(GtkAppChooserDialog*, char*);
extern GType gtk_app_chooser_dialog_get_type();
extern GtkWidget* gtk_app_chooser_widget_new(char*);
extern char* gtk_app_chooser_widget_get_default_text(GtkAppChooserWidget*);
extern int gtk_app_chooser_widget_get_show_all(GtkAppChooserWidget*);
extern int gtk_app_chooser_widget_get_show_default(GtkAppChooserWidget*);
extern int gtk_app_chooser_widget_get_show_fallback(GtkAppChooserWidget*);
extern int gtk_app_chooser_widget_get_show_other(GtkAppChooserWidget*);
extern int gtk_app_chooser_widget_get_show_recommended(GtkAppChooserWidget*);
extern void gtk_app_chooser_widget_set_default_text(GtkAppChooserWidget*, char*);
extern void gtk_app_chooser_widget_set_show_all(GtkAppChooserWidget*, int);
extern void gtk_app_chooser_widget_set_show_default(GtkAppChooserWidget*, int);
extern void gtk_app_chooser_widget_set_show_fallback(GtkAppChooserWidget*, int);
extern void gtk_app_chooser_widget_set_show_other(GtkAppChooserWidget*, int);
extern void gtk_app_chooser_widget_set_show_recommended(GtkAppChooserWidget*, int);
extern GType gtk_app_chooser_widget_get_type();
extern GtkApplication* gtk_application_new(char*, GApplicationFlags);
extern void gtk_application_add_window(GtkApplication*, GtkWindow*);
extern GList* gtk_application_get_windows(GtkApplication*);
extern void gtk_application_remove_window(GtkApplication*, GtkWindow*);
extern GType gtk_application_get_type();
extern GtkWidget* gtk_arrow_new(GtkArrowType, GtkShadowType);
extern void gtk_arrow_set(GtkArrow*, GtkArrowType, GtkShadowType);
extern GType gtk_arrow_get_type();
extern GtkWidget* gtk_aspect_frame_new(char*, float, float, float, int);
extern void gtk_aspect_frame_set(GtkAspectFrame*, float, float, float, int);
extern GType gtk_aspect_frame_get_type();
extern GtkWidget* gtk_assistant_new();
extern void gtk_assistant_add_action_widget(GtkAssistant*, GtkWidget*);
extern int32_t gtk_assistant_append_page(GtkAssistant*, GtkWidget*);
extern void gtk_assistant_commit(GtkAssistant*);
extern int32_t gtk_assistant_get_current_page(GtkAssistant*);
extern int32_t gtk_assistant_get_n_pages(GtkAssistant*);
extern GtkWidget* gtk_assistant_get_nth_page(GtkAssistant*, int32_t);
extern int gtk_assistant_get_page_complete(GtkAssistant*, GtkWidget*);
extern GdkPixbuf* gtk_assistant_get_page_header_image(GtkAssistant*, GtkWidget*);
extern GdkPixbuf* gtk_assistant_get_page_side_image(GtkAssistant*, GtkWidget*);
extern char* gtk_assistant_get_page_title(GtkAssistant*, GtkWidget*);
extern GtkAssistantPageType gtk_assistant_get_page_type(GtkAssistant*, GtkWidget*);
extern int32_t gtk_assistant_insert_page(GtkAssistant*, GtkWidget*, int32_t);
extern void gtk_assistant_next_page(GtkAssistant*);
extern int32_t gtk_assistant_prepend_page(GtkAssistant*, GtkWidget*);
extern void gtk_assistant_previous_page(GtkAssistant*);
extern void gtk_assistant_remove_action_widget(GtkAssistant*, GtkWidget*);
extern void gtk_assistant_remove_page(GtkAssistant*, int32_t);
extern void gtk_assistant_set_current_page(GtkAssistant*, int32_t);
extern void gtk_assistant_set_forward_page_func(GtkAssistant*, GtkAssistantPageFunc, void*, GDestroyNotify);
#pragma GCC diagnostic ignored "-Wunused-function"
static void _gtk_assistant_set_forward_page_func(GtkAssistant* this, void* gofunc) {
	if (gofunc) {
		gtk_assistant_set_forward_page_func(this, _GtkAssistantPageFunc_c_wrapper, gofunc, _c_callback_cleanup);
	} else {
		gtk_assistant_set_forward_page_func(this, 0, 0, 0);
	}
}
extern void gtk_assistant_set_page_complete(GtkAssistant*, GtkWidget*, int);
extern void gtk_assistant_set_page_header_image(GtkAssistant*, GtkWidget*, GdkPixbuf*);
extern void gtk_assistant_set_page_side_image(GtkAssistant*, GtkWidget*, GdkPixbuf*);
extern void gtk_assistant_set_page_title(GtkAssistant*, GtkWidget*, char*);
extern void gtk_assistant_set_page_type(GtkAssistant*, GtkWidget*, GtkAssistantPageType);
extern void gtk_assistant_update_buttons_state(GtkAssistant*);
extern GType gtk_assistant_get_type();
extern GtkWidget* gtk_bin_get_child(GtkBin*);
extern GType gtk_bin_get_type();
extern GTokenType gtk_binding_entry_add_signal_from_string(GtkBindingSet*, char*);
extern void gtk_binding_entry_add_signall(GtkBindingSet*, uint32_t, GdkModifierType, char*, GSList*);
extern void gtk_binding_entry_remove(GtkBindingSet*, uint32_t, GdkModifierType);
extern void gtk_binding_entry_skip(GtkBindingSet*, uint32_t, GdkModifierType);
extern int gtk_binding_set_activate(GtkBindingSet*, uint32_t, GdkModifierType, GObject*);
extern void gtk_binding_set_add_path(GtkBindingSet*, GtkPathType, char*, GtkPathPriorityType);
extern GtkBindingSet* gtk_binding_set_find(char*);
extern GtkBorder* gtk_border_new();
extern GtkBorder* gtk_border_copy(GtkBorder*);
extern void gtk_border_free(GtkBorder*);
extern GtkWidget* gtk_box_new(GtkOrientation, int32_t);
extern int gtk_box_get_homogeneous(GtkBox*);
extern int32_t gtk_box_get_spacing(GtkBox*);
extern void gtk_box_pack_end(GtkBox*, GtkWidget*, int, int, uint32_t);
extern void gtk_box_pack_start(GtkBox*, GtkWidget*, int, int, uint32_t);
extern void gtk_box_query_child_packing(GtkBox*, GtkWidget*, int*, int*, uint32_t*, GtkPackType*);
extern void gtk_box_reorder_child(GtkBox*, GtkWidget*, int32_t);
extern void gtk_box_set_child_packing(GtkBox*, GtkWidget*, int, int, uint32_t, GtkPackType);
extern void gtk_box_set_homogeneous(GtkBox*, int);
extern void gtk_box_set_spacing(GtkBox*, int32_t);
extern GType gtk_box_get_type();
extern void gtk_buildable_add_child(GtkBuildable*, GtkBuilder*, GObject*, char*);
extern GObject* gtk_buildable_construct_child(GtkBuildable*, GtkBuilder*, char*);
extern void gtk_buildable_custom_finished(GtkBuildable*, GtkBuilder*, GObject*, char*, void*);
extern void gtk_buildable_custom_tag_end(GtkBuildable*, GtkBuilder*, GObject*, char*, void*);
extern int gtk_buildable_custom_tag_start(GtkBuildable*, GtkBuilder*, GObject*, char*, GMarkupParser*, void**);
extern GObject* gtk_buildable_get_internal_child(GtkBuildable*, GtkBuilder*, char*);
extern char* gtk_buildable_get_name(GtkBuildable*);
extern void gtk_buildable_parser_finished(GtkBuildable*, GtkBuilder*);
extern void gtk_buildable_set_buildable_property(GtkBuildable*, GtkBuilder*, char*, GValue*);
extern void gtk_buildable_set_name(GtkBuildable*, char*);
extern GType gtk_buildable_get_type();
extern GtkBuilder* gtk_builder_new();
extern uint32_t gtk_builder_add_from_file(GtkBuilder*, char*, GError**);
extern uint32_t gtk_builder_add_from_string(GtkBuilder*, char*, uint64_t, GError**);
extern uint32_t gtk_builder_add_objects_from_file(GtkBuilder*, char*, char**, GError**);
extern uint32_t gtk_builder_add_objects_from_string(GtkBuilder*, char*, uint64_t, char**, GError**);
extern void gtk_builder_connect_signals(GtkBuilder*, void*);
extern void gtk_builder_connect_signals_full(GtkBuilder*, GtkBuilderConnectFunc, void*);
#pragma GCC diagnostic ignored "-Wunused-function"
static void _gtk_builder_connect_signals_full(GtkBuilder* this, void* gofunc) {
	if (gofunc) {
		gtk_builder_connect_signals_full(this, _GtkBuilderConnectFunc_c_wrapper, gofunc);
	} else {
		gtk_builder_connect_signals_full(this, 0, 0);
	}
}
extern GObject* gtk_builder_get_object(GtkBuilder*, char*);
extern GSList* gtk_builder_get_objects(GtkBuilder*);
extern char* gtk_builder_get_translation_domain(GtkBuilder*);
extern GType gtk_builder_get_type_from_name(GtkBuilder*, char*);
extern void gtk_builder_set_translation_domain(GtkBuilder*, char*);
extern int gtk_builder_value_from_string(GtkBuilder*, GParamSpec*, char*, GValue*, GError**);
extern int gtk_builder_value_from_string_type(GtkBuilder*, GType, char*, GValue*, GError**);
extern GType gtk_builder_get_type();
extern GtkWidget* gtk_button_new();
extern GtkWidget* gtk_button_new_from_stock(char*);
extern GtkWidget* gtk_button_new_with_label(char*);
extern GtkWidget* gtk_button_new_with_mnemonic(char*);
extern void gtk_button_clicked(GtkButton*);
extern void gtk_button_enter(GtkButton*);
extern void gtk_button_get_alignment(GtkButton*, float*, float*);
extern GdkWindow* gtk_button_get_event_window(GtkButton*);
extern int gtk_button_get_focus_on_click(GtkButton*);
extern GtkWidget* gtk_button_get_image(GtkButton*);
extern GtkPositionType gtk_button_get_image_position(GtkButton*);
extern char* gtk_button_get_label(GtkButton*);
extern GtkReliefStyle gtk_button_get_relief(GtkButton*);
extern int gtk_button_get_use_stock(GtkButton*);
extern int gtk_button_get_use_underline(GtkButton*);
extern void gtk_button_leave(GtkButton*);
extern void gtk_button_pressed(GtkButton*);
extern void gtk_button_released(GtkButton*);
extern void gtk_button_set_alignment(GtkButton*, float, float);
extern void gtk_button_set_focus_on_click(GtkButton*, int);
extern void gtk_button_set_image(GtkButton*, GtkWidget*);
extern void gtk_button_set_image_position(GtkButton*, GtkPositionType);
extern void gtk_button_set_label(GtkButton*, char*);
extern void gtk_button_set_relief(GtkButton*, GtkReliefStyle);
extern void gtk_button_set_use_stock(GtkButton*, int);
extern void gtk_button_set_use_underline(GtkButton*, int);
extern GType gtk_button_get_type();
extern GtkWidget* gtk_button_box_new(GtkOrientation);
extern int gtk_button_box_get_child_non_homogeneous(GtkButtonBox*, GtkWidget*);
extern int gtk_button_box_get_child_secondary(GtkButtonBox*, GtkWidget*);
extern GtkButtonBoxStyle gtk_button_box_get_layout(GtkButtonBox*);
extern void gtk_button_box_set_child_non_homogeneous(GtkButtonBox*, GtkWidget*, int);
extern void gtk_button_box_set_child_secondary(GtkButtonBox*, GtkWidget*, int);
extern void gtk_button_box_set_layout(GtkButtonBox*, GtkButtonBoxStyle);
extern GType gtk_button_box_get_type();
extern GtkWidget* gtk_calendar_new();
extern void gtk_calendar_clear_marks(GtkCalendar*);
extern void gtk_calendar_get_date(GtkCalendar*, uint32_t*, uint32_t*, uint32_t*);
extern int gtk_calendar_get_day_is_marked(GtkCalendar*, uint32_t);
extern int32_t gtk_calendar_get_detail_height_rows(GtkCalendar*);
extern int32_t gtk_calendar_get_detail_width_chars(GtkCalendar*);
extern GtkCalendarDisplayOptions gtk_calendar_get_display_options(GtkCalendar*);
extern void gtk_calendar_mark_day(GtkCalendar*, uint32_t);
extern void gtk_calendar_select_day(GtkCalendar*, uint32_t);
extern void gtk_calendar_select_month(GtkCalendar*, uint32_t, uint32_t);
extern void gtk_calendar_set_detail_func(GtkCalendar*, GtkCalendarDetailFunc, void*, GDestroyNotify);
#pragma GCC diagnostic ignored "-Wunused-function"
static void _gtk_calendar_set_detail_func(GtkCalendar* this, void* gofunc) {
	if (gofunc) {
		gtk_calendar_set_detail_func(this, _GtkCalendarDetailFunc_c_wrapper, gofunc, _c_callback_cleanup);
	} else {
		gtk_calendar_set_detail_func(this, 0, 0, 0);
	}
}
extern void gtk_calendar_set_detail_height_rows(GtkCalendar*, int32_t);
extern void gtk_calendar_set_detail_width_chars(GtkCalendar*, int32_t);
extern void gtk_calendar_set_display_options(GtkCalendar*, GtkCalendarDisplayOptions);
extern void gtk_calendar_unmark_day(GtkCalendar*, uint32_t);
extern GType gtk_calendar_get_type();
extern int gtk_cell_area_activate(GtkCellArea*, GtkCellAreaContext*, GtkWidget*, cairoRectangleInt*, GtkCellRendererState, int);
extern int gtk_cell_area_activate_cell(GtkCellArea*, GtkWidget*, GtkCellRenderer*, GdkEvent*, cairoRectangleInt*, GtkCellRendererState);
extern void gtk_cell_area_add(GtkCellArea*, GtkCellRenderer*);
extern void gtk_cell_area_add_focus_sibling(GtkCellArea*, GtkCellRenderer*, GtkCellRenderer*);
extern void gtk_cell_area_apply_attributes(GtkCellArea*, GtkTreeModel*, GtkTreeIter*, int, int);
extern void gtk_cell_area_attribute_connect(GtkCellArea*, GtkCellRenderer*, char*, int32_t);
extern void gtk_cell_area_attribute_disconnect(GtkCellArea*, GtkCellRenderer*, char*);
extern void gtk_cell_area_cell_get_property(GtkCellArea*, GtkCellRenderer*, char*, GValue*);
extern void gtk_cell_area_cell_set_property(GtkCellArea*, GtkCellRenderer*, char*, GValue*);
extern GtkCellAreaContext* gtk_cell_area_copy_context(GtkCellArea*, GtkCellAreaContext*);
extern GtkCellAreaContext* gtk_cell_area_create_context(GtkCellArea*);
extern int32_t gtk_cell_area_event(GtkCellArea*, GtkCellAreaContext*, GtkWidget*, GdkEvent*, cairoRectangleInt*, GtkCellRendererState);
extern int gtk_cell_area_focus(GtkCellArea*, GtkDirectionType);
extern void gtk_cell_area_foreach(GtkCellArea*, GtkCellCallback, void*);
#pragma GCC diagnostic ignored "-Wunused-function"
static void _gtk_cell_area_foreach(GtkCellArea* this, void* gofunc) {
	if (gofunc) {
		gtk_cell_area_foreach(this, _GtkCellCallback_c_wrapper, gofunc);
	} else {
		gtk_cell_area_foreach(this, 0, 0);
	}
}
extern void gtk_cell_area_foreach_alloc(GtkCellArea*, GtkCellAreaContext*, GtkWidget*, cairoRectangleInt*, cairoRectangleInt*, GtkCellAllocCallback, void*);
#pragma GCC diagnostic ignored "-Wunused-function"
static void _gtk_cell_area_foreach_alloc(GtkCellArea* this, GtkCellAreaContext* arg0, GtkWidget* arg1, cairoRectangleInt* arg2, cairoRectangleInt* arg3, void* gofunc) {
	if (gofunc) {
		gtk_cell_area_foreach_alloc(this, arg0, arg1, arg2, arg3, _GtkCellAllocCallback_c_wrapper, gofunc);
	} else {
		gtk_cell_area_foreach_alloc(this, arg0, arg1, arg2, arg3, 0, 0);
	}
}
extern void gtk_cell_area_get_cell_allocation(GtkCellArea*, GtkCellAreaContext*, GtkWidget*, GtkCellRenderer*, cairoRectangleInt*, cairoRectangleInt*);
extern GtkCellRenderer* gtk_cell_area_get_cell_at_position(GtkCellArea*, GtkCellAreaContext*, GtkWidget*, cairoRectangleInt*, int32_t, int32_t, cairoRectangleInt*);
extern char* gtk_cell_area_get_current_path_string(GtkCellArea*);
extern GtkCellEditable* gtk_cell_area_get_edit_widget(GtkCellArea*);
extern GtkCellRenderer* gtk_cell_area_get_edited_cell(GtkCellArea*);
extern GtkCellRenderer* gtk_cell_area_get_focus_cell(GtkCellArea*);
extern GtkCellRenderer* gtk_cell_area_get_focus_from_sibling(GtkCellArea*, GtkCellRenderer*);
extern GList* gtk_cell_area_get_focus_siblings(GtkCellArea*, GtkCellRenderer*);
extern void gtk_cell_area_get_preferred_height(GtkCellArea*, GtkCellAreaContext*, GtkWidget*, int32_t*, int32_t*);
extern void gtk_cell_area_get_preferred_height_for_width(GtkCellArea*, GtkCellAreaContext*, GtkWidget*, int32_t, int32_t*, int32_t*);
extern void gtk_cell_area_get_preferred_width(GtkCellArea*, GtkCellAreaContext*, GtkWidget*, int32_t*, int32_t*);
extern void gtk_cell_area_get_preferred_width_for_height(GtkCellArea*, GtkCellAreaContext*, GtkWidget*, int32_t, int32_t*, int32_t*);
extern GtkSizeRequestMode gtk_cell_area_get_request_mode(GtkCellArea*);
extern int gtk_cell_area_has_renderer(GtkCellArea*, GtkCellRenderer*);
extern void gtk_cell_area_inner_cell_area(GtkCellArea*, GtkWidget*, cairoRectangleInt*, cairoRectangleInt*);
extern int gtk_cell_area_is_activatable(GtkCellArea*);
extern int gtk_cell_area_is_focus_sibling(GtkCellArea*, GtkCellRenderer*, GtkCellRenderer*);
extern void gtk_cell_area_remove(GtkCellArea*, GtkCellRenderer*);
extern void gtk_cell_area_remove_focus_sibling(GtkCellArea*, GtkCellRenderer*, GtkCellRenderer*);
extern void gtk_cell_area_render(GtkCellArea*, GtkCellAreaContext*, GtkWidget*, cairoContext*, cairoRectangleInt*, cairoRectangleInt*, GtkCellRendererState, int);
extern void gtk_cell_area_request_renderer(GtkCellArea*, GtkCellRenderer*, GtkOrientation, GtkWidget*, int32_t, int32_t*, int32_t*);
extern void gtk_cell_area_set_focus_cell(GtkCellArea*, GtkCellRenderer*);
extern void gtk_cell_area_stop_editing(GtkCellArea*, int);
extern GType gtk_cell_area_get_type();
extern GtkCellArea* gtk_cell_area_box_new();
extern int32_t gtk_cell_area_box_get_spacing(GtkCellAreaBox*);
extern void gtk_cell_area_box_pack_end(GtkCellAreaBox*, GtkCellRenderer*, int, int, int);
extern void gtk_cell_area_box_pack_start(GtkCellAreaBox*, GtkCellRenderer*, int, int, int);
extern void gtk_cell_area_box_set_spacing(GtkCellAreaBox*, int32_t);
extern GType gtk_cell_area_box_get_type();
extern GParamSpec* gtk_cell_area_class_find_cell_property(GtkCellAreaClass*, char*);
extern void gtk_cell_area_class_install_cell_property(GtkCellAreaClass*, uint32_t, GParamSpec*);
extern GParamSpec** gtk_cell_area_class_list_cell_properties(GtkCellAreaClass*, uint32_t*);
extern void gtk_cell_area_context_allocate(GtkCellAreaContext*, int32_t, int32_t);
extern void gtk_cell_area_context_get_allocation(GtkCellAreaContext*, int32_t*, int32_t*);
extern GtkCellArea* gtk_cell_area_context_get_area(GtkCellAreaContext*);
extern void gtk_cell_area_context_get_preferred_height(GtkCellAreaContext*, int32_t*, int32_t*);
extern void gtk_cell_area_context_get_preferred_height_for_width(GtkCellAreaContext*, int32_t, int32_t*, int32_t*);
extern void gtk_cell_area_context_get_preferred_width(GtkCellAreaContext*, int32_t*, int32_t*);
extern void gtk_cell_area_context_get_preferred_width_for_height(GtkCellAreaContext*, int32_t, int32_t*, int32_t*);
extern void gtk_cell_area_context_push_preferred_height(GtkCellAreaContext*, int32_t, int32_t);
extern void gtk_cell_area_context_push_preferred_width(GtkCellAreaContext*, int32_t, int32_t);
extern void gtk_cell_area_context_reset(GtkCellAreaContext*);
extern GType gtk_cell_area_context_get_type();
extern void gtk_cell_editable_editing_done(GtkCellEditable*);
extern void gtk_cell_editable_remove_widget(GtkCellEditable*);
extern void gtk_cell_editable_start_editing(GtkCellEditable*, GdkEvent*);
extern GType gtk_cell_editable_get_type();
extern void gtk_cell_layout_add_attribute(GtkCellLayout*, GtkCellRenderer*, char*, int32_t);
extern void gtk_cell_layout_clear(GtkCellLayout*);
extern void gtk_cell_layout_clear_attributes(GtkCellLayout*, GtkCellRenderer*);
extern GtkCellArea* gtk_cell_layout_get_area(GtkCellLayout*);
extern GList* gtk_cell_layout_get_cells(GtkCellLayout*);
extern void gtk_cell_layout_pack_end(GtkCellLayout*, GtkCellRenderer*, int);
extern void gtk_cell_layout_pack_start(GtkCellLayout*, GtkCellRenderer*, int);
extern void gtk_cell_layout_reorder(GtkCellLayout*, GtkCellRenderer*, int32_t);
extern void gtk_cell_layout_set_cell_data_func(GtkCellLayout*, GtkCellRenderer*, GtkCellLayoutDataFunc, void*, GDestroyNotify);
#pragma GCC diagnostic ignored "-Wunused-function"
static void _gtk_cell_layout_set_cell_data_func(GtkCellLayout* this, GtkCellRenderer* arg0, void* gofunc) {
	if (gofunc) {
		gtk_cell_layout_set_cell_data_func(this, arg0, _GtkCellLayoutDataFunc_c_wrapper, gofunc, _c_callback_cleanup);
	} else {
		gtk_cell_layout_set_cell_data_func(this, arg0, 0, 0, 0);
	}
}
extern GType gtk_cell_layout_get_type();
extern int gtk_cell_renderer_activate(GtkCellRenderer*, GdkEvent*, GtkWidget*, char*, cairoRectangleInt*, cairoRectangleInt*, GtkCellRendererState);
extern void gtk_cell_renderer_get_aligned_area(GtkCellRenderer*, GtkWidget*, GtkCellRendererState, cairoRectangleInt*, cairoRectangleInt*);
extern void gtk_cell_renderer_get_alignment(GtkCellRenderer*, float*, float*);
extern void gtk_cell_renderer_get_fixed_size(GtkCellRenderer*, int32_t*, int32_t*);
extern void gtk_cell_renderer_get_padding(GtkCellRenderer*, int32_t*, int32_t*);
extern void gtk_cell_renderer_get_preferred_height(GtkCellRenderer*, GtkWidget*, int32_t*, int32_t*);
extern void gtk_cell_renderer_get_preferred_height_for_width(GtkCellRenderer*, GtkWidget*, int32_t, int32_t*, int32_t*);
extern void gtk_cell_renderer_get_preferred_size(GtkCellRenderer*, GtkWidget*, GtkRequisition*, GtkRequisition*);
extern void gtk_cell_renderer_get_preferred_width(GtkCellRenderer*, GtkWidget*, int32_t*, int32_t*);
extern void gtk_cell_renderer_get_preferred_width_for_height(GtkCellRenderer*, GtkWidget*, int32_t, int32_t*, int32_t*);
extern GtkSizeRequestMode gtk_cell_renderer_get_request_mode(GtkCellRenderer*);
extern int gtk_cell_renderer_get_sensitive(GtkCellRenderer*);
extern void gtk_cell_renderer_get_size(GtkCellRenderer*, GtkWidget*, cairoRectangleInt*, int32_t*, int32_t*, int32_t*, int32_t*);
extern GtkStateFlags gtk_cell_renderer_get_state(GtkCellRenderer*, GtkWidget*, GtkCellRendererState);
extern int gtk_cell_renderer_get_visible(GtkCellRenderer*);
extern int gtk_cell_renderer_is_activatable(GtkCellRenderer*);
extern void gtk_cell_renderer_render(GtkCellRenderer*, cairoContext*, GtkWidget*, cairoRectangleInt*, cairoRectangleInt*, GtkCellRendererState);
extern void gtk_cell_renderer_set_alignment(GtkCellRenderer*, float, float);
extern void gtk_cell_renderer_set_fixed_size(GtkCellRenderer*, int32_t, int32_t);
extern void gtk_cell_renderer_set_padding(GtkCellRenderer*, int32_t, int32_t);
extern void gtk_cell_renderer_set_sensitive(GtkCellRenderer*, int);
extern void gtk_cell_renderer_set_visible(GtkCellRenderer*, int);
extern GtkCellEditable* gtk_cell_renderer_start_editing(GtkCellRenderer*, GdkEvent*, GtkWidget*, char*, cairoRectangleInt*, cairoRectangleInt*, GtkCellRendererState);
extern void gtk_cell_renderer_stop_editing(GtkCellRenderer*, int);
extern GType gtk_cell_renderer_get_type();
extern GtkCellRenderer* gtk_cell_renderer_accel_new();
extern GType gtk_cell_renderer_accel_get_type();
extern GtkCellRenderer* gtk_cell_renderer_combo_new();
extern GType gtk_cell_renderer_combo_get_type();
extern GtkCellRenderer* gtk_cell_renderer_pixbuf_new();
extern GType gtk_cell_renderer_pixbuf_get_type();
extern GtkCellRenderer* gtk_cell_renderer_progress_new();
extern GType gtk_cell_renderer_progress_get_type();
extern GtkCellRenderer* gtk_cell_renderer_spin_new();
extern GType gtk_cell_renderer_spin_get_type();
extern GtkCellRenderer* gtk_cell_renderer_spinner_new();
extern GType gtk_cell_renderer_spinner_get_type();
extern GtkCellRenderer* gtk_cell_renderer_text_new();
extern void gtk_cell_renderer_text_set_fixed_height_from_font(GtkCellRendererText*, int32_t);
extern GType gtk_cell_renderer_text_get_type();
extern GtkCellRenderer* gtk_cell_renderer_toggle_new();
extern int gtk_cell_renderer_toggle_get_activatable(GtkCellRendererToggle*);
extern int gtk_cell_renderer_toggle_get_active(GtkCellRendererToggle*);
extern int gtk_cell_renderer_toggle_get_radio(GtkCellRendererToggle*);
extern void gtk_cell_renderer_toggle_set_activatable(GtkCellRendererToggle*, int);
extern void gtk_cell_renderer_toggle_set_active(GtkCellRendererToggle*, int);
extern void gtk_cell_renderer_toggle_set_radio(GtkCellRendererToggle*, int);
extern GType gtk_cell_renderer_toggle_get_type();
extern GtkWidget* gtk_cell_view_new();
extern GtkWidget* gtk_cell_view_new_with_context(GtkCellArea*, GtkCellAreaContext*);
extern GtkWidget* gtk_cell_view_new_with_markup(char*);
extern GtkWidget* gtk_cell_view_new_with_pixbuf(GdkPixbuf*);
extern GtkWidget* gtk_cell_view_new_with_text(char*);
extern GtkTreePath* gtk_cell_view_get_displayed_row(GtkCellView*);
extern int gtk_cell_view_get_draw_sensitive(GtkCellView*);
extern int gtk_cell_view_get_fit_model(GtkCellView*);
extern GtkTreeModel* gtk_cell_view_get_model(GtkCellView*);
extern int gtk_cell_view_get_size_of_row(GtkCellView*, GtkTreePath*, GtkRequisition*);
extern void gtk_cell_view_set_background_color(GtkCellView*, GdkColor*);
extern void gtk_cell_view_set_background_rgba(GtkCellView*, GdkRGBA*);
extern void gtk_cell_view_set_displayed_row(GtkCellView*, GtkTreePath*);
extern void gtk_cell_view_set_draw_sensitive(GtkCellView*, int);
extern void gtk_cell_view_set_fit_model(GtkCellView*, int);
extern void gtk_cell_view_set_model(GtkCellView*, GtkTreeModel*);
extern GType gtk_cell_view_get_type();
extern GtkWidget* gtk_check_button_new();
extern GtkWidget* gtk_check_button_new_with_label(char*);
extern GtkWidget* gtk_check_button_new_with_mnemonic(char*);
extern GType gtk_check_button_get_type();
extern GtkWidget* gtk_check_menu_item_new();
extern GtkWidget* gtk_check_menu_item_new_with_label(char*);
extern GtkWidget* gtk_check_menu_item_new_with_mnemonic(char*);
extern int gtk_check_menu_item_get_active(GtkCheckMenuItem*);
extern int gtk_check_menu_item_get_draw_as_radio(GtkCheckMenuItem*);
extern int gtk_check_menu_item_get_inconsistent(GtkCheckMenuItem*);
extern void gtk_check_menu_item_set_active(GtkCheckMenuItem*, int);
extern void gtk_check_menu_item_set_draw_as_radio(GtkCheckMenuItem*, int);
extern void gtk_check_menu_item_set_inconsistent(GtkCheckMenuItem*, int);
extern void gtk_check_menu_item_toggled(GtkCheckMenuItem*);
extern GType gtk_check_menu_item_get_type();
extern GtkClipboard* gtk_clipboard_get(GdkAtom);
extern GtkClipboard* gtk_clipboard_get_for_display(GdkDisplay*, GdkAtom);
extern void gtk_clipboard_clear(GtkClipboard*);
extern GdkDisplay* gtk_clipboard_get_display(GtkClipboard*);
extern GObject* gtk_clipboard_get_owner(GtkClipboard*);
extern void gtk_clipboard_request_contents(GtkClipboard*, GdkAtom, GtkClipboardReceivedFunc, void*);
#pragma GCC diagnostic ignored "-Wunused-function"
static void _gtk_clipboard_request_contents(GtkClipboard* this, GdkAtom arg0, void* gofunc) {
	if (gofunc) {
		gtk_clipboard_request_contents(this, arg0, _GtkClipboardReceivedFunc_c_wrapper_once, gofunc);
	} else {
		gtk_clipboard_request_contents(this, arg0, 0, 0);
	}
}
extern void gtk_clipboard_request_image(GtkClipboard*, GtkClipboardImageReceivedFunc, void*);
#pragma GCC diagnostic ignored "-Wunused-function"
static void _gtk_clipboard_request_image(GtkClipboard* this, void* gofunc) {
	if (gofunc) {
		gtk_clipboard_request_image(this, _GtkClipboardImageReceivedFunc_c_wrapper_once, gofunc);
	} else {
		gtk_clipboard_request_image(this, 0, 0);
	}
}
extern void gtk_clipboard_request_rich_text(GtkClipboard*, GtkTextBuffer*, GtkClipboardRichTextReceivedFunc, void*);
#pragma GCC diagnostic ignored "-Wunused-function"
static void _gtk_clipboard_request_rich_text(GtkClipboard* this, GtkTextBuffer* arg0, void* gofunc) {
	if (gofunc) {
		gtk_clipboard_request_rich_text(this, arg0, _GtkClipboardRichTextReceivedFunc_c_wrapper_once, gofunc);
	} else {
		gtk_clipboard_request_rich_text(this, arg0, 0, 0);
	}
}
extern void gtk_clipboard_request_targets(GtkClipboard*, GtkClipboardTargetsReceivedFunc, void*);
#pragma GCC diagnostic ignored "-Wunused-function"
static void _gtk_clipboard_request_targets(GtkClipboard* this, void* gofunc) {
	if (gofunc) {
		gtk_clipboard_request_targets(this, _GtkClipboardTargetsReceivedFunc_c_wrapper_once, gofunc);
	} else {
		gtk_clipboard_request_targets(this, 0, 0);
	}
}
extern void gtk_clipboard_request_text(GtkClipboard*, GtkClipboardTextReceivedFunc, void*);
#pragma GCC diagnostic ignored "-Wunused-function"
static void _gtk_clipboard_request_text(GtkClipboard* this, void* gofunc) {
	if (gofunc) {
		gtk_clipboard_request_text(this, _GtkClipboardTextReceivedFunc_c_wrapper_once, gofunc);
	} else {
		gtk_clipboard_request_text(this, 0, 0);
	}
}
extern void gtk_clipboard_request_uris(GtkClipboard*, GtkClipboardURIReceivedFunc, void*);
#pragma GCC diagnostic ignored "-Wunused-function"
static void _gtk_clipboard_request_uris(GtkClipboard* this, void* gofunc) {
	if (gofunc) {
		gtk_clipboard_request_uris(this, _GtkClipboardURIReceivedFunc_c_wrapper_once, gofunc);
	} else {
		gtk_clipboard_request_uris(this, 0, 0);
	}
}
extern void gtk_clipboard_set_can_store(GtkClipboard*, GtkTargetEntry*, int32_t);
extern void gtk_clipboard_set_image(GtkClipboard*, GdkPixbuf*);
extern void gtk_clipboard_set_text(GtkClipboard*, char*, int32_t);
extern void gtk_clipboard_store(GtkClipboard*);
extern GtkSelectionData* gtk_clipboard_wait_for_contents(GtkClipboard*, GdkAtom);
extern GdkPixbuf* gtk_clipboard_wait_for_image(GtkClipboard*);
extern uint8_t* gtk_clipboard_wait_for_rich_text(GtkClipboard*, GtkTextBuffer*, GdkAtom*, uint64_t*);
extern int gtk_clipboard_wait_for_targets(GtkClipboard*, GdkAtom**, int32_t*);
extern char* gtk_clipboard_wait_for_text(GtkClipboard*);
extern char** gtk_clipboard_wait_for_uris(GtkClipboard*);
extern int gtk_clipboard_wait_is_image_available(GtkClipboard*);
extern int gtk_clipboard_wait_is_rich_text_available(GtkClipboard*, GtkTextBuffer*);
extern int gtk_clipboard_wait_is_target_available(GtkClipboard*, GdkAtom);
extern int gtk_clipboard_wait_is_text_available(GtkClipboard*);
extern int gtk_clipboard_wait_is_uris_available(GtkClipboard*);
extern GType gtk_clipboard_get_type();
extern GtkWidget* gtk_color_button_new();
extern GtkWidget* gtk_color_button_new_with_color(GdkColor*);
extern GtkWidget* gtk_color_button_new_with_rgba(GdkRGBA*);
extern uint16_t gtk_color_button_get_alpha(GtkColorButton*);
extern void gtk_color_button_get_color(GtkColorButton*, GdkColor*);
extern void gtk_color_button_get_rgba(GtkColorButton*, GdkRGBA*);
extern char* gtk_color_button_get_title(GtkColorButton*);
extern int gtk_color_button_get_use_alpha(GtkColorButton*);
extern void gtk_color_button_set_alpha(GtkColorButton*, uint16_t);
extern void gtk_color_button_set_color(GtkColorButton*, GdkColor*);
extern void gtk_color_button_set_rgba(GtkColorButton*, GdkRGBA*);
extern void gtk_color_button_set_title(GtkColorButton*, char*);
extern void gtk_color_button_set_use_alpha(GtkColorButton*, int);
extern GType gtk_color_button_get_type();
extern GtkWidget* gtk_color_selection_new();
extern int gtk_color_selection_palette_from_string(char*, GdkColor**, int32_t*);
extern char* gtk_color_selection_palette_to_string(GdkColor*, int32_t);
extern uint16_t gtk_color_selection_get_current_alpha(GtkColorSelection*);
extern void gtk_color_selection_get_current_color(GtkColorSelection*, GdkColor*);
extern void gtk_color_selection_get_current_rgba(GtkColorSelection*, GdkRGBA*);
extern int gtk_color_selection_get_has_opacity_control(GtkColorSelection*);
extern int gtk_color_selection_get_has_palette(GtkColorSelection*);
extern uint16_t gtk_color_selection_get_previous_alpha(GtkColorSelection*);
extern void gtk_color_selection_get_previous_color(GtkColorSelection*, GdkColor*);
extern void gtk_color_selection_get_previous_rgba(GtkColorSelection*, GdkRGBA*);
extern int gtk_color_selection_is_adjusting(GtkColorSelection*);
extern void gtk_color_selection_set_current_alpha(GtkColorSelection*, uint16_t);
extern void gtk_color_selection_set_current_color(GtkColorSelection*, GdkColor*);
extern void gtk_color_selection_set_current_rgba(GtkColorSelection*, GdkRGBA*);
extern void gtk_color_selection_set_has_opacity_control(GtkColorSelection*, int);
extern void gtk_color_selection_set_has_palette(GtkColorSelection*, int);
extern void gtk_color_selection_set_previous_alpha(GtkColorSelection*, uint16_t);
extern void gtk_color_selection_set_previous_color(GtkColorSelection*, GdkColor*);
extern void gtk_color_selection_set_previous_rgba(GtkColorSelection*, GdkRGBA*);
extern GType gtk_color_selection_get_type();
extern GtkWidget* gtk_color_selection_dialog_new(char*);
extern GtkWidget* gtk_color_selection_dialog_get_color_selection(GtkColorSelectionDialog*);
extern GType gtk_color_selection_dialog_get_type();
extern GtkWidget* gtk_combo_box_new();
extern GtkWidget* gtk_combo_box_new_with_area(GtkCellArea*);
extern GtkWidget* gtk_combo_box_new_with_area_and_entry(GtkCellArea*);
extern GtkWidget* gtk_combo_box_new_with_entry();
extern GtkWidget* gtk_combo_box_new_with_model(GtkTreeModel*);
extern GtkWidget* gtk_combo_box_new_with_model_and_entry(GtkTreeModel*);
extern int32_t gtk_combo_box_get_active(GtkComboBox*);
extern char* gtk_combo_box_get_active_id(GtkComboBox*);
extern int gtk_combo_box_get_active_iter(GtkComboBox*, GtkTreeIter*);
extern int gtk_combo_box_get_add_tearoffs(GtkComboBox*);
extern GtkSensitivityType gtk_combo_box_get_button_sensitivity(GtkComboBox*);
extern int32_t gtk_combo_box_get_column_span_column(GtkComboBox*);
extern int32_t gtk_combo_box_get_entry_text_column(GtkComboBox*);
extern int gtk_combo_box_get_focus_on_click(GtkComboBox*);
extern int gtk_combo_box_get_has_entry(GtkComboBox*);
extern int32_t gtk_combo_box_get_id_column(GtkComboBox*);
extern GtkTreeModel* gtk_combo_box_get_model(GtkComboBox*);
extern AtkObject* gtk_combo_box_get_popup_accessible(GtkComboBox*);
extern int gtk_combo_box_get_popup_fixed_width(GtkComboBox*);
extern int32_t gtk_combo_box_get_row_span_column(GtkComboBox*);
extern char* gtk_combo_box_get_title(GtkComboBox*);
extern int32_t gtk_combo_box_get_wrap_width(GtkComboBox*);
extern void gtk_combo_box_popdown(GtkComboBox*);
extern void gtk_combo_box_popup(GtkComboBox*);
extern void gtk_combo_box_popup_for_device(GtkComboBox*, GdkDevice*);
extern void gtk_combo_box_set_active(GtkComboBox*, int32_t);
extern int gtk_combo_box_set_active_id(GtkComboBox*, char*);
extern void gtk_combo_box_set_active_iter(GtkComboBox*, GtkTreeIter*);
extern void gtk_combo_box_set_add_tearoffs(GtkComboBox*, int);
extern void gtk_combo_box_set_button_sensitivity(GtkComboBox*, GtkSensitivityType);
extern void gtk_combo_box_set_column_span_column(GtkComboBox*, int32_t);
extern void gtk_combo_box_set_entry_text_column(GtkComboBox*, int32_t);
extern void gtk_combo_box_set_focus_on_click(GtkComboBox*, int);
extern void gtk_combo_box_set_id_column(GtkComboBox*, int32_t);
extern void gtk_combo_box_set_model(GtkComboBox*, GtkTreeModel*);
extern void gtk_combo_box_set_popup_fixed_width(GtkComboBox*, int);
extern void gtk_combo_box_set_row_separator_func(GtkComboBox*, GtkTreeViewRowSeparatorFunc, void*, GDestroyNotify);
#pragma GCC diagnostic ignored "-Wunused-function"
static void _gtk_combo_box_set_row_separator_func(GtkComboBox* this, void* gofunc) {
	if (gofunc) {
		gtk_combo_box_set_row_separator_func(this, _GtkTreeViewRowSeparatorFunc_c_wrapper, gofunc, _c_callback_cleanup);
	} else {
		gtk_combo_box_set_row_separator_func(this, 0, 0, 0);
	}
}
extern void gtk_combo_box_set_row_span_column(GtkComboBox*, int32_t);
extern void gtk_combo_box_set_title(GtkComboBox*, char*);
extern void gtk_combo_box_set_wrap_width(GtkComboBox*, int32_t);
extern GType gtk_combo_box_get_type();
extern GtkWidget* gtk_combo_box_text_new();
extern GtkWidget* gtk_combo_box_text_new_with_entry();
extern void gtk_combo_box_text_append(GtkComboBoxText*, char*, char*);
extern void gtk_combo_box_text_append_text(GtkComboBoxText*, char*);
extern char* gtk_combo_box_text_get_active_text(GtkComboBoxText*);
extern void gtk_combo_box_text_insert(GtkComboBoxText*, int32_t, char*, char*);
extern void gtk_combo_box_text_insert_text(GtkComboBoxText*, int32_t, char*);
extern void gtk_combo_box_text_prepend(GtkComboBoxText*, char*, char*);
extern void gtk_combo_box_text_prepend_text(GtkComboBoxText*, char*);
extern void gtk_combo_box_text_remove(GtkComboBoxText*, int32_t);
extern void gtk_combo_box_text_remove_all(GtkComboBoxText*);
extern GType gtk_combo_box_text_get_type();
extern void gtk_container_add(GtkContainer*, GtkWidget*);
extern void gtk_container_check_resize(GtkContainer*);
extern void gtk_container_child_get_property(GtkContainer*, GtkWidget*, char*, GValue*);
extern void gtk_container_child_notify(GtkContainer*, GtkWidget*, char*);
extern void gtk_container_child_set_property(GtkContainer*, GtkWidget*, char*, GValue*);
extern GType gtk_container_child_type(GtkContainer*);
extern void gtk_container_forall(GtkContainer*, GtkCallback, void*);
#pragma GCC diagnostic ignored "-Wunused-function"
static void _gtk_container_forall(GtkContainer* this, void* gofunc) {
	if (gofunc) {
		gtk_container_forall(this, _GtkCallback_c_wrapper, gofunc);
	} else {
		gtk_container_forall(this, 0, 0);
	}
}
extern void gtk_container_foreach(GtkContainer*, GtkCallback, void*);
#pragma GCC diagnostic ignored "-Wunused-function"
static void _gtk_container_foreach(GtkContainer* this, void* gofunc) {
	if (gofunc) {
		gtk_container_foreach(this, _GtkCallback_c_wrapper, gofunc);
	} else {
		gtk_container_foreach(this, 0, 0);
	}
}
extern uint32_t gtk_container_get_border_width(GtkContainer*);
extern GList* gtk_container_get_children(GtkContainer*);
extern int gtk_container_get_focus_chain(GtkContainer*, GList**);
extern GtkWidget* gtk_container_get_focus_child(GtkContainer*);
extern GtkAdjustment* gtk_container_get_focus_hadjustment(GtkContainer*);
extern GtkAdjustment* gtk_container_get_focus_vadjustment(GtkContainer*);
extern GtkWidgetPath* gtk_container_get_path_for_child(GtkContainer*, GtkWidget*);
extern GtkResizeMode gtk_container_get_resize_mode(GtkContainer*);
extern void gtk_container_propagate_draw(GtkContainer*, GtkWidget*, cairoContext*);
extern void gtk_container_remove(GtkContainer*, GtkWidget*);
extern void gtk_container_resize_children(GtkContainer*);
extern void gtk_container_set_border_width(GtkContainer*, uint32_t);
extern void gtk_container_set_focus_chain(GtkContainer*, GList*);
extern void gtk_container_set_focus_child(GtkContainer*, GtkWidget*);
extern void gtk_container_set_focus_hadjustment(GtkContainer*, GtkAdjustment*);
extern void gtk_container_set_focus_vadjustment(GtkContainer*, GtkAdjustment*);
extern void gtk_container_set_reallocate_redraws(GtkContainer*, int);
extern void gtk_container_set_resize_mode(GtkContainer*, GtkResizeMode);
extern void gtk_container_unset_focus_chain(GtkContainer*);
extern GType gtk_container_get_type();
extern GParamSpec* gtk_container_class_find_child_property(GtkContainerClass*, char*);
extern void gtk_container_class_handle_border_width(GtkContainerClass*);
extern void gtk_container_class_install_child_property(GtkContainerClass*, uint32_t, GParamSpec*);
extern GParamSpec** gtk_container_class_list_child_properties(GtkContainerClass*, uint32_t*);
extern GtkCssProvider* gtk_css_provider_new();
extern GtkCssProvider* gtk_css_provider_get_default();
extern GtkCssProvider* gtk_css_provider_get_named(char*, char*);
extern int gtk_css_provider_load_from_data(GtkCssProvider*, uint8_t*, int64_t, GError**);
extern int gtk_css_provider_load_from_file(GtkCssProvider*, GFile*, GError**);
extern int gtk_css_provider_load_from_path(GtkCssProvider*, char*, GError**);
extern char* gtk_css_provider_to_string(GtkCssProvider*);
extern GType gtk_css_provider_get_type();
extern uint32_t gtk_css_section_get_end_line(GtkCssSection*);
extern uint32_t gtk_css_section_get_end_position(GtkCssSection*);
extern GtkCssSection* gtk_css_section_get_parent(GtkCssSection*);
extern GtkCssSectionType gtk_css_section_get_section_type(GtkCssSection*);
extern uint32_t gtk_css_section_get_start_line(GtkCssSection*);
extern uint32_t gtk_css_section_get_start_position(GtkCssSection*);
extern GtkCssSection* gtk_css_section_ref(GtkCssSection*);
extern void gtk_css_section_unref(GtkCssSection*);
extern GtkWidget* gtk_dialog_new();
extern void gtk_dialog_add_action_widget(GtkDialog*, GtkWidget*, int32_t);
extern GtkWidget* gtk_dialog_add_button(GtkDialog*, char*, int32_t);
extern GtkWidget* gtk_dialog_get_action_area(GtkDialog*);
extern GtkWidget* gtk_dialog_get_content_area(GtkDialog*);
extern int32_t gtk_dialog_get_response_for_widget(GtkDialog*, GtkWidget*);
extern GtkWidget* gtk_dialog_get_widget_for_response(GtkDialog*, int32_t);
extern void gtk_dialog_response(GtkDialog*, int32_t);
extern int32_t gtk_dialog_run(GtkDialog*);
extern void gtk_dialog_set_alternative_button_order_from_array(GtkDialog*, int32_t, int32_t*);
extern void gtk_dialog_set_default_response(GtkDialog*, int32_t);
extern void gtk_dialog_set_response_sensitive(GtkDialog*, int32_t, int);
extern GType gtk_dialog_get_type();
extern GtkWidget* gtk_drawing_area_new();
extern GType gtk_drawing_area_get_type();
extern void gtk_editable_copy_clipboard(GtkEditable*);
extern void gtk_editable_cut_clipboard(GtkEditable*);
extern void gtk_editable_delete_selection(GtkEditable*);
extern void gtk_editable_delete_text(GtkEditable*, int32_t, int32_t);
extern char* gtk_editable_get_chars(GtkEditable*, int32_t, int32_t);
extern int gtk_editable_get_editable(GtkEditable*);
extern int32_t gtk_editable_get_position(GtkEditable*);
extern int gtk_editable_get_selection_bounds(GtkEditable*, int32_t*, int32_t*);
extern void gtk_editable_insert_text(GtkEditable*, char*, int32_t, int32_t*);
extern void gtk_editable_paste_clipboard(GtkEditable*);
extern void gtk_editable_select_region(GtkEditable*, int32_t, int32_t);
extern void gtk_editable_set_editable(GtkEditable*, int);
extern void gtk_editable_set_position(GtkEditable*, int32_t);
extern GType gtk_editable_get_type();
extern GtkWidget* gtk_entry_new();
extern GtkWidget* gtk_entry_new_with_buffer(GtkEntryBuffer*);
extern int gtk_entry_get_activates_default(GtkEntry*);
extern float gtk_entry_get_alignment(GtkEntry*);
extern GtkEntryBuffer* gtk_entry_get_buffer(GtkEntry*);
extern GtkEntryCompletion* gtk_entry_get_completion(GtkEntry*);
extern int32_t gtk_entry_get_current_icon_drag_source(GtkEntry*);
extern GtkAdjustment* gtk_entry_get_cursor_hadjustment(GtkEntry*);
extern int gtk_entry_get_has_frame(GtkEntry*);
extern int gtk_entry_get_icon_activatable(GtkEntry*, GtkEntryIconPosition);
extern void gtk_entry_get_icon_area(GtkEntry*, GtkEntryIconPosition, cairoRectangleInt*);
extern int32_t gtk_entry_get_icon_at_pos(GtkEntry*, int32_t, int32_t);
extern GIcon* gtk_entry_get_icon_gicon(GtkEntry*, GtkEntryIconPosition);
extern char* gtk_entry_get_icon_name(GtkEntry*, GtkEntryIconPosition);
extern GdkPixbuf* gtk_entry_get_icon_pixbuf(GtkEntry*, GtkEntryIconPosition);
extern int gtk_entry_get_icon_sensitive(GtkEntry*, GtkEntryIconPosition);
extern char* gtk_entry_get_icon_stock(GtkEntry*, GtkEntryIconPosition);
extern GtkImageType gtk_entry_get_icon_storage_type(GtkEntry*, GtkEntryIconPosition);
extern char* gtk_entry_get_icon_tooltip_markup(GtkEntry*, GtkEntryIconPosition);
extern char* gtk_entry_get_icon_tooltip_text(GtkEntry*, GtkEntryIconPosition);
extern GtkBorder* gtk_entry_get_inner_border(GtkEntry*);
extern uint32_t gtk_entry_get_invisible_char(GtkEntry*);
extern PangoLayout* gtk_entry_get_layout(GtkEntry*);
extern void gtk_entry_get_layout_offsets(GtkEntry*, int32_t*, int32_t*);
extern int32_t gtk_entry_get_max_length(GtkEntry*);
extern int gtk_entry_get_overwrite_mode(GtkEntry*);
extern char* gtk_entry_get_placeholder_text(GtkEntry*);
extern double gtk_entry_get_progress_fraction(GtkEntry*);
extern double gtk_entry_get_progress_pulse_step(GtkEntry*);
extern char* gtk_entry_get_text(GtkEntry*);
extern void gtk_entry_get_text_area(GtkEntry*, cairoRectangleInt*);
extern uint16_t gtk_entry_get_text_length(GtkEntry*);
extern int gtk_entry_get_visibility(GtkEntry*);
extern int32_t gtk_entry_get_width_chars(GtkEntry*);
extern int gtk_entry_im_context_filter_keypress(GtkEntry*, GdkEventKey*);
extern int32_t gtk_entry_layout_index_to_text_index(GtkEntry*, int32_t);
extern void gtk_entry_progress_pulse(GtkEntry*);
extern void gtk_entry_reset_im_context(GtkEntry*);
extern void gtk_entry_set_activates_default(GtkEntry*, int);
extern void gtk_entry_set_alignment(GtkEntry*, float);
extern void gtk_entry_set_buffer(GtkEntry*, GtkEntryBuffer*);
extern void gtk_entry_set_completion(GtkEntry*, GtkEntryCompletion*);
extern void gtk_entry_set_cursor_hadjustment(GtkEntry*, GtkAdjustment*);
extern void gtk_entry_set_has_frame(GtkEntry*, int);
extern void gtk_entry_set_icon_activatable(GtkEntry*, GtkEntryIconPosition, int);
extern void gtk_entry_set_icon_drag_source(GtkEntry*, GtkEntryIconPosition, GtkTargetList*, GdkDragAction);
extern void gtk_entry_set_icon_from_gicon(GtkEntry*, GtkEntryIconPosition, GIcon*);
extern void gtk_entry_set_icon_from_icon_name(GtkEntry*, GtkEntryIconPosition, char*);
extern void gtk_entry_set_icon_from_pixbuf(GtkEntry*, GtkEntryIconPosition, GdkPixbuf*);
extern void gtk_entry_set_icon_from_stock(GtkEntry*, GtkEntryIconPosition, char*);
extern void gtk_entry_set_icon_sensitive(GtkEntry*, GtkEntryIconPosition, int);
extern void gtk_entry_set_icon_tooltip_markup(GtkEntry*, GtkEntryIconPosition, char*);
extern void gtk_entry_set_icon_tooltip_text(GtkEntry*, GtkEntryIconPosition, char*);
extern void gtk_entry_set_inner_border(GtkEntry*, GtkBorder*);
extern void gtk_entry_set_invisible_char(GtkEntry*, uint32_t);
extern void gtk_entry_set_max_length(GtkEntry*, int32_t);
extern void gtk_entry_set_overwrite_mode(GtkEntry*, int);
extern void gtk_entry_set_placeholder_text(GtkEntry*, char*);
extern void gtk_entry_set_progress_fraction(GtkEntry*, double);
extern void gtk_entry_set_progress_pulse_step(GtkEntry*, double);
extern void gtk_entry_set_text(GtkEntry*, char*);
extern void gtk_entry_set_visibility(GtkEntry*, int);
extern void gtk_entry_set_width_chars(GtkEntry*, int32_t);
extern int32_t gtk_entry_text_index_to_layout_index(GtkEntry*, int32_t);
extern void gtk_entry_unset_invisible_char(GtkEntry*);
extern GType gtk_entry_get_type();
extern GtkEntryBuffer* gtk_entry_buffer_new(char*, int32_t);
extern uint32_t gtk_entry_buffer_delete_text(GtkEntryBuffer*, uint32_t, int32_t);
extern void gtk_entry_buffer_emit_deleted_text(GtkEntryBuffer*, uint32_t, uint32_t);
extern void gtk_entry_buffer_emit_inserted_text(GtkEntryBuffer*, uint32_t, char*, uint32_t);
extern uint64_t gtk_entry_buffer_get_bytes(GtkEntryBuffer*);
extern uint32_t gtk_entry_buffer_get_length(GtkEntryBuffer*);
extern int32_t gtk_entry_buffer_get_max_length(GtkEntryBuffer*);
extern char* gtk_entry_buffer_get_text(GtkEntryBuffer*);
extern uint32_t gtk_entry_buffer_insert_text(GtkEntryBuffer*, uint32_t, char*, int32_t);
extern void gtk_entry_buffer_set_max_length(GtkEntryBuffer*, int32_t);
extern void gtk_entry_buffer_set_text(GtkEntryBuffer*, char*, int32_t);
extern GType gtk_entry_buffer_get_type();
extern GtkEntryCompletion* gtk_entry_completion_new();
extern GtkEntryCompletion* gtk_entry_completion_new_with_area(GtkCellArea*);
extern void gtk_entry_completion_complete(GtkEntryCompletion*);
extern void gtk_entry_completion_delete_action(GtkEntryCompletion*, int32_t);
extern char* gtk_entry_completion_get_completion_prefix(GtkEntryCompletion*);
extern GtkWidget* gtk_entry_completion_get_entry(GtkEntryCompletion*);
extern int gtk_entry_completion_get_inline_completion(GtkEntryCompletion*);
extern int gtk_entry_completion_get_inline_selection(GtkEntryCompletion*);
extern int32_t gtk_entry_completion_get_minimum_key_length(GtkEntryCompletion*);
extern GtkTreeModel* gtk_entry_completion_get_model(GtkEntryCompletion*);
extern int gtk_entry_completion_get_popup_completion(GtkEntryCompletion*);
extern int gtk_entry_completion_get_popup_set_width(GtkEntryCompletion*);
extern int gtk_entry_completion_get_popup_single_match(GtkEntryCompletion*);
extern int32_t gtk_entry_completion_get_text_column(GtkEntryCompletion*);
extern void gtk_entry_completion_insert_action_markup(GtkEntryCompletion*, int32_t, char*);
extern void gtk_entry_completion_insert_action_text(GtkEntryCompletion*, int32_t, char*);
extern void gtk_entry_completion_insert_prefix(GtkEntryCompletion*);
extern void gtk_entry_completion_set_inline_completion(GtkEntryCompletion*, int);
extern void gtk_entry_completion_set_inline_selection(GtkEntryCompletion*, int);
extern void gtk_entry_completion_set_match_func(GtkEntryCompletion*, GtkEntryCompletionMatchFunc, void*, GDestroyNotify);
#pragma GCC diagnostic ignored "-Wunused-function"
static void _gtk_entry_completion_set_match_func(GtkEntryCompletion* this, void* gofunc) {
	if (gofunc) {
		gtk_entry_completion_set_match_func(this, _GtkEntryCompletionMatchFunc_c_wrapper, gofunc, _c_callback_cleanup);
	} else {
		gtk_entry_completion_set_match_func(this, 0, 0, 0);
	}
}
extern void gtk_entry_completion_set_minimum_key_length(GtkEntryCompletion*, int32_t);
extern void gtk_entry_completion_set_model(GtkEntryCompletion*, GtkTreeModel*);
extern void gtk_entry_completion_set_popup_completion(GtkEntryCompletion*, int);
extern void gtk_entry_completion_set_popup_set_width(GtkEntryCompletion*, int);
extern void gtk_entry_completion_set_popup_single_match(GtkEntryCompletion*, int);
extern void gtk_entry_completion_set_text_column(GtkEntryCompletion*, int32_t);
extern GType gtk_entry_completion_get_type();
extern GtkWidget* gtk_event_box_new();
extern int gtk_event_box_get_above_child(GtkEventBox*);
extern int gtk_event_box_get_visible_window(GtkEventBox*);
extern void gtk_event_box_set_above_child(GtkEventBox*, int);
extern void gtk_event_box_set_visible_window(GtkEventBox*, int);
extern GType gtk_event_box_get_type();
extern GtkWidget* gtk_expander_new(char*);
extern GtkWidget* gtk_expander_new_with_mnemonic(char*);
extern int gtk_expander_get_expanded(GtkExpander*);
extern char* gtk_expander_get_label(GtkExpander*);
extern int gtk_expander_get_label_fill(GtkExpander*);
extern GtkWidget* gtk_expander_get_label_widget(GtkExpander*);
extern int gtk_expander_get_resize_toplevel(GtkExpander*);
extern int32_t gtk_expander_get_spacing(GtkExpander*);
extern int gtk_expander_get_use_markup(GtkExpander*);
extern int gtk_expander_get_use_underline(GtkExpander*);
extern void gtk_expander_set_expanded(GtkExpander*, int);
extern void gtk_expander_set_label(GtkExpander*, char*);
extern void gtk_expander_set_label_fill(GtkExpander*, int);
extern void gtk_expander_set_label_widget(GtkExpander*, GtkWidget*);
extern void gtk_expander_set_resize_toplevel(GtkExpander*, int);
extern void gtk_expander_set_spacing(GtkExpander*, int32_t);
extern void gtk_expander_set_use_markup(GtkExpander*, int);
extern void gtk_expander_set_use_underline(GtkExpander*, int);
extern GType gtk_expander_get_type();
extern void gtk_file_chooser_add_filter(GtkFileChooser*, GtkFileFilter*);
extern int gtk_file_chooser_add_shortcut_folder(GtkFileChooser*, char*, GError**);
extern int gtk_file_chooser_add_shortcut_folder_uri(GtkFileChooser*, char*, GError**);
extern GtkFileChooserAction gtk_file_chooser_get_action(GtkFileChooser*);
extern int gtk_file_chooser_get_create_folders(GtkFileChooser*);
extern char* gtk_file_chooser_get_current_folder(GtkFileChooser*);
extern GFile* gtk_file_chooser_get_current_folder_file(GtkFileChooser*);
extern char* gtk_file_chooser_get_current_folder_uri(GtkFileChooser*);
extern int gtk_file_chooser_get_do_overwrite_confirmation(GtkFileChooser*);
extern GtkWidget* gtk_file_chooser_get_extra_widget(GtkFileChooser*);
extern GFile* gtk_file_chooser_get_file(GtkFileChooser*);
extern char* gtk_file_chooser_get_filename(GtkFileChooser*);
extern GSList* gtk_file_chooser_get_filenames(GtkFileChooser*);
extern GSList* gtk_file_chooser_get_files(GtkFileChooser*);
extern GtkFileFilter* gtk_file_chooser_get_filter(GtkFileChooser*);
extern int gtk_file_chooser_get_local_only(GtkFileChooser*);
extern GFile* gtk_file_chooser_get_preview_file(GtkFileChooser*);
extern char* gtk_file_chooser_get_preview_filename(GtkFileChooser*);
extern char* gtk_file_chooser_get_preview_uri(GtkFileChooser*);
extern GtkWidget* gtk_file_chooser_get_preview_widget(GtkFileChooser*);
extern int gtk_file_chooser_get_preview_widget_active(GtkFileChooser*);
extern int gtk_file_chooser_get_select_multiple(GtkFileChooser*);
extern int gtk_file_chooser_get_show_hidden(GtkFileChooser*);
extern char* gtk_file_chooser_get_uri(GtkFileChooser*);
extern GSList* gtk_file_chooser_get_uris(GtkFileChooser*);
extern int gtk_file_chooser_get_use_preview_label(GtkFileChooser*);
extern GSList* gtk_file_chooser_list_filters(GtkFileChooser*);
extern GSList* gtk_file_chooser_list_shortcut_folder_uris(GtkFileChooser*);
extern GSList* gtk_file_chooser_list_shortcut_folders(GtkFileChooser*);
extern void gtk_file_chooser_remove_filter(GtkFileChooser*, GtkFileFilter*);
extern int gtk_file_chooser_remove_shortcut_folder(GtkFileChooser*, char*, GError**);
extern int gtk_file_chooser_remove_shortcut_folder_uri(GtkFileChooser*, char*, GError**);
extern void gtk_file_chooser_select_all(GtkFileChooser*);
extern int gtk_file_chooser_select_file(GtkFileChooser*, GFile*, GError**);
extern int gtk_file_chooser_select_filename(GtkFileChooser*, char*);
extern int gtk_file_chooser_select_uri(GtkFileChooser*, char*);
extern void gtk_file_chooser_set_action(GtkFileChooser*, GtkFileChooserAction);
extern void gtk_file_chooser_set_create_folders(GtkFileChooser*, int);
extern int gtk_file_chooser_set_current_folder(GtkFileChooser*, char*);
extern int gtk_file_chooser_set_current_folder_file(GtkFileChooser*, GFile*, GError**);
extern int gtk_file_chooser_set_current_folder_uri(GtkFileChooser*, char*);
extern void gtk_file_chooser_set_current_name(GtkFileChooser*, char*);
extern void gtk_file_chooser_set_do_overwrite_confirmation(GtkFileChooser*, int);
extern void gtk_file_chooser_set_extra_widget(GtkFileChooser*, GtkWidget*);
extern int gtk_file_chooser_set_file(GtkFileChooser*, GFile*, GError**);
extern int gtk_file_chooser_set_filename(GtkFileChooser*, char*);
extern void gtk_file_chooser_set_filter(GtkFileChooser*, GtkFileFilter*);
extern void gtk_file_chooser_set_local_only(GtkFileChooser*, int);
extern void gtk_file_chooser_set_preview_widget(GtkFileChooser*, GtkWidget*);
extern void gtk_file_chooser_set_preview_widget_active(GtkFileChooser*, int);
extern void gtk_file_chooser_set_select_multiple(GtkFileChooser*, int);
extern void gtk_file_chooser_set_show_hidden(GtkFileChooser*, int);
extern int gtk_file_chooser_set_uri(GtkFileChooser*, char*);
extern void gtk_file_chooser_set_use_preview_label(GtkFileChooser*, int);
extern void gtk_file_chooser_unselect_all(GtkFileChooser*);
extern void gtk_file_chooser_unselect_file(GtkFileChooser*, GFile*);
extern void gtk_file_chooser_unselect_filename(GtkFileChooser*, char*);
extern void gtk_file_chooser_unselect_uri(GtkFileChooser*, char*);
extern GType gtk_file_chooser_get_type();
extern GtkWidget* gtk_file_chooser_button_new(char*, GtkFileChooserAction);
extern GtkWidget* gtk_file_chooser_button_new_with_dialog(GtkWidget*);
extern int gtk_file_chooser_button_get_focus_on_click(GtkFileChooserButton*);
extern char* gtk_file_chooser_button_get_title(GtkFileChooserButton*);
extern int32_t gtk_file_chooser_button_get_width_chars(GtkFileChooserButton*);
extern void gtk_file_chooser_button_set_focus_on_click(GtkFileChooserButton*, int);
extern void gtk_file_chooser_button_set_title(GtkFileChooserButton*, char*);
extern void gtk_file_chooser_button_set_width_chars(GtkFileChooserButton*, int32_t);
extern GType gtk_file_chooser_button_get_type();
extern GType gtk_file_chooser_dialog_get_type();
extern GtkWidget* gtk_file_chooser_widget_new(GtkFileChooserAction);
extern GType gtk_file_chooser_widget_get_type();
extern GtkFileFilter* gtk_file_filter_new();
extern void gtk_file_filter_add_custom(GtkFileFilter*, GtkFileFilterFlags, GtkFileFilterFunc, void*, GDestroyNotify);
#pragma GCC diagnostic ignored "-Wunused-function"
static void _gtk_file_filter_add_custom(GtkFileFilter* this, GtkFileFilterFlags arg0, void* gofunc) {
	if (gofunc) {
		gtk_file_filter_add_custom(this, arg0, _GtkFileFilterFunc_c_wrapper, gofunc, _c_callback_cleanup);
	} else {
		gtk_file_filter_add_custom(this, arg0, 0, 0, 0);
	}
}
extern void gtk_file_filter_add_mime_type(GtkFileFilter*, char*);
extern void gtk_file_filter_add_pattern(GtkFileFilter*, char*);
extern void gtk_file_filter_add_pixbuf_formats(GtkFileFilter*);
extern int gtk_file_filter_filter(GtkFileFilter*, GtkFileFilterInfo*);
extern char* gtk_file_filter_get_name(GtkFileFilter*);
extern GtkFileFilterFlags gtk_file_filter_get_needed(GtkFileFilter*);
extern void gtk_file_filter_set_name(GtkFileFilter*, char*);
extern GType gtk_file_filter_get_type();
extern GtkWidget* gtk_fixed_new();
extern void gtk_fixed_move(GtkFixed*, GtkWidget*, int32_t, int32_t);
extern void gtk_fixed_put(GtkFixed*, GtkWidget*, int32_t, int32_t);
extern GType gtk_fixed_get_type();
extern GtkWidget* gtk_font_button_new();
extern GtkWidget* gtk_font_button_new_with_font(char*);
extern char* gtk_font_button_get_font_name(GtkFontButton*);
extern int gtk_font_button_get_show_size(GtkFontButton*);
extern int gtk_font_button_get_show_style(GtkFontButton*);
extern char* gtk_font_button_get_title(GtkFontButton*);
extern int gtk_font_button_get_use_font(GtkFontButton*);
extern int gtk_font_button_get_use_size(GtkFontButton*);
extern int gtk_font_button_set_font_name(GtkFontButton*, char*);
extern void gtk_font_button_set_show_size(GtkFontButton*, int);
extern void gtk_font_button_set_show_style(GtkFontButton*, int);
extern void gtk_font_button_set_title(GtkFontButton*, char*);
extern void gtk_font_button_set_use_font(GtkFontButton*, int);
extern void gtk_font_button_set_use_size(GtkFontButton*, int);
extern GType gtk_font_button_get_type();
extern char* gtk_font_chooser_get_font(GtkFontChooser*);
extern PangoFontDescription* gtk_font_chooser_get_font_desc(GtkFontChooser*);
extern PangoFontFace* gtk_font_chooser_get_font_face(GtkFontChooser*);
extern PangoFontFamily* gtk_font_chooser_get_font_family(GtkFontChooser*);
extern int32_t gtk_font_chooser_get_font_size(GtkFontChooser*);
extern char* gtk_font_chooser_get_preview_text(GtkFontChooser*);
extern int gtk_font_chooser_get_show_preview_entry(GtkFontChooser*);
extern void gtk_font_chooser_set_filter_func(GtkFontChooser*, GtkFontFilterFunc, void*, GDestroyNotify);
#pragma GCC diagnostic ignored "-Wunused-function"
static void _gtk_font_chooser_set_filter_func(GtkFontChooser* this, void* gofunc) {
	if (gofunc) {
		gtk_font_chooser_set_filter_func(this, _GtkFontFilterFunc_c_wrapper, gofunc, _c_callback_cleanup);
	} else {
		gtk_font_chooser_set_filter_func(this, 0, 0, 0);
	}
}
extern void gtk_font_chooser_set_font(GtkFontChooser*, char*);
extern void gtk_font_chooser_set_font_desc(GtkFontChooser*, PangoFontDescription*);
extern void gtk_font_chooser_set_preview_text(GtkFontChooser*, char*);
extern void gtk_font_chooser_set_show_preview_entry(GtkFontChooser*, int);
extern GType gtk_font_chooser_get_type();
extern GtkWidget* gtk_font_chooser_dialog_new(char*, GtkWindow*);
extern GType gtk_font_chooser_dialog_get_type();
extern GtkWidget* gtk_font_chooser_widget_new();
extern GType gtk_font_chooser_widget_get_type();
extern GtkWidget* gtk_font_selection_new();
extern PangoFontFace* gtk_font_selection_get_face(GtkFontSelection*);
extern GtkWidget* gtk_font_selection_get_face_list(GtkFontSelection*);
extern PangoFontFamily* gtk_font_selection_get_family(GtkFontSelection*);
extern GtkWidget* gtk_font_selection_get_family_list(GtkFontSelection*);
extern char* gtk_font_selection_get_font_name(GtkFontSelection*);
extern GtkWidget* gtk_font_selection_get_preview_entry(GtkFontSelection*);
extern char* gtk_font_selection_get_preview_text(GtkFontSelection*);
extern int32_t gtk_font_selection_get_size(GtkFontSelection*);
extern GtkWidget* gtk_font_selection_get_size_entry(GtkFontSelection*);
extern GtkWidget* gtk_font_selection_get_size_list(GtkFontSelection*);
extern int gtk_font_selection_set_font_name(GtkFontSelection*, char*);
extern void gtk_font_selection_set_preview_text(GtkFontSelection*, char*);
extern GType gtk_font_selection_get_type();
extern GtkWidget* gtk_font_selection_dialog_new(char*);
extern GtkWidget* gtk_font_selection_dialog_get_cancel_button(GtkFontSelectionDialog*);
extern char* gtk_font_selection_dialog_get_font_name(GtkFontSelectionDialog*);
extern GtkWidget* gtk_font_selection_dialog_get_font_selection(GtkFontSelectionDialog*);
extern GtkWidget* gtk_font_selection_dialog_get_ok_button(GtkFontSelectionDialog*);
extern char* gtk_font_selection_dialog_get_preview_text(GtkFontSelectionDialog*);
extern int gtk_font_selection_dialog_set_font_name(GtkFontSelectionDialog*, char*);
extern void gtk_font_selection_dialog_set_preview_text(GtkFontSelectionDialog*, char*);
extern GType gtk_font_selection_dialog_get_type();
extern GtkWidget* gtk_frame_new(char*);
extern char* gtk_frame_get_label(GtkFrame*);
extern void gtk_frame_get_label_align(GtkFrame*, float*, float*);
extern GtkWidget* gtk_frame_get_label_widget(GtkFrame*);
extern GtkShadowType gtk_frame_get_shadow_type(GtkFrame*);
extern void gtk_frame_set_label(GtkFrame*, char*);
extern void gtk_frame_set_label_align(GtkFrame*, float, float);
extern void gtk_frame_set_label_widget(GtkFrame*, GtkWidget*);
extern void gtk_frame_set_shadow_type(GtkFrame*, GtkShadowType);
extern GType gtk_frame_get_type();
extern GtkGradient* gtk_gradient_new_linear(double, double, double, double);
extern GtkGradient* gtk_gradient_new_radial(double, double, double, double, double, double);
extern void gtk_gradient_add_color_stop(GtkGradient*, double, GtkSymbolicColor*);
extern GtkGradient* gtk_gradient_ref(GtkGradient*);
extern int gtk_gradient_resolve(GtkGradient*, GtkStyleProperties*, cairoPattern**);
extern char* gtk_gradient_to_string(GtkGradient*);
extern void gtk_gradient_unref(GtkGradient*);
extern GtkWidget* gtk_grid_new();
extern void gtk_grid_attach(GtkGrid*, GtkWidget*, int32_t, int32_t, int32_t, int32_t);
extern void gtk_grid_attach_next_to(GtkGrid*, GtkWidget*, GtkWidget*, GtkPositionType, int32_t, int32_t);
extern int gtk_grid_get_column_homogeneous(GtkGrid*);
extern uint32_t gtk_grid_get_column_spacing(GtkGrid*);
extern int gtk_grid_get_row_homogeneous(GtkGrid*);
extern uint32_t gtk_grid_get_row_spacing(GtkGrid*);
extern void gtk_grid_insert_column(GtkGrid*, int32_t);
extern void gtk_grid_insert_next_to(GtkGrid*, GtkWidget*, GtkPositionType);
extern void gtk_grid_insert_row(GtkGrid*, int32_t);
extern void gtk_grid_set_column_homogeneous(GtkGrid*, int);
extern void gtk_grid_set_column_spacing(GtkGrid*, uint32_t);
extern void gtk_grid_set_row_homogeneous(GtkGrid*, int);
extern void gtk_grid_set_row_spacing(GtkGrid*, uint32_t);
extern GType gtk_grid_get_type();
extern GtkWidget* gtk_hbox_new(int, int32_t);
extern GType gtk_hbox_get_type();
extern GtkWidget* gtk_hbutton_box_new();
extern GType gtk_hbutton_box_get_type();
extern GtkWidget* gtk_hpaned_new();
extern GType gtk_hpaned_get_type();
extern GtkWidget* gtk_hsv_new();
extern void gtk_hsv_to_rgb(double, double, double, double*, double*, double*);
extern void gtk_hsv_get_color(GtkHSV*, double*, double*, double*);
extern void gtk_hsv_get_metrics(GtkHSV*, int32_t*, int32_t*);
extern int gtk_hsv_is_adjusting(GtkHSV*);
extern void gtk_hsv_set_color(GtkHSV*, double, double, double);
extern void gtk_hsv_set_metrics(GtkHSV*, int32_t, int32_t);
extern GType gtk_hsv_get_type();
extern GtkWidget* gtk_hscale_new(GtkAdjustment*);
extern GtkWidget* gtk_hscale_new_with_range(double, double, double);
extern GType gtk_hscale_get_type();
extern GtkWidget* gtk_hscrollbar_new(GtkAdjustment*);
extern GType gtk_hscrollbar_get_type();
extern GtkWidget* gtk_hseparator_new();
extern GType gtk_hseparator_get_type();
extern GtkWidget* gtk_handle_box_new();
extern int gtk_handle_box_get_child_detached(GtkHandleBox*);
extern GtkPositionType gtk_handle_box_get_handle_position(GtkHandleBox*);
extern GtkShadowType gtk_handle_box_get_shadow_type(GtkHandleBox*);
extern GtkPositionType gtk_handle_box_get_snap_edge(GtkHandleBox*);
extern void gtk_handle_box_set_handle_position(GtkHandleBox*, GtkPositionType);
extern void gtk_handle_box_set_shadow_type(GtkHandleBox*, GtkShadowType);
extern void gtk_handle_box_set_snap_edge(GtkHandleBox*, GtkPositionType);
extern GType gtk_handle_box_get_type();
extern int gtk_im_context_delete_surrounding(GtkIMContext*, int32_t, int32_t);
extern int gtk_im_context_filter_keypress(GtkIMContext*, GdkEventKey*);
extern void gtk_im_context_focus_in(GtkIMContext*);
extern void gtk_im_context_focus_out(GtkIMContext*);
extern void gtk_im_context_get_preedit_string(GtkIMContext*, char**, PangoAttrList**, int32_t*);
extern int gtk_im_context_get_surrounding(GtkIMContext*, char**, int32_t*);
extern void gtk_im_context_reset(GtkIMContext*);
extern void gtk_im_context_set_client_window(GtkIMContext*, GdkWindow*);
extern void gtk_im_context_set_cursor_location(GtkIMContext*, cairoRectangleInt*);
extern void gtk_im_context_set_surrounding(GtkIMContext*, char*, int32_t, int32_t);
extern void gtk_im_context_set_use_preedit(GtkIMContext*, int);
extern GType gtk_im_context_get_type();
extern GtkIMContext* gtk_im_context_simple_new();
extern GType gtk_im_context_simple_get_type();
extern GtkIMContext* gtk_im_multicontext_new();
extern void gtk_im_multicontext_append_menuitems(GtkIMMulticontext*, GtkMenuShell*);
extern char* gtk_im_multicontext_get_context_id(GtkIMMulticontext*);
extern void gtk_im_multicontext_set_context_id(GtkIMMulticontext*, char*);
extern GType gtk_im_multicontext_get_type();
extern GtkIconFactory* gtk_icon_factory_new();
extern GtkIconSet* gtk_icon_factory_lookup_default(char*);
extern void gtk_icon_factory_add(GtkIconFactory*, char*, GtkIconSet*);
extern void gtk_icon_factory_add_default(GtkIconFactory*);
extern GtkIconSet* gtk_icon_factory_lookup(GtkIconFactory*, char*);
extern void gtk_icon_factory_remove_default(GtkIconFactory*);
extern GType gtk_icon_factory_get_type();
extern GtkIconInfo* gtk_icon_info_new_for_pixbuf(GtkIconTheme*, GdkPixbuf*);
extern GtkIconInfo* gtk_icon_info_copy(GtkIconInfo*);
extern void gtk_icon_info_free(GtkIconInfo*);
extern int gtk_icon_info_get_attach_points(GtkIconInfo*, GdkPoint**, int32_t*);
extern int32_t gtk_icon_info_get_base_size(GtkIconInfo*);
extern GdkPixbuf* gtk_icon_info_get_builtin_pixbuf(GtkIconInfo*);
extern char* gtk_icon_info_get_display_name(GtkIconInfo*);
extern int gtk_icon_info_get_embedded_rect(GtkIconInfo*, cairoRectangleInt*);
extern char* gtk_icon_info_get_filename(GtkIconInfo*);
extern GdkPixbuf* gtk_icon_info_load_icon(GtkIconInfo*, GError**);
extern GdkPixbuf* gtk_icon_info_load_symbolic(GtkIconInfo*, GdkRGBA*, GdkRGBA*, GdkRGBA*, GdkRGBA*, int*, GError**);
extern GdkPixbuf* gtk_icon_info_load_symbolic_for_context(GtkIconInfo*, GtkStyleContext*, int*, GError**);
extern GdkPixbuf* gtk_icon_info_load_symbolic_for_style(GtkIconInfo*, GtkStyle*, GtkStateType, int*, GError**);
extern void gtk_icon_info_set_raw_coordinates(GtkIconInfo*, int);
extern GtkIconSet* gtk_icon_set_new();
extern GtkIconSet* gtk_icon_set_new_from_pixbuf(GdkPixbuf*);
extern void gtk_icon_set_add_source(GtkIconSet*, GtkIconSource*);
extern GtkIconSet* gtk_icon_set_copy(GtkIconSet*);
extern void gtk_icon_set_get_sizes(GtkIconSet*, int32_t**, int32_t*);
extern GtkIconSet* gtk_icon_set_ref(GtkIconSet*);
extern GdkPixbuf* gtk_icon_set_render_icon(GtkIconSet*, GtkStyle*, GtkTextDirection, GtkStateType, int32_t, GtkWidget*, char*);
extern GdkPixbuf* gtk_icon_set_render_icon_pixbuf(GtkIconSet*, GtkStyleContext*, int32_t);
extern void gtk_icon_set_unref(GtkIconSet*);
extern GtkIconSource* gtk_icon_source_new();
extern GtkIconSource* gtk_icon_source_copy(GtkIconSource*);
extern void gtk_icon_source_free(GtkIconSource*);
extern GtkTextDirection gtk_icon_source_get_direction(GtkIconSource*);
extern int gtk_icon_source_get_direction_wildcarded(GtkIconSource*);
extern char* gtk_icon_source_get_filename(GtkIconSource*);
extern char* gtk_icon_source_get_icon_name(GtkIconSource*);
extern GdkPixbuf* gtk_icon_source_get_pixbuf(GtkIconSource*);
extern int32_t gtk_icon_source_get_size(GtkIconSource*);
extern int gtk_icon_source_get_size_wildcarded(GtkIconSource*);
extern GtkStateType gtk_icon_source_get_state(GtkIconSource*);
extern int gtk_icon_source_get_state_wildcarded(GtkIconSource*);
extern void gtk_icon_source_set_direction(GtkIconSource*, GtkTextDirection);
extern void gtk_icon_source_set_direction_wildcarded(GtkIconSource*, int);
extern void gtk_icon_source_set_filename(GtkIconSource*, char*);
extern void gtk_icon_source_set_icon_name(GtkIconSource*, char*);
extern void gtk_icon_source_set_pixbuf(GtkIconSource*, GdkPixbuf*);
extern void gtk_icon_source_set_size(GtkIconSource*, int32_t);
extern void gtk_icon_source_set_size_wildcarded(GtkIconSource*, int);
extern void gtk_icon_source_set_state(GtkIconSource*, GtkStateType);
extern void gtk_icon_source_set_state_wildcarded(GtkIconSource*, int);
extern GtkIconTheme* gtk_icon_theme_new();
extern void gtk_icon_theme_add_builtin_icon(char*, int32_t, GdkPixbuf*);
extern GtkIconTheme* gtk_icon_theme_get_default();
extern GtkIconTheme* gtk_icon_theme_get_for_screen(GdkScreen*);
extern void gtk_icon_theme_append_search_path(GtkIconTheme*, char*);
extern GtkIconInfo* gtk_icon_theme_choose_icon(GtkIconTheme*, char**, int32_t, GtkIconLookupFlags);
extern char* gtk_icon_theme_get_example_icon_name(GtkIconTheme*);
extern int32_t* gtk_icon_theme_get_icon_sizes(GtkIconTheme*, char*);
extern void gtk_icon_theme_get_search_path(GtkIconTheme*, char***, int32_t*);
extern int gtk_icon_theme_has_icon(GtkIconTheme*, char*);
extern GList* gtk_icon_theme_list_contexts(GtkIconTheme*);
extern GList* gtk_icon_theme_list_icons(GtkIconTheme*, char*);
extern GdkPixbuf* gtk_icon_theme_load_icon(GtkIconTheme*, char*, int32_t, GtkIconLookupFlags, GError**);
extern GtkIconInfo* gtk_icon_theme_lookup_by_gicon(GtkIconTheme*, GIcon*, int32_t, GtkIconLookupFlags);
extern GtkIconInfo* gtk_icon_theme_lookup_icon(GtkIconTheme*, char*, int32_t, GtkIconLookupFlags);
extern void gtk_icon_theme_prepend_search_path(GtkIconTheme*, char*);
extern int gtk_icon_theme_rescan_if_needed(GtkIconTheme*);
extern void gtk_icon_theme_set_custom_theme(GtkIconTheme*, char*);
extern void gtk_icon_theme_set_screen(GtkIconTheme*, GdkScreen*);
extern void gtk_icon_theme_set_search_path(GtkIconTheme*, char**, int32_t);
extern GType gtk_icon_theme_get_type();
extern GtkWidget* gtk_icon_view_new();
extern GtkWidget* gtk_icon_view_new_with_area(GtkCellArea*);
extern GtkWidget* gtk_icon_view_new_with_model(GtkTreeModel*);
extern void gtk_icon_view_convert_widget_to_bin_window_coords(GtkIconView*, int32_t, int32_t, int32_t*, int32_t*);
extern cairoSurface* gtk_icon_view_create_drag_icon(GtkIconView*, GtkTreePath*);
extern void gtk_icon_view_enable_model_drag_dest(GtkIconView*, GtkTargetEntry*, int32_t, GdkDragAction);
extern void gtk_icon_view_enable_model_drag_source(GtkIconView*, GdkModifierType, GtkTargetEntry*, int32_t, GdkDragAction);
extern int32_t gtk_icon_view_get_column_spacing(GtkIconView*);
extern int32_t gtk_icon_view_get_columns(GtkIconView*);
extern int gtk_icon_view_get_cursor(GtkIconView*, GtkTreePath**, GtkCellRenderer**);
extern int gtk_icon_view_get_dest_item_at_pos(GtkIconView*, int32_t, int32_t, GtkTreePath**, GtkIconViewDropPosition*);
extern void gtk_icon_view_get_drag_dest_item(GtkIconView*, GtkTreePath**, GtkIconViewDropPosition*);
extern int gtk_icon_view_get_item_at_pos(GtkIconView*, int32_t, int32_t, GtkTreePath**, GtkCellRenderer**);
extern int32_t gtk_icon_view_get_item_column(GtkIconView*, GtkTreePath*);
extern GtkOrientation gtk_icon_view_get_item_orientation(GtkIconView*);
extern int32_t gtk_icon_view_get_item_padding(GtkIconView*);
extern int32_t gtk_icon_view_get_item_row(GtkIconView*, GtkTreePath*);
extern int32_t gtk_icon_view_get_item_width(GtkIconView*);
extern int32_t gtk_icon_view_get_margin(GtkIconView*);
extern int32_t gtk_icon_view_get_markup_column(GtkIconView*);
extern GtkTreeModel* gtk_icon_view_get_model(GtkIconView*);
extern GtkTreePath* gtk_icon_view_get_path_at_pos(GtkIconView*, int32_t, int32_t);
extern int32_t gtk_icon_view_get_pixbuf_column(GtkIconView*);
extern int gtk_icon_view_get_reorderable(GtkIconView*);
extern int32_t gtk_icon_view_get_row_spacing(GtkIconView*);
extern GList* gtk_icon_view_get_selected_items(GtkIconView*);
extern GtkSelectionMode gtk_icon_view_get_selection_mode(GtkIconView*);
extern int32_t gtk_icon_view_get_spacing(GtkIconView*);
extern int32_t gtk_icon_view_get_text_column(GtkIconView*);
extern int32_t gtk_icon_view_get_tooltip_column(GtkIconView*);
extern int gtk_icon_view_get_tooltip_context(GtkIconView*, int32_t*, int32_t*, int, GtkTreeModel**, GtkTreePath**, GtkTreeIter*);
extern int gtk_icon_view_get_visible_range(GtkIconView*, GtkTreePath**, GtkTreePath**);
extern void gtk_icon_view_item_activated(GtkIconView*, GtkTreePath*);
extern int gtk_icon_view_path_is_selected(GtkIconView*, GtkTreePath*);
extern void gtk_icon_view_scroll_to_path(GtkIconView*, GtkTreePath*, int, float, float);
extern void gtk_icon_view_select_all(GtkIconView*);
extern void gtk_icon_view_select_path(GtkIconView*, GtkTreePath*);
extern void gtk_icon_view_selected_foreach(GtkIconView*, GtkIconViewForeachFunc, void*);
#pragma GCC diagnostic ignored "-Wunused-function"
static void _gtk_icon_view_selected_foreach(GtkIconView* this, void* gofunc) {
	if (gofunc) {
		gtk_icon_view_selected_foreach(this, _GtkIconViewForeachFunc_c_wrapper, gofunc);
	} else {
		gtk_icon_view_selected_foreach(this, 0, 0);
	}
}
extern void gtk_icon_view_set_column_spacing(GtkIconView*, int32_t);
extern void gtk_icon_view_set_columns(GtkIconView*, int32_t);
extern void gtk_icon_view_set_cursor(GtkIconView*, GtkTreePath*, GtkCellRenderer*, int);
extern void gtk_icon_view_set_drag_dest_item(GtkIconView*, GtkTreePath*, GtkIconViewDropPosition);
extern void gtk_icon_view_set_item_orientation(GtkIconView*, GtkOrientation);
extern void gtk_icon_view_set_item_padding(GtkIconView*, int32_t);
extern void gtk_icon_view_set_item_width(GtkIconView*, int32_t);
extern void gtk_icon_view_set_margin(GtkIconView*, int32_t);
extern void gtk_icon_view_set_markup_column(GtkIconView*, int32_t);
extern void gtk_icon_view_set_model(GtkIconView*, GtkTreeModel*);
extern void gtk_icon_view_set_pixbuf_column(GtkIconView*, int32_t);
extern void gtk_icon_view_set_reorderable(GtkIconView*, int);
extern void gtk_icon_view_set_row_spacing(GtkIconView*, int32_t);
extern void gtk_icon_view_set_selection_mode(GtkIconView*, GtkSelectionMode);
extern void gtk_icon_view_set_spacing(GtkIconView*, int32_t);
extern void gtk_icon_view_set_text_column(GtkIconView*, int32_t);
extern void gtk_icon_view_set_tooltip_cell(GtkIconView*, GtkTooltip*, GtkTreePath*, GtkCellRenderer*);
extern void gtk_icon_view_set_tooltip_column(GtkIconView*, int32_t);
extern void gtk_icon_view_set_tooltip_item(GtkIconView*, GtkTooltip*, GtkTreePath*);
extern void gtk_icon_view_unselect_all(GtkIconView*);
extern void gtk_icon_view_unselect_path(GtkIconView*, GtkTreePath*);
extern void gtk_icon_view_unset_model_drag_dest(GtkIconView*);
extern void gtk_icon_view_unset_model_drag_source(GtkIconView*);
extern GType gtk_icon_view_get_type();
extern GtkWidget* gtk_image_new();
extern GtkWidget* gtk_image_new_from_animation(GdkPixbufAnimation*);
extern GtkWidget* gtk_image_new_from_file(char*);
extern GtkWidget* gtk_image_new_from_gicon(GIcon*, int32_t);
extern GtkWidget* gtk_image_new_from_icon_name(char*, int32_t);
extern GtkWidget* gtk_image_new_from_icon_set(GtkIconSet*, int32_t);
extern GtkWidget* gtk_image_new_from_pixbuf(GdkPixbuf*);
extern GtkWidget* gtk_image_new_from_stock(char*, int32_t);
extern void gtk_image_clear(GtkImage*);
extern GdkPixbufAnimation* gtk_image_get_animation(GtkImage*);
extern void gtk_image_get_gicon(GtkImage*, GIcon**, int32_t*);
extern void gtk_image_get_icon_name(GtkImage*, char**, int32_t*);
extern void gtk_image_get_icon_set(GtkImage*, GtkIconSet**, int32_t*);
extern GdkPixbuf* gtk_image_get_pixbuf(GtkImage*);
extern int32_t gtk_image_get_pixel_size(GtkImage*);
extern void gtk_image_get_stock(GtkImage*, char**, int32_t*);
extern GtkImageType gtk_image_get_storage_type(GtkImage*);
extern void gtk_image_set_from_animation(GtkImage*, GdkPixbufAnimation*);
extern void gtk_image_set_from_file(GtkImage*, char*);
extern void gtk_image_set_from_gicon(GtkImage*, GIcon*, int32_t);
extern void gtk_image_set_from_icon_name(GtkImage*, char*, int32_t);
extern void gtk_image_set_from_icon_set(GtkImage*, GtkIconSet*, int32_t);
extern void gtk_image_set_from_pixbuf(GtkImage*, GdkPixbuf*);
extern void gtk_image_set_from_stock(GtkImage*, char*, int32_t);
extern void gtk_image_set_pixel_size(GtkImage*, int32_t);
extern GType gtk_image_get_type();
extern GtkWidget* gtk_image_menu_item_new();
extern GtkWidget* gtk_image_menu_item_new_from_stock(char*, GtkAccelGroup*);
extern GtkWidget* gtk_image_menu_item_new_with_label(char*);
extern GtkWidget* gtk_image_menu_item_new_with_mnemonic(char*);
extern int gtk_image_menu_item_get_always_show_image(GtkImageMenuItem*);
extern GtkWidget* gtk_image_menu_item_get_image(GtkImageMenuItem*);
extern int gtk_image_menu_item_get_use_stock(GtkImageMenuItem*);
extern void gtk_image_menu_item_set_accel_group(GtkImageMenuItem*, GtkAccelGroup*);
extern void gtk_image_menu_item_set_always_show_image(GtkImageMenuItem*, int);
extern void gtk_image_menu_item_set_image(GtkImageMenuItem*, GtkWidget*);
extern void gtk_image_menu_item_set_use_stock(GtkImageMenuItem*, int);
extern GType gtk_image_menu_item_get_type();
extern GtkWidget* gtk_info_bar_new();
extern void gtk_info_bar_add_action_widget(GtkInfoBar*, GtkWidget*, int32_t);
extern GtkWidget* gtk_info_bar_add_button(GtkInfoBar*, char*, int32_t);
extern GtkWidget* gtk_info_bar_get_action_area(GtkInfoBar*);
extern GtkWidget* gtk_info_bar_get_content_area(GtkInfoBar*);
extern GtkMessageType gtk_info_bar_get_message_type(GtkInfoBar*);
extern void gtk_info_bar_response(GtkInfoBar*, int32_t);
extern void gtk_info_bar_set_default_response(GtkInfoBar*, int32_t);
extern void gtk_info_bar_set_message_type(GtkInfoBar*, GtkMessageType);
extern void gtk_info_bar_set_response_sensitive(GtkInfoBar*, int32_t, int);
extern GType gtk_info_bar_get_type();
extern GtkWidget* gtk_invisible_new();
extern GtkWidget* gtk_invisible_new_for_screen(GdkScreen*);
extern GdkScreen* gtk_invisible_get_screen(GtkInvisible*);
extern void gtk_invisible_set_screen(GtkInvisible*, GdkScreen*);
extern GType gtk_invisible_get_type();
extern GtkWidget* gtk_label_new(char*);
extern GtkWidget* gtk_label_new_with_mnemonic(char*);
extern double gtk_label_get_angle(GtkLabel*);
extern PangoAttrList* gtk_label_get_attributes(GtkLabel*);
extern char* gtk_label_get_current_uri(GtkLabel*);
extern PangoEllipsizeMode gtk_label_get_ellipsize(GtkLabel*);
extern GtkJustification gtk_label_get_justify(GtkLabel*);
extern char* gtk_label_get_label(GtkLabel*);
extern PangoLayout* gtk_label_get_layout(GtkLabel*);
extern void gtk_label_get_layout_offsets(GtkLabel*, int32_t*, int32_t*);
extern int gtk_label_get_line_wrap(GtkLabel*);
extern PangoWrapMode gtk_label_get_line_wrap_mode(GtkLabel*);
extern int32_t gtk_label_get_max_width_chars(GtkLabel*);
extern uint32_t gtk_label_get_mnemonic_keyval(GtkLabel*);
extern GtkWidget* gtk_label_get_mnemonic_widget(GtkLabel*);
extern int gtk_label_get_selectable(GtkLabel*);
extern int gtk_label_get_selection_bounds(GtkLabel*, int32_t*, int32_t*);
extern int gtk_label_get_single_line_mode(GtkLabel*);
extern char* gtk_label_get_text(GtkLabel*);
extern int gtk_label_get_track_visited_links(GtkLabel*);
extern int gtk_label_get_use_markup(GtkLabel*);
extern int gtk_label_get_use_underline(GtkLabel*);
extern int32_t gtk_label_get_width_chars(GtkLabel*);
extern void gtk_label_select_region(GtkLabel*, int32_t, int32_t);
extern void gtk_label_set_angle(GtkLabel*, double);
extern void gtk_label_set_attributes(GtkLabel*, PangoAttrList*);
extern void gtk_label_set_ellipsize(GtkLabel*, PangoEllipsizeMode);
extern void gtk_label_set_justify(GtkLabel*, GtkJustification);
extern void gtk_label_set_label(GtkLabel*, char*);
extern void gtk_label_set_line_wrap(GtkLabel*, int);
extern void gtk_label_set_line_wrap_mode(GtkLabel*, PangoWrapMode);
extern void gtk_label_set_markup(GtkLabel*, char*);
extern void gtk_label_set_markup_with_mnemonic(GtkLabel*, char*);
extern void gtk_label_set_max_width_chars(GtkLabel*, int32_t);
extern void gtk_label_set_mnemonic_widget(GtkLabel*, GtkWidget*);
extern void gtk_label_set_pattern(GtkLabel*, char*);
extern void gtk_label_set_selectable(GtkLabel*, int);
extern void gtk_label_set_single_line_mode(GtkLabel*, int);
extern void gtk_label_set_text(GtkLabel*, char*);
extern void gtk_label_set_text_with_mnemonic(GtkLabel*, char*);
extern void gtk_label_set_track_visited_links(GtkLabel*, int);
extern void gtk_label_set_use_markup(GtkLabel*, int);
extern void gtk_label_set_use_underline(GtkLabel*, int);
extern void gtk_label_set_width_chars(GtkLabel*, int32_t);
extern GType gtk_label_get_type();
extern GtkWidget* gtk_layout_new(GtkAdjustment*, GtkAdjustment*);
extern GdkWindow* gtk_layout_get_bin_window(GtkLayout*);
extern GtkAdjustment* gtk_layout_get_hadjustment(GtkLayout*);
extern void gtk_layout_get_size(GtkLayout*, uint32_t*, uint32_t*);
extern GtkAdjustment* gtk_layout_get_vadjustment(GtkLayout*);
extern void gtk_layout_move(GtkLayout*, GtkWidget*, int32_t, int32_t);
extern void gtk_layout_put(GtkLayout*, GtkWidget*, int32_t, int32_t);
extern void gtk_layout_set_hadjustment(GtkLayout*, GtkAdjustment*);
extern void gtk_layout_set_size(GtkLayout*, uint32_t, uint32_t);
extern void gtk_layout_set_vadjustment(GtkLayout*, GtkAdjustment*);
extern GType gtk_layout_get_type();
extern GtkWidget* gtk_link_button_new(char*);
extern GtkWidget* gtk_link_button_new_with_label(char*, char*);
extern char* gtk_link_button_get_uri(GtkLinkButton*);
extern int gtk_link_button_get_visited(GtkLinkButton*);
extern void gtk_link_button_set_uri(GtkLinkButton*, char*);
extern void gtk_link_button_set_visited(GtkLinkButton*, int);
extern GType gtk_link_button_get_type();
extern GtkListStore* gtk_list_store_newv(int32_t, GType*);
extern void gtk_list_store_append(GtkListStore*, GtkTreeIter*);
extern void gtk_list_store_clear(GtkListStore*);
extern void gtk_list_store_insert(GtkListStore*, GtkTreeIter*, int32_t);
extern void gtk_list_store_insert_after(GtkListStore*, GtkTreeIter*, GtkTreeIter*);
extern void gtk_list_store_insert_before(GtkListStore*, GtkTreeIter*, GtkTreeIter*);
extern void gtk_list_store_insert_with_valuesv(GtkListStore*, GtkTreeIter*, int32_t, int32_t*, GValue*, int32_t);
extern int gtk_list_store_iter_is_valid(GtkListStore*, GtkTreeIter*);
extern void gtk_list_store_move_after(GtkListStore*, GtkTreeIter*, GtkTreeIter*);
extern void gtk_list_store_move_before(GtkListStore*, GtkTreeIter*, GtkTreeIter*);
extern void gtk_list_store_prepend(GtkListStore*, GtkTreeIter*);
extern int gtk_list_store_remove(GtkListStore*, GtkTreeIter*);
extern void gtk_list_store_set_column_types(GtkListStore*, int32_t, GType*);
extern void gtk_list_store_set_value(GtkListStore*, GtkTreeIter*, int32_t, GValue*);
extern void gtk_list_store_set_valuesv(GtkListStore*, GtkTreeIter*, int32_t*, GValue*, int32_t);
extern void gtk_list_store_swap(GtkListStore*, GtkTreeIter*, GtkTreeIter*);
extern GType gtk_list_store_get_type();
extern GtkWidget* gtk_lock_button_new(GPermission*);
extern void gtk_lock_button_set_permission(GtkLockButton*, GPermission*);
extern GType gtk_lock_button_get_type();
extern GtkWidget* gtk_menu_new();
extern GList* gtk_menu_get_for_attach_widget(GtkWidget*);
extern void gtk_menu_attach(GtkMenu*, GtkWidget*, uint32_t, uint32_t, uint32_t, uint32_t);
extern void gtk_menu_attach_to_widget(GtkMenu*, GtkWidget*, GtkMenuDetachFunc);
extern void gtk_menu_detach(GtkMenu*);
extern GtkAccelGroup* gtk_menu_get_accel_group(GtkMenu*);
extern char* gtk_menu_get_accel_path(GtkMenu*);
extern GtkWidget* gtk_menu_get_active(GtkMenu*);
extern GtkWidget* gtk_menu_get_attach_widget(GtkMenu*);
extern int32_t gtk_menu_get_monitor(GtkMenu*);
extern int gtk_menu_get_reserve_toggle_size(GtkMenu*);
extern int gtk_menu_get_tearoff_state(GtkMenu*);
extern char* gtk_menu_get_title(GtkMenu*);
extern void gtk_menu_popdown(GtkMenu*);
extern void gtk_menu_popup_for_device(GtkMenu*, GdkDevice*, GtkWidget*, GtkWidget*, GtkMenuPositionFunc, void*, GDestroyNotify, uint32_t, uint32_t);
#pragma GCC diagnostic ignored "-Wunused-function"
static void _gtk_menu_popup_for_device(GtkMenu* this, GdkDevice* arg0, GtkWidget* arg1, GtkWidget* arg2, void* gofunc, uint32_t arg6, uint32_t arg7) {
	if (gofunc) {
		gtk_menu_popup_for_device(this, arg0, arg1, arg2, _GtkMenuPositionFunc_c_wrapper, gofunc, _c_callback_cleanup, arg6, arg7);
	} else {
		gtk_menu_popup_for_device(this, arg0, arg1, arg2, 0, 0, 0, arg6, arg7);
	}
}
extern void gtk_menu_reorder_child(GtkMenu*, GtkWidget*, int32_t);
extern void gtk_menu_reposition(GtkMenu*);
extern void gtk_menu_set_accel_group(GtkMenu*, GtkAccelGroup*);
extern void gtk_menu_set_accel_path(GtkMenu*, char*);
extern void gtk_menu_set_active(GtkMenu*, uint32_t);
extern void gtk_menu_set_monitor(GtkMenu*, int32_t);
extern void gtk_menu_set_reserve_toggle_size(GtkMenu*, int);
extern void gtk_menu_set_screen(GtkMenu*, GdkScreen*);
extern void gtk_menu_set_tearoff_state(GtkMenu*, int);
extern void gtk_menu_set_title(GtkMenu*, char*);
extern GType gtk_menu_get_type();
extern GtkWidget* gtk_menu_bar_new();
extern GtkPackDirection gtk_menu_bar_get_child_pack_direction(GtkMenuBar*);
extern GtkPackDirection gtk_menu_bar_get_pack_direction(GtkMenuBar*);
extern void gtk_menu_bar_set_child_pack_direction(GtkMenuBar*, GtkPackDirection);
extern void gtk_menu_bar_set_pack_direction(GtkMenuBar*, GtkPackDirection);
extern GType gtk_menu_bar_get_type();
extern GtkWidget* gtk_menu_item_new();
extern GtkWidget* gtk_menu_item_new_with_label(char*);
extern GtkWidget* gtk_menu_item_new_with_mnemonic(char*);
extern void gtk_menu_item_activate(GtkMenuItem*);
extern void gtk_menu_item_deselect(GtkMenuItem*);
extern char* gtk_menu_item_get_accel_path(GtkMenuItem*);
extern char* gtk_menu_item_get_label(GtkMenuItem*);
extern int gtk_menu_item_get_reserve_indicator(GtkMenuItem*);
extern int gtk_menu_item_get_right_justified(GtkMenuItem*);
extern GtkWidget* gtk_menu_item_get_submenu(GtkMenuItem*);
extern int gtk_menu_item_get_use_underline(GtkMenuItem*);
extern void gtk_menu_item_select(GtkMenuItem*);
extern void gtk_menu_item_set_accel_path(GtkMenuItem*, char*);
extern void gtk_menu_item_set_label(GtkMenuItem*, char*);
extern void gtk_menu_item_set_reserve_indicator(GtkMenuItem*, int);
extern void gtk_menu_item_set_right_justified(GtkMenuItem*, int);
extern void gtk_menu_item_set_submenu(GtkMenuItem*, GtkWidget*);
extern void gtk_menu_item_set_use_underline(GtkMenuItem*, int);
extern void gtk_menu_item_toggle_size_allocate(GtkMenuItem*, int32_t);
extern void gtk_menu_item_toggle_size_request(GtkMenuItem*, int32_t*);
extern GType gtk_menu_item_get_type();
extern void gtk_menu_shell_activate_item(GtkMenuShell*, GtkWidget*, int);
extern void gtk_menu_shell_append(GtkMenuShell*, GtkWidget*);
extern void gtk_menu_shell_cancel(GtkMenuShell*);
extern void gtk_menu_shell_deactivate(GtkMenuShell*);
extern void gtk_menu_shell_deselect(GtkMenuShell*);
extern GtkWidget* gtk_menu_shell_get_parent_shell(GtkMenuShell*);
extern GtkWidget* gtk_menu_shell_get_selected_item(GtkMenuShell*);
extern int gtk_menu_shell_get_take_focus(GtkMenuShell*);
extern void gtk_menu_shell_insert(GtkMenuShell*, GtkWidget*, int32_t);
extern void gtk_menu_shell_prepend(GtkMenuShell*, GtkWidget*);
extern void gtk_menu_shell_select_first(GtkMenuShell*, int);
extern void gtk_menu_shell_select_item(GtkMenuShell*, GtkWidget*);
extern void gtk_menu_shell_set_take_focus(GtkMenuShell*, int);
extern GType gtk_menu_shell_get_type();
extern GtkToolItem* gtk_menu_tool_button_new(GtkWidget*, char*);
extern GtkToolItem* gtk_menu_tool_button_new_from_stock(char*);
extern GtkWidget* gtk_menu_tool_button_get_menu(GtkMenuToolButton*);
extern void gtk_menu_tool_button_set_arrow_tooltip_markup(GtkMenuToolButton*, char*);
extern void gtk_menu_tool_button_set_arrow_tooltip_text(GtkMenuToolButton*, char*);
extern void gtk_menu_tool_button_set_menu(GtkMenuToolButton*, GtkWidget*);
extern GType gtk_menu_tool_button_get_type();
extern GtkWidget* gtk_message_dialog_get_image(GtkMessageDialog*);
extern GtkWidget* gtk_message_dialog_get_message_area(GtkMessageDialog*);
extern void gtk_message_dialog_set_image(GtkMessageDialog*, GtkWidget*);
extern void gtk_message_dialog_set_markup(GtkMessageDialog*, char*);
extern GType gtk_message_dialog_get_type();
extern void gtk_misc_get_alignment(GtkMisc*, float*, float*);
extern void gtk_misc_get_padding(GtkMisc*, int32_t*, int32_t*);
extern void gtk_misc_set_alignment(GtkMisc*, float, float);
extern void gtk_misc_set_padding(GtkMisc*, int32_t, int32_t);
extern GType gtk_misc_get_type();
extern GMountOperation* gtk_mount_operation_new(GtkWindow*);
extern GtkWindow* gtk_mount_operation_get_parent(GtkMountOperation*);
extern GdkScreen* gtk_mount_operation_get_screen(GtkMountOperation*);
extern int gtk_mount_operation_is_showing(GtkMountOperation*);
extern void gtk_mount_operation_set_parent(GtkMountOperation*, GtkWindow*);
extern void gtk_mount_operation_set_screen(GtkMountOperation*, GdkScreen*);
extern GType gtk_mount_operation_get_type();
extern GtkWidget* gtk_notebook_new();
extern int32_t gtk_notebook_append_page(GtkNotebook*, GtkWidget*, GtkWidget*);
extern int32_t gtk_notebook_append_page_menu(GtkNotebook*, GtkWidget*, GtkWidget*, GtkWidget*);
extern GtkWidget* gtk_notebook_get_action_widget(GtkNotebook*, GtkPackType);
extern int32_t gtk_notebook_get_current_page(GtkNotebook*);
extern char* gtk_notebook_get_group_name(GtkNotebook*);
extern GtkWidget* gtk_notebook_get_menu_label(GtkNotebook*, GtkWidget*);
extern char* gtk_notebook_get_menu_label_text(GtkNotebook*, GtkWidget*);
extern int32_t gtk_notebook_get_n_pages(GtkNotebook*);
extern GtkWidget* gtk_notebook_get_nth_page(GtkNotebook*, int32_t);
extern int gtk_notebook_get_scrollable(GtkNotebook*);
extern int gtk_notebook_get_show_border(GtkNotebook*);
extern int gtk_notebook_get_show_tabs(GtkNotebook*);
extern int gtk_notebook_get_tab_detachable(GtkNotebook*, GtkWidget*);
extern uint16_t gtk_notebook_get_tab_hborder(GtkNotebook*);
extern GtkWidget* gtk_notebook_get_tab_label(GtkNotebook*, GtkWidget*);
extern char* gtk_notebook_get_tab_label_text(GtkNotebook*, GtkWidget*);
extern GtkPositionType gtk_notebook_get_tab_pos(GtkNotebook*);
extern int gtk_notebook_get_tab_reorderable(GtkNotebook*, GtkWidget*);
extern uint16_t gtk_notebook_get_tab_vborder(GtkNotebook*);
extern int32_t gtk_notebook_insert_page(GtkNotebook*, GtkWidget*, GtkWidget*, int32_t);
extern int32_t gtk_notebook_insert_page_menu(GtkNotebook*, GtkWidget*, GtkWidget*, GtkWidget*, int32_t);
extern void gtk_notebook_next_page(GtkNotebook*);
extern int32_t gtk_notebook_page_num(GtkNotebook*, GtkWidget*);
extern void gtk_notebook_popup_disable(GtkNotebook*);
extern void gtk_notebook_popup_enable(GtkNotebook*);
extern int32_t gtk_notebook_prepend_page(GtkNotebook*, GtkWidget*, GtkWidget*);
extern int32_t gtk_notebook_prepend_page_menu(GtkNotebook*, GtkWidget*, GtkWidget*, GtkWidget*);
extern void gtk_notebook_prev_page(GtkNotebook*);
extern void gtk_notebook_remove_page(GtkNotebook*, int32_t);
extern void gtk_notebook_reorder_child(GtkNotebook*, GtkWidget*, int32_t);
extern void gtk_notebook_set_action_widget(GtkNotebook*, GtkWidget*, GtkPackType);
extern void gtk_notebook_set_current_page(GtkNotebook*, int32_t);
extern void gtk_notebook_set_group_name(GtkNotebook*, char*);
extern void gtk_notebook_set_menu_label(GtkNotebook*, GtkWidget*, GtkWidget*);
extern void gtk_notebook_set_menu_label_text(GtkNotebook*, GtkWidget*, char*);
extern void gtk_notebook_set_scrollable(GtkNotebook*, int);
extern void gtk_notebook_set_show_border(GtkNotebook*, int);
extern void gtk_notebook_set_show_tabs(GtkNotebook*, int);
extern void gtk_notebook_set_tab_detachable(GtkNotebook*, GtkWidget*, int);
extern void gtk_notebook_set_tab_label(GtkNotebook*, GtkWidget*, GtkWidget*);
extern void gtk_notebook_set_tab_label_text(GtkNotebook*, GtkWidget*, char*);
extern void gtk_notebook_set_tab_pos(GtkNotebook*, GtkPositionType);
extern void gtk_notebook_set_tab_reorderable(GtkNotebook*, GtkWidget*, int);
extern GType gtk_notebook_get_type();
extern GIcon* gtk_numerable_icon_new(GIcon*);
extern GIcon* gtk_numerable_icon_new_with_style_context(GIcon*, GtkStyleContext*);
extern GIcon* gtk_numerable_icon_get_background_gicon(GtkNumerableIcon*);
extern char* gtk_numerable_icon_get_background_icon_name(GtkNumerableIcon*);
extern int32_t gtk_numerable_icon_get_count(GtkNumerableIcon*);
extern char* gtk_numerable_icon_get_label(GtkNumerableIcon*);
extern GtkStyleContext* gtk_numerable_icon_get_style_context(GtkNumerableIcon*);
extern void gtk_numerable_icon_set_background_gicon(GtkNumerableIcon*, GIcon*);
extern void gtk_numerable_icon_set_background_icon_name(GtkNumerableIcon*, char*);
extern void gtk_numerable_icon_set_count(GtkNumerableIcon*, int32_t);
extern void gtk_numerable_icon_set_label(GtkNumerableIcon*, char*);
extern void gtk_numerable_icon_set_style_context(GtkNumerableIcon*, GtkStyleContext*);
extern GType gtk_numerable_icon_get_type();
extern GtkWidget* gtk_offscreen_window_new();
extern GdkPixbuf* gtk_offscreen_window_get_pixbuf(GtkOffscreenWindow*);
extern cairoSurface* gtk_offscreen_window_get_surface(GtkOffscreenWindow*);
extern GType gtk_offscreen_window_get_type();
extern GtkOrientation gtk_orientable_get_orientation(GtkOrientable*);
extern void gtk_orientable_set_orientation(GtkOrientable*, GtkOrientation);
extern GType gtk_orientable_get_type();
extern GtkWidget* gtk_overlay_new();
extern void gtk_overlay_add_overlay(GtkOverlay*, GtkWidget*);
extern GType gtk_overlay_get_type();
extern GtkPageSetup* gtk_page_setup_new();
extern GtkPageSetup* gtk_page_setup_new_from_file(char*, GError**);
extern GtkPageSetup* gtk_page_setup_new_from_key_file(GKeyFile*, char*, GError**);
extern GtkPageSetup* gtk_page_setup_copy(GtkPageSetup*);
extern double gtk_page_setup_get_bottom_margin(GtkPageSetup*, GtkUnit);
extern double gtk_page_setup_get_left_margin(GtkPageSetup*, GtkUnit);
extern GtkPageOrientation gtk_page_setup_get_orientation(GtkPageSetup*);
extern double gtk_page_setup_get_page_height(GtkPageSetup*, GtkUnit);
extern double gtk_page_setup_get_page_width(GtkPageSetup*, GtkUnit);
extern double gtk_page_setup_get_paper_height(GtkPageSetup*, GtkUnit);
extern GtkPaperSize* gtk_page_setup_get_paper_size(GtkPageSetup*);
extern double gtk_page_setup_get_paper_width(GtkPageSetup*, GtkUnit);
extern double gtk_page_setup_get_right_margin(GtkPageSetup*, GtkUnit);
extern double gtk_page_setup_get_top_margin(GtkPageSetup*, GtkUnit);
extern int gtk_page_setup_load_file(GtkPageSetup*, char*, GError**);
extern int gtk_page_setup_load_key_file(GtkPageSetup*, GKeyFile*, char*, GError**);
extern void gtk_page_setup_set_bottom_margin(GtkPageSetup*, double, GtkUnit);
extern void gtk_page_setup_set_left_margin(GtkPageSetup*, double, GtkUnit);
extern void gtk_page_setup_set_orientation(GtkPageSetup*, GtkPageOrientation);
extern void gtk_page_setup_set_paper_size(GtkPageSetup*, GtkPaperSize*);
extern void gtk_page_setup_set_paper_size_and_default_margins(GtkPageSetup*, GtkPaperSize*);
extern void gtk_page_setup_set_right_margin(GtkPageSetup*, double, GtkUnit);
extern void gtk_page_setup_set_top_margin(GtkPageSetup*, double, GtkUnit);
extern int gtk_page_setup_to_file(GtkPageSetup*, char*, GError**);
extern void gtk_page_setup_to_key_file(GtkPageSetup*, GKeyFile*, char*);
extern GType gtk_page_setup_get_type();
extern GtkWidget* gtk_paned_new(GtkOrientation);
extern void gtk_paned_add1(GtkPaned*, GtkWidget*);
extern void gtk_paned_add2(GtkPaned*, GtkWidget*);
extern GtkWidget* gtk_paned_get_child1(GtkPaned*);
extern GtkWidget* gtk_paned_get_child2(GtkPaned*);
extern GdkWindow* gtk_paned_get_handle_window(GtkPaned*);
extern int32_t gtk_paned_get_position(GtkPaned*);
extern void gtk_paned_pack1(GtkPaned*, GtkWidget*, int, int);
extern void gtk_paned_pack2(GtkPaned*, GtkWidget*, int, int);
extern void gtk_paned_set_position(GtkPaned*, int32_t);
extern GType gtk_paned_get_type();
extern GtkPaperSize* gtk_paper_size_new(char*);
extern GtkPaperSize* gtk_paper_size_new_custom(char*, char*, double, double, GtkUnit);
extern GtkPaperSize* gtk_paper_size_new_from_key_file(GKeyFile*, char*, GError**);
extern GtkPaperSize* gtk_paper_size_new_from_ppd(char*, char*, double, double);
extern GtkPaperSize* gtk_paper_size_copy(GtkPaperSize*);
extern void gtk_paper_size_free(GtkPaperSize*);
extern double gtk_paper_size_get_default_bottom_margin(GtkPaperSize*, GtkUnit);
extern double gtk_paper_size_get_default_left_margin(GtkPaperSize*, GtkUnit);
extern double gtk_paper_size_get_default_right_margin(GtkPaperSize*, GtkUnit);
extern double gtk_paper_size_get_default_top_margin(GtkPaperSize*, GtkUnit);
extern char* gtk_paper_size_get_display_name(GtkPaperSize*);
extern double gtk_paper_size_get_height(GtkPaperSize*, GtkUnit);
extern char* gtk_paper_size_get_name(GtkPaperSize*);
extern char* gtk_paper_size_get_ppd_name(GtkPaperSize*);
extern double gtk_paper_size_get_width(GtkPaperSize*, GtkUnit);
extern int gtk_paper_size_is_custom(GtkPaperSize*);
extern int gtk_paper_size_is_equal(GtkPaperSize*, GtkPaperSize*);
extern void gtk_paper_size_set_size(GtkPaperSize*, double, double, GtkUnit);
extern void gtk_paper_size_to_key_file(GtkPaperSize*, GKeyFile*, char*);
extern char* gtk_paper_size_get_default();
extern GList* gtk_paper_size_get_paper_sizes(int);
extern GtkWidget* gtk_plug_new(uint64_t);
extern GtkWidget* gtk_plug_new_for_display(GdkDisplay*, uint64_t);
extern void gtk_plug_construct(GtkPlug*, uint64_t);
extern void gtk_plug_construct_for_display(GtkPlug*, GdkDisplay*, uint64_t);
extern int gtk_plug_get_embedded(GtkPlug*);
extern uint64_t gtk_plug_get_id(GtkPlug*);
extern GdkWindow* gtk_plug_get_socket_window(GtkPlug*);
extern GType gtk_plug_get_type();
extern PangoContext* gtk_print_context_create_pango_context(GtkPrintContext*);
extern PangoLayout* gtk_print_context_create_pango_layout(GtkPrintContext*);
extern cairoContext* gtk_print_context_get_cairo_context(GtkPrintContext*);
extern double gtk_print_context_get_dpi_x(GtkPrintContext*);
extern double gtk_print_context_get_dpi_y(GtkPrintContext*);
extern int gtk_print_context_get_hard_margins(GtkPrintContext*, double*, double*, double*, double*);
extern double gtk_print_context_get_height(GtkPrintContext*);
extern GtkPageSetup* gtk_print_context_get_page_setup(GtkPrintContext*);
extern PangoFontMap* gtk_print_context_get_pango_fontmap(GtkPrintContext*);
extern double gtk_print_context_get_width(GtkPrintContext*);
extern void gtk_print_context_set_cairo_context(GtkPrintContext*, cairoContext*, double, double);
extern GType gtk_print_context_get_type();
extern GtkPrintOperation* gtk_print_operation_new();
extern void gtk_print_operation_cancel(GtkPrintOperation*);
extern void gtk_print_operation_draw_page_finish(GtkPrintOperation*);
extern GtkPageSetup* gtk_print_operation_get_default_page_setup(GtkPrintOperation*);
extern int gtk_print_operation_get_embed_page_setup(GtkPrintOperation*);
extern void gtk_print_operation_get_error(GtkPrintOperation*, GError**);
extern int gtk_print_operation_get_has_selection(GtkPrintOperation*);
extern int32_t gtk_print_operation_get_n_pages_to_print(GtkPrintOperation*);
extern GtkPrintSettings* gtk_print_operation_get_print_settings(GtkPrintOperation*);
extern GtkPrintStatus gtk_print_operation_get_status(GtkPrintOperation*);
extern char* gtk_print_operation_get_status_string(GtkPrintOperation*);
extern int gtk_print_operation_get_support_selection(GtkPrintOperation*);
extern int gtk_print_operation_is_finished(GtkPrintOperation*);
extern GtkPrintOperationResult gtk_print_operation_run(GtkPrintOperation*, GtkPrintOperationAction, GtkWindow*, GError**);
extern void gtk_print_operation_set_allow_async(GtkPrintOperation*, int);
extern void gtk_print_operation_set_current_page(GtkPrintOperation*, int32_t);
extern void gtk_print_operation_set_custom_tab_label(GtkPrintOperation*, char*);
extern void gtk_print_operation_set_default_page_setup(GtkPrintOperation*, GtkPageSetup*);
extern void gtk_print_operation_set_defer_drawing(GtkPrintOperation*);
extern void gtk_print_operation_set_embed_page_setup(GtkPrintOperation*, int);
extern void gtk_print_operation_set_export_filename(GtkPrintOperation*, char*);
extern void gtk_print_operation_set_has_selection(GtkPrintOperation*, int);
extern void gtk_print_operation_set_job_name(GtkPrintOperation*, char*);
extern void gtk_print_operation_set_n_pages(GtkPrintOperation*, int32_t);
extern void gtk_print_operation_set_print_settings(GtkPrintOperation*, GtkPrintSettings*);
extern void gtk_print_operation_set_show_progress(GtkPrintOperation*, int);
extern void gtk_print_operation_set_support_selection(GtkPrintOperation*, int);
extern void gtk_print_operation_set_track_print_status(GtkPrintOperation*, int);
extern void gtk_print_operation_set_unit(GtkPrintOperation*, GtkUnit);
extern void gtk_print_operation_set_use_full_page(GtkPrintOperation*, int);
extern GType gtk_print_operation_get_type();
extern void gtk_print_operation_preview_end_preview(GtkPrintOperationPreview*);
extern int gtk_print_operation_preview_is_selected(GtkPrintOperationPreview*, int32_t);
extern void gtk_print_operation_preview_render_page(GtkPrintOperationPreview*, int32_t);
extern GType gtk_print_operation_preview_get_type();
extern GtkPrintSettings* gtk_print_settings_new();
extern GtkPrintSettings* gtk_print_settings_new_from_file(char*, GError**);
extern GtkPrintSettings* gtk_print_settings_new_from_key_file(GKeyFile*, char*, GError**);
extern GtkPrintSettings* gtk_print_settings_copy(GtkPrintSettings*);
extern void gtk_print_settings_foreach(GtkPrintSettings*, GtkPrintSettingsFunc, void*);
#pragma GCC diagnostic ignored "-Wunused-function"
static void _gtk_print_settings_foreach(GtkPrintSettings* this, void* gofunc) {
	if (gofunc) {
		gtk_print_settings_foreach(this, _GtkPrintSettingsFunc_c_wrapper, gofunc);
	} else {
		gtk_print_settings_foreach(this, 0, 0);
	}
}
extern char* gtk_print_settings_get(GtkPrintSettings*, char*);
extern int gtk_print_settings_get_bool(GtkPrintSettings*, char*);
extern int gtk_print_settings_get_collate(GtkPrintSettings*);
extern char* gtk_print_settings_get_default_source(GtkPrintSettings*);
extern char* gtk_print_settings_get_dither(GtkPrintSettings*);
extern double gtk_print_settings_get_double(GtkPrintSettings*, char*);
extern double gtk_print_settings_get_double_with_default(GtkPrintSettings*, char*, double);
extern GtkPrintDuplex gtk_print_settings_get_duplex(GtkPrintSettings*);
extern char* gtk_print_settings_get_finishings(GtkPrintSettings*);
extern int32_t gtk_print_settings_get_int(GtkPrintSettings*, char*);
extern int32_t gtk_print_settings_get_int_with_default(GtkPrintSettings*, char*, int32_t);
extern double gtk_print_settings_get_length(GtkPrintSettings*, char*, GtkUnit);
extern char* gtk_print_settings_get_media_type(GtkPrintSettings*);
extern int32_t gtk_print_settings_get_n_copies(GtkPrintSettings*);
extern int32_t gtk_print_settings_get_number_up(GtkPrintSettings*);
extern GtkNumberUpLayout gtk_print_settings_get_number_up_layout(GtkPrintSettings*);
extern GtkPageOrientation gtk_print_settings_get_orientation(GtkPrintSettings*);
extern char* gtk_print_settings_get_output_bin(GtkPrintSettings*);
extern GtkPageRange* gtk_print_settings_get_page_ranges(GtkPrintSettings*, int32_t*);
extern GtkPageSet gtk_print_settings_get_page_set(GtkPrintSettings*);
extern double gtk_print_settings_get_paper_height(GtkPrintSettings*, GtkUnit);
extern GtkPaperSize* gtk_print_settings_get_paper_size(GtkPrintSettings*);
extern double gtk_print_settings_get_paper_width(GtkPrintSettings*, GtkUnit);
extern GtkPrintPages gtk_print_settings_get_print_pages(GtkPrintSettings*);
extern char* gtk_print_settings_get_printer(GtkPrintSettings*);
extern double gtk_print_settings_get_printer_lpi(GtkPrintSettings*);
extern GtkPrintQuality gtk_print_settings_get_quality(GtkPrintSettings*);
extern int32_t gtk_print_settings_get_resolution(GtkPrintSettings*);
extern int32_t gtk_print_settings_get_resolution_x(GtkPrintSettings*);
extern int32_t gtk_print_settings_get_resolution_y(GtkPrintSettings*);
extern int gtk_print_settings_get_reverse(GtkPrintSettings*);
extern double gtk_print_settings_get_scale(GtkPrintSettings*);
extern int gtk_print_settings_get_use_color(GtkPrintSettings*);
extern int gtk_print_settings_has_key(GtkPrintSettings*, char*);
extern int gtk_print_settings_load_file(GtkPrintSettings*, char*, GError**);
extern int gtk_print_settings_load_key_file(GtkPrintSettings*, GKeyFile*, char*, GError**);
extern void gtk_print_settings_set(GtkPrintSettings*, char*, char*);
extern void gtk_print_settings_set_bool(GtkPrintSettings*, char*, int);
extern void gtk_print_settings_set_collate(GtkPrintSettings*, int);
extern void gtk_print_settings_set_default_source(GtkPrintSettings*, char*);
extern void gtk_print_settings_set_dither(GtkPrintSettings*, char*);
extern void gtk_print_settings_set_double(GtkPrintSettings*, char*, double);
extern void gtk_print_settings_set_duplex(GtkPrintSettings*, GtkPrintDuplex);
extern void gtk_print_settings_set_finishings(GtkPrintSettings*, char*);
extern void gtk_print_settings_set_int(GtkPrintSettings*, char*, int32_t);
extern void gtk_print_settings_set_length(GtkPrintSettings*, char*, double, GtkUnit);
extern void gtk_print_settings_set_media_type(GtkPrintSettings*, char*);
extern void gtk_print_settings_set_n_copies(GtkPrintSettings*, int32_t);
extern void gtk_print_settings_set_number_up(GtkPrintSettings*, int32_t);
extern void gtk_print_settings_set_number_up_layout(GtkPrintSettings*, GtkNumberUpLayout);
extern void gtk_print_settings_set_orientation(GtkPrintSettings*, GtkPageOrientation);
extern void gtk_print_settings_set_output_bin(GtkPrintSettings*, char*);
extern void gtk_print_settings_set_page_ranges(GtkPrintSettings*, GtkPageRange*, int32_t);
extern void gtk_print_settings_set_page_set(GtkPrintSettings*, GtkPageSet);
extern void gtk_print_settings_set_paper_height(GtkPrintSettings*, double, GtkUnit);
extern void gtk_print_settings_set_paper_size(GtkPrintSettings*, GtkPaperSize*);
extern void gtk_print_settings_set_paper_width(GtkPrintSettings*, double, GtkUnit);
extern void gtk_print_settings_set_print_pages(GtkPrintSettings*, GtkPrintPages);
extern void gtk_print_settings_set_printer(GtkPrintSettings*, char*);
extern void gtk_print_settings_set_printer_lpi(GtkPrintSettings*, double);
extern void gtk_print_settings_set_quality(GtkPrintSettings*, GtkPrintQuality);
extern void gtk_print_settings_set_resolution(GtkPrintSettings*, int32_t);
extern void gtk_print_settings_set_resolution_xy(GtkPrintSettings*, int32_t, int32_t);
extern void gtk_print_settings_set_reverse(GtkPrintSettings*, int);
extern void gtk_print_settings_set_scale(GtkPrintSettings*, double);
extern void gtk_print_settings_set_use_color(GtkPrintSettings*, int);
extern int gtk_print_settings_to_file(GtkPrintSettings*, char*, GError**);
extern void gtk_print_settings_to_key_file(GtkPrintSettings*, GKeyFile*, char*);
extern void gtk_print_settings_unset(GtkPrintSettings*, char*);
extern GType gtk_print_settings_get_type();
extern GtkWidget* gtk_progress_bar_new();
extern PangoEllipsizeMode gtk_progress_bar_get_ellipsize(GtkProgressBar*);
extern double gtk_progress_bar_get_fraction(GtkProgressBar*);
extern int gtk_progress_bar_get_inverted(GtkProgressBar*);
extern double gtk_progress_bar_get_pulse_step(GtkProgressBar*);
extern int gtk_progress_bar_get_show_text(GtkProgressBar*);
extern char* gtk_progress_bar_get_text(GtkProgressBar*);
extern void gtk_progress_bar_pulse(GtkProgressBar*);
extern void gtk_progress_bar_set_ellipsize(GtkProgressBar*, PangoEllipsizeMode);
extern void gtk_progress_bar_set_fraction(GtkProgressBar*, double);
extern void gtk_progress_bar_set_inverted(GtkProgressBar*, int);
extern void gtk_progress_bar_set_pulse_step(GtkProgressBar*, double);
extern void gtk_progress_bar_set_show_text(GtkProgressBar*, int);
extern void gtk_progress_bar_set_text(GtkProgressBar*, char*);
extern GType gtk_progress_bar_get_type();
extern GtkRadioAction* gtk_radio_action_new(char*, char*, char*, char*, int32_t);
extern int32_t gtk_radio_action_get_current_value(GtkRadioAction*);
extern GSList* gtk_radio_action_get_group(GtkRadioAction*);
extern void gtk_radio_action_join_group(GtkRadioAction*, GtkRadioAction*);
extern void gtk_radio_action_set_current_value(GtkRadioAction*, int32_t);
extern void gtk_radio_action_set_group(GtkRadioAction*, GSList*);
extern GType gtk_radio_action_get_type();
extern GtkWidget* gtk_radio_button_new(GSList*);
extern GtkWidget* gtk_radio_button_new_from_widget(GtkRadioButton*);
extern GtkWidget* gtk_radio_button_new_with_label(GSList*, char*);
extern GtkWidget* gtk_radio_button_new_with_label_from_widget(GtkRadioButton*, char*);
extern GtkWidget* gtk_radio_button_new_with_mnemonic(GSList*, char*);
extern GtkWidget* gtk_radio_button_new_with_mnemonic_from_widget(GtkRadioButton*, char*);
extern GSList* gtk_radio_button_get_group(GtkRadioButton*);
extern void gtk_radio_button_join_group(GtkRadioButton*, GtkRadioButton*);
extern void gtk_radio_button_set_group(GtkRadioButton*, GSList*);
extern GType gtk_radio_button_get_type();
extern GtkWidget* gtk_radio_menu_item_new_from_widget(GtkRadioMenuItem*);
extern GtkWidget* gtk_radio_menu_item_new_with_label(GSList*, char*);
extern GtkWidget* gtk_radio_menu_item_new_with_label_from_widget(GtkRadioMenuItem*, char*);
extern GtkWidget* gtk_radio_menu_item_new_with_mnemonic_from_widget(GtkRadioMenuItem*, char*);
extern GSList* gtk_radio_menu_item_get_group(GtkRadioMenuItem*);
extern GType gtk_radio_menu_item_get_type();
extern GtkToolItem* gtk_radio_tool_button_new(GSList*);
extern GtkToolItem* gtk_radio_tool_button_new_from_widget(GtkRadioToolButton*);
extern GtkToolItem* gtk_radio_tool_button_new_with_stock_from_widget(GtkRadioToolButton*, char*);
extern GSList* gtk_radio_tool_button_get_group(GtkRadioToolButton*);
extern void gtk_radio_tool_button_set_group(GtkRadioToolButton*, GSList*);
extern GType gtk_radio_tool_button_get_type();
extern GtkAdjustment* gtk_range_get_adjustment(GtkRange*);
extern double gtk_range_get_fill_level(GtkRange*);
extern int gtk_range_get_flippable(GtkRange*);
extern int gtk_range_get_inverted(GtkRange*);
extern GtkSensitivityType gtk_range_get_lower_stepper_sensitivity(GtkRange*);
extern int32_t gtk_range_get_min_slider_size(GtkRange*);
extern void gtk_range_get_range_rect(GtkRange*, cairoRectangleInt*);
extern int gtk_range_get_restrict_to_fill_level(GtkRange*);
extern int32_t gtk_range_get_round_digits(GtkRange*);
extern int gtk_range_get_show_fill_level(GtkRange*);
extern void gtk_range_get_slider_range(GtkRange*, int32_t*, int32_t*);
extern int gtk_range_get_slider_size_fixed(GtkRange*);
extern GtkSensitivityType gtk_range_get_upper_stepper_sensitivity(GtkRange*);
extern double gtk_range_get_value(GtkRange*);
extern void gtk_range_set_adjustment(GtkRange*, GtkAdjustment*);
extern void gtk_range_set_fill_level(GtkRange*, double);
extern void gtk_range_set_flippable(GtkRange*, int);
extern void gtk_range_set_increments(GtkRange*, double, double);
extern void gtk_range_set_inverted(GtkRange*, int);
extern void gtk_range_set_lower_stepper_sensitivity(GtkRange*, GtkSensitivityType);
extern void gtk_range_set_min_slider_size(GtkRange*, int32_t);
extern void gtk_range_set_range(GtkRange*, double, double);
extern void gtk_range_set_restrict_to_fill_level(GtkRange*, int);
extern void gtk_range_set_round_digits(GtkRange*, int32_t);
extern void gtk_range_set_show_fill_level(GtkRange*, int);
extern void gtk_range_set_slider_size_fixed(GtkRange*, int);
extern void gtk_range_set_upper_stepper_sensitivity(GtkRange*, GtkSensitivityType);
extern void gtk_range_set_value(GtkRange*, double);
extern GType gtk_range_get_type();
extern int gtk_rc_property_parse_border(GParamSpec*, GString*, GValue*);
extern int gtk_rc_property_parse_color(GParamSpec*, GString*, GValue*);
extern int gtk_rc_property_parse_enum(GParamSpec*, GString*, GValue*);
extern int gtk_rc_property_parse_flags(GParamSpec*, GString*, GValue*);
extern int gtk_rc_property_parse_requisition(GParamSpec*, GString*, GValue*);
extern GtkRcStyle* gtk_rc_style_new();
extern GtkRcStyle* gtk_rc_style_copy(GtkRcStyle*);
extern GType gtk_rc_style_get_type();
extern GtkAction* gtk_recent_action_new(char*, char*, char*, char*);
extern GtkAction* gtk_recent_action_new_for_manager(char*, char*, char*, char*, GtkRecentManager*);
extern int gtk_recent_action_get_show_numbers(GtkRecentAction*);
extern void gtk_recent_action_set_show_numbers(GtkRecentAction*, int);
extern GType gtk_recent_action_get_type();
extern void gtk_recent_chooser_add_filter(GtkRecentChooser*, GtkRecentFilter*);
extern GtkRecentInfo* gtk_recent_chooser_get_current_item(GtkRecentChooser*);
extern char* gtk_recent_chooser_get_current_uri(GtkRecentChooser*);
extern GtkRecentFilter* gtk_recent_chooser_get_filter(GtkRecentChooser*);
extern GList* gtk_recent_chooser_get_items(GtkRecentChooser*);
extern int32_t gtk_recent_chooser_get_limit(GtkRecentChooser*);
extern int gtk_recent_chooser_get_local_only(GtkRecentChooser*);
extern int gtk_recent_chooser_get_select_multiple(GtkRecentChooser*);
extern int gtk_recent_chooser_get_show_icons(GtkRecentChooser*);
extern int gtk_recent_chooser_get_show_not_found(GtkRecentChooser*);
extern int gtk_recent_chooser_get_show_private(GtkRecentChooser*);
extern int gtk_recent_chooser_get_show_tips(GtkRecentChooser*);
extern GtkRecentSortType gtk_recent_chooser_get_sort_type(GtkRecentChooser*);
extern char** gtk_recent_chooser_get_uris(GtkRecentChooser*, uint64_t*);
extern GSList* gtk_recent_chooser_list_filters(GtkRecentChooser*);
extern void gtk_recent_chooser_remove_filter(GtkRecentChooser*, GtkRecentFilter*);
extern void gtk_recent_chooser_select_all(GtkRecentChooser*);
extern int gtk_recent_chooser_select_uri(GtkRecentChooser*, char*, GError**);
extern int gtk_recent_chooser_set_current_uri(GtkRecentChooser*, char*, GError**);
extern void gtk_recent_chooser_set_filter(GtkRecentChooser*, GtkRecentFilter*);
extern void gtk_recent_chooser_set_limit(GtkRecentChooser*, int32_t);
extern void gtk_recent_chooser_set_local_only(GtkRecentChooser*, int);
extern void gtk_recent_chooser_set_select_multiple(GtkRecentChooser*, int);
extern void gtk_recent_chooser_set_show_icons(GtkRecentChooser*, int);
extern void gtk_recent_chooser_set_show_not_found(GtkRecentChooser*, int);
extern void gtk_recent_chooser_set_show_private(GtkRecentChooser*, int);
extern void gtk_recent_chooser_set_show_tips(GtkRecentChooser*, int);
extern void gtk_recent_chooser_set_sort_func(GtkRecentChooser*, GtkRecentSortFunc, void*, GDestroyNotify);
#pragma GCC diagnostic ignored "-Wunused-function"
static void _gtk_recent_chooser_set_sort_func(GtkRecentChooser* this, void* gofunc) {
	if (gofunc) {
		gtk_recent_chooser_set_sort_func(this, _GtkRecentSortFunc_c_wrapper, gofunc, _c_callback_cleanup);
	} else {
		gtk_recent_chooser_set_sort_func(this, 0, 0, 0);
	}
}
extern void gtk_recent_chooser_set_sort_type(GtkRecentChooser*, GtkRecentSortType);
extern void gtk_recent_chooser_unselect_all(GtkRecentChooser*);
extern void gtk_recent_chooser_unselect_uri(GtkRecentChooser*, char*);
extern GType gtk_recent_chooser_get_type();
extern GType gtk_recent_chooser_dialog_get_type();
extern GtkWidget* gtk_recent_chooser_menu_new();
extern GtkWidget* gtk_recent_chooser_menu_new_for_manager(GtkRecentManager*);
extern int gtk_recent_chooser_menu_get_show_numbers(GtkRecentChooserMenu*);
extern void gtk_recent_chooser_menu_set_show_numbers(GtkRecentChooserMenu*, int);
extern GType gtk_recent_chooser_menu_get_type();
extern GtkWidget* gtk_recent_chooser_widget_new();
extern GtkWidget* gtk_recent_chooser_widget_new_for_manager(GtkRecentManager*);
extern GType gtk_recent_chooser_widget_get_type();
extern GtkRecentFilter* gtk_recent_filter_new();
extern void gtk_recent_filter_add_age(GtkRecentFilter*, int32_t);
extern void gtk_recent_filter_add_application(GtkRecentFilter*, char*);
extern void gtk_recent_filter_add_custom(GtkRecentFilter*, GtkRecentFilterFlags, GtkRecentFilterFunc, void*, GDestroyNotify);
#pragma GCC diagnostic ignored "-Wunused-function"
static void _gtk_recent_filter_add_custom(GtkRecentFilter* this, GtkRecentFilterFlags arg0, void* gofunc) {
	if (gofunc) {
		gtk_recent_filter_add_custom(this, arg0, _GtkRecentFilterFunc_c_wrapper, gofunc, _c_callback_cleanup);
	} else {
		gtk_recent_filter_add_custom(this, arg0, 0, 0, 0);
	}
}
extern void gtk_recent_filter_add_group(GtkRecentFilter*, char*);
extern void gtk_recent_filter_add_mime_type(GtkRecentFilter*, char*);
extern void gtk_recent_filter_add_pattern(GtkRecentFilter*, char*);
extern void gtk_recent_filter_add_pixbuf_formats(GtkRecentFilter*);
extern int gtk_recent_filter_filter(GtkRecentFilter*, GtkRecentFilterInfo*);
extern char* gtk_recent_filter_get_name(GtkRecentFilter*);
extern GtkRecentFilterFlags gtk_recent_filter_get_needed(GtkRecentFilter*);
extern void gtk_recent_filter_set_name(GtkRecentFilter*, char*);
extern GType gtk_recent_filter_get_type();
extern GAppInfo* gtk_recent_info_create_app_info(GtkRecentInfo*, char*, GError**);
extern int gtk_recent_info_exists(GtkRecentInfo*);
extern int64_t gtk_recent_info_get_added(GtkRecentInfo*);
extern int32_t gtk_recent_info_get_age(GtkRecentInfo*);
extern int gtk_recent_info_get_application_info(GtkRecentInfo*, char*, char**, uint32_t*, int64_t*);
extern char** gtk_recent_info_get_applications(GtkRecentInfo*, uint64_t*);
extern char* gtk_recent_info_get_description(GtkRecentInfo*);
extern char* gtk_recent_info_get_display_name(GtkRecentInfo*);
extern GIcon* gtk_recent_info_get_gicon(GtkRecentInfo*);
extern char** gtk_recent_info_get_groups(GtkRecentInfo*, uint64_t*);
extern GdkPixbuf* gtk_recent_info_get_icon(GtkRecentInfo*, int32_t);
extern char* gtk_recent_info_get_mime_type(GtkRecentInfo*);
extern int64_t gtk_recent_info_get_modified(GtkRecentInfo*);
extern int gtk_recent_info_get_private_hint(GtkRecentInfo*);
extern char* gtk_recent_info_get_short_name(GtkRecentInfo*);
extern char* gtk_recent_info_get_uri(GtkRecentInfo*);
extern char* gtk_recent_info_get_uri_display(GtkRecentInfo*);
extern int64_t gtk_recent_info_get_visited(GtkRecentInfo*);
extern int gtk_recent_info_has_application(GtkRecentInfo*, char*);
extern int gtk_recent_info_has_group(GtkRecentInfo*, char*);
extern int gtk_recent_info_is_local(GtkRecentInfo*);
extern char* gtk_recent_info_last_application(GtkRecentInfo*);
extern int gtk_recent_info_match(GtkRecentInfo*, GtkRecentInfo*);
extern GtkRecentInfo* gtk_recent_info_ref(GtkRecentInfo*);
extern void gtk_recent_info_unref(GtkRecentInfo*);
extern GtkRecentManager* gtk_recent_manager_new();
extern GtkRecentManager* gtk_recent_manager_get_default();
extern int gtk_recent_manager_add_full(GtkRecentManager*, char*, GtkRecentData*);
extern int gtk_recent_manager_add_item(GtkRecentManager*, char*);
extern GList* gtk_recent_manager_get_items(GtkRecentManager*);
extern int gtk_recent_manager_has_item(GtkRecentManager*, char*);
extern GtkRecentInfo* gtk_recent_manager_lookup_item(GtkRecentManager*, char*, GError**);
extern int gtk_recent_manager_move_item(GtkRecentManager*, char*, char*, GError**);
extern int32_t gtk_recent_manager_purge_items(GtkRecentManager*, GError**);
extern int gtk_recent_manager_remove_item(GtkRecentManager*, char*, GError**);
extern GType gtk_recent_manager_get_type();
extern GtkRequisition* gtk_requisition_new();
extern GtkRequisition* gtk_requisition_copy(GtkRequisition*);
extern void gtk_requisition_free(GtkRequisition*);
extern GtkWidget* gtk_scale_new(GtkOrientation, GtkAdjustment*);
extern GtkWidget* gtk_scale_new_with_range(GtkOrientation, double, double, double);
extern void gtk_scale_add_mark(GtkScale*, double, GtkPositionType, char*);
extern void gtk_scale_clear_marks(GtkScale*);
extern int32_t gtk_scale_get_digits(GtkScale*);
extern int gtk_scale_get_draw_value(GtkScale*);
extern PangoLayout* gtk_scale_get_layout(GtkScale*);
extern void gtk_scale_get_layout_offsets(GtkScale*, int32_t*, int32_t*);
extern GtkPositionType gtk_scale_get_value_pos(GtkScale*);
extern void gtk_scale_set_digits(GtkScale*, int32_t);
extern void gtk_scale_set_draw_value(GtkScale*, int);
extern void gtk_scale_set_value_pos(GtkScale*, GtkPositionType);
extern GType gtk_scale_get_type();
extern GtkWidget* gtk_scale_button_new(int32_t, double, double, double, char**);
extern GtkAdjustment* gtk_scale_button_get_adjustment(GtkScaleButton*);
extern GtkWidget* gtk_scale_button_get_minus_button(GtkScaleButton*);
extern GtkWidget* gtk_scale_button_get_plus_button(GtkScaleButton*);
extern GtkWidget* gtk_scale_button_get_popup(GtkScaleButton*);
extern double gtk_scale_button_get_value(GtkScaleButton*);
extern void gtk_scale_button_set_adjustment(GtkScaleButton*, GtkAdjustment*);
extern void gtk_scale_button_set_icons(GtkScaleButton*, char**);
extern void gtk_scale_button_set_value(GtkScaleButton*, double);
extern GType gtk_scale_button_get_type();
extern GtkAdjustment* gtk_scrollable_get_hadjustment(GtkScrollable*);
extern GtkScrollablePolicy gtk_scrollable_get_hscroll_policy(GtkScrollable*);
extern GtkAdjustment* gtk_scrollable_get_vadjustment(GtkScrollable*);
extern GtkScrollablePolicy gtk_scrollable_get_vscroll_policy(GtkScrollable*);
extern void gtk_scrollable_set_hadjustment(GtkScrollable*, GtkAdjustment*);
extern void gtk_scrollable_set_hscroll_policy(GtkScrollable*, GtkScrollablePolicy);
extern void gtk_scrollable_set_vadjustment(GtkScrollable*, GtkAdjustment*);
extern void gtk_scrollable_set_vscroll_policy(GtkScrollable*, GtkScrollablePolicy);
extern GType gtk_scrollable_get_type();
extern GtkWidget* gtk_scrollbar_new(GtkOrientation, GtkAdjustment*);
extern GType gtk_scrollbar_get_type();
extern GtkWidget* gtk_scrolled_window_new(GtkAdjustment*, GtkAdjustment*);
extern void gtk_scrolled_window_add_with_viewport(GtkScrolledWindow*, GtkWidget*);
extern GtkAdjustment* gtk_scrolled_window_get_hadjustment(GtkScrolledWindow*);
extern GtkWidget* gtk_scrolled_window_get_hscrollbar(GtkScrolledWindow*);
extern int32_t gtk_scrolled_window_get_min_content_height(GtkScrolledWindow*);
extern int32_t gtk_scrolled_window_get_min_content_width(GtkScrolledWindow*);
extern GtkCornerType gtk_scrolled_window_get_placement(GtkScrolledWindow*);
extern void gtk_scrolled_window_get_policy(GtkScrolledWindow*, GtkPolicyType*, GtkPolicyType*);
extern GtkShadowType gtk_scrolled_window_get_shadow_type(GtkScrolledWindow*);
extern GtkAdjustment* gtk_scrolled_window_get_vadjustment(GtkScrolledWindow*);
extern GtkWidget* gtk_scrolled_window_get_vscrollbar(GtkScrolledWindow*);
extern void gtk_scrolled_window_set_hadjustment(GtkScrolledWindow*, GtkAdjustment*);
extern void gtk_scrolled_window_set_min_content_height(GtkScrolledWindow*, int32_t);
extern void gtk_scrolled_window_set_min_content_width(GtkScrolledWindow*, int32_t);
extern void gtk_scrolled_window_set_placement(GtkScrolledWindow*, GtkCornerType);
extern void gtk_scrolled_window_set_policy(GtkScrolledWindow*, GtkPolicyType, GtkPolicyType);
extern void gtk_scrolled_window_set_shadow_type(GtkScrolledWindow*, GtkShadowType);
extern void gtk_scrolled_window_set_vadjustment(GtkScrolledWindow*, GtkAdjustment*);
extern void gtk_scrolled_window_unset_placement(GtkScrolledWindow*);
extern GType gtk_scrolled_window_get_type();
extern GtkSelectionData* gtk_selection_data_copy(GtkSelectionData*);
extern void gtk_selection_data_free(GtkSelectionData*);
extern GdkAtom gtk_selection_data_get_data_type(GtkSelectionData*);
extern uint8_t* gtk_selection_data_get_data_with_length(GtkSelectionData*, int32_t*);
extern GdkDisplay* gtk_selection_data_get_display(GtkSelectionData*);
extern int32_t gtk_selection_data_get_format(GtkSelectionData*);
extern int32_t gtk_selection_data_get_length(GtkSelectionData*);
extern GdkPixbuf* gtk_selection_data_get_pixbuf(GtkSelectionData*);
extern GdkAtom gtk_selection_data_get_selection(GtkSelectionData*);
extern GdkAtom gtk_selection_data_get_target(GtkSelectionData*);
extern int gtk_selection_data_get_targets(GtkSelectionData*, GdkAtom**, int32_t*);
extern char* gtk_selection_data_get_text(GtkSelectionData*);
extern char** gtk_selection_data_get_uris(GtkSelectionData*);
extern void gtk_selection_data_set(GtkSelectionData*, GdkAtom, int32_t, uint8_t*, int32_t);
extern int gtk_selection_data_set_pixbuf(GtkSelectionData*, GdkPixbuf*);
extern int gtk_selection_data_set_text(GtkSelectionData*, char*, int32_t);
extern int gtk_selection_data_set_uris(GtkSelectionData*, char**);
extern int gtk_selection_data_targets_include_image(GtkSelectionData*, int);
extern int gtk_selection_data_targets_include_rich_text(GtkSelectionData*, GtkTextBuffer*);
extern int gtk_selection_data_targets_include_text(GtkSelectionData*);
extern int gtk_selection_data_targets_include_uri(GtkSelectionData*);
extern GtkWidget* gtk_separator_new(GtkOrientation);
extern GType gtk_separator_get_type();
extern GtkWidget* gtk_separator_menu_item_new();
extern GType gtk_separator_menu_item_get_type();
extern GtkToolItem* gtk_separator_tool_item_new();
extern int gtk_separator_tool_item_get_draw(GtkSeparatorToolItem*);
extern void gtk_separator_tool_item_set_draw(GtkSeparatorToolItem*, int);
extern GType gtk_separator_tool_item_get_type();
extern GtkSettings* gtk_settings_get_default();
extern GtkSettings* gtk_settings_get_for_screen(GdkScreen*);
extern void gtk_settings_install_property(GParamSpec*);
extern void gtk_settings_install_property_parser(GParamSpec*, GtkRcPropertyParser);
extern void gtk_settings_set_double_property(GtkSettings*, char*, double, char*);
extern void gtk_settings_set_long_property(GtkSettings*, char*, int64_t, char*);
extern void gtk_settings_set_property_value(GtkSettings*, char*, GtkSettingsValue*);
extern void gtk_settings_set_string_property(GtkSettings*, char*, char*, char*);
extern GType gtk_settings_get_type();
extern GtkSizeGroup* gtk_size_group_new(GtkSizeGroupMode);
extern void gtk_size_group_add_widget(GtkSizeGroup*, GtkWidget*);
extern int gtk_size_group_get_ignore_hidden(GtkSizeGroup*);
extern GtkSizeGroupMode gtk_size_group_get_mode(GtkSizeGroup*);
extern GSList* gtk_size_group_get_widgets(GtkSizeGroup*);
extern void gtk_size_group_remove_widget(GtkSizeGroup*, GtkWidget*);
extern void gtk_size_group_set_ignore_hidden(GtkSizeGroup*, int);
extern void gtk_size_group_set_mode(GtkSizeGroup*, GtkSizeGroupMode);
extern GType gtk_size_group_get_type();
extern GtkWidget* gtk_socket_new();
extern void gtk_socket_add_id(GtkSocket*, uint64_t);
extern uint64_t gtk_socket_get_id(GtkSocket*);
extern GdkWindow* gtk_socket_get_plug_window(GtkSocket*);
extern GType gtk_socket_get_type();
extern GtkWidget* gtk_spin_button_new(GtkAdjustment*, double, uint32_t);
extern GtkWidget* gtk_spin_button_new_with_range(double, double, double);
extern void gtk_spin_button_configure(GtkSpinButton*, GtkAdjustment*, double, uint32_t);
extern GtkAdjustment* gtk_spin_button_get_adjustment(GtkSpinButton*);
extern uint32_t gtk_spin_button_get_digits(GtkSpinButton*);
extern void gtk_spin_button_get_increments(GtkSpinButton*, double*, double*);
extern int gtk_spin_button_get_numeric(GtkSpinButton*);
extern void gtk_spin_button_get_range(GtkSpinButton*, double*, double*);
extern int gtk_spin_button_get_snap_to_ticks(GtkSpinButton*);
extern GtkSpinButtonUpdatePolicy gtk_spin_button_get_update_policy(GtkSpinButton*);
extern double gtk_spin_button_get_value(GtkSpinButton*);
extern int32_t gtk_spin_button_get_value_as_int(GtkSpinButton*);
extern int gtk_spin_button_get_wrap(GtkSpinButton*);
extern void gtk_spin_button_set_adjustment(GtkSpinButton*, GtkAdjustment*);
extern void gtk_spin_button_set_digits(GtkSpinButton*, uint32_t);
extern void gtk_spin_button_set_increments(GtkSpinButton*, double, double);
extern void gtk_spin_button_set_numeric(GtkSpinButton*, int);
extern void gtk_spin_button_set_range(GtkSpinButton*, double, double);
extern void gtk_spin_button_set_snap_to_ticks(GtkSpinButton*, int);
extern void gtk_spin_button_set_update_policy(GtkSpinButton*, GtkSpinButtonUpdatePolicy);
extern void gtk_spin_button_set_value(GtkSpinButton*, double);
extern void gtk_spin_button_set_wrap(GtkSpinButton*, int);
extern void gtk_spin_button_spin(GtkSpinButton*, GtkSpinType, double);
extern void gtk_spin_button_update(GtkSpinButton*);
extern GType gtk_spin_button_get_type();
extern GtkWidget* gtk_spinner_new();
extern void gtk_spinner_start(GtkSpinner*);
extern void gtk_spinner_stop(GtkSpinner*);
extern GType gtk_spinner_get_type();
extern GtkStatusIcon* gtk_status_icon_new();
extern GtkStatusIcon* gtk_status_icon_new_from_file(char*);
extern GtkStatusIcon* gtk_status_icon_new_from_gicon(GIcon*);
extern GtkStatusIcon* gtk_status_icon_new_from_icon_name(char*);
extern GtkStatusIcon* gtk_status_icon_new_from_pixbuf(GdkPixbuf*);
extern GtkStatusIcon* gtk_status_icon_new_from_stock(char*);
extern void gtk_status_icon_position_menu(GtkMenu*, int32_t*, int32_t*, int*, GtkStatusIcon*);
extern int gtk_status_icon_get_geometry(GtkStatusIcon*, GdkScreen**, cairoRectangleInt*, GtkOrientation*);
extern GIcon* gtk_status_icon_get_gicon(GtkStatusIcon*);
extern int gtk_status_icon_get_has_tooltip(GtkStatusIcon*);
extern char* gtk_status_icon_get_icon_name(GtkStatusIcon*);
extern GdkPixbuf* gtk_status_icon_get_pixbuf(GtkStatusIcon*);
extern GdkScreen* gtk_status_icon_get_screen(GtkStatusIcon*);
extern int32_t gtk_status_icon_get_size(GtkStatusIcon*);
extern char* gtk_status_icon_get_stock(GtkStatusIcon*);
extern GtkImageType gtk_status_icon_get_storage_type(GtkStatusIcon*);
extern char* gtk_status_icon_get_title(GtkStatusIcon*);
extern char* gtk_status_icon_get_tooltip_markup(GtkStatusIcon*);
extern char* gtk_status_icon_get_tooltip_text(GtkStatusIcon*);
extern int gtk_status_icon_get_visible(GtkStatusIcon*);
extern uint32_t gtk_status_icon_get_x11_window_id(GtkStatusIcon*);
extern int gtk_status_icon_is_embedded(GtkStatusIcon*);
extern void gtk_status_icon_set_from_file(GtkStatusIcon*, char*);
extern void gtk_status_icon_set_from_gicon(GtkStatusIcon*, GIcon*);
extern void gtk_status_icon_set_from_icon_name(GtkStatusIcon*, char*);
extern void gtk_status_icon_set_from_pixbuf(GtkStatusIcon*, GdkPixbuf*);
extern void gtk_status_icon_set_from_stock(GtkStatusIcon*, char*);
extern void gtk_status_icon_set_has_tooltip(GtkStatusIcon*, int);
extern void gtk_status_icon_set_name(GtkStatusIcon*, char*);
extern void gtk_status_icon_set_screen(GtkStatusIcon*, GdkScreen*);
extern void gtk_status_icon_set_title(GtkStatusIcon*, char*);
extern void gtk_status_icon_set_tooltip_markup(GtkStatusIcon*, char*);
extern void gtk_status_icon_set_tooltip_text(GtkStatusIcon*, char*);
extern void gtk_status_icon_set_visible(GtkStatusIcon*, int);
extern GType gtk_status_icon_get_type();
extern GtkWidget* gtk_statusbar_new();
extern uint32_t gtk_statusbar_get_context_id(GtkStatusbar*, char*);
extern GtkWidget* gtk_statusbar_get_message_area(GtkStatusbar*);
extern void gtk_statusbar_pop(GtkStatusbar*, uint32_t);
extern uint32_t gtk_statusbar_push(GtkStatusbar*, uint32_t, char*);
extern void gtk_statusbar_remove(GtkStatusbar*, uint32_t, uint32_t);
extern void gtk_statusbar_remove_all(GtkStatusbar*, uint32_t);
extern GType gtk_statusbar_get_type();
extern void gtk_stock_item_free(GtkStockItem*);
extern GtkStyle* gtk_style_new();
extern void gtk_style_apply_default_background(GtkStyle*, cairoContext*, GdkWindow*, GtkStateType, int32_t, int32_t, int32_t, int32_t);
extern GtkStyle* gtk_style_copy(GtkStyle*);
extern void gtk_style_detach(GtkStyle*);
extern void gtk_style_get_style_property(GtkStyle*, GType, char*, GValue*);
extern int gtk_style_has_context(GtkStyle*);
extern int gtk_style_lookup_color(GtkStyle*, char*, GdkColor*);
extern GtkIconSet* gtk_style_lookup_icon_set(GtkStyle*, char*);
extern GdkPixbuf* gtk_style_render_icon(GtkStyle*, GtkIconSource*, GtkTextDirection, GtkStateType, int32_t, GtkWidget*, char*);
extern void gtk_style_set_background(GtkStyle*, GdkWindow*, GtkStateType);
extern GType gtk_style_get_type();
extern GtkStyleContext* gtk_style_context_new();
extern void gtk_style_context_add_provider_for_screen(GdkScreen*, GtkStyleProvider*, uint32_t);
extern void gtk_style_context_remove_provider_for_screen(GdkScreen*, GtkStyleProvider*);
extern void gtk_style_context_reset_widgets(GdkScreen*);
extern void gtk_style_context_add_class(GtkStyleContext*, char*);
extern void gtk_style_context_add_provider(GtkStyleContext*, GtkStyleProvider*, uint32_t);
extern void gtk_style_context_add_region(GtkStyleContext*, char*, GtkRegionFlags);
extern void gtk_style_context_cancel_animations(GtkStyleContext*, void*);
extern void gtk_style_context_get_background_color(GtkStyleContext*, GtkStateFlags, GdkRGBA*);
extern void gtk_style_context_get_border(GtkStyleContext*, GtkStateFlags, GtkBorder*);
extern void gtk_style_context_get_border_color(GtkStyleContext*, GtkStateFlags, GdkRGBA*);
extern void gtk_style_context_get_color(GtkStyleContext*, GtkStateFlags, GdkRGBA*);
extern GtkTextDirection gtk_style_context_get_direction(GtkStyleContext*);
extern PangoFontDescription* gtk_style_context_get_font(GtkStyleContext*, GtkStateFlags);
extern GtkJunctionSides gtk_style_context_get_junction_sides(GtkStyleContext*);
extern void gtk_style_context_get_margin(GtkStyleContext*, GtkStateFlags, GtkBorder*);
extern void gtk_style_context_get_padding(GtkStyleContext*, GtkStateFlags, GtkBorder*);
extern GtkWidgetPath* gtk_style_context_get_path(GtkStyleContext*);
extern void gtk_style_context_get_property(GtkStyleContext*, char*, GtkStateFlags, GValue*);
extern GdkScreen* gtk_style_context_get_screen(GtkStyleContext*);
extern GtkStateFlags gtk_style_context_get_state(GtkStyleContext*);
extern void gtk_style_context_get_style_property(GtkStyleContext*, char*, GValue*);
extern int gtk_style_context_has_class(GtkStyleContext*, char*);
extern int gtk_style_context_has_region(GtkStyleContext*, char*, GtkRegionFlags*);
extern void gtk_style_context_invalidate(GtkStyleContext*);
extern GList* gtk_style_context_list_classes(GtkStyleContext*);
extern GList* gtk_style_context_list_regions(GtkStyleContext*);
extern int gtk_style_context_lookup_color(GtkStyleContext*, char*, GdkRGBA*);
extern GtkIconSet* gtk_style_context_lookup_icon_set(GtkStyleContext*, char*);
extern void gtk_style_context_notify_state_change(GtkStyleContext*, GdkWindow*, void*, GtkStateType, int);
extern void gtk_style_context_pop_animatable_region(GtkStyleContext*);
extern void gtk_style_context_push_animatable_region(GtkStyleContext*, void*);
extern void gtk_style_context_remove_class(GtkStyleContext*, char*);
extern void gtk_style_context_remove_provider(GtkStyleContext*, GtkStyleProvider*);
extern void gtk_style_context_remove_region(GtkStyleContext*, char*);
extern void gtk_style_context_restore(GtkStyleContext*);
extern void gtk_style_context_save(GtkStyleContext*);
extern void gtk_style_context_scroll_animations(GtkStyleContext*, GdkWindow*, int32_t, int32_t);
extern void gtk_style_context_set_background(GtkStyleContext*, GdkWindow*);
extern void gtk_style_context_set_direction(GtkStyleContext*, GtkTextDirection);
extern void gtk_style_context_set_junction_sides(GtkStyleContext*, GtkJunctionSides);
extern void gtk_style_context_set_path(GtkStyleContext*, GtkWidgetPath*);
extern void gtk_style_context_set_screen(GtkStyleContext*, GdkScreen*);
extern void gtk_style_context_set_state(GtkStyleContext*, GtkStateFlags);
extern int gtk_style_context_state_is_running(GtkStyleContext*, GtkStateType, double*);
extern GType gtk_style_context_get_type();
extern GtkStyleProperties* gtk_style_properties_new();
extern void gtk_style_properties_clear(GtkStyleProperties*);
extern int gtk_style_properties_get_property(GtkStyleProperties*, char*, GtkStateFlags, GValue*);
extern GtkSymbolicColor* gtk_style_properties_lookup_color(GtkStyleProperties*, char*);
extern void gtk_style_properties_map_color(GtkStyleProperties*, char*, GtkSymbolicColor*);
extern void gtk_style_properties_merge(GtkStyleProperties*, GtkStyleProperties*, int);
extern void gtk_style_properties_set_property(GtkStyleProperties*, char*, GtkStateFlags, GValue*);
extern void gtk_style_properties_unset_property(GtkStyleProperties*, char*, GtkStateFlags);
extern GType gtk_style_properties_get_type();
extern GtkIconFactory* gtk_style_provider_get_icon_factory(GtkStyleProvider*, GtkWidgetPath*);
extern GtkStyleProperties* gtk_style_provider_get_style(GtkStyleProvider*, GtkWidgetPath*);
extern int gtk_style_provider_get_style_property(GtkStyleProvider*, GtkWidgetPath*, GtkStateFlags, GParamSpec*, GValue*);
extern GType gtk_style_provider_get_type();
extern GtkWidget* gtk_switch_new();
extern int gtk_switch_get_active(GtkSwitch*);
extern void gtk_switch_set_active(GtkSwitch*, int);
extern GType gtk_switch_get_type();
extern GtkSymbolicColor* gtk_symbolic_color_new_alpha(GtkSymbolicColor*, double);
extern GtkSymbolicColor* gtk_symbolic_color_new_literal(GdkRGBA*);
extern GtkSymbolicColor* gtk_symbolic_color_new_mix(GtkSymbolicColor*, GtkSymbolicColor*, double);
extern GtkSymbolicColor* gtk_symbolic_color_new_name(char*);
extern GtkSymbolicColor* gtk_symbolic_color_new_shade(GtkSymbolicColor*, double);
extern GtkSymbolicColor* gtk_symbolic_color_ref(GtkSymbolicColor*);
extern int gtk_symbolic_color_resolve(GtkSymbolicColor*, GtkStyleProperties*, GdkRGBA*);
extern char* gtk_symbolic_color_to_string(GtkSymbolicColor*);
extern void gtk_symbolic_color_unref(GtkSymbolicColor*);
extern GtkWidget* gtk_table_new(uint32_t, uint32_t, int);
extern void gtk_table_attach(GtkTable*, GtkWidget*, uint32_t, uint32_t, uint32_t, uint32_t, GtkAttachOptions, GtkAttachOptions, uint32_t, uint32_t);
extern void gtk_table_attach_defaults(GtkTable*, GtkWidget*, uint32_t, uint32_t, uint32_t, uint32_t);
extern uint32_t gtk_table_get_col_spacing(GtkTable*, uint32_t);
extern uint32_t gtk_table_get_default_col_spacing(GtkTable*);
extern uint32_t gtk_table_get_default_row_spacing(GtkTable*);
extern int gtk_table_get_homogeneous(GtkTable*);
extern uint32_t gtk_table_get_row_spacing(GtkTable*, uint32_t);
extern void gtk_table_get_size(GtkTable*, uint32_t*, uint32_t*);
extern void gtk_table_resize(GtkTable*, uint32_t, uint32_t);
extern void gtk_table_set_col_spacing(GtkTable*, uint32_t, uint32_t);
extern void gtk_table_set_col_spacings(GtkTable*, uint32_t);
extern void gtk_table_set_homogeneous(GtkTable*, int);
extern void gtk_table_set_row_spacing(GtkTable*, uint32_t, uint32_t);
extern void gtk_table_set_row_spacings(GtkTable*, uint32_t);
extern GType gtk_table_get_type();
extern GtkTargetEntry* gtk_target_entry_new(char*, uint32_t, uint32_t);
extern GtkTargetEntry* gtk_target_entry_copy(GtkTargetEntry*);
extern void gtk_target_entry_free(GtkTargetEntry*);
extern GtkTargetList* gtk_target_list_new(GtkTargetEntry*, uint32_t);
extern void gtk_target_list_add(GtkTargetList*, GdkAtom, uint32_t, uint32_t);
extern void gtk_target_list_add_image_targets(GtkTargetList*, uint32_t, int);
extern void gtk_target_list_add_rich_text_targets(GtkTargetList*, uint32_t, int, GtkTextBuffer*);
extern void gtk_target_list_add_table(GtkTargetList*, GtkTargetEntry*, uint32_t);
extern void gtk_target_list_add_text_targets(GtkTargetList*, uint32_t);
extern void gtk_target_list_add_uri_targets(GtkTargetList*, uint32_t);
extern int gtk_target_list_find(GtkTargetList*, GdkAtom, uint32_t*);
extern GtkTargetList* gtk_target_list_ref(GtkTargetList*);
extern void gtk_target_list_remove(GtkTargetList*, GdkAtom);
extern void gtk_target_list_unref(GtkTargetList*);
extern GtkWidget* gtk_tearoff_menu_item_new();
extern GType gtk_tearoff_menu_item_get_type();
extern GtkTextAttributes* gtk_text_attributes_new();
extern GtkTextAttributes* gtk_text_attributes_copy(GtkTextAttributes*);
extern void gtk_text_attributes_copy_values(GtkTextAttributes*, GtkTextAttributes*);
extern GtkTextAttributes* gtk_text_attributes_ref(GtkTextAttributes*);
extern void gtk_text_attributes_unref(GtkTextAttributes*);
extern GtkTextBuffer* gtk_text_buffer_new(GtkTextTagTable*);
extern void gtk_text_buffer_add_mark(GtkTextBuffer*, GtkTextMark*, GtkTextIter*);
extern void gtk_text_buffer_add_selection_clipboard(GtkTextBuffer*, GtkClipboard*);
extern void gtk_text_buffer_apply_tag(GtkTextBuffer*, GtkTextTag*, GtkTextIter*, GtkTextIter*);
extern void gtk_text_buffer_apply_tag_by_name(GtkTextBuffer*, char*, GtkTextIter*, GtkTextIter*);
extern int gtk_text_buffer_backspace(GtkTextBuffer*, GtkTextIter*, int, int);
extern void gtk_text_buffer_begin_user_action(GtkTextBuffer*);
extern void gtk_text_buffer_copy_clipboard(GtkTextBuffer*, GtkClipboard*);
extern GtkTextChildAnchor* gtk_text_buffer_create_child_anchor(GtkTextBuffer*, GtkTextIter*);
extern GtkTextMark* gtk_text_buffer_create_mark(GtkTextBuffer*, char*, GtkTextIter*, int);
extern void gtk_text_buffer_cut_clipboard(GtkTextBuffer*, GtkClipboard*, int);
extern void gtk_text_buffer_delete(GtkTextBuffer*, GtkTextIter*, GtkTextIter*);
extern int gtk_text_buffer_delete_interactive(GtkTextBuffer*, GtkTextIter*, GtkTextIter*, int);
extern void gtk_text_buffer_delete_mark(GtkTextBuffer*, GtkTextMark*);
extern void gtk_text_buffer_delete_mark_by_name(GtkTextBuffer*, char*);
extern int gtk_text_buffer_delete_selection(GtkTextBuffer*, int, int);
extern int gtk_text_buffer_deserialize(GtkTextBuffer*, GtkTextBuffer*, GdkAtom, GtkTextIter*, uint8_t*, uint64_t, GError**);
extern int gtk_text_buffer_deserialize_get_can_create_tags(GtkTextBuffer*, GdkAtom);
extern void gtk_text_buffer_deserialize_set_can_create_tags(GtkTextBuffer*, GdkAtom, int);
extern void gtk_text_buffer_end_user_action(GtkTextBuffer*);
extern void gtk_text_buffer_get_bounds(GtkTextBuffer*, GtkTextIter*, GtkTextIter*);
extern int32_t gtk_text_buffer_get_char_count(GtkTextBuffer*);
extern GtkTargetList* gtk_text_buffer_get_copy_target_list(GtkTextBuffer*);
extern GdkAtom* gtk_text_buffer_get_deserialize_formats(GtkTextBuffer*, int32_t*);
extern void gtk_text_buffer_get_end_iter(GtkTextBuffer*, GtkTextIter*);
extern int gtk_text_buffer_get_has_selection(GtkTextBuffer*);
extern GtkTextMark* gtk_text_buffer_get_insert(GtkTextBuffer*);
extern void gtk_text_buffer_get_iter_at_child_anchor(GtkTextBuffer*, GtkTextIter*, GtkTextChildAnchor*);
extern void gtk_text_buffer_get_iter_at_line(GtkTextBuffer*, GtkTextIter*, int32_t);
extern void gtk_text_buffer_get_iter_at_line_index(GtkTextBuffer*, GtkTextIter*, int32_t, int32_t);
extern void gtk_text_buffer_get_iter_at_line_offset(GtkTextBuffer*, GtkTextIter*, int32_t, int32_t);
extern void gtk_text_buffer_get_iter_at_mark(GtkTextBuffer*, GtkTextIter*, GtkTextMark*);
extern void gtk_text_buffer_get_iter_at_offset(GtkTextBuffer*, GtkTextIter*, int32_t);
extern int32_t gtk_text_buffer_get_line_count(GtkTextBuffer*);
extern GtkTextMark* gtk_text_buffer_get_mark(GtkTextBuffer*, char*);
extern int gtk_text_buffer_get_modified(GtkTextBuffer*);
extern GtkTargetList* gtk_text_buffer_get_paste_target_list(GtkTextBuffer*);
extern GtkTextMark* gtk_text_buffer_get_selection_bound(GtkTextBuffer*);
extern int gtk_text_buffer_get_selection_bounds(GtkTextBuffer*, GtkTextIter*, GtkTextIter*);
extern GdkAtom* gtk_text_buffer_get_serialize_formats(GtkTextBuffer*, int32_t*);
extern char* gtk_text_buffer_get_slice(GtkTextBuffer*, GtkTextIter*, GtkTextIter*, int);
extern void gtk_text_buffer_get_start_iter(GtkTextBuffer*, GtkTextIter*);
extern GtkTextTagTable* gtk_text_buffer_get_tag_table(GtkTextBuffer*);
extern char* gtk_text_buffer_get_text(GtkTextBuffer*, GtkTextIter*, GtkTextIter*, int);
extern void gtk_text_buffer_insert(GtkTextBuffer*, GtkTextIter*, char*, int32_t);
extern void gtk_text_buffer_insert_at_cursor(GtkTextBuffer*, char*, int32_t);
extern void gtk_text_buffer_insert_child_anchor(GtkTextBuffer*, GtkTextIter*, GtkTextChildAnchor*);
extern int gtk_text_buffer_insert_interactive(GtkTextBuffer*, GtkTextIter*, char*, int32_t, int);
extern int gtk_text_buffer_insert_interactive_at_cursor(GtkTextBuffer*, char*, int32_t, int);
extern void gtk_text_buffer_insert_pixbuf(GtkTextBuffer*, GtkTextIter*, GdkPixbuf*);
extern void gtk_text_buffer_insert_range(GtkTextBuffer*, GtkTextIter*, GtkTextIter*, GtkTextIter*);
extern int gtk_text_buffer_insert_range_interactive(GtkTextBuffer*, GtkTextIter*, GtkTextIter*, GtkTextIter*, int);
extern void gtk_text_buffer_move_mark(GtkTextBuffer*, GtkTextMark*, GtkTextIter*);
extern void gtk_text_buffer_move_mark_by_name(GtkTextBuffer*, char*, GtkTextIter*);
extern void gtk_text_buffer_paste_clipboard(GtkTextBuffer*, GtkClipboard*, GtkTextIter*, int);
extern void gtk_text_buffer_place_cursor(GtkTextBuffer*, GtkTextIter*);
extern GdkAtom gtk_text_buffer_register_deserialize_format(GtkTextBuffer*, char*, GtkTextBufferDeserializeFunc, void*, GDestroyNotify);
#pragma GCC diagnostic ignored "-Wunused-function"
static GdkAtom _gtk_text_buffer_register_deserialize_format(GtkTextBuffer* this, char* arg0, void* gofunc) {
	if (gofunc) {
		return gtk_text_buffer_register_deserialize_format(this, arg0, _GtkTextBufferDeserializeFunc_c_wrapper, gofunc, _c_callback_cleanup);
	} else {
		return gtk_text_buffer_register_deserialize_format(this, arg0, 0, 0, 0);
	}
}
extern GdkAtom gtk_text_buffer_register_deserialize_tagset(GtkTextBuffer*, char*);
extern GdkAtom gtk_text_buffer_register_serialize_format(GtkTextBuffer*, char*, GtkTextBufferSerializeFunc, void*, GDestroyNotify);
#pragma GCC diagnostic ignored "-Wunused-function"
static GdkAtom _gtk_text_buffer_register_serialize_format(GtkTextBuffer* this, char* arg0, void* gofunc) {
	if (gofunc) {
		return gtk_text_buffer_register_serialize_format(this, arg0, _GtkTextBufferSerializeFunc_c_wrapper, gofunc, _c_callback_cleanup);
	} else {
		return gtk_text_buffer_register_serialize_format(this, arg0, 0, 0, 0);
	}
}
extern GdkAtom gtk_text_buffer_register_serialize_tagset(GtkTextBuffer*, char*);
extern void gtk_text_buffer_remove_all_tags(GtkTextBuffer*, GtkTextIter*, GtkTextIter*);
extern void gtk_text_buffer_remove_selection_clipboard(GtkTextBuffer*, GtkClipboard*);
extern void gtk_text_buffer_remove_tag(GtkTextBuffer*, GtkTextTag*, GtkTextIter*, GtkTextIter*);
extern void gtk_text_buffer_remove_tag_by_name(GtkTextBuffer*, char*, GtkTextIter*, GtkTextIter*);
extern void gtk_text_buffer_select_range(GtkTextBuffer*, GtkTextIter*, GtkTextIter*);
extern uint8_t* gtk_text_buffer_serialize(GtkTextBuffer*, GtkTextBuffer*, GdkAtom, GtkTextIter*, GtkTextIter*, uint64_t*);
extern void gtk_text_buffer_set_modified(GtkTextBuffer*, int);
extern void gtk_text_buffer_set_text(GtkTextBuffer*, char*, int32_t);
extern void gtk_text_buffer_unregister_deserialize_format(GtkTextBuffer*, GdkAtom);
extern void gtk_text_buffer_unregister_serialize_format(GtkTextBuffer*, GdkAtom);
extern GType gtk_text_buffer_get_type();
extern GtkTextChildAnchor* gtk_text_child_anchor_new();
extern int gtk_text_child_anchor_get_deleted(GtkTextChildAnchor*);
extern GList* gtk_text_child_anchor_get_widgets(GtkTextChildAnchor*);
extern GType gtk_text_child_anchor_get_type();
extern void gtk_text_iter_assign(GtkTextIter*, GtkTextIter*);
extern int gtk_text_iter_backward_char(GtkTextIter*);
extern int gtk_text_iter_backward_chars(GtkTextIter*, int32_t);
extern int gtk_text_iter_backward_cursor_position(GtkTextIter*);
extern int gtk_text_iter_backward_cursor_positions(GtkTextIter*, int32_t);
extern int gtk_text_iter_backward_find_char(GtkTextIter*, GtkTextCharPredicate, void*, GtkTextIter*);
#pragma GCC diagnostic ignored "-Wunused-function"
static int _gtk_text_iter_backward_find_char(GtkTextIter* this, void* gofunc, GtkTextIter* arg2) {
	if (gofunc) {
		return gtk_text_iter_backward_find_char(this, _GtkTextCharPredicate_c_wrapper, gofunc, arg2);
	} else {
		return gtk_text_iter_backward_find_char(this, 0, 0, arg2);
	}
}
extern int gtk_text_iter_backward_line(GtkTextIter*);
extern int gtk_text_iter_backward_lines(GtkTextIter*, int32_t);
extern int gtk_text_iter_backward_search(GtkTextIter*, char*, GtkTextSearchFlags, GtkTextIter*, GtkTextIter*, GtkTextIter*);
extern int gtk_text_iter_backward_sentence_start(GtkTextIter*);
extern int gtk_text_iter_backward_sentence_starts(GtkTextIter*, int32_t);
extern int gtk_text_iter_backward_to_tag_toggle(GtkTextIter*, GtkTextTag*);
extern int gtk_text_iter_backward_visible_cursor_position(GtkTextIter*);
extern int gtk_text_iter_backward_visible_cursor_positions(GtkTextIter*, int32_t);
extern int gtk_text_iter_backward_visible_line(GtkTextIter*);
extern int gtk_text_iter_backward_visible_lines(GtkTextIter*, int32_t);
extern int gtk_text_iter_backward_visible_word_start(GtkTextIter*);
extern int gtk_text_iter_backward_visible_word_starts(GtkTextIter*, int32_t);
extern int gtk_text_iter_backward_word_start(GtkTextIter*);
extern int gtk_text_iter_backward_word_starts(GtkTextIter*, int32_t);
extern int gtk_text_iter_begins_tag(GtkTextIter*, GtkTextTag*);
extern int gtk_text_iter_can_insert(GtkTextIter*, int);
extern int32_t gtk_text_iter_compare(GtkTextIter*, GtkTextIter*);
extern GtkTextIter* gtk_text_iter_copy(GtkTextIter*);
extern int gtk_text_iter_editable(GtkTextIter*, int);
extern int gtk_text_iter_ends_line(GtkTextIter*);
extern int gtk_text_iter_ends_sentence(GtkTextIter*);
extern int gtk_text_iter_ends_tag(GtkTextIter*, GtkTextTag*);
extern int gtk_text_iter_ends_word(GtkTextIter*);
extern int gtk_text_iter_equal(GtkTextIter*, GtkTextIter*);
extern int gtk_text_iter_forward_char(GtkTextIter*);
extern int gtk_text_iter_forward_chars(GtkTextIter*, int32_t);
extern int gtk_text_iter_forward_cursor_position(GtkTextIter*);
extern int gtk_text_iter_forward_cursor_positions(GtkTextIter*, int32_t);
extern int gtk_text_iter_forward_find_char(GtkTextIter*, GtkTextCharPredicate, void*, GtkTextIter*);
#pragma GCC diagnostic ignored "-Wunused-function"
static int _gtk_text_iter_forward_find_char(GtkTextIter* this, void* gofunc, GtkTextIter* arg2) {
	if (gofunc) {
		return gtk_text_iter_forward_find_char(this, _GtkTextCharPredicate_c_wrapper, gofunc, arg2);
	} else {
		return gtk_text_iter_forward_find_char(this, 0, 0, arg2);
	}
}
extern int gtk_text_iter_forward_line(GtkTextIter*);
extern int gtk_text_iter_forward_lines(GtkTextIter*, int32_t);
extern int gtk_text_iter_forward_search(GtkTextIter*, char*, GtkTextSearchFlags, GtkTextIter*, GtkTextIter*, GtkTextIter*);
extern int gtk_text_iter_forward_sentence_end(GtkTextIter*);
extern int gtk_text_iter_forward_sentence_ends(GtkTextIter*, int32_t);
extern void gtk_text_iter_forward_to_end(GtkTextIter*);
extern int gtk_text_iter_forward_to_line_end(GtkTextIter*);
extern int gtk_text_iter_forward_to_tag_toggle(GtkTextIter*, GtkTextTag*);
extern int gtk_text_iter_forward_visible_cursor_position(GtkTextIter*);
extern int gtk_text_iter_forward_visible_cursor_positions(GtkTextIter*, int32_t);
extern int gtk_text_iter_forward_visible_line(GtkTextIter*);
extern int gtk_text_iter_forward_visible_lines(GtkTextIter*, int32_t);
extern int gtk_text_iter_forward_visible_word_end(GtkTextIter*);
extern int gtk_text_iter_forward_visible_word_ends(GtkTextIter*, int32_t);
extern int gtk_text_iter_forward_word_end(GtkTextIter*);
extern int gtk_text_iter_forward_word_ends(GtkTextIter*, int32_t);
extern void gtk_text_iter_free(GtkTextIter*);
extern int gtk_text_iter_get_attributes(GtkTextIter*, GtkTextAttributes*);
extern GtkTextBuffer* gtk_text_iter_get_buffer(GtkTextIter*);
extern int32_t gtk_text_iter_get_bytes_in_line(GtkTextIter*);
extern uint32_t gtk_text_iter_get_char(GtkTextIter*);
extern int32_t gtk_text_iter_get_chars_in_line(GtkTextIter*);
extern GtkTextChildAnchor* gtk_text_iter_get_child_anchor(GtkTextIter*);
extern PangoLanguage* gtk_text_iter_get_language(GtkTextIter*);
extern int32_t gtk_text_iter_get_line(GtkTextIter*);
extern int32_t gtk_text_iter_get_line_index(GtkTextIter*);
extern int32_t gtk_text_iter_get_line_offset(GtkTextIter*);
extern GSList* gtk_text_iter_get_marks(GtkTextIter*);
extern int32_t gtk_text_iter_get_offset(GtkTextIter*);
extern GdkPixbuf* gtk_text_iter_get_pixbuf(GtkTextIter*);
extern char* gtk_text_iter_get_slice(GtkTextIter*, GtkTextIter*);
extern GSList* gtk_text_iter_get_tags(GtkTextIter*);
extern char* gtk_text_iter_get_text(GtkTextIter*, GtkTextIter*);
extern GSList* gtk_text_iter_get_toggled_tags(GtkTextIter*, int);
extern int32_t gtk_text_iter_get_visible_line_index(GtkTextIter*);
extern int32_t gtk_text_iter_get_visible_line_offset(GtkTextIter*);
extern char* gtk_text_iter_get_visible_slice(GtkTextIter*, GtkTextIter*);
extern char* gtk_text_iter_get_visible_text(GtkTextIter*, GtkTextIter*);
extern int gtk_text_iter_has_tag(GtkTextIter*, GtkTextTag*);
extern int gtk_text_iter_in_range(GtkTextIter*, GtkTextIter*, GtkTextIter*);
extern int gtk_text_iter_inside_sentence(GtkTextIter*);
extern int gtk_text_iter_inside_word(GtkTextIter*);
extern int gtk_text_iter_is_cursor_position(GtkTextIter*);
extern int gtk_text_iter_is_end(GtkTextIter*);
extern int gtk_text_iter_is_start(GtkTextIter*);
extern void gtk_text_iter_order(GtkTextIter*, GtkTextIter*);
extern void gtk_text_iter_set_line(GtkTextIter*, int32_t);
extern void gtk_text_iter_set_line_index(GtkTextIter*, int32_t);
extern void gtk_text_iter_set_line_offset(GtkTextIter*, int32_t);
extern void gtk_text_iter_set_offset(GtkTextIter*, int32_t);
extern void gtk_text_iter_set_visible_line_index(GtkTextIter*, int32_t);
extern void gtk_text_iter_set_visible_line_offset(GtkTextIter*, int32_t);
extern int gtk_text_iter_starts_line(GtkTextIter*);
extern int gtk_text_iter_starts_sentence(GtkTextIter*);
extern int gtk_text_iter_starts_word(GtkTextIter*);
extern int gtk_text_iter_toggles_tag(GtkTextIter*, GtkTextTag*);
extern GtkTextMark* gtk_text_mark_new(char*, int);
extern GtkTextBuffer* gtk_text_mark_get_buffer(GtkTextMark*);
extern int gtk_text_mark_get_deleted(GtkTextMark*);
extern int gtk_text_mark_get_left_gravity(GtkTextMark*);
extern char* gtk_text_mark_get_name(GtkTextMark*);
extern int gtk_text_mark_get_visible(GtkTextMark*);
extern void gtk_text_mark_set_visible(GtkTextMark*, int);
extern GType gtk_text_mark_get_type();
extern GtkTextTag* gtk_text_tag_new(char*);
extern int gtk_text_tag_event(GtkTextTag*, GObject*, GdkEvent*, GtkTextIter*);
extern int32_t gtk_text_tag_get_priority(GtkTextTag*);
extern void gtk_text_tag_set_priority(GtkTextTag*, int32_t);
extern GType gtk_text_tag_get_type();
extern GtkTextTagTable* gtk_text_tag_table_new();
extern void gtk_text_tag_table_add(GtkTextTagTable*, GtkTextTag*);
extern void gtk_text_tag_table_foreach(GtkTextTagTable*, GtkTextTagTableForeach, void*);
#pragma GCC diagnostic ignored "-Wunused-function"
static void _gtk_text_tag_table_foreach(GtkTextTagTable* this, void* gofunc) {
	if (gofunc) {
		gtk_text_tag_table_foreach(this, _GtkTextTagTableForeach_c_wrapper, gofunc);
	} else {
		gtk_text_tag_table_foreach(this, 0, 0);
	}
}
extern int32_t gtk_text_tag_table_get_size(GtkTextTagTable*);
extern GtkTextTag* gtk_text_tag_table_lookup(GtkTextTagTable*, char*);
extern void gtk_text_tag_table_remove(GtkTextTagTable*, GtkTextTag*);
extern GType gtk_text_tag_table_get_type();
extern GtkWidget* gtk_text_view_new();
extern GtkWidget* gtk_text_view_new_with_buffer(GtkTextBuffer*);
extern void gtk_text_view_add_child_at_anchor(GtkTextView*, GtkWidget*, GtkTextChildAnchor*);
extern void gtk_text_view_add_child_in_window(GtkTextView*, GtkWidget*, GtkTextWindowType, int32_t, int32_t);
extern int gtk_text_view_backward_display_line(GtkTextView*, GtkTextIter*);
extern int gtk_text_view_backward_display_line_start(GtkTextView*, GtkTextIter*);
extern void gtk_text_view_buffer_to_window_coords(GtkTextView*, GtkTextWindowType, int32_t, int32_t, int32_t*, int32_t*);
extern int gtk_text_view_forward_display_line(GtkTextView*, GtkTextIter*);
extern int gtk_text_view_forward_display_line_end(GtkTextView*, GtkTextIter*);
extern int gtk_text_view_get_accepts_tab(GtkTextView*);
extern int32_t gtk_text_view_get_border_window_size(GtkTextView*, GtkTextWindowType);
extern GtkTextBuffer* gtk_text_view_get_buffer(GtkTextView*);
extern void gtk_text_view_get_cursor_locations(GtkTextView*, GtkTextIter*, cairoRectangleInt*, cairoRectangleInt*);
extern int gtk_text_view_get_cursor_visible(GtkTextView*);
extern GtkTextAttributes* gtk_text_view_get_default_attributes(GtkTextView*);
extern int gtk_text_view_get_editable(GtkTextView*);
extern GtkAdjustment* gtk_text_view_get_hadjustment(GtkTextView*);
extern int32_t gtk_text_view_get_indent(GtkTextView*);
extern void gtk_text_view_get_iter_at_location(GtkTextView*, GtkTextIter*, int32_t, int32_t);
extern void gtk_text_view_get_iter_at_position(GtkTextView*, GtkTextIter*, int32_t*, int32_t, int32_t);
extern void gtk_text_view_get_iter_location(GtkTextView*, GtkTextIter*, cairoRectangleInt*);
extern GtkJustification gtk_text_view_get_justification(GtkTextView*);
extern int32_t gtk_text_view_get_left_margin(GtkTextView*);
extern void gtk_text_view_get_line_at_y(GtkTextView*, GtkTextIter*, int32_t, int32_t*);
extern void gtk_text_view_get_line_yrange(GtkTextView*, GtkTextIter*, int32_t*, int32_t*);
extern int gtk_text_view_get_overwrite(GtkTextView*);
extern int32_t gtk_text_view_get_pixels_above_lines(GtkTextView*);
extern int32_t gtk_text_view_get_pixels_below_lines(GtkTextView*);
extern int32_t gtk_text_view_get_pixels_inside_wrap(GtkTextView*);
extern int32_t gtk_text_view_get_right_margin(GtkTextView*);
extern PangoTabArray* gtk_text_view_get_tabs(GtkTextView*);
extern GtkAdjustment* gtk_text_view_get_vadjustment(GtkTextView*);
extern void gtk_text_view_get_visible_rect(GtkTextView*, cairoRectangleInt*);
extern GdkWindow* gtk_text_view_get_window(GtkTextView*, GtkTextWindowType);
extern GtkTextWindowType gtk_text_view_get_window_type(GtkTextView*, GdkWindow*);
extern GtkWrapMode gtk_text_view_get_wrap_mode(GtkTextView*);
extern int gtk_text_view_im_context_filter_keypress(GtkTextView*, GdkEventKey*);
extern void gtk_text_view_move_child(GtkTextView*, GtkWidget*, int32_t, int32_t);
extern int gtk_text_view_move_mark_onscreen(GtkTextView*, GtkTextMark*);
extern int gtk_text_view_move_visually(GtkTextView*, GtkTextIter*, int32_t);
extern int gtk_text_view_place_cursor_onscreen(GtkTextView*);
extern void gtk_text_view_reset_im_context(GtkTextView*);
extern void gtk_text_view_scroll_mark_onscreen(GtkTextView*, GtkTextMark*);
extern int gtk_text_view_scroll_to_iter(GtkTextView*, GtkTextIter*, double, int, double, double);
extern void gtk_text_view_scroll_to_mark(GtkTextView*, GtkTextMark*, double, int, double, double);
extern void gtk_text_view_set_accepts_tab(GtkTextView*, int);
extern void gtk_text_view_set_border_window_size(GtkTextView*, GtkTextWindowType, int32_t);
extern void gtk_text_view_set_buffer(GtkTextView*, GtkTextBuffer*);
extern void gtk_text_view_set_cursor_visible(GtkTextView*, int);
extern void gtk_text_view_set_editable(GtkTextView*, int);
extern void gtk_text_view_set_indent(GtkTextView*, int32_t);
extern void gtk_text_view_set_justification(GtkTextView*, GtkJustification);
extern void gtk_text_view_set_left_margin(GtkTextView*, int32_t);
extern void gtk_text_view_set_overwrite(GtkTextView*, int);
extern void gtk_text_view_set_pixels_above_lines(GtkTextView*, int32_t);
extern void gtk_text_view_set_pixels_below_lines(GtkTextView*, int32_t);
extern void gtk_text_view_set_pixels_inside_wrap(GtkTextView*, int32_t);
extern void gtk_text_view_set_right_margin(GtkTextView*, int32_t);
extern void gtk_text_view_set_tabs(GtkTextView*, PangoTabArray*);
extern void gtk_text_view_set_wrap_mode(GtkTextView*, GtkWrapMode);
extern int gtk_text_view_starts_display_line(GtkTextView*, GtkTextIter*);
extern void gtk_text_view_window_to_buffer_coords(GtkTextView*, GtkTextWindowType, int32_t, int32_t, int32_t*, int32_t*);
extern GType gtk_text_view_get_type();
extern GtkThemingEngine* gtk_theming_engine_load(char*);
extern void gtk_theming_engine_get_background_color(GtkThemingEngine*, GtkStateFlags, GdkRGBA*);
extern void gtk_theming_engine_get_border(GtkThemingEngine*, GtkStateFlags, GtkBorder*);
extern void gtk_theming_engine_get_border_color(GtkThemingEngine*, GtkStateFlags, GdkRGBA*);
extern void gtk_theming_engine_get_color(GtkThemingEngine*, GtkStateFlags, GdkRGBA*);
extern GtkTextDirection gtk_theming_engine_get_direction(GtkThemingEngine*);
extern PangoFontDescription* gtk_theming_engine_get_font(GtkThemingEngine*, GtkStateFlags);
extern GtkJunctionSides gtk_theming_engine_get_junction_sides(GtkThemingEngine*);
extern void gtk_theming_engine_get_margin(GtkThemingEngine*, GtkStateFlags, GtkBorder*);
extern void gtk_theming_engine_get_padding(GtkThemingEngine*, GtkStateFlags, GtkBorder*);
extern GtkWidgetPath* gtk_theming_engine_get_path(GtkThemingEngine*);
extern void gtk_theming_engine_get_property(GtkThemingEngine*, char*, GtkStateFlags, GValue*);
extern GdkScreen* gtk_theming_engine_get_screen(GtkThemingEngine*);
extern GtkStateFlags gtk_theming_engine_get_state(GtkThemingEngine*);
extern void gtk_theming_engine_get_style_property(GtkThemingEngine*, char*, GValue*);
extern int gtk_theming_engine_has_class(GtkThemingEngine*, char*);
extern int gtk_theming_engine_has_region(GtkThemingEngine*, char*, GtkRegionFlags*);
extern int gtk_theming_engine_lookup_color(GtkThemingEngine*, char*, GdkRGBA*);
extern int gtk_theming_engine_state_is_running(GtkThemingEngine*, GtkStateType, double*);
extern GType gtk_theming_engine_get_type();
extern GtkToggleAction* gtk_toggle_action_new(char*, char*, char*, char*);
extern int gtk_toggle_action_get_active(GtkToggleAction*);
extern int gtk_toggle_action_get_draw_as_radio(GtkToggleAction*);
extern void gtk_toggle_action_set_active(GtkToggleAction*, int);
extern void gtk_toggle_action_set_draw_as_radio(GtkToggleAction*, int);
extern void gtk_toggle_action_toggled(GtkToggleAction*);
extern GType gtk_toggle_action_get_type();
extern GtkWidget* gtk_toggle_button_new();
extern GtkWidget* gtk_toggle_button_new_with_label(char*);
extern GtkWidget* gtk_toggle_button_new_with_mnemonic(char*);
extern int gtk_toggle_button_get_active(GtkToggleButton*);
extern int gtk_toggle_button_get_inconsistent(GtkToggleButton*);
extern int gtk_toggle_button_get_mode(GtkToggleButton*);
extern void gtk_toggle_button_set_active(GtkToggleButton*, int);
extern void gtk_toggle_button_set_inconsistent(GtkToggleButton*, int);
extern void gtk_toggle_button_set_mode(GtkToggleButton*, int);
extern void gtk_toggle_button_toggled(GtkToggleButton*);
extern GType gtk_toggle_button_get_type();
extern GtkToolItem* gtk_toggle_tool_button_new();
extern GtkToolItem* gtk_toggle_tool_button_new_from_stock(char*);
extern int gtk_toggle_tool_button_get_active(GtkToggleToolButton*);
extern void gtk_toggle_tool_button_set_active(GtkToggleToolButton*, int);
extern GType gtk_toggle_tool_button_get_type();
extern GtkToolItem* gtk_tool_button_new(GtkWidget*, char*);
extern GtkToolItem* gtk_tool_button_new_from_stock(char*);
extern char* gtk_tool_button_get_icon_name(GtkToolButton*);
extern GtkWidget* gtk_tool_button_get_icon_widget(GtkToolButton*);
extern char* gtk_tool_button_get_label(GtkToolButton*);
extern GtkWidget* gtk_tool_button_get_label_widget(GtkToolButton*);
extern char* gtk_tool_button_get_stock_id(GtkToolButton*);
extern int gtk_tool_button_get_use_underline(GtkToolButton*);
extern void gtk_tool_button_set_icon_name(GtkToolButton*, char*);
extern void gtk_tool_button_set_icon_widget(GtkToolButton*, GtkWidget*);
extern void gtk_tool_button_set_label(GtkToolButton*, char*);
extern void gtk_tool_button_set_label_widget(GtkToolButton*, GtkWidget*);
extern void gtk_tool_button_set_stock_id(GtkToolButton*, char*);
extern void gtk_tool_button_set_use_underline(GtkToolButton*, int);
extern GType gtk_tool_button_get_type();
extern GtkToolItem* gtk_tool_item_new();
extern PangoEllipsizeMode gtk_tool_item_get_ellipsize_mode(GtkToolItem*);
extern int gtk_tool_item_get_expand(GtkToolItem*);
extern int gtk_tool_item_get_homogeneous(GtkToolItem*);
extern int32_t gtk_tool_item_get_icon_size(GtkToolItem*);
extern int gtk_tool_item_get_is_important(GtkToolItem*);
extern GtkOrientation gtk_tool_item_get_orientation(GtkToolItem*);
extern GtkWidget* gtk_tool_item_get_proxy_menu_item(GtkToolItem*, char*);
extern GtkReliefStyle gtk_tool_item_get_relief_style(GtkToolItem*);
extern float gtk_tool_item_get_text_alignment(GtkToolItem*);
extern GtkOrientation gtk_tool_item_get_text_orientation(GtkToolItem*);
extern GtkSizeGroup* gtk_tool_item_get_text_size_group(GtkToolItem*);
extern GtkToolbarStyle gtk_tool_item_get_toolbar_style(GtkToolItem*);
extern int gtk_tool_item_get_use_drag_window(GtkToolItem*);
extern int gtk_tool_item_get_visible_horizontal(GtkToolItem*);
extern int gtk_tool_item_get_visible_vertical(GtkToolItem*);
extern void gtk_tool_item_rebuild_menu(GtkToolItem*);
extern GtkWidget* gtk_tool_item_retrieve_proxy_menu_item(GtkToolItem*);
extern void gtk_tool_item_set_expand(GtkToolItem*, int);
extern void gtk_tool_item_set_homogeneous(GtkToolItem*, int);
extern void gtk_tool_item_set_is_important(GtkToolItem*, int);
extern void gtk_tool_item_set_proxy_menu_item(GtkToolItem*, char*, GtkWidget*);
extern void gtk_tool_item_set_tooltip_markup(GtkToolItem*, char*);
extern void gtk_tool_item_set_tooltip_text(GtkToolItem*, char*);
extern void gtk_tool_item_set_use_drag_window(GtkToolItem*, int);
extern void gtk_tool_item_set_visible_horizontal(GtkToolItem*, int);
extern void gtk_tool_item_set_visible_vertical(GtkToolItem*, int);
extern void gtk_tool_item_toolbar_reconfigured(GtkToolItem*);
extern GType gtk_tool_item_get_type();
extern GtkWidget* gtk_tool_item_group_new(char*);
extern int gtk_tool_item_group_get_collapsed(GtkToolItemGroup*);
extern GtkToolItem* gtk_tool_item_group_get_drop_item(GtkToolItemGroup*, int32_t, int32_t);
extern PangoEllipsizeMode gtk_tool_item_group_get_ellipsize(GtkToolItemGroup*);
extern GtkReliefStyle gtk_tool_item_group_get_header_relief(GtkToolItemGroup*);
extern int32_t gtk_tool_item_group_get_item_position(GtkToolItemGroup*, GtkToolItem*);
extern char* gtk_tool_item_group_get_label(GtkToolItemGroup*);
extern GtkWidget* gtk_tool_item_group_get_label_widget(GtkToolItemGroup*);
extern uint32_t gtk_tool_item_group_get_n_items(GtkToolItemGroup*);
extern GtkToolItem* gtk_tool_item_group_get_nth_item(GtkToolItemGroup*, uint32_t);
extern void gtk_tool_item_group_insert(GtkToolItemGroup*, GtkToolItem*, int32_t);
extern void gtk_tool_item_group_set_collapsed(GtkToolItemGroup*, int);
extern void gtk_tool_item_group_set_ellipsize(GtkToolItemGroup*, PangoEllipsizeMode);
extern void gtk_tool_item_group_set_header_relief(GtkToolItemGroup*, GtkReliefStyle);
extern void gtk_tool_item_group_set_item_position(GtkToolItemGroup*, GtkToolItem*, int32_t);
extern void gtk_tool_item_group_set_label(GtkToolItemGroup*, char*);
extern void gtk_tool_item_group_set_label_widget(GtkToolItemGroup*, GtkWidget*);
extern GType gtk_tool_item_group_get_type();
extern GtkWidget* gtk_tool_palette_new();
extern GtkTargetEntry* gtk_tool_palette_get_drag_target_group();
extern GtkTargetEntry* gtk_tool_palette_get_drag_target_item();
extern void gtk_tool_palette_add_drag_dest(GtkToolPalette*, GtkWidget*, GtkDestDefaults, GtkToolPaletteDragTargets, GdkDragAction);
extern GtkWidget* gtk_tool_palette_get_drag_item(GtkToolPalette*, GtkSelectionData*);
extern GtkToolItemGroup* gtk_tool_palette_get_drop_group(GtkToolPalette*, int32_t, int32_t);
extern GtkToolItem* gtk_tool_palette_get_drop_item(GtkToolPalette*, int32_t, int32_t);
extern int gtk_tool_palette_get_exclusive(GtkToolPalette*, GtkToolItemGroup*);
extern int gtk_tool_palette_get_expand(GtkToolPalette*, GtkToolItemGroup*);
extern int32_t gtk_tool_palette_get_group_position(GtkToolPalette*, GtkToolItemGroup*);
extern GtkAdjustment* gtk_tool_palette_get_hadjustment(GtkToolPalette*);
extern int32_t gtk_tool_palette_get_icon_size(GtkToolPalette*);
extern GtkToolbarStyle gtk_tool_palette_get_style(GtkToolPalette*);
extern GtkAdjustment* gtk_tool_palette_get_vadjustment(GtkToolPalette*);
extern void gtk_tool_palette_set_drag_source(GtkToolPalette*, GtkToolPaletteDragTargets);
extern void gtk_tool_palette_set_exclusive(GtkToolPalette*, GtkToolItemGroup*, int);
extern void gtk_tool_palette_set_expand(GtkToolPalette*, GtkToolItemGroup*, int);
extern void gtk_tool_palette_set_group_position(GtkToolPalette*, GtkToolItemGroup*, int32_t);
extern void gtk_tool_palette_set_icon_size(GtkToolPalette*, int32_t);
extern void gtk_tool_palette_set_style(GtkToolPalette*, GtkToolbarStyle);
extern void gtk_tool_palette_unset_icon_size(GtkToolPalette*);
extern void gtk_tool_palette_unset_style(GtkToolPalette*);
extern GType gtk_tool_palette_get_type();
extern PangoEllipsizeMode gtk_tool_shell_get_ellipsize_mode(GtkToolShell*);
extern int32_t gtk_tool_shell_get_icon_size(GtkToolShell*);
extern GtkOrientation gtk_tool_shell_get_orientation(GtkToolShell*);
extern GtkReliefStyle gtk_tool_shell_get_relief_style(GtkToolShell*);
extern GtkToolbarStyle gtk_tool_shell_get_style(GtkToolShell*);
extern float gtk_tool_shell_get_text_alignment(GtkToolShell*);
extern GtkOrientation gtk_tool_shell_get_text_orientation(GtkToolShell*);
extern GtkSizeGroup* gtk_tool_shell_get_text_size_group(GtkToolShell*);
extern void gtk_tool_shell_rebuild_menu(GtkToolShell*);
extern GType gtk_tool_shell_get_type();
extern GtkWidget* gtk_toolbar_new();
extern int32_t gtk_toolbar_get_drop_index(GtkToolbar*, int32_t, int32_t);
extern int32_t gtk_toolbar_get_icon_size(GtkToolbar*);
extern int32_t gtk_toolbar_get_item_index(GtkToolbar*, GtkToolItem*);
extern int32_t gtk_toolbar_get_n_items(GtkToolbar*);
extern GtkToolItem* gtk_toolbar_get_nth_item(GtkToolbar*, int32_t);
extern GtkReliefStyle gtk_toolbar_get_relief_style(GtkToolbar*);
extern int gtk_toolbar_get_show_arrow(GtkToolbar*);
extern GtkToolbarStyle gtk_toolbar_get_style(GtkToolbar*);
extern void gtk_toolbar_insert(GtkToolbar*, GtkToolItem*, int32_t);
extern void gtk_toolbar_set_drop_highlight_item(GtkToolbar*, GtkToolItem*, int32_t);
extern void gtk_toolbar_set_icon_size(GtkToolbar*, int32_t);
extern void gtk_toolbar_set_show_arrow(GtkToolbar*, int);
extern void gtk_toolbar_set_style(GtkToolbar*, GtkToolbarStyle);
extern void gtk_toolbar_unset_icon_size(GtkToolbar*);
extern void gtk_toolbar_unset_style(GtkToolbar*);
extern GType gtk_toolbar_get_type();
extern void gtk_tooltip_trigger_tooltip_query(GdkDisplay*);
extern void gtk_tooltip_set_custom(GtkTooltip*, GtkWidget*);
extern void gtk_tooltip_set_icon(GtkTooltip*, GdkPixbuf*);
extern void gtk_tooltip_set_icon_from_gicon(GtkTooltip*, GIcon*, int32_t);
extern void gtk_tooltip_set_icon_from_icon_name(GtkTooltip*, char*, int32_t);
extern void gtk_tooltip_set_icon_from_stock(GtkTooltip*, char*, int32_t);
extern void gtk_tooltip_set_markup(GtkTooltip*, char*);
extern void gtk_tooltip_set_text(GtkTooltip*, char*);
extern void gtk_tooltip_set_tip_area(GtkTooltip*, cairoRectangleInt*);
extern GType gtk_tooltip_get_type();
extern int gtk_tree_drag_dest_drag_data_received(GtkTreeDragDest*, GtkTreePath*, GtkSelectionData*);
extern int gtk_tree_drag_dest_row_drop_possible(GtkTreeDragDest*, GtkTreePath*, GtkSelectionData*);
extern GType gtk_tree_drag_dest_get_type();
extern int gtk_tree_drag_source_drag_data_delete(GtkTreeDragSource*, GtkTreePath*);
extern int gtk_tree_drag_source_drag_data_get(GtkTreeDragSource*, GtkTreePath*, GtkSelectionData*);
extern int gtk_tree_drag_source_row_draggable(GtkTreeDragSource*, GtkTreePath*);
extern GType gtk_tree_drag_source_get_type();
extern GtkTreeIter* gtk_tree_iter_copy(GtkTreeIter*);
extern void gtk_tree_iter_free(GtkTreeIter*);
extern GtkTreeModel* gtk_tree_model_filter_new(GtkTreeModel*, GtkTreePath*);
extern void gtk_tree_model_foreach(GtkTreeModel*, GtkTreeModelForeachFunc, void*);
#pragma GCC diagnostic ignored "-Wunused-function"
static void _gtk_tree_model_foreach(GtkTreeModel* this, void* gofunc) {
	if (gofunc) {
		gtk_tree_model_foreach(this, _GtkTreeModelForeachFunc_c_wrapper, gofunc);
	} else {
		gtk_tree_model_foreach(this, 0, 0);
	}
}
extern GType gtk_tree_model_get_column_type(GtkTreeModel*, int32_t);
extern GtkTreeModelFlags gtk_tree_model_get_flags(GtkTreeModel*);
extern int gtk_tree_model_get_iter(GtkTreeModel*, GtkTreeIter*, GtkTreePath*);
extern int gtk_tree_model_get_iter_first(GtkTreeModel*, GtkTreeIter*);
extern int gtk_tree_model_get_iter_from_string(GtkTreeModel*, GtkTreeIter*, char*);
extern int32_t gtk_tree_model_get_n_columns(GtkTreeModel*);
extern GtkTreePath* gtk_tree_model_get_path(GtkTreeModel*, GtkTreeIter*);
extern char* gtk_tree_model_get_string_from_iter(GtkTreeModel*, GtkTreeIter*);
extern void gtk_tree_model_get_value(GtkTreeModel*, GtkTreeIter*, int32_t, GValue*);
extern int gtk_tree_model_iter_children(GtkTreeModel*, GtkTreeIter*, GtkTreeIter*);
extern int gtk_tree_model_iter_has_child(GtkTreeModel*, GtkTreeIter*);
extern int32_t gtk_tree_model_iter_n_children(GtkTreeModel*, GtkTreeIter*);
extern int gtk_tree_model_iter_next(GtkTreeModel*, GtkTreeIter*);
extern int gtk_tree_model_iter_nth_child(GtkTreeModel*, GtkTreeIter*, GtkTreeIter*, int32_t);
extern int gtk_tree_model_iter_parent(GtkTreeModel*, GtkTreeIter*, GtkTreeIter*);
extern int gtk_tree_model_iter_previous(GtkTreeModel*, GtkTreeIter*);
extern void gtk_tree_model_ref_node(GtkTreeModel*, GtkTreeIter*);
extern void gtk_tree_model_row_changed(GtkTreeModel*, GtkTreePath*, GtkTreeIter*);
extern void gtk_tree_model_row_deleted(GtkTreeModel*, GtkTreePath*);
extern void gtk_tree_model_row_has_child_toggled(GtkTreeModel*, GtkTreePath*, GtkTreeIter*);
extern void gtk_tree_model_row_inserted(GtkTreeModel*, GtkTreePath*, GtkTreeIter*);
extern GtkTreeModel* gtk_tree_model_sort_new_with_model(GtkTreeModel*);
extern void gtk_tree_model_unref_node(GtkTreeModel*, GtkTreeIter*);
extern GType gtk_tree_model_get_type();
extern void gtk_tree_model_filter_clear_cache(GtkTreeModelFilter*);
extern int gtk_tree_model_filter_convert_child_iter_to_iter(GtkTreeModelFilter*, GtkTreeIter*, GtkTreeIter*);
extern GtkTreePath* gtk_tree_model_filter_convert_child_path_to_path(GtkTreeModelFilter*, GtkTreePath*);
extern void gtk_tree_model_filter_convert_iter_to_child_iter(GtkTreeModelFilter*, GtkTreeIter*, GtkTreeIter*);
extern GtkTreePath* gtk_tree_model_filter_convert_path_to_child_path(GtkTreeModelFilter*, GtkTreePath*);
extern GtkTreeModel* gtk_tree_model_filter_get_model(GtkTreeModelFilter*);
extern void gtk_tree_model_filter_refilter(GtkTreeModelFilter*);
extern void gtk_tree_model_filter_set_modify_func(GtkTreeModelFilter*, int32_t, GType*, GtkTreeModelFilterModifyFunc, void*, GDestroyNotify);
#pragma GCC diagnostic ignored "-Wunused-function"
static void _gtk_tree_model_filter_set_modify_func(GtkTreeModelFilter* this, int32_t arg0, GType* arg1, void* gofunc) {
	if (gofunc) {
		gtk_tree_model_filter_set_modify_func(this, arg0, arg1, _GtkTreeModelFilterModifyFunc_c_wrapper, gofunc, _c_callback_cleanup);
	} else {
		gtk_tree_model_filter_set_modify_func(this, arg0, arg1, 0, 0, 0);
	}
}
extern void gtk_tree_model_filter_set_visible_column(GtkTreeModelFilter*, int32_t);
extern void gtk_tree_model_filter_set_visible_func(GtkTreeModelFilter*, GtkTreeModelFilterVisibleFunc, void*, GDestroyNotify);
#pragma GCC diagnostic ignored "-Wunused-function"
static void _gtk_tree_model_filter_set_visible_func(GtkTreeModelFilter* this, void* gofunc) {
	if (gofunc) {
		gtk_tree_model_filter_set_visible_func(this, _GtkTreeModelFilterVisibleFunc_c_wrapper, gofunc, _c_callback_cleanup);
	} else {
		gtk_tree_model_filter_set_visible_func(this, 0, 0, 0);
	}
}
extern GType gtk_tree_model_filter_get_type();
extern void gtk_tree_model_sort_clear_cache(GtkTreeModelSort*);
extern int gtk_tree_model_sort_convert_child_iter_to_iter(GtkTreeModelSort*, GtkTreeIter*, GtkTreeIter*);
extern GtkTreePath* gtk_tree_model_sort_convert_child_path_to_path(GtkTreeModelSort*, GtkTreePath*);
extern void gtk_tree_model_sort_convert_iter_to_child_iter(GtkTreeModelSort*, GtkTreeIter*, GtkTreeIter*);
extern GtkTreePath* gtk_tree_model_sort_convert_path_to_child_path(GtkTreeModelSort*, GtkTreePath*);
extern GtkTreeModel* gtk_tree_model_sort_get_model(GtkTreeModelSort*);
extern int gtk_tree_model_sort_iter_is_valid(GtkTreeModelSort*, GtkTreeIter*);
extern void gtk_tree_model_sort_reset_default_sort_func(GtkTreeModelSort*);
extern GType gtk_tree_model_sort_get_type();
extern GtkTreePath* gtk_tree_path_new();
extern GtkTreePath* gtk_tree_path_new_first();
extern GtkTreePath* gtk_tree_path_new_from_string(char*);
extern void gtk_tree_path_append_index(GtkTreePath*, int32_t);
extern int32_t gtk_tree_path_compare(GtkTreePath*, GtkTreePath*);
extern GtkTreePath* gtk_tree_path_copy(GtkTreePath*);
extern void gtk_tree_path_down(GtkTreePath*);
extern void gtk_tree_path_free(GtkTreePath*);
extern int32_t gtk_tree_path_get_depth(GtkTreePath*);
extern int32_t* gtk_tree_path_get_indices_with_depth(GtkTreePath*, int32_t*);
extern int gtk_tree_path_is_ancestor(GtkTreePath*, GtkTreePath*);
extern int gtk_tree_path_is_descendant(GtkTreePath*, GtkTreePath*);
extern void gtk_tree_path_next(GtkTreePath*);
extern void gtk_tree_path_prepend_index(GtkTreePath*, int32_t);
extern int gtk_tree_path_prev(GtkTreePath*);
extern char* gtk_tree_path_to_string(GtkTreePath*);
extern int gtk_tree_path_up(GtkTreePath*);
extern GtkTreeRowReference* gtk_tree_row_reference_new(GtkTreeModel*, GtkTreePath*);
extern GtkTreeRowReference* gtk_tree_row_reference_new_proxy(GObject*, GtkTreeModel*, GtkTreePath*);
extern GtkTreeRowReference* gtk_tree_row_reference_copy(GtkTreeRowReference*);
extern void gtk_tree_row_reference_free(GtkTreeRowReference*);
extern GtkTreeModel* gtk_tree_row_reference_get_model(GtkTreeRowReference*);
extern GtkTreePath* gtk_tree_row_reference_get_path(GtkTreeRowReference*);
extern int gtk_tree_row_reference_valid(GtkTreeRowReference*);
extern void gtk_tree_row_reference_deleted(GObject*, GtkTreePath*);
extern void gtk_tree_row_reference_inserted(GObject*, GtkTreePath*);
extern int32_t gtk_tree_selection_count_selected_rows(GtkTreeSelection*);
extern GtkSelectionMode gtk_tree_selection_get_mode(GtkTreeSelection*);
extern int gtk_tree_selection_get_selected(GtkTreeSelection*, GtkTreeModel**, GtkTreeIter*);
extern GList* gtk_tree_selection_get_selected_rows(GtkTreeSelection*, GtkTreeModel**);
extern GtkTreeView* gtk_tree_selection_get_tree_view(GtkTreeSelection*);
extern int gtk_tree_selection_iter_is_selected(GtkTreeSelection*, GtkTreeIter*);
extern int gtk_tree_selection_path_is_selected(GtkTreeSelection*, GtkTreePath*);
extern void gtk_tree_selection_select_all(GtkTreeSelection*);
extern void gtk_tree_selection_select_iter(GtkTreeSelection*, GtkTreeIter*);
extern void gtk_tree_selection_select_path(GtkTreeSelection*, GtkTreePath*);
extern void gtk_tree_selection_select_range(GtkTreeSelection*, GtkTreePath*, GtkTreePath*);
extern void gtk_tree_selection_selected_foreach(GtkTreeSelection*, GtkTreeSelectionForeachFunc, void*);
#pragma GCC diagnostic ignored "-Wunused-function"
static void _gtk_tree_selection_selected_foreach(GtkTreeSelection* this, void* gofunc) {
	if (gofunc) {
		gtk_tree_selection_selected_foreach(this, _GtkTreeSelectionForeachFunc_c_wrapper, gofunc);
	} else {
		gtk_tree_selection_selected_foreach(this, 0, 0);
	}
}
extern void gtk_tree_selection_set_mode(GtkTreeSelection*, GtkSelectionMode);
extern void gtk_tree_selection_set_select_function(GtkTreeSelection*, GtkTreeSelectionFunc, void*, GDestroyNotify);
#pragma GCC diagnostic ignored "-Wunused-function"
static void _gtk_tree_selection_set_select_function(GtkTreeSelection* this, void* gofunc) {
	if (gofunc) {
		gtk_tree_selection_set_select_function(this, _GtkTreeSelectionFunc_c_wrapper, gofunc, _c_callback_cleanup);
	} else {
		gtk_tree_selection_set_select_function(this, 0, 0, 0);
	}
}
extern void gtk_tree_selection_unselect_all(GtkTreeSelection*);
extern void gtk_tree_selection_unselect_iter(GtkTreeSelection*, GtkTreeIter*);
extern void gtk_tree_selection_unselect_path(GtkTreeSelection*, GtkTreePath*);
extern void gtk_tree_selection_unselect_range(GtkTreeSelection*, GtkTreePath*, GtkTreePath*);
extern GType gtk_tree_selection_get_type();
extern int gtk_tree_sortable_get_sort_column_id(GtkTreeSortable*, int32_t*, GtkSortType*);
extern int gtk_tree_sortable_has_default_sort_func(GtkTreeSortable*);
extern void gtk_tree_sortable_set_default_sort_func(GtkTreeSortable*, GtkTreeIterCompareFunc, void*, GDestroyNotify);
#pragma GCC diagnostic ignored "-Wunused-function"
static void _gtk_tree_sortable_set_default_sort_func(GtkTreeSortable* this, void* gofunc) {
	if (gofunc) {
		gtk_tree_sortable_set_default_sort_func(this, _GtkTreeIterCompareFunc_c_wrapper, gofunc, _c_callback_cleanup);
	} else {
		gtk_tree_sortable_set_default_sort_func(this, 0, 0, 0);
	}
}
extern void gtk_tree_sortable_set_sort_column_id(GtkTreeSortable*, int32_t, GtkSortType);
extern void gtk_tree_sortable_set_sort_func(GtkTreeSortable*, int32_t, GtkTreeIterCompareFunc, void*, GDestroyNotify);
#pragma GCC diagnostic ignored "-Wunused-function"
static void _gtk_tree_sortable_set_sort_func(GtkTreeSortable* this, int32_t arg0, void* gofunc) {
	if (gofunc) {
		gtk_tree_sortable_set_sort_func(this, arg0, _GtkTreeIterCompareFunc_c_wrapper, gofunc, _c_callback_cleanup);
	} else {
		gtk_tree_sortable_set_sort_func(this, arg0, 0, 0, 0);
	}
}
extern void gtk_tree_sortable_sort_column_changed(GtkTreeSortable*);
extern GType gtk_tree_sortable_get_type();
extern GtkTreeStore* gtk_tree_store_newv(int32_t, GType*);
extern void gtk_tree_store_append(GtkTreeStore*, GtkTreeIter*, GtkTreeIter*);
extern void gtk_tree_store_clear(GtkTreeStore*);
extern void gtk_tree_store_insert(GtkTreeStore*, GtkTreeIter*, GtkTreeIter*, int32_t);
extern void gtk_tree_store_insert_after(GtkTreeStore*, GtkTreeIter*, GtkTreeIter*, GtkTreeIter*);
extern void gtk_tree_store_insert_before(GtkTreeStore*, GtkTreeIter*, GtkTreeIter*, GtkTreeIter*);
extern void gtk_tree_store_insert_with_valuesv(GtkTreeStore*, GtkTreeIter*, GtkTreeIter*, int32_t, int32_t*, GValue*, int32_t);
extern int gtk_tree_store_is_ancestor(GtkTreeStore*, GtkTreeIter*, GtkTreeIter*);
extern int32_t gtk_tree_store_iter_depth(GtkTreeStore*, GtkTreeIter*);
extern int gtk_tree_store_iter_is_valid(GtkTreeStore*, GtkTreeIter*);
extern void gtk_tree_store_move_after(GtkTreeStore*, GtkTreeIter*, GtkTreeIter*);
extern void gtk_tree_store_move_before(GtkTreeStore*, GtkTreeIter*, GtkTreeIter*);
extern void gtk_tree_store_prepend(GtkTreeStore*, GtkTreeIter*, GtkTreeIter*);
extern int gtk_tree_store_remove(GtkTreeStore*, GtkTreeIter*);
extern void gtk_tree_store_set_column_types(GtkTreeStore*, int32_t, GType*);
extern void gtk_tree_store_set_value(GtkTreeStore*, GtkTreeIter*, int32_t, GValue*);
extern void gtk_tree_store_set_valuesv(GtkTreeStore*, GtkTreeIter*, int32_t*, GValue*, int32_t);
extern void gtk_tree_store_swap(GtkTreeStore*, GtkTreeIter*, GtkTreeIter*);
extern GType gtk_tree_store_get_type();
extern GtkWidget* gtk_tree_view_new();
extern GtkWidget* gtk_tree_view_new_with_model(GtkTreeModel*);
extern int32_t gtk_tree_view_append_column(GtkTreeView*, GtkTreeViewColumn*);
extern void gtk_tree_view_collapse_all(GtkTreeView*);
extern int gtk_tree_view_collapse_row(GtkTreeView*, GtkTreePath*);
extern void gtk_tree_view_columns_autosize(GtkTreeView*);
extern void gtk_tree_view_convert_bin_window_to_tree_coords(GtkTreeView*, int32_t, int32_t, int32_t*, int32_t*);
extern void gtk_tree_view_convert_bin_window_to_widget_coords(GtkTreeView*, int32_t, int32_t, int32_t*, int32_t*);
extern void gtk_tree_view_convert_tree_to_bin_window_coords(GtkTreeView*, int32_t, int32_t, int32_t*, int32_t*);
extern void gtk_tree_view_convert_tree_to_widget_coords(GtkTreeView*, int32_t, int32_t, int32_t*, int32_t*);
extern void gtk_tree_view_convert_widget_to_bin_window_coords(GtkTreeView*, int32_t, int32_t, int32_t*, int32_t*);
extern void gtk_tree_view_convert_widget_to_tree_coords(GtkTreeView*, int32_t, int32_t, int32_t*, int32_t*);
extern cairoSurface* gtk_tree_view_create_row_drag_icon(GtkTreeView*, GtkTreePath*);
extern void gtk_tree_view_enable_model_drag_dest(GtkTreeView*, GtkTargetEntry*, int32_t, GdkDragAction);
extern void gtk_tree_view_enable_model_drag_source(GtkTreeView*, GdkModifierType, GtkTargetEntry*, int32_t, GdkDragAction);
extern void gtk_tree_view_expand_all(GtkTreeView*);
extern int gtk_tree_view_expand_row(GtkTreeView*, GtkTreePath*, int);
extern void gtk_tree_view_expand_to_path(GtkTreeView*, GtkTreePath*);
extern void gtk_tree_view_get_background_area(GtkTreeView*, GtkTreePath*, GtkTreeViewColumn*, cairoRectangleInt*);
extern GdkWindow* gtk_tree_view_get_bin_window(GtkTreeView*);
extern void gtk_tree_view_get_cell_area(GtkTreeView*, GtkTreePath*, GtkTreeViewColumn*, cairoRectangleInt*);
extern GtkTreeViewColumn* gtk_tree_view_get_column(GtkTreeView*, int32_t);
extern GList* gtk_tree_view_get_columns(GtkTreeView*);
extern void gtk_tree_view_get_cursor(GtkTreeView*, GtkTreePath**, GtkTreeViewColumn**);
extern int gtk_tree_view_get_dest_row_at_pos(GtkTreeView*, int32_t, int32_t, GtkTreePath**, GtkTreeViewDropPosition*);
extern void gtk_tree_view_get_drag_dest_row(GtkTreeView*, GtkTreePath**, GtkTreeViewDropPosition*);
extern int gtk_tree_view_get_enable_search(GtkTreeView*);
extern int gtk_tree_view_get_enable_tree_lines(GtkTreeView*);
extern GtkTreeViewColumn* gtk_tree_view_get_expander_column(GtkTreeView*);
extern int gtk_tree_view_get_fixed_height_mode(GtkTreeView*);
extern GtkTreeViewGridLines gtk_tree_view_get_grid_lines(GtkTreeView*);
extern GtkAdjustment* gtk_tree_view_get_hadjustment(GtkTreeView*);
extern int gtk_tree_view_get_headers_clickable(GtkTreeView*);
extern int gtk_tree_view_get_headers_visible(GtkTreeView*);
extern int gtk_tree_view_get_hover_expand(GtkTreeView*);
extern int gtk_tree_view_get_hover_selection(GtkTreeView*);
extern int32_t gtk_tree_view_get_level_indentation(GtkTreeView*);
extern GtkTreeModel* gtk_tree_view_get_model(GtkTreeView*);
extern int gtk_tree_view_get_path_at_pos(GtkTreeView*, int32_t, int32_t, GtkTreePath**, GtkTreeViewColumn**, int32_t*, int32_t*);
extern int gtk_tree_view_get_reorderable(GtkTreeView*);
extern int gtk_tree_view_get_rubber_banding(GtkTreeView*);
extern int gtk_tree_view_get_rules_hint(GtkTreeView*);
extern int32_t gtk_tree_view_get_search_column(GtkTreeView*);
extern GtkEntry* gtk_tree_view_get_search_entry(GtkTreeView*);
extern GtkTreeSelection* gtk_tree_view_get_selection(GtkTreeView*);
extern int gtk_tree_view_get_show_expanders(GtkTreeView*);
extern int32_t gtk_tree_view_get_tooltip_column(GtkTreeView*);
extern int gtk_tree_view_get_tooltip_context(GtkTreeView*, int32_t*, int32_t*, int, GtkTreeModel**, GtkTreePath**, GtkTreeIter*);
extern GtkAdjustment* gtk_tree_view_get_vadjustment(GtkTreeView*);
extern int gtk_tree_view_get_visible_range(GtkTreeView*, GtkTreePath**, GtkTreePath**);
extern void gtk_tree_view_get_visible_rect(GtkTreeView*, cairoRectangleInt*);
extern int32_t gtk_tree_view_insert_column(GtkTreeView*, GtkTreeViewColumn*, int32_t);
extern int32_t gtk_tree_view_insert_column_with_data_func(GtkTreeView*, int32_t, char*, GtkCellRenderer*, GtkTreeCellDataFunc, void*, GDestroyNotify);
#pragma GCC diagnostic ignored "-Wunused-function"
static int32_t _gtk_tree_view_insert_column_with_data_func(GtkTreeView* this, int32_t arg0, char* arg1, GtkCellRenderer* arg2, void* gofunc) {
	if (gofunc) {
		return gtk_tree_view_insert_column_with_data_func(this, arg0, arg1, arg2, _GtkTreeCellDataFunc_c_wrapper, gofunc, _c_callback_cleanup);
	} else {
		return gtk_tree_view_insert_column_with_data_func(this, arg0, arg1, arg2, 0, 0, 0);
	}
}
extern int gtk_tree_view_is_blank_at_pos(GtkTreeView*, int32_t, int32_t, GtkTreePath**, GtkTreeViewColumn**, int32_t*, int32_t*);
extern int gtk_tree_view_is_rubber_banding_active(GtkTreeView*);
extern void gtk_tree_view_map_expanded_rows(GtkTreeView*, GtkTreeViewMappingFunc, void*);
#pragma GCC diagnostic ignored "-Wunused-function"
static void _gtk_tree_view_map_expanded_rows(GtkTreeView* this, void* gofunc) {
	if (gofunc) {
		gtk_tree_view_map_expanded_rows(this, _GtkTreeViewMappingFunc_c_wrapper, gofunc);
	} else {
		gtk_tree_view_map_expanded_rows(this, 0, 0);
	}
}
extern void gtk_tree_view_move_column_after(GtkTreeView*, GtkTreeViewColumn*, GtkTreeViewColumn*);
extern int32_t gtk_tree_view_remove_column(GtkTreeView*, GtkTreeViewColumn*);
extern void gtk_tree_view_row_activated(GtkTreeView*, GtkTreePath*, GtkTreeViewColumn*);
extern int gtk_tree_view_row_expanded(GtkTreeView*, GtkTreePath*);
extern void gtk_tree_view_scroll_to_cell(GtkTreeView*, GtkTreePath*, GtkTreeViewColumn*, int, float, float);
extern void gtk_tree_view_scroll_to_point(GtkTreeView*, int32_t, int32_t);
extern void gtk_tree_view_set_column_drag_function(GtkTreeView*, GtkTreeViewColumnDropFunc, void*, GDestroyNotify);
#pragma GCC diagnostic ignored "-Wunused-function"
static void _gtk_tree_view_set_column_drag_function(GtkTreeView* this, void* gofunc) {
	if (gofunc) {
		gtk_tree_view_set_column_drag_function(this, _GtkTreeViewColumnDropFunc_c_wrapper, gofunc, _c_callback_cleanup);
	} else {
		gtk_tree_view_set_column_drag_function(this, 0, 0, 0);
	}
}
extern void gtk_tree_view_set_cursor(GtkTreeView*, GtkTreePath*, GtkTreeViewColumn*, int);
extern void gtk_tree_view_set_cursor_on_cell(GtkTreeView*, GtkTreePath*, GtkTreeViewColumn*, GtkCellRenderer*, int);
extern void gtk_tree_view_set_destroy_count_func(GtkTreeView*, GtkTreeDestroyCountFunc, void*, GDestroyNotify);
#pragma GCC diagnostic ignored "-Wunused-function"
static void _gtk_tree_view_set_destroy_count_func(GtkTreeView* this, void* gofunc) {
	if (gofunc) {
		gtk_tree_view_set_destroy_count_func(this, _GtkTreeDestroyCountFunc_c_wrapper, gofunc, _c_callback_cleanup);
	} else {
		gtk_tree_view_set_destroy_count_func(this, 0, 0, 0);
	}
}
extern void gtk_tree_view_set_drag_dest_row(GtkTreeView*, GtkTreePath*, GtkTreeViewDropPosition);
extern void gtk_tree_view_set_enable_search(GtkTreeView*, int);
extern void gtk_tree_view_set_enable_tree_lines(GtkTreeView*, int);
extern void gtk_tree_view_set_expander_column(GtkTreeView*, GtkTreeViewColumn*);
extern void gtk_tree_view_set_fixed_height_mode(GtkTreeView*, int);
extern void gtk_tree_view_set_grid_lines(GtkTreeView*, GtkTreeViewGridLines);
extern void gtk_tree_view_set_hadjustment(GtkTreeView*, GtkAdjustment*);
extern void gtk_tree_view_set_headers_clickable(GtkTreeView*, int);
extern void gtk_tree_view_set_headers_visible(GtkTreeView*, int);
extern void gtk_tree_view_set_hover_expand(GtkTreeView*, int);
extern void gtk_tree_view_set_hover_selection(GtkTreeView*, int);
extern void gtk_tree_view_set_level_indentation(GtkTreeView*, int32_t);
extern void gtk_tree_view_set_model(GtkTreeView*, GtkTreeModel*);
extern void gtk_tree_view_set_reorderable(GtkTreeView*, int);
extern void gtk_tree_view_set_row_separator_func(GtkTreeView*, GtkTreeViewRowSeparatorFunc, void*, GDestroyNotify);
#pragma GCC diagnostic ignored "-Wunused-function"
static void _gtk_tree_view_set_row_separator_func(GtkTreeView* this, void* gofunc) {
	if (gofunc) {
		gtk_tree_view_set_row_separator_func(this, _GtkTreeViewRowSeparatorFunc_c_wrapper, gofunc, _c_callback_cleanup);
	} else {
		gtk_tree_view_set_row_separator_func(this, 0, 0, 0);
	}
}
extern void gtk_tree_view_set_rubber_banding(GtkTreeView*, int);
extern void gtk_tree_view_set_rules_hint(GtkTreeView*, int);
extern void gtk_tree_view_set_search_column(GtkTreeView*, int32_t);
extern void gtk_tree_view_set_search_entry(GtkTreeView*, GtkEntry*);
extern void gtk_tree_view_set_search_equal_func(GtkTreeView*, GtkTreeViewSearchEqualFunc, void*, GDestroyNotify);
#pragma GCC diagnostic ignored "-Wunused-function"
static void _gtk_tree_view_set_search_equal_func(GtkTreeView* this, void* gofunc) {
	if (gofunc) {
		gtk_tree_view_set_search_equal_func(this, _GtkTreeViewSearchEqualFunc_c_wrapper, gofunc, _c_callback_cleanup);
	} else {
		gtk_tree_view_set_search_equal_func(this, 0, 0, 0);
	}
}
extern void gtk_tree_view_set_search_position_func(GtkTreeView*, GtkTreeViewSearchPositionFunc, void*, GDestroyNotify);
#pragma GCC diagnostic ignored "-Wunused-function"
static void _gtk_tree_view_set_search_position_func(GtkTreeView* this, void* gofunc) {
	if (gofunc) {
		gtk_tree_view_set_search_position_func(this, _GtkTreeViewSearchPositionFunc_c_wrapper, gofunc, _c_callback_cleanup);
	} else {
		gtk_tree_view_set_search_position_func(this, 0, 0, 0);
	}
}
extern void gtk_tree_view_set_show_expanders(GtkTreeView*, int);
extern void gtk_tree_view_set_tooltip_cell(GtkTreeView*, GtkTooltip*, GtkTreePath*, GtkTreeViewColumn*, GtkCellRenderer*);
extern void gtk_tree_view_set_tooltip_column(GtkTreeView*, int32_t);
extern void gtk_tree_view_set_tooltip_row(GtkTreeView*, GtkTooltip*, GtkTreePath*);
extern void gtk_tree_view_set_vadjustment(GtkTreeView*, GtkAdjustment*);
extern void gtk_tree_view_unset_rows_drag_dest(GtkTreeView*);
extern void gtk_tree_view_unset_rows_drag_source(GtkTreeView*);
extern GType gtk_tree_view_get_type();
extern GtkTreeViewColumn* gtk_tree_view_column_new();
extern GtkTreeViewColumn* gtk_tree_view_column_new_with_area(GtkCellArea*);
extern void gtk_tree_view_column_add_attribute(GtkTreeViewColumn*, GtkCellRenderer*, char*, int32_t);
extern int gtk_tree_view_column_cell_get_position(GtkTreeViewColumn*, GtkCellRenderer*, int32_t*, int32_t*);
extern void gtk_tree_view_column_cell_get_size(GtkTreeViewColumn*, cairoRectangleInt*, int32_t*, int32_t*, int32_t*, int32_t*);
extern int gtk_tree_view_column_cell_is_visible(GtkTreeViewColumn*);
extern void gtk_tree_view_column_cell_set_cell_data(GtkTreeViewColumn*, GtkTreeModel*, GtkTreeIter*, int, int);
extern void gtk_tree_view_column_clear(GtkTreeViewColumn*);
extern void gtk_tree_view_column_clear_attributes(GtkTreeViewColumn*, GtkCellRenderer*);
extern void gtk_tree_view_column_clicked(GtkTreeViewColumn*);
extern void gtk_tree_view_column_focus_cell(GtkTreeViewColumn*, GtkCellRenderer*);
extern float gtk_tree_view_column_get_alignment(GtkTreeViewColumn*);
extern GtkWidget* gtk_tree_view_column_get_button(GtkTreeViewColumn*);
extern int gtk_tree_view_column_get_clickable(GtkTreeViewColumn*);
extern int gtk_tree_view_column_get_expand(GtkTreeViewColumn*);
extern int32_t gtk_tree_view_column_get_fixed_width(GtkTreeViewColumn*);
extern int32_t gtk_tree_view_column_get_max_width(GtkTreeViewColumn*);
extern int32_t gtk_tree_view_column_get_min_width(GtkTreeViewColumn*);
extern int gtk_tree_view_column_get_reorderable(GtkTreeViewColumn*);
extern int gtk_tree_view_column_get_resizable(GtkTreeViewColumn*);
extern GtkTreeViewColumnSizing gtk_tree_view_column_get_sizing(GtkTreeViewColumn*);
extern int32_t gtk_tree_view_column_get_sort_column_id(GtkTreeViewColumn*);
extern int gtk_tree_view_column_get_sort_indicator(GtkTreeViewColumn*);
extern GtkSortType gtk_tree_view_column_get_sort_order(GtkTreeViewColumn*);
extern int32_t gtk_tree_view_column_get_spacing(GtkTreeViewColumn*);
extern char* gtk_tree_view_column_get_title(GtkTreeViewColumn*);
extern GtkWidget* gtk_tree_view_column_get_tree_view(GtkTreeViewColumn*);
extern int gtk_tree_view_column_get_visible(GtkTreeViewColumn*);
extern GtkWidget* gtk_tree_view_column_get_widget(GtkTreeViewColumn*);
extern int32_t gtk_tree_view_column_get_width(GtkTreeViewColumn*);
extern int32_t gtk_tree_view_column_get_x_offset(GtkTreeViewColumn*);
extern void gtk_tree_view_column_pack_end(GtkTreeViewColumn*, GtkCellRenderer*, int);
extern void gtk_tree_view_column_pack_start(GtkTreeViewColumn*, GtkCellRenderer*, int);
extern void gtk_tree_view_column_queue_resize(GtkTreeViewColumn*);
extern void gtk_tree_view_column_set_alignment(GtkTreeViewColumn*, float);
extern void gtk_tree_view_column_set_cell_data_func(GtkTreeViewColumn*, GtkCellRenderer*, GtkTreeCellDataFunc, void*, GDestroyNotify);
#pragma GCC diagnostic ignored "-Wunused-function"
static void _gtk_tree_view_column_set_cell_data_func(GtkTreeViewColumn* this, GtkCellRenderer* arg0, void* gofunc) {
	if (gofunc) {
		gtk_tree_view_column_set_cell_data_func(this, arg0, _GtkTreeCellDataFunc_c_wrapper, gofunc, _c_callback_cleanup);
	} else {
		gtk_tree_view_column_set_cell_data_func(this, arg0, 0, 0, 0);
	}
}
extern void gtk_tree_view_column_set_clickable(GtkTreeViewColumn*, int);
extern void gtk_tree_view_column_set_expand(GtkTreeViewColumn*, int);
extern void gtk_tree_view_column_set_fixed_width(GtkTreeViewColumn*, int32_t);
extern void gtk_tree_view_column_set_max_width(GtkTreeViewColumn*, int32_t);
extern void gtk_tree_view_column_set_min_width(GtkTreeViewColumn*, int32_t);
extern void gtk_tree_view_column_set_reorderable(GtkTreeViewColumn*, int);
extern void gtk_tree_view_column_set_resizable(GtkTreeViewColumn*, int);
extern void gtk_tree_view_column_set_sizing(GtkTreeViewColumn*, GtkTreeViewColumnSizing);
extern void gtk_tree_view_column_set_sort_column_id(GtkTreeViewColumn*, int32_t);
extern void gtk_tree_view_column_set_sort_indicator(GtkTreeViewColumn*, int);
extern void gtk_tree_view_column_set_sort_order(GtkTreeViewColumn*, GtkSortType);
extern void gtk_tree_view_column_set_spacing(GtkTreeViewColumn*, int32_t);
extern void gtk_tree_view_column_set_title(GtkTreeViewColumn*, char*);
extern void gtk_tree_view_column_set_visible(GtkTreeViewColumn*, int);
extern void gtk_tree_view_column_set_widget(GtkTreeViewColumn*, GtkWidget*);
extern GType gtk_tree_view_column_get_type();
extern GtkUIManager* gtk_ui_manager_new();
extern void gtk_ui_manager_add_ui(GtkUIManager*, uint32_t, char*, char*, char*, GtkUIManagerItemType, int);
extern uint32_t gtk_ui_manager_add_ui_from_file(GtkUIManager*, char*, GError**);
extern uint32_t gtk_ui_manager_add_ui_from_string(GtkUIManager*, char*, int64_t, GError**);
extern void gtk_ui_manager_ensure_update(GtkUIManager*);
extern GtkAccelGroup* gtk_ui_manager_get_accel_group(GtkUIManager*);
extern GtkAction* gtk_ui_manager_get_action(GtkUIManager*, char*);
extern GList* gtk_ui_manager_get_action_groups(GtkUIManager*);
extern int gtk_ui_manager_get_add_tearoffs(GtkUIManager*);
extern GSList* gtk_ui_manager_get_toplevels(GtkUIManager*, GtkUIManagerItemType);
extern char* gtk_ui_manager_get_ui(GtkUIManager*);
extern GtkWidget* gtk_ui_manager_get_widget(GtkUIManager*, char*);
extern void gtk_ui_manager_insert_action_group(GtkUIManager*, GtkActionGroup*, int32_t);
extern uint32_t gtk_ui_manager_new_merge_id(GtkUIManager*);
extern void gtk_ui_manager_remove_action_group(GtkUIManager*, GtkActionGroup*);
extern void gtk_ui_manager_remove_ui(GtkUIManager*, uint32_t);
extern void gtk_ui_manager_set_add_tearoffs(GtkUIManager*, int);
extern GType gtk_ui_manager_get_type();
extern GtkWidget* gtk_vbox_new(int, int32_t);
extern GType gtk_vbox_get_type();
extern GtkWidget* gtk_vbutton_box_new();
extern GType gtk_vbutton_box_get_type();
extern GtkWidget* gtk_vpaned_new();
extern GType gtk_vpaned_get_type();
extern GtkWidget* gtk_vscale_new(GtkAdjustment*);
extern GtkWidget* gtk_vscale_new_with_range(double, double, double);
extern GType gtk_vscale_get_type();
extern GtkWidget* gtk_vscrollbar_new(GtkAdjustment*);
extern GType gtk_vscrollbar_get_type();
extern GtkWidget* gtk_vseparator_new();
extern GType gtk_vseparator_get_type();
extern GtkWidget* gtk_viewport_new(GtkAdjustment*, GtkAdjustment*);
extern GdkWindow* gtk_viewport_get_bin_window(GtkViewport*);
extern GtkAdjustment* gtk_viewport_get_hadjustment(GtkViewport*);
extern GtkShadowType gtk_viewport_get_shadow_type(GtkViewport*);
extern GtkAdjustment* gtk_viewport_get_vadjustment(GtkViewport*);
extern GdkWindow* gtk_viewport_get_view_window(GtkViewport*);
extern void gtk_viewport_set_hadjustment(GtkViewport*, GtkAdjustment*);
extern void gtk_viewport_set_shadow_type(GtkViewport*, GtkShadowType);
extern void gtk_viewport_set_vadjustment(GtkViewport*, GtkAdjustment*);
extern GType gtk_viewport_get_type();
extern GtkWidget* gtk_volume_button_new();
extern GType gtk_volume_button_get_type();
extern GtkTextDirection gtk_widget_get_default_direction();
extern GtkStyle* gtk_widget_get_default_style();
extern void gtk_widget_pop_composite_child();
extern void gtk_widget_push_composite_child();
extern void gtk_widget_set_default_direction(GtkTextDirection);
extern int gtk_widget_activate(GtkWidget*);
extern void gtk_widget_add_accelerator(GtkWidget*, char*, GtkAccelGroup*, uint32_t, GdkModifierType, GtkAccelFlags);
extern void gtk_widget_add_device_events(GtkWidget*, GdkDevice*, GdkEventMask);
extern void gtk_widget_add_events(GtkWidget*, int32_t);
extern void gtk_widget_add_mnemonic_label(GtkWidget*, GtkWidget*);
extern int gtk_widget_can_activate_accel(GtkWidget*, uint32_t);
extern int gtk_widget_child_focus(GtkWidget*, GtkDirectionType);
extern void gtk_widget_child_notify(GtkWidget*, char*);
extern void gtk_widget_class_path(GtkWidget*, uint32_t*, char**, char**);
extern int gtk_widget_compute_expand(GtkWidget*, GtkOrientation);
extern PangoContext* gtk_widget_create_pango_context(GtkWidget*);
extern PangoLayout* gtk_widget_create_pango_layout(GtkWidget*, char*);
extern void gtk_widget_destroy(GtkWidget*);
extern void gtk_widget_destroyed(GtkWidget*, GtkWidget**);
extern int gtk_widget_device_is_shadowed(GtkWidget*, GdkDevice*);
extern GdkDragContext* gtk_drag_begin(GtkWidget*, GtkTargetList*, GdkDragAction, int32_t, GdkEvent*);
extern int gtk_drag_check_threshold(GtkWidget*, int32_t, int32_t, int32_t, int32_t);
extern void gtk_drag_dest_add_image_targets(GtkWidget*);
extern void gtk_drag_dest_add_text_targets(GtkWidget*);
extern void gtk_drag_dest_add_uri_targets(GtkWidget*);
extern GdkAtom gtk_drag_dest_find_target(GtkWidget*, GdkDragContext*, GtkTargetList*);
extern GtkTargetList* gtk_drag_dest_get_target_list(GtkWidget*);
extern int gtk_drag_dest_get_track_motion(GtkWidget*);
extern void gtk_drag_dest_set(GtkWidget*, GtkDestDefaults, GtkTargetEntry*, int32_t, GdkDragAction);
extern void gtk_drag_dest_set_proxy(GtkWidget*, GdkWindow*, GdkDragProtocol, int);
extern void gtk_drag_dest_set_target_list(GtkWidget*, GtkTargetList*);
extern void gtk_drag_dest_set_track_motion(GtkWidget*, int);
extern void gtk_drag_dest_unset(GtkWidget*);
extern void gtk_drag_get_data(GtkWidget*, GdkDragContext*, GdkAtom, uint32_t);
extern void gtk_drag_highlight(GtkWidget*);
extern void gtk_drag_source_add_image_targets(GtkWidget*);
extern void gtk_drag_source_add_text_targets(GtkWidget*);
extern void gtk_drag_source_add_uri_targets(GtkWidget*);
extern GtkTargetList* gtk_drag_source_get_target_list(GtkWidget*);
extern void gtk_drag_source_set(GtkWidget*, GdkModifierType, GtkTargetEntry*, int32_t, GdkDragAction);
extern void gtk_drag_source_set_icon_gicon(GtkWidget*, GIcon*);
extern void gtk_drag_source_set_icon_name(GtkWidget*, char*);
extern void gtk_drag_source_set_icon_pixbuf(GtkWidget*, GdkPixbuf*);
extern void gtk_drag_source_set_icon_stock(GtkWidget*, char*);
extern void gtk_drag_source_set_target_list(GtkWidget*, GtkTargetList*);
extern void gtk_drag_source_unset(GtkWidget*);
extern void gtk_drag_unhighlight(GtkWidget*);
extern void gtk_widget_draw(GtkWidget*, cairoContext*);
extern void gtk_widget_ensure_style(GtkWidget*);
extern void gtk_widget_error_bell(GtkWidget*);
extern int gtk_widget_event(GtkWidget*, GdkEvent*);
extern void gtk_widget_freeze_child_notify(GtkWidget*);
extern AtkObject* gtk_widget_get_accessible(GtkWidget*);
extern int32_t gtk_widget_get_allocated_height(GtkWidget*);
extern int32_t gtk_widget_get_allocated_width(GtkWidget*);
extern void gtk_widget_get_allocation(GtkWidget*, cairoRectangleInt*);
extern GtkWidget* gtk_widget_get_ancestor(GtkWidget*, GType);
extern int gtk_widget_get_app_paintable(GtkWidget*);
extern int gtk_widget_get_can_default(GtkWidget*);
extern int gtk_widget_get_can_focus(GtkWidget*);
extern void gtk_widget_get_child_requisition(GtkWidget*, GtkRequisition*);
extern int gtk_widget_get_child_visible(GtkWidget*);
extern GtkClipboard* gtk_widget_get_clipboard(GtkWidget*, GdkAtom);
extern char* gtk_widget_get_composite_name(GtkWidget*);
extern int gtk_widget_get_device_enabled(GtkWidget*, GdkDevice*);
extern GdkEventMask gtk_widget_get_device_events(GtkWidget*, GdkDevice*);
extern GtkTextDirection gtk_widget_get_direction(GtkWidget*);
extern GdkDisplay* gtk_widget_get_display(GtkWidget*);
extern int gtk_widget_get_double_buffered(GtkWidget*);
extern int32_t gtk_widget_get_events(GtkWidget*);
extern GtkAlign gtk_widget_get_halign(GtkWidget*);
extern int gtk_widget_get_has_tooltip(GtkWidget*);
extern int gtk_widget_get_has_window(GtkWidget*);
extern int gtk_widget_get_hexpand(GtkWidget*);
extern int gtk_widget_get_hexpand_set(GtkWidget*);
extern int gtk_widget_get_mapped(GtkWidget*);
extern int32_t gtk_widget_get_margin_bottom(GtkWidget*);
extern int32_t gtk_widget_get_margin_left(GtkWidget*);
extern int32_t gtk_widget_get_margin_right(GtkWidget*);
extern int32_t gtk_widget_get_margin_top(GtkWidget*);
extern GtkRcStyle* gtk_widget_get_modifier_style(GtkWidget*);
extern char* gtk_widget_get_name(GtkWidget*);
extern int gtk_widget_get_no_show_all(GtkWidget*);
extern PangoContext* gtk_widget_get_pango_context(GtkWidget*);
extern GtkWidget* gtk_widget_get_parent(GtkWidget*);
extern GdkWindow* gtk_widget_get_parent_window(GtkWidget*);
extern GtkWidgetPath* gtk_widget_get_path(GtkWidget*);
extern void gtk_widget_get_pointer(GtkWidget*, int32_t*, int32_t*);
extern void gtk_widget_get_preferred_height(GtkWidget*, int32_t*, int32_t*);
extern void gtk_widget_get_preferred_height_for_width(GtkWidget*, int32_t, int32_t*, int32_t*);
extern void gtk_widget_get_preferred_size(GtkWidget*, GtkRequisition*, GtkRequisition*);
extern void gtk_widget_get_preferred_width(GtkWidget*, int32_t*, int32_t*);
extern void gtk_widget_get_preferred_width_for_height(GtkWidget*, int32_t, int32_t*, int32_t*);
extern int gtk_widget_get_realized(GtkWidget*);
extern int gtk_widget_get_receives_default(GtkWidget*);
extern GtkSizeRequestMode gtk_widget_get_request_mode(GtkWidget*);
extern void gtk_widget_get_requisition(GtkWidget*, GtkRequisition*);
extern GdkWindow* gtk_widget_get_root_window(GtkWidget*);
extern GdkScreen* gtk_widget_get_screen(GtkWidget*);
extern int gtk_widget_get_sensitive(GtkWidget*);
extern GtkSettings* gtk_widget_get_settings(GtkWidget*);
extern void gtk_widget_get_size_request(GtkWidget*, int32_t*, int32_t*);
extern GtkStateType gtk_widget_get_state(GtkWidget*);
extern GtkStateFlags gtk_widget_get_state_flags(GtkWidget*);
extern GtkStyle* gtk_widget_get_style(GtkWidget*);
extern GtkStyleContext* gtk_widget_get_style_context(GtkWidget*);
extern int gtk_widget_get_support_multidevice(GtkWidget*);
extern char* gtk_widget_get_tooltip_markup(GtkWidget*);
extern char* gtk_widget_get_tooltip_text(GtkWidget*);
extern GtkWindow* gtk_widget_get_tooltip_window(GtkWidget*);
extern GtkWidget* gtk_widget_get_toplevel(GtkWidget*);
extern GtkAlign gtk_widget_get_valign(GtkWidget*);
extern int gtk_widget_get_vexpand(GtkWidget*);
extern int gtk_widget_get_vexpand_set(GtkWidget*);
extern int gtk_widget_get_visible(GtkWidget*);
extern GdkVisual* gtk_widget_get_visual(GtkWidget*);
extern GdkWindow* gtk_widget_get_window(GtkWidget*);
extern void gtk_grab_add(GtkWidget*);
extern void gtk_widget_grab_default(GtkWidget*);
extern void gtk_widget_grab_focus(GtkWidget*);
extern void gtk_grab_remove(GtkWidget*);
extern int gtk_widget_has_default(GtkWidget*);
extern int gtk_widget_has_focus(GtkWidget*);
extern int gtk_widget_has_grab(GtkWidget*);
extern int gtk_widget_has_rc_style(GtkWidget*);
extern int gtk_widget_has_screen(GtkWidget*);
extern int gtk_widget_has_visible_focus(GtkWidget*);
extern void gtk_widget_hide(GtkWidget*);
extern int gtk_widget_hide_on_delete(GtkWidget*);
extern int gtk_widget_in_destruction(GtkWidget*);
extern void gtk_widget_input_shape_combine_region(GtkWidget*, cairoRegion*);
extern int gtk_widget_intersect(GtkWidget*, cairoRectangleInt*, cairoRectangleInt*);
extern int gtk_widget_is_ancestor(GtkWidget*, GtkWidget*);
extern int gtk_widget_is_composited(GtkWidget*);
extern int gtk_widget_is_drawable(GtkWidget*);
extern int gtk_widget_is_focus(GtkWidget*);
extern int gtk_widget_is_sensitive(GtkWidget*);
extern int gtk_widget_is_toplevel(GtkWidget*);
extern int gtk_widget_keynav_failed(GtkWidget*, GtkDirectionType);
extern GList* gtk_widget_list_accel_closures(GtkWidget*);
extern GList* gtk_widget_list_mnemonic_labels(GtkWidget*);
extern void gtk_widget_map(GtkWidget*);
extern int gtk_widget_mnemonic_activate(GtkWidget*, int);
extern void gtk_widget_modify_base(GtkWidget*, GtkStateType, GdkColor*);
extern void gtk_widget_modify_bg(GtkWidget*, GtkStateType, GdkColor*);
extern void gtk_widget_modify_cursor(GtkWidget*, GdkColor*, GdkColor*);
extern void gtk_widget_modify_fg(GtkWidget*, GtkStateType, GdkColor*);
extern void gtk_widget_modify_font(GtkWidget*, PangoFontDescription*);
extern void gtk_widget_modify_style(GtkWidget*, GtkRcStyle*);
extern void gtk_widget_modify_text(GtkWidget*, GtkStateType, GdkColor*);
extern void gtk_widget_override_background_color(GtkWidget*, GtkStateFlags, GdkRGBA*);
extern void gtk_widget_override_color(GtkWidget*, GtkStateFlags, GdkRGBA*);
extern void gtk_widget_override_cursor(GtkWidget*, GdkRGBA*, GdkRGBA*);
extern void gtk_widget_override_font(GtkWidget*, PangoFontDescription*);
extern void gtk_widget_override_symbolic_color(GtkWidget*, char*, GdkRGBA*);
extern void gtk_widget_path(GtkWidget*, uint32_t*, char**, char**);
extern void gtk_widget_queue_compute_expand(GtkWidget*);
extern void gtk_widget_queue_draw(GtkWidget*);
extern void gtk_widget_queue_draw_area(GtkWidget*, int32_t, int32_t, int32_t, int32_t);
extern void gtk_widget_queue_draw_region(GtkWidget*, cairoRegion*);
extern void gtk_widget_queue_resize(GtkWidget*);
extern void gtk_widget_queue_resize_no_redraw(GtkWidget*);
extern void gtk_widget_realize(GtkWidget*);
extern cairoRegion* gtk_widget_region_intersect(GtkWidget*, cairoRegion*);
extern int gtk_widget_remove_accelerator(GtkWidget*, GtkAccelGroup*, uint32_t, GdkModifierType);
extern void gtk_widget_remove_mnemonic_label(GtkWidget*, GtkWidget*);
extern GdkPixbuf* gtk_widget_render_icon(GtkWidget*, char*, int32_t, char*);
extern GdkPixbuf* gtk_widget_render_icon_pixbuf(GtkWidget*, char*, int32_t);
extern void gtk_widget_reparent(GtkWidget*, GtkWidget*);
extern void gtk_widget_reset_rc_styles(GtkWidget*);
extern void gtk_widget_reset_style(GtkWidget*);
extern int32_t gtk_widget_send_expose(GtkWidget*, GdkEvent*);
extern int gtk_widget_send_focus_change(GtkWidget*, GdkEvent*);
extern void gtk_widget_set_accel_path(GtkWidget*, char*, GtkAccelGroup*);
extern void gtk_widget_set_allocation(GtkWidget*, cairoRectangleInt*);
extern void gtk_widget_set_app_paintable(GtkWidget*, int);
extern void gtk_widget_set_can_default(GtkWidget*, int);
extern void gtk_widget_set_can_focus(GtkWidget*, int);
extern void gtk_widget_set_child_visible(GtkWidget*, int);
extern void gtk_widget_set_composite_name(GtkWidget*, char*);
extern void gtk_widget_set_device_enabled(GtkWidget*, GdkDevice*, int);
extern void gtk_widget_set_device_events(GtkWidget*, GdkDevice*, GdkEventMask);
extern void gtk_widget_set_direction(GtkWidget*, GtkTextDirection);
extern void gtk_widget_set_double_buffered(GtkWidget*, int);
extern void gtk_widget_set_events(GtkWidget*, int32_t);
extern void gtk_widget_set_halign(GtkWidget*, GtkAlign);
extern void gtk_widget_set_has_tooltip(GtkWidget*, int);
extern void gtk_widget_set_has_window(GtkWidget*, int);
extern void gtk_widget_set_hexpand(GtkWidget*, int);
extern void gtk_widget_set_hexpand_set(GtkWidget*, int);
extern void gtk_widget_set_mapped(GtkWidget*, int);
extern void gtk_widget_set_margin_bottom(GtkWidget*, int32_t);
extern void gtk_widget_set_margin_left(GtkWidget*, int32_t);
extern void gtk_widget_set_margin_right(GtkWidget*, int32_t);
extern void gtk_widget_set_margin_top(GtkWidget*, int32_t);
extern void gtk_widget_set_name(GtkWidget*, char*);
extern void gtk_widget_set_no_show_all(GtkWidget*, int);
extern void gtk_widget_set_parent(GtkWidget*, GtkWidget*);
extern void gtk_widget_set_parent_window(GtkWidget*, GdkWindow*);
extern void gtk_widget_set_realized(GtkWidget*, int);
extern void gtk_widget_set_receives_default(GtkWidget*, int);
extern void gtk_widget_set_redraw_on_allocate(GtkWidget*, int);
extern void gtk_widget_set_sensitive(GtkWidget*, int);
extern void gtk_widget_set_size_request(GtkWidget*, int32_t, int32_t);
extern void gtk_widget_set_state(GtkWidget*, GtkStateType);
extern void gtk_widget_set_state_flags(GtkWidget*, GtkStateFlags, int);
extern void gtk_widget_set_style(GtkWidget*, GtkStyle*);
extern void gtk_widget_set_support_multidevice(GtkWidget*, int);
extern void gtk_widget_set_tooltip_markup(GtkWidget*, char*);
extern void gtk_widget_set_tooltip_text(GtkWidget*, char*);
extern void gtk_widget_set_tooltip_window(GtkWidget*, GtkWindow*);
extern void gtk_widget_set_valign(GtkWidget*, GtkAlign);
extern void gtk_widget_set_vexpand(GtkWidget*, int);
extern void gtk_widget_set_vexpand_set(GtkWidget*, int);
extern void gtk_widget_set_visible(GtkWidget*, int);
extern void gtk_widget_set_visual(GtkWidget*, GdkVisual*);
extern void gtk_widget_set_window(GtkWidget*, GdkWindow*);
extern void gtk_widget_shape_combine_region(GtkWidget*, cairoRegion*);
extern void gtk_widget_show(GtkWidget*);
extern void gtk_widget_show_all(GtkWidget*);
extern void gtk_widget_show_now(GtkWidget*);
extern void gtk_widget_size_allocate(GtkWidget*, cairoRectangleInt*);
extern void gtk_widget_size_request(GtkWidget*, GtkRequisition*);
extern void gtk_widget_style_attach(GtkWidget*);
extern void gtk_widget_style_get_property(GtkWidget*, char*, GValue*);
extern void gtk_widget_thaw_child_notify(GtkWidget*);
extern int gtk_widget_translate_coordinates(GtkWidget*, GtkWidget*, int32_t, int32_t, int32_t*, int32_t*);
extern void gtk_widget_trigger_tooltip_query(GtkWidget*);
extern void gtk_widget_unmap(GtkWidget*);
extern void gtk_widget_unparent(GtkWidget*);
extern void gtk_widget_unrealize(GtkWidget*);
extern void gtk_widget_unset_state_flags(GtkWidget*, GtkStateFlags);
extern GType gtk_widget_get_type();
extern GParamSpec* gtk_widget_class_find_style_property(GtkWidgetClass*, char*);
extern void gtk_widget_class_install_style_property(GtkWidgetClass*, GParamSpec*);
extern GParamSpec** gtk_widget_class_list_style_properties(GtkWidgetClass*, uint32_t*);
extern void gtk_widget_class_set_accessible_role(GtkWidgetClass*, AtkRole);
extern void gtk_widget_class_set_accessible_type(GtkWidgetClass*, GType);
extern GtkWidgetPath* gtk_widget_path_new();
extern int32_t gtk_widget_path_append_for_widget(GtkWidgetPath*, GtkWidget*);
extern int32_t gtk_widget_path_append_type(GtkWidgetPath*, GType);
extern int32_t gtk_widget_path_append_with_siblings(GtkWidgetPath*, GtkWidgetPath*, uint32_t);
extern GtkWidgetPath* gtk_widget_path_copy(GtkWidgetPath*);
extern void gtk_widget_path_free(GtkWidgetPath*);
extern GType gtk_widget_path_get_object_type(GtkWidgetPath*);
extern int gtk_widget_path_has_parent(GtkWidgetPath*, GType);
extern int gtk_widget_path_is_type(GtkWidgetPath*, GType);
extern void gtk_widget_path_iter_add_class(GtkWidgetPath*, int32_t, char*);
extern void gtk_widget_path_iter_add_region(GtkWidgetPath*, int32_t, char*, GtkRegionFlags);
extern void gtk_widget_path_iter_clear_classes(GtkWidgetPath*, int32_t);
extern void gtk_widget_path_iter_clear_regions(GtkWidgetPath*, int32_t);
extern char* gtk_widget_path_iter_get_name(GtkWidgetPath*, int32_t);
extern GType gtk_widget_path_iter_get_object_type(GtkWidgetPath*, int32_t);
extern uint32_t gtk_widget_path_iter_get_sibling_index(GtkWidgetPath*, int32_t);
extern GtkWidgetPath* gtk_widget_path_iter_get_siblings(GtkWidgetPath*, int32_t);
extern int gtk_widget_path_iter_has_class(GtkWidgetPath*, int32_t, char*);
extern int gtk_widget_path_iter_has_name(GtkWidgetPath*, int32_t, char*);
extern int gtk_widget_path_iter_has_qclass(GtkWidgetPath*, int32_t, uint32_t);
extern int gtk_widget_path_iter_has_qname(GtkWidgetPath*, int32_t, uint32_t);
extern int gtk_widget_path_iter_has_qregion(GtkWidgetPath*, int32_t, uint32_t, GtkRegionFlags*);
extern int gtk_widget_path_iter_has_region(GtkWidgetPath*, int32_t, char*, GtkRegionFlags*);
extern GSList* gtk_widget_path_iter_list_classes(GtkWidgetPath*, int32_t);
extern GSList* gtk_widget_path_iter_list_regions(GtkWidgetPath*, int32_t);
extern void gtk_widget_path_iter_remove_class(GtkWidgetPath*, int32_t, char*);
extern void gtk_widget_path_iter_remove_region(GtkWidgetPath*, int32_t, char*);
extern void gtk_widget_path_iter_set_name(GtkWidgetPath*, int32_t, char*);
extern void gtk_widget_path_iter_set_object_type(GtkWidgetPath*, int32_t, GType);
extern int32_t gtk_widget_path_length(GtkWidgetPath*);
extern void gtk_widget_path_prepend_type(GtkWidgetPath*, GType);
extern GtkWidgetPath* gtk_widget_path_ref(GtkWidgetPath*);
extern char* gtk_widget_path_to_string(GtkWidgetPath*);
extern void gtk_widget_path_unref(GtkWidgetPath*);
extern GtkWidget* gtk_window_new(GtkWindowType);
extern GList* gtk_window_get_default_icon_list();
extern char* gtk_window_get_default_icon_name();
extern GList* gtk_window_list_toplevels();
extern void gtk_window_set_auto_startup_notification(int);
extern void gtk_window_set_default_icon(GdkPixbuf*);
extern int gtk_window_set_default_icon_from_file(char*, GError**);
extern void gtk_window_set_default_icon_list(GList*);
extern void gtk_window_set_default_icon_name(char*);
extern int gtk_window_activate_default(GtkWindow*);
extern int gtk_window_activate_focus(GtkWindow*);
extern int gtk_window_activate_key(GtkWindow*, GdkEventKey*);
extern void gtk_window_add_accel_group(GtkWindow*, GtkAccelGroup*);
extern void gtk_window_add_mnemonic(GtkWindow*, uint32_t, GtkWidget*);
extern void gtk_window_begin_move_drag(GtkWindow*, int32_t, int32_t, int32_t, uint32_t);
extern void gtk_window_begin_resize_drag(GtkWindow*, GdkWindowEdge, int32_t, int32_t, int32_t, uint32_t);
extern void gtk_window_deiconify(GtkWindow*);
extern void gtk_window_fullscreen(GtkWindow*);
extern int gtk_window_get_accept_focus(GtkWindow*);
extern GtkApplication* gtk_window_get_application(GtkWindow*);
extern int gtk_window_get_decorated(GtkWindow*);
extern void gtk_window_get_default_size(GtkWindow*, int32_t*, int32_t*);
extern GtkWidget* gtk_window_get_default_widget(GtkWindow*);
extern int gtk_window_get_deletable(GtkWindow*);
extern int gtk_window_get_destroy_with_parent(GtkWindow*);
extern GtkWidget* gtk_window_get_focus(GtkWindow*);
extern int gtk_window_get_focus_on_map(GtkWindow*);
extern int gtk_window_get_focus_visible(GtkWindow*);
extern GdkGravity gtk_window_get_gravity(GtkWindow*);
extern GtkWindowGroup* gtk_window_get_group(GtkWindow*);
extern int gtk_window_get_has_resize_grip(GtkWindow*);
extern GdkPixbuf* gtk_window_get_icon(GtkWindow*);
extern GList* gtk_window_get_icon_list(GtkWindow*);
extern char* gtk_window_get_icon_name(GtkWindow*);
extern GdkModifierType gtk_window_get_mnemonic_modifier(GtkWindow*);
extern int gtk_window_get_mnemonics_visible(GtkWindow*);
extern int gtk_window_get_modal(GtkWindow*);
extern double gtk_window_get_opacity(GtkWindow*);
extern void gtk_window_get_position(GtkWindow*, int32_t*, int32_t*);
extern int gtk_window_get_resizable(GtkWindow*);
extern int gtk_window_get_resize_grip_area(GtkWindow*, cairoRectangleInt*);
extern char* gtk_window_get_role(GtkWindow*);
extern GdkScreen* gtk_window_get_screen(GtkWindow*);
extern void gtk_window_get_size(GtkWindow*, int32_t*, int32_t*);
extern int gtk_window_get_skip_pager_hint(GtkWindow*);
extern int gtk_window_get_skip_taskbar_hint(GtkWindow*);
extern char* gtk_window_get_title(GtkWindow*);
extern GtkWindow* gtk_window_get_transient_for(GtkWindow*);
extern GdkWindowTypeHint gtk_window_get_type_hint(GtkWindow*);
extern int gtk_window_get_urgency_hint(GtkWindow*);
extern GtkWindowType gtk_window_get_window_type(GtkWindow*);
extern int gtk_window_has_group(GtkWindow*);
extern int gtk_window_has_toplevel_focus(GtkWindow*);
extern void gtk_window_iconify(GtkWindow*);
extern int gtk_window_is_active(GtkWindow*);
extern void gtk_window_maximize(GtkWindow*);
extern int gtk_window_mnemonic_activate(GtkWindow*, uint32_t, GdkModifierType);
extern void gtk_window_move(GtkWindow*, int32_t, int32_t);
extern int gtk_window_parse_geometry(GtkWindow*, char*);
extern void gtk_window_present(GtkWindow*);
extern void gtk_window_present_with_time(GtkWindow*, uint32_t);
extern int gtk_window_propagate_key_event(GtkWindow*, GdkEventKey*);
extern void gtk_window_remove_accel_group(GtkWindow*, GtkAccelGroup*);
extern void gtk_window_remove_mnemonic(GtkWindow*, uint32_t, GtkWidget*);
extern void gtk_window_reshow_with_initial_size(GtkWindow*);
extern void gtk_window_resize(GtkWindow*, int32_t, int32_t);
extern int gtk_window_resize_grip_is_visible(GtkWindow*);
extern void gtk_window_resize_to_geometry(GtkWindow*, int32_t, int32_t);
extern void gtk_window_set_accept_focus(GtkWindow*, int);
extern void gtk_window_set_application(GtkWindow*, GtkApplication*);
extern void gtk_window_set_decorated(GtkWindow*, int);
extern void gtk_window_set_default(GtkWindow*, GtkWidget*);
extern void gtk_window_set_default_geometry(GtkWindow*, int32_t, int32_t);
extern void gtk_window_set_default_size(GtkWindow*, int32_t, int32_t);
extern void gtk_window_set_deletable(GtkWindow*, int);
extern void gtk_window_set_destroy_with_parent(GtkWindow*, int);
extern void gtk_window_set_focus(GtkWindow*, GtkWidget*);
extern void gtk_window_set_focus_on_map(GtkWindow*, int);
extern void gtk_window_set_focus_visible(GtkWindow*, int);
extern void gtk_window_set_geometry_hints(GtkWindow*, GtkWidget*, GdkGeometry*, GdkWindowHints);
extern void gtk_window_set_gravity(GtkWindow*, GdkGravity);
extern void gtk_window_set_has_resize_grip(GtkWindow*, int);
extern void gtk_window_set_has_user_ref_count(GtkWindow*, int);
extern void gtk_window_set_icon(GtkWindow*, GdkPixbuf*);
extern int gtk_window_set_icon_from_file(GtkWindow*, char*, GError**);
extern void gtk_window_set_icon_list(GtkWindow*, GList*);
extern void gtk_window_set_icon_name(GtkWindow*, char*);
extern void gtk_window_set_keep_above(GtkWindow*, int);
extern void gtk_window_set_keep_below(GtkWindow*, int);
extern void gtk_window_set_mnemonic_modifier(GtkWindow*, GdkModifierType);
extern void gtk_window_set_mnemonics_visible(GtkWindow*, int);
extern void gtk_window_set_modal(GtkWindow*, int);
extern void gtk_window_set_opacity(GtkWindow*, double);
extern void gtk_window_set_position(GtkWindow*, GtkWindowPosition);
extern void gtk_window_set_resizable(GtkWindow*, int);
extern void gtk_window_set_role(GtkWindow*, char*);
extern void gtk_window_set_screen(GtkWindow*, GdkScreen*);
extern void gtk_window_set_skip_pager_hint(GtkWindow*, int);
extern void gtk_window_set_skip_taskbar_hint(GtkWindow*, int);
extern void gtk_window_set_startup_id(GtkWindow*, char*);
extern void gtk_window_set_title(GtkWindow*, char*);
extern void gtk_window_set_transient_for(GtkWindow*, GtkWindow*);
extern void gtk_window_set_type_hint(GtkWindow*, GdkWindowTypeHint);
extern void gtk_window_set_urgency_hint(GtkWindow*, int);
extern void gtk_window_set_wmclass(GtkWindow*, char*, char*);
extern void gtk_window_stick(GtkWindow*);
extern void gtk_window_unfullscreen(GtkWindow*);
extern void gtk_window_unmaximize(GtkWindow*);
extern void gtk_window_unstick(GtkWindow*);
extern GType gtk_window_get_type();
extern GtkWindowGroup* gtk_window_group_new();
extern void gtk_window_group_add_window(GtkWindowGroup*, GtkWindow*);
extern GtkWidget* gtk_window_group_get_current_device_grab(GtkWindowGroup*, GdkDevice*);
extern GtkWidget* gtk_window_group_get_current_grab(GtkWindowGroup*);
extern GList* gtk_window_group_list_windows(GtkWindowGroup*);
extern void gtk_window_group_remove_window(GtkWindowGroup*, GtkWindow*);
extern GType gtk_window_group_get_type();
extern int gtk_accel_groups_activate(GObject*, uint32_t, GdkModifierType);
extern GSList* gtk_accel_groups_from_object(GObject*);
extern GdkModifierType gtk_accelerator_get_default_mod_mask();
extern char* gtk_accelerator_get_label(uint32_t, GdkModifierType);
extern char* gtk_accelerator_name(uint32_t, GdkModifierType);
extern void gtk_accelerator_parse(char*, uint32_t*, GdkModifierType*);
extern void gtk_accelerator_set_default_mod_mask(GdkModifierType);
extern int gtk_accelerator_valid(uint32_t, GdkModifierType);
extern int gtk_alternative_dialog_button_order(GdkScreen*);
extern int gtk_bindings_activate(GObject*, uint32_t, GdkModifierType);
extern int gtk_bindings_activate_event(GObject*, GdkEventKey*);
extern uint32_t gtk_builder_error_quark();
extern int gtk_cairo_should_draw_window(cairoContext*, GdkWindow*);
extern void gtk_cairo_transform_to_window(cairoContext*, GtkWidget*, GdkWindow*);
extern char* gtk_check_version(uint32_t, uint32_t, uint32_t);
extern uint32_t gtk_css_provider_error_quark();
extern void gtk_device_grab_add(GtkWidget*, GdkDevice*, int);
extern void gtk_device_grab_remove(GtkWidget*, GdkDevice*);
extern void gtk_disable_setlocale();
extern int32_t gtk_distribute_natural_allocation(int32_t, uint32_t, GtkRequestedSize*);
extern void gtk_drag_finish(GdkDragContext*, int, int, uint32_t);
extern GtkWidget* gtk_drag_get_source_widget(GdkDragContext*);
extern void gtk_drag_set_icon_default(GdkDragContext*);
extern void gtk_drag_set_icon_gicon(GdkDragContext*, GIcon*, int32_t, int32_t);
extern void gtk_drag_set_icon_name(GdkDragContext*, char*, int32_t, int32_t);
extern void gtk_drag_set_icon_pixbuf(GdkDragContext*, GdkPixbuf*, int32_t, int32_t);
extern void gtk_drag_set_icon_stock(GdkDragContext*, char*, int32_t, int32_t);
extern void gtk_drag_set_icon_surface(GdkDragContext*, cairoSurface*);
extern void gtk_drag_set_icon_widget(GdkDragContext*, GtkWidget*, int32_t, int32_t);
extern void gtk_draw_insertion_cursor(GtkWidget*, cairoContext*, cairoRectangleInt*, int, GtkTextDirection, int);
extern int gtk_events_pending();
extern int gtk_false();
extern uint32_t gtk_file_chooser_error_quark();
extern uint32_t gtk_get_binary_age();
extern GdkEvent* gtk_get_current_event();
extern GdkDevice* gtk_get_current_event_device();
extern int gtk_get_current_event_state(GdkModifierType*);
extern uint32_t gtk_get_current_event_time();
extern uint32_t gtk_get_debug_flags();
extern PangoLanguage* gtk_get_default_language();
extern GtkWidget* gtk_get_event_widget(GdkEvent*);
extern uint32_t gtk_get_interface_age();
extern uint32_t gtk_get_major_version();
extern uint32_t gtk_get_micro_version();
extern uint32_t gtk_get_minor_version();
extern GtkWidget* gtk_grab_get_current();
extern int32_t gtk_icon_size_from_name(char*);
extern char* gtk_icon_size_get_name(int32_t);
extern int gtk_icon_size_lookup(int32_t, int32_t*, int32_t*);
extern int gtk_icon_size_lookup_for_settings(GtkSettings*, int32_t, int32_t*, int32_t*);
extern int32_t gtk_icon_size_register(char*, int32_t, int32_t);
extern void gtk_icon_size_register_alias(char*, int32_t);
extern uint32_t gtk_icon_theme_error_quark();
extern void gtk_init(int32_t*, char***);
extern int gtk_init_check(int32_t*, char***);
extern int gtk_init_with_args(int32_t*, char***, char*, GOptionEntry*, char*, GError**);
extern void gtk_key_snooper_remove(uint32_t);
extern void gtk_main();
extern void gtk_main_do_event(GdkEvent*);
extern int gtk_main_iteration();
extern int gtk_main_iteration_do(int);
extern uint32_t gtk_main_level();
extern void gtk_main_quit();
extern void gtk_paint_arrow(GtkStyle*, cairoContext*, GtkStateType, GtkShadowType, GtkWidget*, char*, GtkArrowType, int, int32_t, int32_t, int32_t, int32_t);
extern void gtk_paint_box(GtkStyle*, cairoContext*, GtkStateType, GtkShadowType, GtkWidget*, char*, int32_t, int32_t, int32_t, int32_t);
extern void gtk_paint_box_gap(GtkStyle*, cairoContext*, GtkStateType, GtkShadowType, GtkWidget*, char*, int32_t, int32_t, int32_t, int32_t, GtkPositionType, int32_t, int32_t);
extern void gtk_paint_check(GtkStyle*, cairoContext*, GtkStateType, GtkShadowType, GtkWidget*, char*, int32_t, int32_t, int32_t, int32_t);
extern void gtk_paint_diamond(GtkStyle*, cairoContext*, GtkStateType, GtkShadowType, GtkWidget*, char*, int32_t, int32_t, int32_t, int32_t);
extern void gtk_paint_expander(GtkStyle*, cairoContext*, GtkStateType, GtkWidget*, char*, int32_t, int32_t, GtkExpanderStyle);
extern void gtk_paint_extension(GtkStyle*, cairoContext*, GtkStateType, GtkShadowType, GtkWidget*, char*, int32_t, int32_t, int32_t, int32_t, GtkPositionType);
extern void gtk_paint_flat_box(GtkStyle*, cairoContext*, GtkStateType, GtkShadowType, GtkWidget*, char*, int32_t, int32_t, int32_t, int32_t);
extern void gtk_paint_focus(GtkStyle*, cairoContext*, GtkStateType, GtkWidget*, char*, int32_t, int32_t, int32_t, int32_t);
extern void gtk_paint_handle(GtkStyle*, cairoContext*, GtkStateType, GtkShadowType, GtkWidget*, char*, int32_t, int32_t, int32_t, int32_t, GtkOrientation);
extern void gtk_paint_hline(GtkStyle*, cairoContext*, GtkStateType, GtkWidget*, char*, int32_t, int32_t, int32_t);
extern void gtk_paint_layout(GtkStyle*, cairoContext*, GtkStateType, int, GtkWidget*, char*, int32_t, int32_t, PangoLayout*);
extern void gtk_paint_option(GtkStyle*, cairoContext*, GtkStateType, GtkShadowType, GtkWidget*, char*, int32_t, int32_t, int32_t, int32_t);
extern void gtk_paint_resize_grip(GtkStyle*, cairoContext*, GtkStateType, GtkWidget*, char*, GdkWindowEdge, int32_t, int32_t, int32_t, int32_t);
extern void gtk_paint_shadow(GtkStyle*, cairoContext*, GtkStateType, GtkShadowType, GtkWidget*, char*, int32_t, int32_t, int32_t, int32_t);
extern void gtk_paint_shadow_gap(GtkStyle*, cairoContext*, GtkStateType, GtkShadowType, GtkWidget*, char*, int32_t, int32_t, int32_t, int32_t, GtkPositionType, int32_t, int32_t);
extern void gtk_paint_slider(GtkStyle*, cairoContext*, GtkStateType, GtkShadowType, GtkWidget*, char*, int32_t, int32_t, int32_t, int32_t, GtkOrientation);
extern void gtk_paint_spinner(GtkStyle*, cairoContext*, GtkStateType, GtkWidget*, char*, uint32_t, int32_t, int32_t, int32_t, int32_t);
extern void gtk_paint_tab(GtkStyle*, cairoContext*, GtkStateType, GtkShadowType, GtkWidget*, char*, int32_t, int32_t, int32_t, int32_t);
extern void gtk_paint_vline(GtkStyle*, cairoContext*, GtkStateType, GtkWidget*, char*, int32_t, int32_t, int32_t);
extern int gtk_parse_args(int32_t*, char***);
extern uint32_t gtk_print_error_quark();
extern GtkPageSetup* gtk_print_run_page_setup_dialog(GtkWindow*, GtkPageSetup*, GtkPrintSettings*);
extern void gtk_print_run_page_setup_dialog_async(GtkWindow*, GtkPageSetup*, GtkPrintSettings*, GtkPageSetupDoneFunc, void*);
#pragma GCC diagnostic ignored "-Wunused-function"
static void _gtk_print_run_page_setup_dialog_async(GtkWindow* arg0, GtkPageSetup* arg1, GtkPrintSettings* arg2, void* gofunc) {
	if (gofunc) {
		gtk_print_run_page_setup_dialog_async(arg0, arg1, arg2, _GtkPageSetupDoneFunc_c_wrapper_once, gofunc);
	} else {
		gtk_print_run_page_setup_dialog_async(arg0, arg1, arg2, 0, 0);
	}
}
extern void gtk_propagate_event(GtkWidget*, GdkEvent*);
extern void gtk_rc_add_default_file(char*);
extern char* gtk_rc_find_module_in_path(char*);
extern char* gtk_rc_find_pixmap_in_path(GtkSettings*, GScanner*, char*);
extern char** gtk_rc_get_default_files();
extern char* gtk_rc_get_im_module_file();
extern char* gtk_rc_get_im_module_path();
extern char* gtk_rc_get_module_dir();
extern GtkStyle* gtk_rc_get_style(GtkWidget*);
extern GtkStyle* gtk_rc_get_style_by_paths(GtkSettings*, char*, char*, GType);
extern char* gtk_rc_get_theme_dir();
extern void gtk_rc_parse(char*);
extern uint32_t gtk_rc_parse_color(GScanner*, GdkColor*);
extern uint32_t gtk_rc_parse_color_full(GScanner*, GtkRcStyle*, GdkColor*);
extern uint32_t gtk_rc_parse_priority(GScanner*, GtkPathPriorityType*);
extern uint32_t gtk_rc_parse_state(GScanner*, GtkStateType*);
extern void gtk_rc_parse_string(char*);
extern int gtk_rc_reparse_all();
extern int gtk_rc_reparse_all_for_settings(GtkSettings*, int);
extern void gtk_rc_reset_styles(GtkSettings*);
extern void gtk_rc_set_default_files(char**);
extern uint32_t gtk_recent_chooser_error_quark();
extern uint32_t gtk_recent_manager_error_quark();
extern void gtk_render_activity(GtkStyleContext*, cairoContext*, double, double, double, double);
extern void gtk_render_arrow(GtkStyleContext*, cairoContext*, double, double, double, double);
extern void gtk_render_background(GtkStyleContext*, cairoContext*, double, double, double, double);
extern void gtk_render_check(GtkStyleContext*, cairoContext*, double, double, double, double);
extern void gtk_render_expander(GtkStyleContext*, cairoContext*, double, double, double, double);
extern void gtk_render_extension(GtkStyleContext*, cairoContext*, double, double, double, double, GtkPositionType);
extern void gtk_render_focus(GtkStyleContext*, cairoContext*, double, double, double, double);
extern void gtk_render_frame(GtkStyleContext*, cairoContext*, double, double, double, double);
extern void gtk_render_frame_gap(GtkStyleContext*, cairoContext*, double, double, double, double, GtkPositionType, double, double);
extern void gtk_render_handle(GtkStyleContext*, cairoContext*, double, double, double, double);
extern void gtk_render_icon(GtkStyleContext*, cairoContext*, GdkPixbuf*, double, double);
extern GdkPixbuf* gtk_render_icon_pixbuf(GtkStyleContext*, GtkIconSource*, int32_t);
extern void gtk_render_layout(GtkStyleContext*, cairoContext*, double, double, PangoLayout*);
extern void gtk_render_line(GtkStyleContext*, cairoContext*, double, double, double, double);
extern void gtk_render_option(GtkStyleContext*, cairoContext*, double, double, double, double);
extern void gtk_render_slider(GtkStyleContext*, cairoContext*, double, double, double, double, GtkOrientation);
extern void gtk_rgb_to_hsv(double, double, double, double*, double*, double*);
extern void gtk_selection_add_target(GtkWidget*, GdkAtom, GdkAtom, uint32_t);
extern void gtk_selection_add_targets(GtkWidget*, GdkAtom, GtkTargetEntry*, uint32_t);
extern void gtk_selection_clear_targets(GtkWidget*, GdkAtom);
extern int gtk_selection_convert(GtkWidget*, GdkAtom, GdkAtom, uint32_t);
extern int gtk_selection_owner_set(GtkWidget*, GdkAtom, uint32_t);
extern int gtk_selection_owner_set_for_display(GdkDisplay*, GtkWidget*, GdkAtom, uint32_t);
extern void gtk_selection_remove_all(GtkWidget*);
extern void gtk_set_debug_flags(uint32_t);
extern int gtk_show_uri(GdkScreen*, char*, uint32_t, GError**);
extern void gtk_stock_add(GtkStockItem*, uint32_t);
extern void gtk_stock_add_static(GtkStockItem*, uint32_t);
extern GSList* gtk_stock_list_ids();
extern int gtk_stock_lookup(char*, GtkStockItem*);
extern void gtk_stock_set_translate_func(char*, GtkTranslateFunc, void*, GDestroyNotify);
#pragma GCC diagnostic ignored "-Wunused-function"
static void _gtk_stock_set_translate_func(char* arg0, void* gofunc) {
	if (gofunc) {
		gtk_stock_set_translate_func(arg0, _GtkTranslateFunc_c_wrapper, gofunc, _c_callback_cleanup);
	} else {
		gtk_stock_set_translate_func(arg0, 0, 0, 0);
	}
}
extern void gtk_target_table_free(GtkTargetEntry*, int32_t);
extern GtkTargetEntry* gtk_target_table_new_from_list(GtkTargetList*, int32_t*);
extern int gtk_targets_include_image(GdkAtom*, int32_t, int);
extern int gtk_targets_include_rich_text(GdkAtom*, int32_t, GtkTextBuffer*);
extern int gtk_targets_include_text(GdkAtom*, int32_t);
extern int gtk_targets_include_uri(GdkAtom*, int32_t);
extern GtkWidget* gtk_test_create_simple_window(char*, char*);
extern GtkWidget* gtk_test_find_label(GtkWidget*, char*);
extern GtkWidget* gtk_test_find_sibling(GtkWidget*, GType);
extern GtkWidget* gtk_test_find_widget(GtkWidget*, char*, GType);
extern GType* gtk_test_list_all_types(uint32_t*);
extern void gtk_test_register_all_types();
extern double gtk_test_slider_get_value(GtkWidget*);
extern void gtk_test_slider_set_perc(GtkWidget*, double);
extern int gtk_test_spin_button_click(GtkSpinButton*, uint32_t, int);
extern char* gtk_test_text_get(GtkWidget*);
extern void gtk_test_text_set(GtkWidget*, char*);
extern int gtk_test_widget_click(GtkWidget*, uint32_t, GdkModifierType);
extern int gtk_test_widget_send_key(GtkWidget*, uint32_t, GdkModifierType);
extern int gtk_tree_get_row_drag_data(GtkSelectionData*, GtkTreeModel**, GtkTreePath**);
extern int gtk_tree_set_row_drag_data(GtkSelectionData*, GtkTreeModel*, GtkTreePath*);
extern int gtk_true();
struct _GtkAboutDialogClass { uint8_t _data[1160]; };
struct _GtkAboutDialogPrivate {};
struct _GtkAccelGroupClass { uint8_t _data[176]; };
struct _GtkAccelGroupEntry { uint8_t _data[32]; };
struct _GtkAccelGroupPrivate {};
struct _GtkAccelKey { uint8_t _data[12]; };
struct _GtkAccelLabelClass { uint8_t _data[1032]; };
struct _GtkAccelLabelPrivate {};
struct _GtkAccelMapClass {};
struct _GtkAccessibleClass { uint8_t _data[392]; };
struct _GtkAccessiblePrivate {};
struct _GtkActionClass { uint8_t _data[232]; };
struct _GtkActionEntry { uint8_t _data[48]; };
struct _GtkActionGroupClass { uint8_t _data[176]; };
struct _GtkActionGroupPrivate {};
struct _GtkActionPrivate {};
struct _GtkActivatableIface { uint8_t _data[32]; };
struct _GtkAdjustmentClass { uint8_t _data[184]; };
struct _GtkAdjustmentPrivate {};
struct _GtkAlignmentClass { uint8_t _data[1040]; };
struct _GtkAlignmentPrivate {};
struct _GtkAppChooserButtonClass { uint8_t _data[1184]; };
struct _GtkAppChooserButtonPrivate {};
struct _GtkAppChooserDialogClass { uint8_t _data[1248]; };
struct _GtkAppChooserDialogPrivate {};
struct _GtkAppChooserWidgetClass { uint8_t _data[1160]; };
struct _GtkAppChooserWidgetPrivate {};
struct _GtkApplicationClass { uint8_t _data[440]; };
struct _GtkApplicationPrivate {};
struct _GtkArrowClass { uint8_t _data[888]; };
struct _GtkArrowPrivate {};
struct _GtkAspectFrameClass { uint8_t _data[1080]; };
struct _GtkAspectFramePrivate {};
struct _GtkAssistantClass { uint8_t _data[1144]; };
struct _GtkAssistantPrivate {};
struct _GtkBinClass { uint8_t _data[1008]; };
struct _GtkBinPrivate {};
struct _GtkBindingArg { uint8_t _data[8]; };
struct _GtkBindingEntry { uint8_t _data[56]; };
struct _GtkBindingSet { uint8_t _data[64]; };
struct _GtkBindingSignal { uint8_t _data[32]; };
struct _GtkBorder { uint8_t _data[8]; };
struct _GtkBoxClass { uint8_t _data[1008]; };
struct _GtkBoxPrivate {};
struct _GtkBuildableIface { uint8_t _data[96]; };
struct _GtkBuilderClass { uint8_t _data[208]; };
struct _GtkBuilderPrivate {};
struct _GtkButtonBoxClass { uint8_t _data[1040]; };
struct _GtkButtonBoxPrivate {};
struct _GtkButtonClass { uint8_t _data[1088]; };
struct _GtkButtonPrivate {};
struct _GtkCalendarClass { uint8_t _data[912]; };
struct _GtkCalendarPrivate {};
struct _GtkCellAreaBoxClass { uint8_t _data[384]; };
struct _GtkCellAreaBoxPrivate {};
struct _GtkCellAreaClass { uint8_t _data[352]; };
struct _GtkCellAreaContextClass { uint8_t _data[216]; };
struct _GtkCellAreaContextPrivate {};
struct _GtkCellAreaPrivate {};
struct _GtkCellEditableIface { uint8_t _data[40]; };
struct _GtkCellLayoutIface { uint8_t _data[88]; };
struct _GtkCellRendererAccelClass { uint8_t _data[360]; };
struct _GtkCellRendererAccelPrivate {};
struct _GtkCellRendererClass { uint8_t _data[264]; };
struct _GtkCellRendererComboClass { uint8_t _data[336]; };
struct _GtkCellRendererComboPrivate {};
struct _GtkCellRendererPixbufClass { uint8_t _data[296]; };
struct _GtkCellRendererPixbufPrivate {};
struct _GtkCellRendererPrivate {};
struct _GtkCellRendererProgressClass { uint8_t _data[296]; };
struct _GtkCellRendererProgressPrivate {};
struct _GtkCellRendererSpinClass { uint8_t _data[336]; };
struct _GtkCellRendererSpinPrivate {};
struct _GtkCellRendererSpinnerClass { uint8_t _data[296]; };
struct _GtkCellRendererSpinnerPrivate {};
struct _GtkCellRendererTextClass { uint8_t _data[304]; };
struct _GtkCellRendererTextPrivate {};
struct _GtkCellRendererToggleClass { uint8_t _data[304]; };
struct _GtkCellRendererTogglePrivate {};
struct _GtkCellViewClass { uint8_t _data[856]; };
struct _GtkCellViewPrivate {};
struct _GtkCheckButtonClass { uint8_t _data[1168]; };
struct _GtkCheckMenuItemClass { uint8_t _data[1160]; };
struct _GtkCheckMenuItemPrivate {};
struct _GtkColorButtonClass { uint8_t _data[1128]; };
struct _GtkColorButtonPrivate {};
struct _GtkColorSelectionClass { uint8_t _data[1048]; };
struct _GtkColorSelectionDialogClass { uint8_t _data[1152]; };
struct _GtkColorSelectionDialogPrivate {};
struct _GtkColorSelectionPrivate {};
struct _GtkComboBoxClass { uint8_t _data[1048]; };
struct _GtkComboBoxPrivate {};
struct _GtkComboBoxTextClass { uint8_t _data[1080]; };
struct _GtkComboBoxTextPrivate {};
struct _GtkContainerClass { uint8_t _data[976]; };
struct _GtkContainerPrivate {};
struct _GtkCssProviderClass { uint8_t _data[168]; };
struct _GtkCssProviderPrivate {};
struct _GtkCssSection {};
struct _GtkDialogClass { uint8_t _data[1120]; };
struct _GtkDialogPrivate {};
struct _GtkDrawingAreaClass { uint8_t _data[856]; };
struct _GtkEditableInterface { uint8_t _data[96]; };
struct _GtkEntryBufferClass { uint8_t _data[248]; };
struct _GtkEntryBufferPrivate {};
struct _GtkEntryClass { uint8_t _data[976]; };
struct _GtkEntryCompletionClass { uint8_t _data[200]; };
struct _GtkEntryCompletionPrivate {};
struct _GtkEntryPrivate {};
struct _GtkEventBoxClass { uint8_t _data[1040]; };
struct _GtkEventBoxPrivate {};
struct _GtkExpanderClass { uint8_t _data[1048]; };
struct _GtkExpanderPrivate {};
struct _GtkFileChooserButtonClass { uint8_t _data[1048]; };
struct _GtkFileChooserButtonPrivate {};
struct _GtkFileChooserDialogClass { uint8_t _data[1152]; };
struct _GtkFileChooserDialogPrivate {};
struct _GtkFileChooserWidgetClass { uint8_t _data[1040]; };
struct _GtkFileChooserWidgetPrivate {};
struct _GtkFileFilterInfo { uint8_t _data[40]; };
struct _GtkFixedChild { uint8_t _data[16]; };
struct _GtkFixedClass { uint8_t _data[1008]; };
struct _GtkFixedPrivate {};
struct _GtkFontButtonClass { uint8_t _data[1128]; };
struct _GtkFontButtonPrivate {};
struct _GtkFontChooserDialogClass { uint8_t _data[1152]; };
struct _GtkFontChooserDialogPrivate {};
struct _GtkFontChooserIface { uint8_t _data[152]; };
struct _GtkFontChooserWidgetClass { uint8_t _data[1072]; };
struct _GtkFontChooserWidgetPrivate {};
struct _GtkFontSelectionClass { uint8_t _data[1040]; };
struct _GtkFontSelectionDialogClass { uint8_t _data[1152]; };
struct _GtkFontSelectionDialogPrivate {};
struct _GtkFontSelectionPrivate {};
struct _GtkFrameClass { uint8_t _data[1048]; };
struct _GtkFramePrivate {};
struct _GtkGradient {};
struct _GtkGridClass { uint8_t _data[1040]; };
struct _GtkGridPrivate {};
struct _GtkHBoxClass { uint8_t _data[1008]; };
struct _GtkHButtonBoxClass { uint8_t _data[1040]; };
struct _GtkHPanedClass { uint8_t _data[1056]; };
struct _GtkHSVClass { uint8_t _data[872]; };
struct _GtkHSVPrivate {};
struct _GtkHScaleClass { uint8_t _data[968]; };
struct _GtkHScrollbarClass { uint8_t _data[944]; };
struct _GtkHSeparatorClass { uint8_t _data[856]; };
struct _GtkHandleBoxClass { uint8_t _data[1056]; };
struct _GtkHandleBoxPrivate {};
struct _GtkIMContextClass { uint8_t _data[312]; };
struct _GtkIMContextInfo { uint8_t _data[40]; };
struct _GtkIMContextSimpleClass { uint8_t _data[312]; };
struct _GtkIMContextSimplePrivate {};
struct _GtkIMMulticontextClass { uint8_t _data[344]; };
struct _GtkIMMulticontextPrivate {};
struct _GtkIconFactoryClass { uint8_t _data[168]; };
struct _GtkIconFactoryPrivate {};
struct _GtkIconInfo {};
struct _GtkIconSet {};
struct _GtkIconSource {};
struct _GtkIconThemeClass { uint8_t _data[176]; };
struct _GtkIconThemePrivate {};
struct _GtkIconViewClass { uint8_t _data[1072]; };
struct _GtkIconViewPrivate {};
struct _GtkImageClass { uint8_t _data[888]; };
struct _GtkImageMenuItemClass { uint8_t _data[1144]; };
struct _GtkImageMenuItemPrivate {};
struct _GtkImagePrivate {};
struct _GtkInfoBarClass { uint8_t _data[1056]; };
struct _GtkInfoBarPrivate {};
struct _GtkInvisibleClass { uint8_t _data[856]; };
struct _GtkInvisiblePrivate {};
struct _GtkLabelClass { uint8_t _data[952]; };
struct _GtkLabelPrivate {};
struct _GtkLabelSelectionInfo {};
struct _GtkLayoutClass { uint8_t _data[1008]; };
struct _GtkLayoutPrivate {};
struct _GtkLinkButtonClass { uint8_t _data[1128]; };
struct _GtkLinkButtonPrivate {};
struct _GtkListStoreClass { uint8_t _data[168]; };
struct _GtkListStorePrivate {};
struct _GtkLockButtonClass { uint8_t _data[1152]; };
struct _GtkLockButtonPrivate {};
struct _GtkMenuBarClass { uint8_t _data[1120]; };
struct _GtkMenuBarPrivate {};
struct _GtkMenuClass { uint8_t _data[1120]; };
struct _GtkMenuItemClass { uint8_t _data[1112]; };
struct _GtkMenuItemPrivate {};
struct _GtkMenuPrivate {};
struct _GtkMenuShellClass { uint8_t _data[1088]; };
struct _GtkMenuShellPrivate {};
struct _GtkMenuToolButtonClass { uint8_t _data[1144]; };
struct _GtkMenuToolButtonPrivate {};
struct _GtkMessageDialogClass { uint8_t _data[1152]; };
struct _GtkMessageDialogPrivate {};
struct _GtkMiscClass { uint8_t _data[856]; };
struct _GtkMiscPrivate {};
struct _GtkMountOperationClass { uint8_t _data[288]; };
struct _GtkMountOperationPrivate {};
struct _GtkNotebookClass { uint8_t _data[1128]; };
struct _GtkNotebookPrivate {};
struct _GtkNumerableIconClass { uint8_t _data[264]; };
struct _GtkNumerableIconPrivate {};
struct _GtkOffscreenWindowClass { uint8_t _data[1104]; };
struct _GtkOrientableIface { uint8_t _data[16]; };
struct _GtkOverlayClass { uint8_t _data[1080]; };
struct _GtkOverlayPrivate {};
struct _GtkPageRange { uint8_t _data[8]; };
struct _GtkPanedClass { uint8_t _data[1056]; };
struct _GtkPanedPrivate {};
struct _GtkPaperSize {};
struct _GtkPlugClass { uint8_t _data[1112]; };
struct _GtkPlugPrivate {};
struct _GtkPrintOperationClass { uint8_t _data[288]; };
struct _GtkPrintOperationPreviewIface { uint8_t _data[120]; };
struct _GtkPrintOperationPrivate {};
struct _GtkProgressBarClass { uint8_t _data[856]; };
struct _GtkProgressBarPrivate {};
struct _GtkRadioActionClass { uint8_t _data[312]; };
struct _GtkRadioActionEntry { uint8_t _data[48]; };
struct _GtkRadioActionPrivate {};
struct _GtkRadioButtonClass { uint8_t _data[1208]; };
struct _GtkRadioButtonPrivate {};
struct _GtkRadioMenuItemClass { uint8_t _data[1200]; };
struct _GtkRadioMenuItemPrivate {};
struct _GtkRadioToolButtonClass { uint8_t _data[1176]; };
struct _GtkRangeClass { uint8_t _data[912]; };
struct _GtkRangePrivate {};
struct _GtkRcContext {};
struct _GtkRcProperty { uint8_t _data[40]; };
struct _GtkRcStyleClass { uint8_t _data[200]; };
struct _GtkRecentActionClass { uint8_t _data[264]; };
struct _GtkRecentActionPrivate {};
struct _GtkRecentChooserDialogClass { uint8_t _data[1152]; };
struct _GtkRecentChooserDialogPrivate {};
struct _GtkRecentChooserIface { uint8_t _data[128]; };
struct _GtkRecentChooserMenuClass { uint8_t _data[1152]; };
struct _GtkRecentChooserMenuPrivate {};
struct _GtkRecentChooserWidgetClass { uint8_t _data[1040]; };
struct _GtkRecentChooserWidgetPrivate {};
struct _GtkRecentData { uint8_t _data[56]; };
struct _GtkRecentFilterInfo { uint8_t _data[56]; };
struct _GtkRecentInfo {};
struct _GtkRecentManagerClass { uint8_t _data[176]; };
struct _GtkRecentManagerPrivate {};
struct _GtkRequestedSize { uint8_t _data[16]; };
struct _GtkRequisition { uint8_t _data[8]; };
struct _GtkScaleButtonClass { uint8_t _data[1128]; };
struct _GtkScaleButtonPrivate {};
struct _GtkScaleClass { uint8_t _data[968]; };
struct _GtkScalePrivate {};
struct _GtkScrollableInterface { uint8_t _data[16]; };
struct _GtkScrollbarClass { uint8_t _data[944]; };
struct _GtkScrolledWindowClass { uint8_t _data[1064]; };
struct _GtkScrolledWindowPrivate {};
struct _GtkSelectionData {};
struct _GtkSeparatorClass { uint8_t _data[856]; };
struct _GtkSeparatorMenuItemClass { uint8_t _data[1144]; };
struct _GtkSeparatorPrivate {};
struct _GtkSeparatorToolItemClass { uint8_t _data[1088]; };
struct _GtkSeparatorToolItemPrivate {};
struct _GtkSettingsClass { uint8_t _data[168]; };
struct _GtkSettingsPrivate {};
struct _GtkSettingsValue { uint8_t _data[32]; };
struct _GtkSizeGroupClass { uint8_t _data[168]; };
struct _GtkSizeGroupPrivate {};
struct _GtkSocketClass { uint8_t _data[1024]; };
struct _GtkSocketPrivate {};
struct _GtkSpinButtonClass { uint8_t _data[1048]; };
struct _GtkSpinButtonPrivate {};
struct _GtkSpinnerClass { uint8_t _data[856]; };
struct _GtkSpinnerPrivate {};
struct _GtkStatusIconClass { uint8_t _data[224]; };
struct _GtkStatusIconPrivate {};
struct _GtkStatusbarClass { uint8_t _data[1064]; };
struct _GtkStatusbarPrivate {};
struct _GtkStockItem { uint8_t _data[32]; };
struct _GtkStyleClass { uint8_t _data[440]; };
struct _GtkStyleContextClass { uint8_t _data[176]; };
struct _GtkStyleContextPrivate {};
struct _GtkStylePropertiesClass { uint8_t _data[168]; };
struct _GtkStyleProviderIface { uint8_t _data[40]; };
struct _GtkSwitchClass { uint8_t _data[880]; };
struct _GtkSwitchPrivate {};
struct _GtkSymbolicColor {};
struct _GtkTableChild { uint8_t _data[48]; };
struct _GtkTableClass { uint8_t _data[1008]; };
struct _GtkTablePrivate {};
struct _GtkTableRowCol { uint8_t _data[28]; };
struct _GtkTargetEntry { uint8_t _data[16]; };
struct _GtkTargetList {};
struct _GtkTearoffMenuItemClass { uint8_t _data[1144]; };
struct _GtkTearoffMenuItemPrivate {};
struct _GtkTextAppearance { uint8_t _data[64]; };
struct _GtkTextAttributes { uint8_t _data[192]; };
struct _GtkTextBTree {};
struct _GtkTextBufferClass { uint8_t _data[272]; };
struct _GtkTextBufferPrivate {};
struct _GtkTextChildAnchorClass { uint8_t _data[168]; };
struct _GtkTextIter { uint8_t _data[80]; };
struct _GtkTextMarkClass { uint8_t _data[168]; };
struct _GtkTextTagClass { uint8_t _data[176]; };
struct _GtkTextTagPrivate {};
struct _GtkTextTagTableClass { uint8_t _data[192]; };
struct _GtkTextTagTablePrivate {};
struct _GtkTextViewClass { uint8_t _data[1120]; };
struct _GtkTextViewPrivate {};
struct _GtkThemeEngine {};
struct _GtkThemingEngineClass { uint8_t _data[384]; };
struct _GtkThemingEnginePrivate {};
struct _GtkToggleActionClass { uint8_t _data[272]; };
struct _GtkToggleActionEntry { uint8_t _data[56]; };
struct _GtkToggleActionPrivate {};
struct _GtkToggleButtonClass { uint8_t _data[1128]; };
struct _GtkToggleButtonPrivate {};
struct _GtkToggleToolButtonClass { uint8_t _data[1144]; };
struct _GtkToggleToolButtonPrivate {};
struct _GtkToolButtonClass { uint8_t _data[1104]; };
struct _GtkToolButtonPrivate {};
struct _GtkToolItemClass { uint8_t _data[1056]; };
struct _GtkToolItemGroupClass { uint8_t _data[1008]; };
struct _GtkToolItemGroupPrivate {};
struct _GtkToolItemPrivate {};
struct _GtkToolPaletteClass { uint8_t _data[1008]; };
struct _GtkToolPalettePrivate {};
struct _GtkToolShellIface { uint8_t _data[88]; };
struct _GtkToolbarClass { uint8_t _data[1032]; };
struct _GtkToolbarPrivate {};
struct _GtkTreeDragDestIface { uint8_t _data[32]; };
struct _GtkTreeDragSourceIface { uint8_t _data[40]; };
struct _GtkTreeIter { uint8_t _data[32]; };
struct _GtkTreeModelFilterClass { uint8_t _data[184]; };
struct _GtkTreeModelFilterPrivate {};
struct _GtkTreeModelIface { uint8_t _data[176]; };
struct _GtkTreeModelSortClass { uint8_t _data[168]; };
struct _GtkTreeModelSortPrivate {};
struct _GtkTreePath {};
struct _GtkTreeRowReference {};
struct _GtkTreeSelectionClass { uint8_t _data[176]; };
struct _GtkTreeSelectionPrivate {};
struct _GtkTreeSortableIface { uint8_t _data[64]; };
struct _GtkTreeStoreClass { uint8_t _data[168]; };
struct _GtkTreeStorePrivate {};
struct _GtkTreeViewClass { uint8_t _data[1160]; };
struct _GtkTreeViewColumnClass { uint8_t _data[176]; };
struct _GtkTreeViewColumnPrivate {};
struct _GtkTreeViewPrivate {};
struct _GtkUIManagerClass { uint8_t _data[232]; };
struct _GtkUIManagerPrivate {};
struct _GtkVBoxClass { uint8_t _data[1008]; };
struct _GtkVButtonBoxClass { uint8_t _data[1040]; };
struct _GtkVPanedClass { uint8_t _data[1056]; };
struct _GtkVScaleClass { uint8_t _data[968]; };
struct _GtkVScrollbarClass { uint8_t _data[944]; };
struct _GtkVSeparatorClass { uint8_t _data[856]; };
struct _GtkViewportClass { uint8_t _data[1040]; };
struct _GtkViewportPrivate {};
struct _GtkVolumeButtonClass { uint8_t _data[1160]; };
struct _GtkWidgetAuxInfo { uint8_t _data[24]; };
struct _GtkWidgetClass { uint8_t _data[824]; };
struct _GtkWidgetClassPrivate {};
struct _GtkWidgetPath {};
struct _GtkWidgetPrivate {};
struct _GtkWindowClass { uint8_t _data[1072]; };
struct _GtkWindowGeometryInfo {};
struct _GtkWindowGroupClass { uint8_t _data[168]; };
struct _GtkWindowGroupPrivate {};
struct _GtkWindowPrivate {};


extern GObject *g_object_ref_sink(GObject*);
extern void g_object_unref(GObject*);
extern void g_free(void*);
extern void g_error_free(GError*);

#include "gtk.h"

extern GtkWidget *gtk_message_dialog_new(GtkWindow*, GtkDialogFlags, GtkMessageType, GtkButtonsType, const char *msg);

#cgo pkg-config: gtk+-3.0
*/
import "C"
import "unsafe"
import "errors"
import "reflect"
import "fmt"

// package dependencies
import (
	"github.com/bytbox/gogobject/gdk-3.0"
	"github.com/bytbox/gogobject/gdkpixbuf-2.0"
	"github.com/bytbox/gogobject/gobject-2.0"
	"github.com/bytbox/gogobject/gio-2.0"
	"github.com/bytbox/gogobject/cairo-1.0"
	"github.com/bytbox/gogobject/pango-1.0"
	"github.com/bytbox/gogobject/atk-1.0"
	"github.com/bytbox/gogobject/glib-2.0"
)

const alot = 999999

type _GSList struct {
	data unsafe.Pointer
	next *_GSList
}

type _GList struct {
	data unsafe.Pointer
	next *_GList
	prev *_GList
}

type _GError struct {
	domain uint32
	code int32
	message *C.char
}

func _GoStringToGString(x string) *C.char {
	if x == "\x00" {
		return nil
	}
	return C.CString(x)
}

func _GoBoolToCBool(x bool) C.int {
	if x { return 1 }
	return 0
}

func _CInterfaceToGoInterface(iface [2]unsafe.Pointer) interface{} {
	return *(*interface{})(unsafe.Pointer(&iface))
}

func _GoInterfaceToCInterface(iface interface{}) *unsafe.Pointer {
	return (*unsafe.Pointer)(unsafe.Pointer(&iface))
}


//export _Gtk_go_callback_cleanup
func _Gtk_go_callback_cleanup(gofunc unsafe.Pointer) {
	gobject.Holder.Release(gofunc)
}


type AboutDialogLike interface {
	DialogLike
	InheritedFromGtkAboutDialog() *C.GtkAboutDialog
}

type AboutDialog struct {
	Dialog
	atk.ImplementorIfaceImpl
	BuildableImpl
}

func ToAboutDialog(objlike gobject.ObjectLike) *AboutDialog {
	c := objlike.InheritedFromGObject()
	if c == nil {
		return nil
	}
	t := (*AboutDialog)(nil).GetStaticType()
	obj := gobject.ObjectGrabIfType(unsafe.Pointer(c), t)
	if obj != nil {
		return (*AboutDialog)(obj)
	}
	panic("cannot cast to AboutDialog")
}

func (this0 *AboutDialog) InheritedFromGtkAboutDialog() *C.GtkAboutDialog {
	if this0 == nil {
		return nil
	}
	return (*C.GtkAboutDialog)(this0.C)
}

func (this0 *AboutDialog) GetStaticType() gobject.Type {
	return gobject.Type(C.gtk_about_dialog_get_type())
}

func AboutDialogGetType() gobject.Type {
	return (*AboutDialog)(nil).GetStaticType()
}
func NewAboutDialog() *AboutDialog {
	ret1 := C.gtk_about_dialog_new()
	var ret2 *AboutDialog
	ret2 = (*AboutDialog)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
func (this0 *AboutDialog) GetArtists() []string {
	var this1 *C.GtkAboutDialog
	if this0 != nil {
		this1 = this0.InheritedFromGtkAboutDialog()
	}
	ret1 := C.gtk_about_dialog_get_artists(this1)
	var ret2 []string
	for i := range ret2 {
		ret2[i] = C.GoString((*(*[999999]*C.char)(unsafe.Pointer(ret1)))[i])
	}
	return ret2
}
func (this0 *AboutDialog) GetAuthors() []string {
	var this1 *C.GtkAboutDialog
	if this0 != nil {
		this1 = this0.InheritedFromGtkAboutDialog()
	}
	ret1 := C.gtk_about_dialog_get_authors(this1)
	var ret2 []string
	for i := range ret2 {
		ret2[i] = C.GoString((*(*[999999]*C.char)(unsafe.Pointer(ret1)))[i])
	}
	return ret2
}
func (this0 *AboutDialog) GetComments() string {
	var this1 *C.GtkAboutDialog
	if this0 != nil {
		this1 = this0.InheritedFromGtkAboutDialog()
	}
	ret1 := C.gtk_about_dialog_get_comments(this1)
	var ret2 string
	ret2 = C.GoString(ret1)
	return ret2
}
func (this0 *AboutDialog) GetCopyright() string {
	var this1 *C.GtkAboutDialog
	if this0 != nil {
		this1 = this0.InheritedFromGtkAboutDialog()
	}
	ret1 := C.gtk_about_dialog_get_copyright(this1)
	var ret2 string
	ret2 = C.GoString(ret1)
	return ret2
}
func (this0 *AboutDialog) GetDocumenters() []string {
	var this1 *C.GtkAboutDialog
	if this0 != nil {
		this1 = this0.InheritedFromGtkAboutDialog()
	}
	ret1 := C.gtk_about_dialog_get_documenters(this1)
	var ret2 []string
	for i := range ret2 {
		ret2[i] = C.GoString((*(*[999999]*C.char)(unsafe.Pointer(ret1)))[i])
	}
	return ret2
}
func (this0 *AboutDialog) GetLicense() string {
	var this1 *C.GtkAboutDialog
	if this0 != nil {
		this1 = this0.InheritedFromGtkAboutDialog()
	}
	ret1 := C.gtk_about_dialog_get_license(this1)
	var ret2 string
	ret2 = C.GoString(ret1)
	return ret2
}
func (this0 *AboutDialog) GetLicenseType() License {
	var this1 *C.GtkAboutDialog
	if this0 != nil {
		this1 = this0.InheritedFromGtkAboutDialog()
	}
	ret1 := C.gtk_about_dialog_get_license_type(this1)
	var ret2 License
	ret2 = License(ret1)
	return ret2
}
func (this0 *AboutDialog) GetLogo() *gdkpixbuf.Pixbuf {
	var this1 *C.GtkAboutDialog
	if this0 != nil {
		this1 = this0.InheritedFromGtkAboutDialog()
	}
	ret1 := C.gtk_about_dialog_get_logo(this1)
	var ret2 *gdkpixbuf.Pixbuf
	ret2 = (*gdkpixbuf.Pixbuf)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
func (this0 *AboutDialog) GetLogoIconName() string {
	var this1 *C.GtkAboutDialog
	if this0 != nil {
		this1 = this0.InheritedFromGtkAboutDialog()
	}
	ret1 := C.gtk_about_dialog_get_logo_icon_name(this1)
	var ret2 string
	ret2 = C.GoString(ret1)
	return ret2
}
func (this0 *AboutDialog) GetProgramName() string {
	var this1 *C.GtkAboutDialog
	if this0 != nil {
		this1 = this0.InheritedFromGtkAboutDialog()
	}
	ret1 := C.gtk_about_dialog_get_program_name(this1)
	var ret2 string
	ret2 = C.GoString(ret1)
	return ret2
}
func (this0 *AboutDialog) GetTranslatorCredits() string {
	var this1 *C.GtkAboutDialog
	if this0 != nil {
		this1 = this0.InheritedFromGtkAboutDialog()
	}
	ret1 := C.gtk_about_dialog_get_translator_credits(this1)
	var ret2 string
	ret2 = C.GoString(ret1)
	return ret2
}
func (this0 *AboutDialog) GetVersion() string {
	var this1 *C.GtkAboutDialog
	if this0 != nil {
		this1 = this0.InheritedFromGtkAboutDialog()
	}
	ret1 := C.gtk_about_dialog_get_version(this1)
	var ret2 string
	ret2 = C.GoString(ret1)
	return ret2
}
func (this0 *AboutDialog) GetWebsite() string {
	var this1 *C.GtkAboutDialog
	if this0 != nil {
		this1 = this0.InheritedFromGtkAboutDialog()
	}
	ret1 := C.gtk_about_dialog_get_website(this1)
	var ret2 string
	ret2 = C.GoString(ret1)
	return ret2
}
func (this0 *AboutDialog) GetWebsiteLabel() string {
	var this1 *C.GtkAboutDialog
	if this0 != nil {
		this1 = this0.InheritedFromGtkAboutDialog()
	}
	ret1 := C.gtk_about_dialog_get_website_label(this1)
	var ret2 string
	ret2 = C.GoString(ret1)
	return ret2
}
func (this0 *AboutDialog) GetWrapLicense() bool {
	var this1 *C.GtkAboutDialog
	if this0 != nil {
		this1 = this0.InheritedFromGtkAboutDialog()
	}
	ret1 := C.gtk_about_dialog_get_wrap_license(this1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *AboutDialog) SetArtists(artists0 []string) {
	var this1 *C.GtkAboutDialog
	var artists1 **C.char
	if this0 != nil {
		this1 = this0.InheritedFromGtkAboutDialog()
	}
	artists1 = (**C.char)(C.malloc(C.size_t(int(unsafe.Sizeof(*artists1)) * (len(artists0) + 1))))
	defer C.free(unsafe.Pointer(artists1))
	for i, e := range artists0 {
		(*(*[999999]*C.char)(unsafe.Pointer(artists1)))[i] = _GoStringToGString(e)
		defer C.free(unsafe.Pointer((*(*[999999]*C.char)(unsafe.Pointer(artists1)))[i]))
	}
	(*(*[999999]*C.char)(unsafe.Pointer(artists1)))[len(artists0)] = nil
	C.gtk_about_dialog_set_artists(this1, artists1)
}
func (this0 *AboutDialog) SetAuthors(authors0 []string) {
	var this1 *C.GtkAboutDialog
	var authors1 **C.char
	if this0 != nil {
		this1 = this0.InheritedFromGtkAboutDialog()
	}
	authors1 = (**C.char)(C.malloc(C.size_t(int(unsafe.Sizeof(*authors1)) * (len(authors0) + 1))))
	defer C.free(unsafe.Pointer(authors1))
	for i, e := range authors0 {
		(*(*[999999]*C.char)(unsafe.Pointer(authors1)))[i] = _GoStringToGString(e)
		defer C.free(unsafe.Pointer((*(*[999999]*C.char)(unsafe.Pointer(authors1)))[i]))
	}
	(*(*[999999]*C.char)(unsafe.Pointer(authors1)))[len(authors0)] = nil
	C.gtk_about_dialog_set_authors(this1, authors1)
}
func (this0 *AboutDialog) SetComments(comments0 string) {
	var this1 *C.GtkAboutDialog
	var comments1 *C.char
	if this0 != nil {
		this1 = this0.InheritedFromGtkAboutDialog()
	}
	comments1 = _GoStringToGString(comments0)
	defer C.free(unsafe.Pointer(comments1))
	C.gtk_about_dialog_set_comments(this1, comments1)
}
func (this0 *AboutDialog) SetCopyright(copyright0 string) {
	var this1 *C.GtkAboutDialog
	var copyright1 *C.char
	if this0 != nil {
		this1 = this0.InheritedFromGtkAboutDialog()
	}
	copyright1 = _GoStringToGString(copyright0)
	defer C.free(unsafe.Pointer(copyright1))
	C.gtk_about_dialog_set_copyright(this1, copyright1)
}
func (this0 *AboutDialog) SetDocumenters(documenters0 []string) {
	var this1 *C.GtkAboutDialog
	var documenters1 **C.char
	if this0 != nil {
		this1 = this0.InheritedFromGtkAboutDialog()
	}
	documenters1 = (**C.char)(C.malloc(C.size_t(int(unsafe.Sizeof(*documenters1)) * (len(documenters0) + 1))))
	defer C.free(unsafe.Pointer(documenters1))
	for i, e := range documenters0 {
		(*(*[999999]*C.char)(unsafe.Pointer(documenters1)))[i] = _GoStringToGString(e)
		defer C.free(unsafe.Pointer((*(*[999999]*C.char)(unsafe.Pointer(documenters1)))[i]))
	}
	(*(*[999999]*C.char)(unsafe.Pointer(documenters1)))[len(documenters0)] = nil
	C.gtk_about_dialog_set_documenters(this1, documenters1)
}
func (this0 *AboutDialog) SetLicense(license0 string) {
	var this1 *C.GtkAboutDialog
	var license1 *C.char
	if this0 != nil {
		this1 = this0.InheritedFromGtkAboutDialog()
	}
	license1 = _GoStringToGString(license0)
	defer C.free(unsafe.Pointer(license1))
	C.gtk_about_dialog_set_license(this1, license1)
}
func (this0 *AboutDialog) SetLicenseType(license_type0 License) {
	var this1 *C.GtkAboutDialog
	var license_type1 C.GtkLicense
	if this0 != nil {
		this1 = this0.InheritedFromGtkAboutDialog()
	}
	license_type1 = C.GtkLicense(license_type0)
	C.gtk_about_dialog_set_license_type(this1, license_type1)
}
func (this0 *AboutDialog) SetLogo(logo0 gdkpixbuf.PixbufLike) {
	var this1 *C.GtkAboutDialog
	var logo1 *C.GdkPixbuf
	if this0 != nil {
		this1 = this0.InheritedFromGtkAboutDialog()
	}
	if logo0 != nil {
		logo1 = logo0.InheritedFromGdkPixbuf()
	}
	C.gtk_about_dialog_set_logo(this1, logo1)
}
func (this0 *AboutDialog) SetLogoIconName(icon_name0 string) {
	var this1 *C.GtkAboutDialog
	var icon_name1 *C.char
	if this0 != nil {
		this1 = this0.InheritedFromGtkAboutDialog()
	}
	icon_name1 = _GoStringToGString(icon_name0)
	defer C.free(unsafe.Pointer(icon_name1))
	C.gtk_about_dialog_set_logo_icon_name(this1, icon_name1)
}
func (this0 *AboutDialog) SetProgramName(name0 string) {
	var this1 *C.GtkAboutDialog
	var name1 *C.char
	if this0 != nil {
		this1 = this0.InheritedFromGtkAboutDialog()
	}
	name1 = _GoStringToGString(name0)
	defer C.free(unsafe.Pointer(name1))
	C.gtk_about_dialog_set_program_name(this1, name1)
}
func (this0 *AboutDialog) SetTranslatorCredits(translator_credits0 string) {
	var this1 *C.GtkAboutDialog
	var translator_credits1 *C.char
	if this0 != nil {
		this1 = this0.InheritedFromGtkAboutDialog()
	}
	translator_credits1 = _GoStringToGString(translator_credits0)
	defer C.free(unsafe.Pointer(translator_credits1))
	C.gtk_about_dialog_set_translator_credits(this1, translator_credits1)
}
func (this0 *AboutDialog) SetVersion(version0 string) {
	var this1 *C.GtkAboutDialog
	var version1 *C.char
	if this0 != nil {
		this1 = this0.InheritedFromGtkAboutDialog()
	}
	version1 = _GoStringToGString(version0)
	defer C.free(unsafe.Pointer(version1))
	C.gtk_about_dialog_set_version(this1, version1)
}
func (this0 *AboutDialog) SetWebsite(website0 string) {
	var this1 *C.GtkAboutDialog
	var website1 *C.char
	if this0 != nil {
		this1 = this0.InheritedFromGtkAboutDialog()
	}
	website1 = _GoStringToGString(website0)
	defer C.free(unsafe.Pointer(website1))
	C.gtk_about_dialog_set_website(this1, website1)
}
func (this0 *AboutDialog) SetWebsiteLabel(website_label0 string) {
	var this1 *C.GtkAboutDialog
	var website_label1 *C.char
	if this0 != nil {
		this1 = this0.InheritedFromGtkAboutDialog()
	}
	website_label1 = _GoStringToGString(website_label0)
	defer C.free(unsafe.Pointer(website_label1))
	C.gtk_about_dialog_set_website_label(this1, website_label1)
}
func (this0 *AboutDialog) SetWrapLicense(wrap_license0 bool) {
	var this1 *C.GtkAboutDialog
	var wrap_license1 C.int
	if this0 != nil {
		this1 = this0.InheritedFromGtkAboutDialog()
	}
	wrap_license1 = _GoBoolToCBool(wrap_license0)
	C.gtk_about_dialog_set_wrap_license(this1, wrap_license1)
}
type AccelFlags C.uint32_t
const (
	AccelFlagsVisible AccelFlags = 1
	AccelFlagsLocked AccelFlags = 2
	AccelFlagsMask AccelFlags = 7
)
type AccelGroupLike interface {
	gobject.ObjectLike
	InheritedFromGtkAccelGroup() *C.GtkAccelGroup
}

type AccelGroup struct {
	gobject.Object
	
}

func ToAccelGroup(objlike gobject.ObjectLike) *AccelGroup {
	c := objlike.InheritedFromGObject()
	if c == nil {
		return nil
	}
	t := (*AccelGroup)(nil).GetStaticType()
	obj := gobject.ObjectGrabIfType(unsafe.Pointer(c), t)
	if obj != nil {
		return (*AccelGroup)(obj)
	}
	panic("cannot cast to AccelGroup")
}

func (this0 *AccelGroup) InheritedFromGtkAccelGroup() *C.GtkAccelGroup {
	if this0 == nil {
		return nil
	}
	return (*C.GtkAccelGroup)(this0.C)
}

func (this0 *AccelGroup) GetStaticType() gobject.Type {
	return gobject.Type(C.gtk_accel_group_get_type())
}

func AccelGroupGetType() gobject.Type {
	return (*AccelGroup)(nil).GetStaticType()
}
func NewAccelGroup() *AccelGroup {
	ret1 := C.gtk_accel_group_new()
	var ret2 *AccelGroup
	ret2 = (*AccelGroup)(gobject.ObjectWrap(unsafe.Pointer(ret1), false))
	return ret2
}
func AccelGroupFromAccelClosure(closure0 *gobject.Closure) *AccelGroup {
	var closure1 *C.GClosure
	closure1 = (*C.GClosure)(unsafe.Pointer(closure0))
	ret1 := C.gtk_accel_group_from_accel_closure(closure1)
	var ret2 *AccelGroup
	ret2 = (*AccelGroup)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
func (this0 *AccelGroup) Activate(accel_quark0 int, acceleratable0 gobject.ObjectLike, accel_key0 int, accel_mods0 gdk.ModifierType) bool {
	var this1 *C.GtkAccelGroup
	var accel_quark1 C.uint32_t
	var acceleratable1 *C.GObject
	var accel_key1 C.uint32_t
	var accel_mods1 C.GdkModifierType
	if this0 != nil {
		this1 = this0.InheritedFromGtkAccelGroup()
	}
	accel_quark1 = C.uint32_t(accel_quark0)
	if acceleratable0 != nil {
		acceleratable1 = acceleratable0.InheritedFromGObject()
	}
	accel_key1 = C.uint32_t(accel_key0)
	accel_mods1 = C.GdkModifierType(accel_mods0)
	ret1 := C.gtk_accel_group_activate(this1, accel_quark1, acceleratable1, accel_key1, accel_mods1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *AccelGroup) Connect(accel_key0 int, accel_mods0 gdk.ModifierType, accel_flags0 AccelFlags, closure0 *gobject.Closure) {
	var this1 *C.GtkAccelGroup
	var accel_key1 C.uint32_t
	var accel_mods1 C.GdkModifierType
	var accel_flags1 C.GtkAccelFlags
	var closure1 *C.GClosure
	if this0 != nil {
		this1 = this0.InheritedFromGtkAccelGroup()
	}
	accel_key1 = C.uint32_t(accel_key0)
	accel_mods1 = C.GdkModifierType(accel_mods0)
	accel_flags1 = C.GtkAccelFlags(accel_flags0)
	closure1 = (*C.GClosure)(unsafe.Pointer(closure0))
	C.gtk_accel_group_connect(this1, accel_key1, accel_mods1, accel_flags1, closure1)
}
func (this0 *AccelGroup) ConnectByPath(accel_path0 string, closure0 *gobject.Closure) {
	var this1 *C.GtkAccelGroup
	var accel_path1 *C.char
	var closure1 *C.GClosure
	if this0 != nil {
		this1 = this0.InheritedFromGtkAccelGroup()
	}
	accel_path1 = _GoStringToGString(accel_path0)
	defer C.free(unsafe.Pointer(accel_path1))
	closure1 = (*C.GClosure)(unsafe.Pointer(closure0))
	C.gtk_accel_group_connect_by_path(this1, accel_path1, closure1)
}
func (this0 *AccelGroup) Disconnect(closure0 *gobject.Closure) bool {
	var this1 *C.GtkAccelGroup
	var closure1 *C.GClosure
	if this0 != nil {
		this1 = this0.InheritedFromGtkAccelGroup()
	}
	closure1 = (*C.GClosure)(unsafe.Pointer(closure0))
	ret1 := C.gtk_accel_group_disconnect(this1, closure1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *AccelGroup) DisconnectKey(accel_key0 int, accel_mods0 gdk.ModifierType) bool {
	var this1 *C.GtkAccelGroup
	var accel_key1 C.uint32_t
	var accel_mods1 C.GdkModifierType
	if this0 != nil {
		this1 = this0.InheritedFromGtkAccelGroup()
	}
	accel_key1 = C.uint32_t(accel_key0)
	accel_mods1 = C.GdkModifierType(accel_mods0)
	ret1 := C.gtk_accel_group_disconnect_key(this1, accel_key1, accel_mods1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *AccelGroup) Find(find_func0 AccelGroupFindFunc) *AccelKey {
	var this1 *C.GtkAccelGroup
	var find_func1 unsafe.Pointer
	if this0 != nil {
		this1 = this0.InheritedFromGtkAccelGroup()
	}
	if find_func0 != nil {
		find_func1 = unsafe.Pointer(&find_func0)}
	ret1 := C._gtk_accel_group_find(this1, find_func1)
	var ret2 *AccelKey
	ret2 = (*AccelKey)(unsafe.Pointer(ret1))
	return ret2
}
func (this0 *AccelGroup) GetIsLocked() bool {
	var this1 *C.GtkAccelGroup
	if this0 != nil {
		this1 = this0.InheritedFromGtkAccelGroup()
	}
	ret1 := C.gtk_accel_group_get_is_locked(this1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *AccelGroup) GetModifierMask() gdk.ModifierType {
	var this1 *C.GtkAccelGroup
	if this0 != nil {
		this1 = this0.InheritedFromGtkAccelGroup()
	}
	ret1 := C.gtk_accel_group_get_modifier_mask(this1)
	var ret2 gdk.ModifierType
	ret2 = gdk.ModifierType(ret1)
	return ret2
}
func (this0 *AccelGroup) Lock() {
	var this1 *C.GtkAccelGroup
	if this0 != nil {
		this1 = this0.InheritedFromGtkAccelGroup()
	}
	C.gtk_accel_group_lock(this1)
}
func (this0 *AccelGroup) Query(accel_key0 int, accel_mods0 gdk.ModifierType) (int, []AccelGroupEntry) {
	var this1 *C.GtkAccelGroup
	var accel_key1 C.uint32_t
	var accel_mods1 C.GdkModifierType
	var n_entries1 C.uint32_t
	if this0 != nil {
		this1 = this0.InheritedFromGtkAccelGroup()
	}
	accel_key1 = C.uint32_t(accel_key0)
	accel_mods1 = C.GdkModifierType(accel_mods0)
	ret1 := C.gtk_accel_group_query(this1, accel_key1, accel_mods1, &n_entries1)
	var n_entries2 int
	var ret2 []AccelGroupEntry
	n_entries2 = int(n_entries1)
	ret2 = make([]AccelGroupEntry, n_entries1)
	for i := range ret2 {
		ret2[i] = *(*AccelGroupEntry)(unsafe.Pointer(&(*(*[999999]C.GtkAccelGroupEntry)(unsafe.Pointer(ret1)))[i]))
	}
	return n_entries2, ret2
}
func (this0 *AccelGroup) Unlock() {
	var this1 *C.GtkAccelGroup
	if this0 != nil {
		this1 = this0.InheritedFromGtkAccelGroup()
	}
	C.gtk_accel_group_unlock(this1)
}
// blacklisted (no userdata): type AccelGroupActivate func(accel_group *AccelGroup, acceleratable *gobject.Object, keyval int, modifier gdk.ModifierType) bool
type AccelGroupEntry struct {
	Key AccelKey
	_ [4]byte
	Closure *gobject.Closure
	AccelPathQuark uint32
	_ [4]byte
}
type AccelGroupFindFunc func(key *AccelKey, closure *gobject.Closure) bool
//export _GtkAccelGroupFindFunc_c_wrapper
func _GtkAccelGroupFindFunc_c_wrapper(key0 unsafe.Pointer, closure0 unsafe.Pointer, data0 unsafe.Pointer) int32 {
	var key1 *AccelKey
	var closure1 *gobject.Closure
	var data1 AccelGroupFindFunc
	key1 = (*AccelKey)(unsafe.Pointer((*C.GtkAccelKey)(key0)))
	closure1 = (*gobject.Closure)(unsafe.Pointer((*C.GClosure)(closure0)))
	data1 = *(*AccelGroupFindFunc)(data0)
	ret1 := data1(key1, closure1)
	var ret2 C.int
	ret2 = _GoBoolToCBool(ret1)
	return (int32)(ret2)
}
//export _GtkAccelGroupFindFunc_c_wrapper_once
func _GtkAccelGroupFindFunc_c_wrapper_once(key0 unsafe.Pointer, closure0 unsafe.Pointer, data0 unsafe.Pointer) int32 {
	ret := _GtkAccelGroupFindFunc_c_wrapper(key0, closure0, data0)
	gobject.Holder.Release(data0)
	return ret
}
type AccelKey struct {
	AccelKey uint32
	AccelMods gdk.ModifierType
	AccelFlags uint32
}
type AccelLabelLike interface {
	LabelLike
	InheritedFromGtkAccelLabel() *C.GtkAccelLabel
}

type AccelLabel struct {
	Label
	atk.ImplementorIfaceImpl
	BuildableImpl
}

func ToAccelLabel(objlike gobject.ObjectLike) *AccelLabel {
	c := objlike.InheritedFromGObject()
	if c == nil {
		return nil
	}
	t := (*AccelLabel)(nil).GetStaticType()
	obj := gobject.ObjectGrabIfType(unsafe.Pointer(c), t)
	if obj != nil {
		return (*AccelLabel)(obj)
	}
	panic("cannot cast to AccelLabel")
}

func (this0 *AccelLabel) InheritedFromGtkAccelLabel() *C.GtkAccelLabel {
	if this0 == nil {
		return nil
	}
	return (*C.GtkAccelLabel)(this0.C)
}

func (this0 *AccelLabel) GetStaticType() gobject.Type {
	return gobject.Type(C.gtk_accel_label_get_type())
}

func AccelLabelGetType() gobject.Type {
	return (*AccelLabel)(nil).GetStaticType()
}
func NewAccelLabel(string0 string) *AccelLabel {
	var string1 *C.char
	string1 = _GoStringToGString(string0)
	defer C.free(unsafe.Pointer(string1))
	ret1 := C.gtk_accel_label_new(string1)
	var ret2 *AccelLabel
	ret2 = (*AccelLabel)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
func (this0 *AccelLabel) GetAccelWidget() *Widget {
	var this1 *C.GtkAccelLabel
	if this0 != nil {
		this1 = this0.InheritedFromGtkAccelLabel()
	}
	ret1 := C.gtk_accel_label_get_accel_widget(this1)
	var ret2 *Widget
	ret2 = (*Widget)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
func (this0 *AccelLabel) GetAccelWidth() int {
	var this1 *C.GtkAccelLabel
	if this0 != nil {
		this1 = this0.InheritedFromGtkAccelLabel()
	}
	ret1 := C.gtk_accel_label_get_accel_width(this1)
	var ret2 int
	ret2 = int(ret1)
	return ret2
}
func (this0 *AccelLabel) Refetch() bool {
	var this1 *C.GtkAccelLabel
	if this0 != nil {
		this1 = this0.InheritedFromGtkAccelLabel()
	}
	ret1 := C.gtk_accel_label_refetch(this1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *AccelLabel) SetAccelClosure(accel_closure0 *gobject.Closure) {
	var this1 *C.GtkAccelLabel
	var accel_closure1 *C.GClosure
	if this0 != nil {
		this1 = this0.InheritedFromGtkAccelLabel()
	}
	accel_closure1 = (*C.GClosure)(unsafe.Pointer(accel_closure0))
	C.gtk_accel_label_set_accel_closure(this1, accel_closure1)
}
func (this0 *AccelLabel) SetAccelWidget(accel_widget0 WidgetLike) {
	var this1 *C.GtkAccelLabel
	var accel_widget1 *C.GtkWidget
	if this0 != nil {
		this1 = this0.InheritedFromGtkAccelLabel()
	}
	if accel_widget0 != nil {
		accel_widget1 = accel_widget0.InheritedFromGtkWidget()
	}
	C.gtk_accel_label_set_accel_widget(this1, accel_widget1)
}
type AccelMapLike interface {
	gobject.ObjectLike
	InheritedFromGtkAccelMap() *C.GtkAccelMap
}

type AccelMap struct {
	gobject.Object
	
}

func ToAccelMap(objlike gobject.ObjectLike) *AccelMap {
	c := objlike.InheritedFromGObject()
	if c == nil {
		return nil
	}
	t := (*AccelMap)(nil).GetStaticType()
	obj := gobject.ObjectGrabIfType(unsafe.Pointer(c), t)
	if obj != nil {
		return (*AccelMap)(obj)
	}
	panic("cannot cast to AccelMap")
}

func (this0 *AccelMap) InheritedFromGtkAccelMap() *C.GtkAccelMap {
	if this0 == nil {
		return nil
	}
	return (*C.GtkAccelMap)(this0.C)
}

func (this0 *AccelMap) GetStaticType() gobject.Type {
	return gobject.Type(C.gtk_accel_map_get_type())
}

func AccelMapGetType() gobject.Type {
	return (*AccelMap)(nil).GetStaticType()
}
func AccelMapAddEntry(accel_path0 string, accel_key0 int, accel_mods0 gdk.ModifierType) {
	var accel_path1 *C.char
	var accel_key1 C.uint32_t
	var accel_mods1 C.GdkModifierType
	accel_path1 = _GoStringToGString(accel_path0)
	defer C.free(unsafe.Pointer(accel_path1))
	accel_key1 = C.uint32_t(accel_key0)
	accel_mods1 = C.GdkModifierType(accel_mods0)
	C.gtk_accel_map_add_entry(accel_path1, accel_key1, accel_mods1)
}
func AccelMapAddFilter(filter_pattern0 string) {
	var filter_pattern1 *C.char
	filter_pattern1 = _GoStringToGString(filter_pattern0)
	defer C.free(unsafe.Pointer(filter_pattern1))
	C.gtk_accel_map_add_filter(filter_pattern1)
}
func AccelMapChangeEntry(accel_path0 string, accel_key0 int, accel_mods0 gdk.ModifierType, replace0 bool) bool {
	var accel_path1 *C.char
	var accel_key1 C.uint32_t
	var accel_mods1 C.GdkModifierType
	var replace1 C.int
	accel_path1 = _GoStringToGString(accel_path0)
	defer C.free(unsafe.Pointer(accel_path1))
	accel_key1 = C.uint32_t(accel_key0)
	accel_mods1 = C.GdkModifierType(accel_mods0)
	replace1 = _GoBoolToCBool(replace0)
	ret1 := C.gtk_accel_map_change_entry(accel_path1, accel_key1, accel_mods1, replace1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
// blacklisted: AccelMap.foreach (method)
// blacklisted: AccelMap.foreach_unfiltered (method)
func AccelMapGet() *AccelMap {
	ret1 := C.gtk_accel_map_get()
	var ret2 *AccelMap
	ret2 = (*AccelMap)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
func AccelMapLoad(file_name0 string) {
	var file_name1 *C.char
	file_name1 = _GoStringToGString(file_name0)
	defer C.free(unsafe.Pointer(file_name1))
	C.gtk_accel_map_load(file_name1)
}
func AccelMapLoadFD(fd0 int) {
	var fd1 C.int32_t
	fd1 = C.int32_t(fd0)
	C.gtk_accel_map_load_fd(fd1)
}
// blacklisted: AccelMap.load_scanner (method)
func AccelMapLockPath(accel_path0 string) {
	var accel_path1 *C.char
	accel_path1 = _GoStringToGString(accel_path0)
	defer C.free(unsafe.Pointer(accel_path1))
	C.gtk_accel_map_lock_path(accel_path1)
}
func AccelMapLookupEntry(accel_path0 string) (AccelKey, bool) {
	var accel_path1 *C.char
	var key1 C.GtkAccelKey
	accel_path1 = _GoStringToGString(accel_path0)
	defer C.free(unsafe.Pointer(accel_path1))
	ret1 := C.gtk_accel_map_lookup_entry(accel_path1, &key1)
	var key2 AccelKey
	var ret2 bool
	key2 = *(*AccelKey)(unsafe.Pointer(&key1))
	ret2 = ret1 != 0
	return key2, ret2
}
func AccelMapSave(file_name0 string) {
	var file_name1 *C.char
	file_name1 = _GoStringToGString(file_name0)
	defer C.free(unsafe.Pointer(file_name1))
	C.gtk_accel_map_save(file_name1)
}
func AccelMapSaveFD(fd0 int) {
	var fd1 C.int32_t
	fd1 = C.int32_t(fd0)
	C.gtk_accel_map_save_fd(fd1)
}
func AccelMapUnlockPath(accel_path0 string) {
	var accel_path1 *C.char
	accel_path1 = _GoStringToGString(accel_path0)
	defer C.free(unsafe.Pointer(accel_path1))
	C.gtk_accel_map_unlock_path(accel_path1)
}
// blacklisted: AccelMapForeach (callback)
type AccessibleLike interface {
	atk.ObjectLike
	InheritedFromGtkAccessible() *C.GtkAccessible
}

type Accessible struct {
	atk.Object
	
}

func ToAccessible(objlike gobject.ObjectLike) *Accessible {
	c := objlike.InheritedFromGObject()
	if c == nil {
		return nil
	}
	t := (*Accessible)(nil).GetStaticType()
	obj := gobject.ObjectGrabIfType(unsafe.Pointer(c), t)
	if obj != nil {
		return (*Accessible)(obj)
	}
	panic("cannot cast to Accessible")
}

func (this0 *Accessible) InheritedFromGtkAccessible() *C.GtkAccessible {
	if this0 == nil {
		return nil
	}
	return (*C.GtkAccessible)(this0.C)
}

func (this0 *Accessible) GetStaticType() gobject.Type {
	return gobject.Type(C.gtk_accessible_get_type())
}

func AccessibleGetType() gobject.Type {
	return (*Accessible)(nil).GetStaticType()
}
func (this0 *Accessible) ConnectWidgetDestroyed() {
	var this1 *C.GtkAccessible
	if this0 != nil {
		this1 = this0.InheritedFromGtkAccessible()
	}
	C.gtk_accessible_connect_widget_destroyed(this1)
}
func (this0 *Accessible) GetWidget() *Widget {
	var this1 *C.GtkAccessible
	if this0 != nil {
		this1 = this0.InheritedFromGtkAccessible()
	}
	ret1 := C.gtk_accessible_get_widget(this1)
	var ret2 *Widget
	ret2 = (*Widget)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
func (this0 *Accessible) SetWidget(widget0 WidgetLike) {
	var this1 *C.GtkAccessible
	var widget1 *C.GtkWidget
	if this0 != nil {
		this1 = this0.InheritedFromGtkAccessible()
	}
	if widget0 != nil {
		widget1 = widget0.InheritedFromGtkWidget()
	}
	C.gtk_accessible_set_widget(this1, widget1)
}
type ActionLike interface {
	gobject.ObjectLike
	InheritedFromGtkAction() *C.GtkAction
}

type Action struct {
	gobject.Object
	BuildableImpl
}

func ToAction(objlike gobject.ObjectLike) *Action {
	c := objlike.InheritedFromGObject()
	if c == nil {
		return nil
	}
	t := (*Action)(nil).GetStaticType()
	obj := gobject.ObjectGrabIfType(unsafe.Pointer(c), t)
	if obj != nil {
		return (*Action)(obj)
	}
	panic("cannot cast to Action")
}

func (this0 *Action) InheritedFromGtkAction() *C.GtkAction {
	if this0 == nil {
		return nil
	}
	return (*C.GtkAction)(this0.C)
}

func (this0 *Action) GetStaticType() gobject.Type {
	return gobject.Type(C.gtk_action_get_type())
}

func ActionGetType() gobject.Type {
	return (*Action)(nil).GetStaticType()
}
func NewAction(name0 string, label0 string, tooltip0 string, stock_id0 string) *Action {
	var name1 *C.char
	var label1 *C.char
	var tooltip1 *C.char
	var stock_id1 *C.char
	name1 = _GoStringToGString(name0)
	defer C.free(unsafe.Pointer(name1))
	label1 = _GoStringToGString(label0)
	defer C.free(unsafe.Pointer(label1))
	tooltip1 = _GoStringToGString(tooltip0)
	defer C.free(unsafe.Pointer(tooltip1))
	stock_id1 = _GoStringToGString(stock_id0)
	defer C.free(unsafe.Pointer(stock_id1))
	ret1 := C.gtk_action_new(name1, label1, tooltip1, stock_id1)
	var ret2 *Action
	ret2 = (*Action)(gobject.ObjectWrap(unsafe.Pointer(ret1), false))
	return ret2
}
func (this0 *Action) Activate() {
	var this1 *C.GtkAction
	if this0 != nil {
		this1 = this0.InheritedFromGtkAction()
	}
	C.gtk_action_activate(this1)
}
func (this0 *Action) BlockActivate() {
	var this1 *C.GtkAction
	if this0 != nil {
		this1 = this0.InheritedFromGtkAction()
	}
	C.gtk_action_block_activate(this1)
}
func (this0 *Action) ConnectAccelerator() {
	var this1 *C.GtkAction
	if this0 != nil {
		this1 = this0.InheritedFromGtkAction()
	}
	C.gtk_action_connect_accelerator(this1)
}
func (this0 *Action) CreateIcon(icon_size0 int) *Widget {
	var this1 *C.GtkAction
	var icon_size1 C.int32_t
	if this0 != nil {
		this1 = this0.InheritedFromGtkAction()
	}
	icon_size1 = C.int32_t(icon_size0)
	ret1 := C.gtk_action_create_icon(this1, icon_size1)
	var ret2 *Widget
	ret2 = (*Widget)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
func (this0 *Action) CreateMenu() *Widget {
	var this1 *C.GtkAction
	if this0 != nil {
		this1 = this0.InheritedFromGtkAction()
	}
	ret1 := C.gtk_action_create_menu(this1)
	var ret2 *Widget
	ret2 = (*Widget)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
func (this0 *Action) CreateMenuItem() *Widget {
	var this1 *C.GtkAction
	if this0 != nil {
		this1 = this0.InheritedFromGtkAction()
	}
	ret1 := C.gtk_action_create_menu_item(this1)
	var ret2 *Widget
	ret2 = (*Widget)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
func (this0 *Action) CreateToolItem() *Widget {
	var this1 *C.GtkAction
	if this0 != nil {
		this1 = this0.InheritedFromGtkAction()
	}
	ret1 := C.gtk_action_create_tool_item(this1)
	var ret2 *Widget
	ret2 = (*Widget)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
func (this0 *Action) DisconnectAccelerator() {
	var this1 *C.GtkAction
	if this0 != nil {
		this1 = this0.InheritedFromGtkAction()
	}
	C.gtk_action_disconnect_accelerator(this1)
}
func (this0 *Action) GetAccelClosure() *gobject.Closure {
	var this1 *C.GtkAction
	if this0 != nil {
		this1 = this0.InheritedFromGtkAction()
	}
	ret1 := C.gtk_action_get_accel_closure(this1)
	var ret2 *gobject.Closure
	ret2 = (*gobject.Closure)(unsafe.Pointer(ret1))
	return ret2
}
func (this0 *Action) GetAccelPath() string {
	var this1 *C.GtkAction
	if this0 != nil {
		this1 = this0.InheritedFromGtkAction()
	}
	ret1 := C.gtk_action_get_accel_path(this1)
	var ret2 string
	ret2 = C.GoString(ret1)
	return ret2
}
func (this0 *Action) GetAlwaysShowImage() bool {
	var this1 *C.GtkAction
	if this0 != nil {
		this1 = this0.InheritedFromGtkAction()
	}
	ret1 := C.gtk_action_get_always_show_image(this1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *Action) GetGIcon() *gio.Icon {
	var this1 *C.GtkAction
	if this0 != nil {
		this1 = this0.InheritedFromGtkAction()
	}
	ret1 := C.gtk_action_get_gicon(this1)
	var ret2 *gio.Icon
	ret2 = (*gio.Icon)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
func (this0 *Action) GetIconName() string {
	var this1 *C.GtkAction
	if this0 != nil {
		this1 = this0.InheritedFromGtkAction()
	}
	ret1 := C.gtk_action_get_icon_name(this1)
	var ret2 string
	ret2 = C.GoString(ret1)
	return ret2
}
func (this0 *Action) GetIsImportant() bool {
	var this1 *C.GtkAction
	if this0 != nil {
		this1 = this0.InheritedFromGtkAction()
	}
	ret1 := C.gtk_action_get_is_important(this1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *Action) GetLabel() string {
	var this1 *C.GtkAction
	if this0 != nil {
		this1 = this0.InheritedFromGtkAction()
	}
	ret1 := C.gtk_action_get_label(this1)
	var ret2 string
	ret2 = C.GoString(ret1)
	return ret2
}
func (this0 *Action) GetName() string {
	var this1 *C.GtkAction
	if this0 != nil {
		this1 = this0.InheritedFromGtkAction()
	}
	ret1 := C.gtk_action_get_name(this1)
	var ret2 string
	ret2 = C.GoString(ret1)
	return ret2
}
func (this0 *Action) GetProxies() []*Widget {
	var this1 *C.GtkAction
	if this0 != nil {
		this1 = this0.InheritedFromGtkAction()
	}
	ret1 := C.gtk_action_get_proxies(this1)
	var ret2 []*Widget
	for iter := (*_GSList)(unsafe.Pointer(ret1)); iter != nil; iter = iter.next {
		var elt *Widget
		elt = (*Widget)(gobject.ObjectWrap(unsafe.Pointer((*C.GtkWidget)(iter.data)), true))
		ret2 = append(ret2, elt)
	}
	return ret2
}
func (this0 *Action) GetSensitive() bool {
	var this1 *C.GtkAction
	if this0 != nil {
		this1 = this0.InheritedFromGtkAction()
	}
	ret1 := C.gtk_action_get_sensitive(this1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *Action) GetShortLabel() string {
	var this1 *C.GtkAction
	if this0 != nil {
		this1 = this0.InheritedFromGtkAction()
	}
	ret1 := C.gtk_action_get_short_label(this1)
	var ret2 string
	ret2 = C.GoString(ret1)
	return ret2
}
func (this0 *Action) GetStockID() string {
	var this1 *C.GtkAction
	if this0 != nil {
		this1 = this0.InheritedFromGtkAction()
	}
	ret1 := C.gtk_action_get_stock_id(this1)
	var ret2 string
	ret2 = C.GoString(ret1)
	return ret2
}
func (this0 *Action) GetTooltip() string {
	var this1 *C.GtkAction
	if this0 != nil {
		this1 = this0.InheritedFromGtkAction()
	}
	ret1 := C.gtk_action_get_tooltip(this1)
	var ret2 string
	ret2 = C.GoString(ret1)
	return ret2
}
func (this0 *Action) GetVisible() bool {
	var this1 *C.GtkAction
	if this0 != nil {
		this1 = this0.InheritedFromGtkAction()
	}
	ret1 := C.gtk_action_get_visible(this1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *Action) GetVisibleHorizontal() bool {
	var this1 *C.GtkAction
	if this0 != nil {
		this1 = this0.InheritedFromGtkAction()
	}
	ret1 := C.gtk_action_get_visible_horizontal(this1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *Action) GetVisibleVertical() bool {
	var this1 *C.GtkAction
	if this0 != nil {
		this1 = this0.InheritedFromGtkAction()
	}
	ret1 := C.gtk_action_get_visible_vertical(this1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *Action) IsSensitive() bool {
	var this1 *C.GtkAction
	if this0 != nil {
		this1 = this0.InheritedFromGtkAction()
	}
	ret1 := C.gtk_action_is_sensitive(this1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *Action) IsVisible() bool {
	var this1 *C.GtkAction
	if this0 != nil {
		this1 = this0.InheritedFromGtkAction()
	}
	ret1 := C.gtk_action_is_visible(this1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *Action) SetAccelGroup(accel_group0 AccelGroupLike) {
	var this1 *C.GtkAction
	var accel_group1 *C.GtkAccelGroup
	if this0 != nil {
		this1 = this0.InheritedFromGtkAction()
	}
	if accel_group0 != nil {
		accel_group1 = accel_group0.InheritedFromGtkAccelGroup()
	}
	C.gtk_action_set_accel_group(this1, accel_group1)
}
func (this0 *Action) SetAccelPath(accel_path0 string) {
	var this1 *C.GtkAction
	var accel_path1 *C.char
	if this0 != nil {
		this1 = this0.InheritedFromGtkAction()
	}
	accel_path1 = _GoStringToGString(accel_path0)
	defer C.free(unsafe.Pointer(accel_path1))
	C.gtk_action_set_accel_path(this1, accel_path1)
}
func (this0 *Action) SetAlwaysShowImage(always_show0 bool) {
	var this1 *C.GtkAction
	var always_show1 C.int
	if this0 != nil {
		this1 = this0.InheritedFromGtkAction()
	}
	always_show1 = _GoBoolToCBool(always_show0)
	C.gtk_action_set_always_show_image(this1, always_show1)
}
func (this0 *Action) SetGIcon(icon0 gio.IconLike) {
	var this1 *C.GtkAction
	var icon1 *C.GIcon
	if this0 != nil {
		this1 = this0.InheritedFromGtkAction()
	}
	if icon0 != nil {
		icon1 = icon0.ImplementsGIcon()}
	C.gtk_action_set_gicon(this1, icon1)
}
func (this0 *Action) SetIconName(icon_name0 string) {
	var this1 *C.GtkAction
	var icon_name1 *C.char
	if this0 != nil {
		this1 = this0.InheritedFromGtkAction()
	}
	icon_name1 = _GoStringToGString(icon_name0)
	defer C.free(unsafe.Pointer(icon_name1))
	C.gtk_action_set_icon_name(this1, icon_name1)
}
func (this0 *Action) SetIsImportant(is_important0 bool) {
	var this1 *C.GtkAction
	var is_important1 C.int
	if this0 != nil {
		this1 = this0.InheritedFromGtkAction()
	}
	is_important1 = _GoBoolToCBool(is_important0)
	C.gtk_action_set_is_important(this1, is_important1)
}
func (this0 *Action) SetLabel(label0 string) {
	var this1 *C.GtkAction
	var label1 *C.char
	if this0 != nil {
		this1 = this0.InheritedFromGtkAction()
	}
	label1 = _GoStringToGString(label0)
	defer C.free(unsafe.Pointer(label1))
	C.gtk_action_set_label(this1, label1)
}
func (this0 *Action) SetSensitive(sensitive0 bool) {
	var this1 *C.GtkAction
	var sensitive1 C.int
	if this0 != nil {
		this1 = this0.InheritedFromGtkAction()
	}
	sensitive1 = _GoBoolToCBool(sensitive0)
	C.gtk_action_set_sensitive(this1, sensitive1)
}
func (this0 *Action) SetShortLabel(short_label0 string) {
	var this1 *C.GtkAction
	var short_label1 *C.char
	if this0 != nil {
		this1 = this0.InheritedFromGtkAction()
	}
	short_label1 = _GoStringToGString(short_label0)
	defer C.free(unsafe.Pointer(short_label1))
	C.gtk_action_set_short_label(this1, short_label1)
}
func (this0 *Action) SetStockID(stock_id0 string) {
	var this1 *C.GtkAction
	var stock_id1 *C.char
	if this0 != nil {
		this1 = this0.InheritedFromGtkAction()
	}
	stock_id1 = _GoStringToGString(stock_id0)
	defer C.free(unsafe.Pointer(stock_id1))
	C.gtk_action_set_stock_id(this1, stock_id1)
}
func (this0 *Action) SetTooltip(tooltip0 string) {
	var this1 *C.GtkAction
	var tooltip1 *C.char
	if this0 != nil {
		this1 = this0.InheritedFromGtkAction()
	}
	tooltip1 = _GoStringToGString(tooltip0)
	defer C.free(unsafe.Pointer(tooltip1))
	C.gtk_action_set_tooltip(this1, tooltip1)
}
func (this0 *Action) SetVisible(visible0 bool) {
	var this1 *C.GtkAction
	var visible1 C.int
	if this0 != nil {
		this1 = this0.InheritedFromGtkAction()
	}
	visible1 = _GoBoolToCBool(visible0)
	C.gtk_action_set_visible(this1, visible1)
}
func (this0 *Action) SetVisibleHorizontal(visible_horizontal0 bool) {
	var this1 *C.GtkAction
	var visible_horizontal1 C.int
	if this0 != nil {
		this1 = this0.InheritedFromGtkAction()
	}
	visible_horizontal1 = _GoBoolToCBool(visible_horizontal0)
	C.gtk_action_set_visible_horizontal(this1, visible_horizontal1)
}
func (this0 *Action) SetVisibleVertical(visible_vertical0 bool) {
	var this1 *C.GtkAction
	var visible_vertical1 C.int
	if this0 != nil {
		this1 = this0.InheritedFromGtkAction()
	}
	visible_vertical1 = _GoBoolToCBool(visible_vertical0)
	C.gtk_action_set_visible_vertical(this1, visible_vertical1)
}
func (this0 *Action) UnblockActivate() {
	var this1 *C.GtkAction
	if this0 != nil {
		this1 = this0.InheritedFromGtkAction()
	}
	C.gtk_action_unblock_activate(this1)
}
type ActionGroupLike interface {
	gobject.ObjectLike
	InheritedFromGtkActionGroup() *C.GtkActionGroup
}

type ActionGroup struct {
	gobject.Object
	BuildableImpl
}

func ToActionGroup(objlike gobject.ObjectLike) *ActionGroup {
	c := objlike.InheritedFromGObject()
	if c == nil {
		return nil
	}
	t := (*ActionGroup)(nil).GetStaticType()
	obj := gobject.ObjectGrabIfType(unsafe.Pointer(c), t)
	if obj != nil {
		return (*ActionGroup)(obj)
	}
	panic("cannot cast to ActionGroup")
}

func (this0 *ActionGroup) InheritedFromGtkActionGroup() *C.GtkActionGroup {
	if this0 == nil {
		return nil
	}
	return (*C.GtkActionGroup)(this0.C)
}

func (this0 *ActionGroup) GetStaticType() gobject.Type {
	return gobject.Type(C.gtk_action_group_get_type())
}

func ActionGroupGetType() gobject.Type {
	return (*ActionGroup)(nil).GetStaticType()
}
func NewActionGroup(name0 string) *ActionGroup {
	var name1 *C.char
	name1 = _GoStringToGString(name0)
	defer C.free(unsafe.Pointer(name1))
	ret1 := C.gtk_action_group_new(name1)
	var ret2 *ActionGroup
	ret2 = (*ActionGroup)(gobject.ObjectWrap(unsafe.Pointer(ret1), false))
	return ret2
}
func (this0 *ActionGroup) AddAction(action0 ActionLike) {
	var this1 *C.GtkActionGroup
	var action1 *C.GtkAction
	if this0 != nil {
		this1 = this0.InheritedFromGtkActionGroup()
	}
	if action0 != nil {
		action1 = action0.InheritedFromGtkAction()
	}
	C.gtk_action_group_add_action(this1, action1)
}
func (this0 *ActionGroup) AddActionWithAccel(action0 ActionLike, accelerator0 string) {
	var this1 *C.GtkActionGroup
	var action1 *C.GtkAction
	var accelerator1 *C.char
	if this0 != nil {
		this1 = this0.InheritedFromGtkActionGroup()
	}
	if action0 != nil {
		action1 = action0.InheritedFromGtkAction()
	}
	accelerator1 = _GoStringToGString(accelerator0)
	defer C.free(unsafe.Pointer(accelerator1))
	C.gtk_action_group_add_action_with_accel(this1, action1, accelerator1)
}
func (this0 *ActionGroup) GetAction(action_name0 string) *Action {
	var this1 *C.GtkActionGroup
	var action_name1 *C.char
	if this0 != nil {
		this1 = this0.InheritedFromGtkActionGroup()
	}
	action_name1 = _GoStringToGString(action_name0)
	defer C.free(unsafe.Pointer(action_name1))
	ret1 := C.gtk_action_group_get_action(this1, action_name1)
	var ret2 *Action
	ret2 = (*Action)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
func (this0 *ActionGroup) GetName() string {
	var this1 *C.GtkActionGroup
	if this0 != nil {
		this1 = this0.InheritedFromGtkActionGroup()
	}
	ret1 := C.gtk_action_group_get_name(this1)
	var ret2 string
	ret2 = C.GoString(ret1)
	return ret2
}
func (this0 *ActionGroup) GetSensitive() bool {
	var this1 *C.GtkActionGroup
	if this0 != nil {
		this1 = this0.InheritedFromGtkActionGroup()
	}
	ret1 := C.gtk_action_group_get_sensitive(this1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *ActionGroup) GetVisible() bool {
	var this1 *C.GtkActionGroup
	if this0 != nil {
		this1 = this0.InheritedFromGtkActionGroup()
	}
	ret1 := C.gtk_action_group_get_visible(this1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *ActionGroup) ListActions() []*Action {
	var this1 *C.GtkActionGroup
	if this0 != nil {
		this1 = this0.InheritedFromGtkActionGroup()
	}
	ret1 := C.gtk_action_group_list_actions(this1)
	var ret2 []*Action
	for iter := (*_GList)(unsafe.Pointer(ret1)); iter != nil; iter = iter.next {
		var elt *Action
		elt = (*Action)(gobject.ObjectWrap(unsafe.Pointer((*C.GtkAction)(iter.data)), true))
		ret2 = append(ret2, elt)
	}
	return ret2
}
func (this0 *ActionGroup) RemoveAction(action0 ActionLike) {
	var this1 *C.GtkActionGroup
	var action1 *C.GtkAction
	if this0 != nil {
		this1 = this0.InheritedFromGtkActionGroup()
	}
	if action0 != nil {
		action1 = action0.InheritedFromGtkAction()
	}
	C.gtk_action_group_remove_action(this1, action1)
}
func (this0 *ActionGroup) SetSensitive(sensitive0 bool) {
	var this1 *C.GtkActionGroup
	var sensitive1 C.int
	if this0 != nil {
		this1 = this0.InheritedFromGtkActionGroup()
	}
	sensitive1 = _GoBoolToCBool(sensitive0)
	C.gtk_action_group_set_sensitive(this1, sensitive1)
}
func (this0 *ActionGroup) SetTranslateFunc(func0 TranslateFunc) {
	var this1 *C.GtkActionGroup
	var func1 unsafe.Pointer
	if this0 != nil {
		this1 = this0.InheritedFromGtkActionGroup()
	}
	if func0 != nil {
		func1 = unsafe.Pointer(&func0)}
	gobject.Holder.Grab(func1)
	C._gtk_action_group_set_translate_func(this1, func1)
}
func (this0 *ActionGroup) SetTranslationDomain(domain0 string) {
	var this1 *C.GtkActionGroup
	var domain1 *C.char
	if this0 != nil {
		this1 = this0.InheritedFromGtkActionGroup()
	}
	domain1 = _GoStringToGString(domain0)
	defer C.free(unsafe.Pointer(domain1))
	C.gtk_action_group_set_translation_domain(this1, domain1)
}
func (this0 *ActionGroup) SetVisible(visible0 bool) {
	var this1 *C.GtkActionGroup
	var visible1 C.int
	if this0 != nil {
		this1 = this0.InheritedFromGtkActionGroup()
	}
	visible1 = _GoBoolToCBool(visible0)
	C.gtk_action_group_set_visible(this1, visible1)
}
func (this0 *ActionGroup) TranslateString(string0 string) string {
	var this1 *C.GtkActionGroup
	var string1 *C.char
	if this0 != nil {
		this1 = this0.InheritedFromGtkActionGroup()
	}
	string1 = _GoStringToGString(string0)
	defer C.free(unsafe.Pointer(string1))
	ret1 := C.gtk_action_group_translate_string(this1, string1)
	var ret2 string
	ret2 = C.GoString(ret1)
	return ret2
}
type ActivatableLike interface {
	ImplementsGtkActivatable() *C.GtkActivatable
}

type Activatable struct {
	gobject.Object
	ActivatableImpl
}

type ActivatableImpl struct {}

func ToActivatable(objlike gobject.ObjectLike) *Activatable {
	t := (*ActivatableImpl)(nil).GetStaticType()
	c := objlike.InheritedFromGObject()
	obj := gobject.ObjectGrabIfType(unsafe.Pointer(c), t)
	if obj != nil {
		return (*Activatable)(obj)
	}
	panic("cannot cast to Activatable")
}

func (this0 *ActivatableImpl) ImplementsGtkActivatable() *C.GtkActivatable {
	obj := uintptr(unsafe.Pointer(this0)) - unsafe.Sizeof(uintptr(0))
	return (*C.GtkActivatable)((*gobject.Object)(unsafe.Pointer(obj)).C)
}

func (this0 *ActivatableImpl) GetStaticType() gobject.Type {
	return gobject.Type(C.gtk_activatable_get_type())
}

func ActivatableGetType() gobject.Type {
	return (*ActivatableImpl)(nil).GetStaticType()
}
func (this0 *ActivatableImpl) DoSetRelatedAction(action0 ActionLike) {
	var this1 *C.GtkActivatable
	var action1 *C.GtkAction
	if this0 != nil {
		this1 = this0.ImplementsGtkActivatable()}
	if action0 != nil {
		action1 = action0.InheritedFromGtkAction()
	}
	C.gtk_activatable_do_set_related_action(this1, action1)
}
func (this0 *ActivatableImpl) GetRelatedAction() *Action {
	var this1 *C.GtkActivatable
	if this0 != nil {
		this1 = this0.ImplementsGtkActivatable()}
	ret1 := C.gtk_activatable_get_related_action(this1)
	var ret2 *Action
	ret2 = (*Action)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
func (this0 *ActivatableImpl) GetUseActionAppearance() bool {
	var this1 *C.GtkActivatable
	if this0 != nil {
		this1 = this0.ImplementsGtkActivatable()}
	ret1 := C.gtk_activatable_get_use_action_appearance(this1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *ActivatableImpl) SetRelatedAction(action0 ActionLike) {
	var this1 *C.GtkActivatable
	var action1 *C.GtkAction
	if this0 != nil {
		this1 = this0.ImplementsGtkActivatable()}
	if action0 != nil {
		action1 = action0.InheritedFromGtkAction()
	}
	C.gtk_activatable_set_related_action(this1, action1)
}
func (this0 *ActivatableImpl) SetUseActionAppearance(use_appearance0 bool) {
	var this1 *C.GtkActivatable
	var use_appearance1 C.int
	if this0 != nil {
		this1 = this0.ImplementsGtkActivatable()}
	use_appearance1 = _GoBoolToCBool(use_appearance0)
	C.gtk_activatable_set_use_action_appearance(this1, use_appearance1)
}
func (this0 *ActivatableImpl) SyncActionProperties(action0 ActionLike) {
	var this1 *C.GtkActivatable
	var action1 *C.GtkAction
	if this0 != nil {
		this1 = this0.ImplementsGtkActivatable()}
	if action0 != nil {
		action1 = action0.InheritedFromGtkAction()
	}
	C.gtk_activatable_sync_action_properties(this1, action1)
}
type AdjustmentLike interface {
	gobject.InitiallyUnownedLike
	InheritedFromGtkAdjustment() *C.GtkAdjustment
}

type Adjustment struct {
	gobject.InitiallyUnowned
	
}

func ToAdjustment(objlike gobject.ObjectLike) *Adjustment {
	c := objlike.InheritedFromGObject()
	if c == nil {
		return nil
	}
	t := (*Adjustment)(nil).GetStaticType()
	obj := gobject.ObjectGrabIfType(unsafe.Pointer(c), t)
	if obj != nil {
		return (*Adjustment)(obj)
	}
	panic("cannot cast to Adjustment")
}

func (this0 *Adjustment) InheritedFromGtkAdjustment() *C.GtkAdjustment {
	if this0 == nil {
		return nil
	}
	return (*C.GtkAdjustment)(this0.C)
}

func (this0 *Adjustment) GetStaticType() gobject.Type {
	return gobject.Type(C.gtk_adjustment_get_type())
}

func AdjustmentGetType() gobject.Type {
	return (*Adjustment)(nil).GetStaticType()
}
func NewAdjustment(value0 float64, lower0 float64, upper0 float64, step_increment0 float64, page_increment0 float64, page_size0 float64) *Adjustment {
	var value1 C.double
	var lower1 C.double
	var upper1 C.double
	var step_increment1 C.double
	var page_increment1 C.double
	var page_size1 C.double
	value1 = C.double(value0)
	lower1 = C.double(lower0)
	upper1 = C.double(upper0)
	step_increment1 = C.double(step_increment0)
	page_increment1 = C.double(page_increment0)
	page_size1 = C.double(page_size0)
	ret1 := C.gtk_adjustment_new(value1, lower1, upper1, step_increment1, page_increment1, page_size1)
	var ret2 *Adjustment
	ret2 = (*Adjustment)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
func (this0 *Adjustment) Changed() {
	var this1 *C.GtkAdjustment
	if this0 != nil {
		this1 = this0.InheritedFromGtkAdjustment()
	}
	C.gtk_adjustment_changed(this1)
}
func (this0 *Adjustment) ClampPage(lower0 float64, upper0 float64) {
	var this1 *C.GtkAdjustment
	var lower1 C.double
	var upper1 C.double
	if this0 != nil {
		this1 = this0.InheritedFromGtkAdjustment()
	}
	lower1 = C.double(lower0)
	upper1 = C.double(upper0)
	C.gtk_adjustment_clamp_page(this1, lower1, upper1)
}
func (this0 *Adjustment) Configure(value0 float64, lower0 float64, upper0 float64, step_increment0 float64, page_increment0 float64, page_size0 float64) {
	var this1 *C.GtkAdjustment
	var value1 C.double
	var lower1 C.double
	var upper1 C.double
	var step_increment1 C.double
	var page_increment1 C.double
	var page_size1 C.double
	if this0 != nil {
		this1 = this0.InheritedFromGtkAdjustment()
	}
	value1 = C.double(value0)
	lower1 = C.double(lower0)
	upper1 = C.double(upper0)
	step_increment1 = C.double(step_increment0)
	page_increment1 = C.double(page_increment0)
	page_size1 = C.double(page_size0)
	C.gtk_adjustment_configure(this1, value1, lower1, upper1, step_increment1, page_increment1, page_size1)
}
func (this0 *Adjustment) GetLower() float64 {
	var this1 *C.GtkAdjustment
	if this0 != nil {
		this1 = this0.InheritedFromGtkAdjustment()
	}
	ret1 := C.gtk_adjustment_get_lower(this1)
	var ret2 float64
	ret2 = float64(ret1)
	return ret2
}
func (this0 *Adjustment) GetMinimumIncrement() float64 {
	var this1 *C.GtkAdjustment
	if this0 != nil {
		this1 = this0.InheritedFromGtkAdjustment()
	}
	ret1 := C.gtk_adjustment_get_minimum_increment(this1)
	var ret2 float64
	ret2 = float64(ret1)
	return ret2
}
func (this0 *Adjustment) GetPageIncrement() float64 {
	var this1 *C.GtkAdjustment
	if this0 != nil {
		this1 = this0.InheritedFromGtkAdjustment()
	}
	ret1 := C.gtk_adjustment_get_page_increment(this1)
	var ret2 float64
	ret2 = float64(ret1)
	return ret2
}
func (this0 *Adjustment) GetPageSize() float64 {
	var this1 *C.GtkAdjustment
	if this0 != nil {
		this1 = this0.InheritedFromGtkAdjustment()
	}
	ret1 := C.gtk_adjustment_get_page_size(this1)
	var ret2 float64
	ret2 = float64(ret1)
	return ret2
}
func (this0 *Adjustment) GetStepIncrement() float64 {
	var this1 *C.GtkAdjustment
	if this0 != nil {
		this1 = this0.InheritedFromGtkAdjustment()
	}
	ret1 := C.gtk_adjustment_get_step_increment(this1)
	var ret2 float64
	ret2 = float64(ret1)
	return ret2
}
func (this0 *Adjustment) GetUpper() float64 {
	var this1 *C.GtkAdjustment
	if this0 != nil {
		this1 = this0.InheritedFromGtkAdjustment()
	}
	ret1 := C.gtk_adjustment_get_upper(this1)
	var ret2 float64
	ret2 = float64(ret1)
	return ret2
}
func (this0 *Adjustment) GetValue() float64 {
	var this1 *C.GtkAdjustment
	if this0 != nil {
		this1 = this0.InheritedFromGtkAdjustment()
	}
	ret1 := C.gtk_adjustment_get_value(this1)
	var ret2 float64
	ret2 = float64(ret1)
	return ret2
}
func (this0 *Adjustment) SetLower(lower0 float64) {
	var this1 *C.GtkAdjustment
	var lower1 C.double
	if this0 != nil {
		this1 = this0.InheritedFromGtkAdjustment()
	}
	lower1 = C.double(lower0)
	C.gtk_adjustment_set_lower(this1, lower1)
}
func (this0 *Adjustment) SetPageIncrement(page_increment0 float64) {
	var this1 *C.GtkAdjustment
	var page_increment1 C.double
	if this0 != nil {
		this1 = this0.InheritedFromGtkAdjustment()
	}
	page_increment1 = C.double(page_increment0)
	C.gtk_adjustment_set_page_increment(this1, page_increment1)
}
func (this0 *Adjustment) SetPageSize(page_size0 float64) {
	var this1 *C.GtkAdjustment
	var page_size1 C.double
	if this0 != nil {
		this1 = this0.InheritedFromGtkAdjustment()
	}
	page_size1 = C.double(page_size0)
	C.gtk_adjustment_set_page_size(this1, page_size1)
}
func (this0 *Adjustment) SetStepIncrement(step_increment0 float64) {
	var this1 *C.GtkAdjustment
	var step_increment1 C.double
	if this0 != nil {
		this1 = this0.InheritedFromGtkAdjustment()
	}
	step_increment1 = C.double(step_increment0)
	C.gtk_adjustment_set_step_increment(this1, step_increment1)
}
func (this0 *Adjustment) SetUpper(upper0 float64) {
	var this1 *C.GtkAdjustment
	var upper1 C.double
	if this0 != nil {
		this1 = this0.InheritedFromGtkAdjustment()
	}
	upper1 = C.double(upper0)
	C.gtk_adjustment_set_upper(this1, upper1)
}
func (this0 *Adjustment) SetValue(value0 float64) {
	var this1 *C.GtkAdjustment
	var value1 C.double
	if this0 != nil {
		this1 = this0.InheritedFromGtkAdjustment()
	}
	value1 = C.double(value0)
	C.gtk_adjustment_set_value(this1, value1)
}
func (this0 *Adjustment) ValueChanged() {
	var this1 *C.GtkAdjustment
	if this0 != nil {
		this1 = this0.InheritedFromGtkAdjustment()
	}
	C.gtk_adjustment_value_changed(this1)
}
type Align C.uint32_t
const (
	AlignFill Align = 0
	AlignStart Align = 1
	AlignEnd Align = 2
	AlignCenter Align = 3
)
type AlignmentLike interface {
	BinLike
	InheritedFromGtkAlignment() *C.GtkAlignment
}

type Alignment struct {
	Bin
	atk.ImplementorIfaceImpl
	BuildableImpl
}

func ToAlignment(objlike gobject.ObjectLike) *Alignment {
	c := objlike.InheritedFromGObject()
	if c == nil {
		return nil
	}
	t := (*Alignment)(nil).GetStaticType()
	obj := gobject.ObjectGrabIfType(unsafe.Pointer(c), t)
	if obj != nil {
		return (*Alignment)(obj)
	}
	panic("cannot cast to Alignment")
}

func (this0 *Alignment) InheritedFromGtkAlignment() *C.GtkAlignment {
	if this0 == nil {
		return nil
	}
	return (*C.GtkAlignment)(this0.C)
}

func (this0 *Alignment) GetStaticType() gobject.Type {
	return gobject.Type(C.gtk_alignment_get_type())
}

func AlignmentGetType() gobject.Type {
	return (*Alignment)(nil).GetStaticType()
}
func NewAlignment(xalign0 float64, yalign0 float64, xscale0 float64, yscale0 float64) *Alignment {
	var xalign1 C.float
	var yalign1 C.float
	var xscale1 C.float
	var yscale1 C.float
	xalign1 = C.float(xalign0)
	yalign1 = C.float(yalign0)
	xscale1 = C.float(xscale0)
	yscale1 = C.float(yscale0)
	ret1 := C.gtk_alignment_new(xalign1, yalign1, xscale1, yscale1)
	var ret2 *Alignment
	ret2 = (*Alignment)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
func (this0 *Alignment) GetPadding() (int, int, int, int) {
	var this1 *C.GtkAlignment
	var padding_top1 C.uint32_t
	var padding_bottom1 C.uint32_t
	var padding_left1 C.uint32_t
	var padding_right1 C.uint32_t
	if this0 != nil {
		this1 = this0.InheritedFromGtkAlignment()
	}
	C.gtk_alignment_get_padding(this1, &padding_top1, &padding_bottom1, &padding_left1, &padding_right1)
	var padding_top2 int
	var padding_bottom2 int
	var padding_left2 int
	var padding_right2 int
	padding_top2 = int(padding_top1)
	padding_bottom2 = int(padding_bottom1)
	padding_left2 = int(padding_left1)
	padding_right2 = int(padding_right1)
	return padding_top2, padding_bottom2, padding_left2, padding_right2
}
func (this0 *Alignment) Set(xalign0 float64, yalign0 float64, xscale0 float64, yscale0 float64) {
	var this1 *C.GtkAlignment
	var xalign1 C.float
	var yalign1 C.float
	var xscale1 C.float
	var yscale1 C.float
	if this0 != nil {
		this1 = this0.InheritedFromGtkAlignment()
	}
	xalign1 = C.float(xalign0)
	yalign1 = C.float(yalign0)
	xscale1 = C.float(xscale0)
	yscale1 = C.float(yscale0)
	C.gtk_alignment_set(this1, xalign1, yalign1, xscale1, yscale1)
}
func (this0 *Alignment) SetPadding(padding_top0 int, padding_bottom0 int, padding_left0 int, padding_right0 int) {
	var this1 *C.GtkAlignment
	var padding_top1 C.uint32_t
	var padding_bottom1 C.uint32_t
	var padding_left1 C.uint32_t
	var padding_right1 C.uint32_t
	if this0 != nil {
		this1 = this0.InheritedFromGtkAlignment()
	}
	padding_top1 = C.uint32_t(padding_top0)
	padding_bottom1 = C.uint32_t(padding_bottom0)
	padding_left1 = C.uint32_t(padding_left0)
	padding_right1 = C.uint32_t(padding_right0)
	C.gtk_alignment_set_padding(this1, padding_top1, padding_bottom1, padding_left1, padding_right1)
}
type AppChooserLike interface {
	ImplementsGtkAppChooser() *C.GtkAppChooser
}

type AppChooser struct {
	gobject.Object
	AppChooserImpl
}

type AppChooserImpl struct {}

func ToAppChooser(objlike gobject.ObjectLike) *AppChooser {
	t := (*AppChooserImpl)(nil).GetStaticType()
	c := objlike.InheritedFromGObject()
	obj := gobject.ObjectGrabIfType(unsafe.Pointer(c), t)
	if obj != nil {
		return (*AppChooser)(obj)
	}
	panic("cannot cast to AppChooser")
}

func (this0 *AppChooserImpl) ImplementsGtkAppChooser() *C.GtkAppChooser {
	obj := uintptr(unsafe.Pointer(this0)) - unsafe.Sizeof(uintptr(0))
	return (*C.GtkAppChooser)((*gobject.Object)(unsafe.Pointer(obj)).C)
}

func (this0 *AppChooserImpl) GetStaticType() gobject.Type {
	return gobject.Type(C.gtk_app_chooser_get_type())
}

func AppChooserGetType() gobject.Type {
	return (*AppChooserImpl)(nil).GetStaticType()
}
func (this0 *AppChooserImpl) GetAppInfo() *gio.AppInfo {
	var this1 *C.GtkAppChooser
	if this0 != nil {
		this1 = this0.ImplementsGtkAppChooser()}
	ret1 := C.gtk_app_chooser_get_app_info(this1)
	var ret2 *gio.AppInfo
	ret2 = (*gio.AppInfo)(gobject.ObjectWrap(unsafe.Pointer(ret1), false))
	return ret2
}
func (this0 *AppChooserImpl) GetContentType() string {
	var this1 *C.GtkAppChooser
	if this0 != nil {
		this1 = this0.ImplementsGtkAppChooser()}
	ret1 := C.gtk_app_chooser_get_content_type(this1)
	var ret2 string
	ret2 = C.GoString(ret1)
	C.g_free(unsafe.Pointer(ret1))
	return ret2
}
func (this0 *AppChooserImpl) Refresh() {
	var this1 *C.GtkAppChooser
	if this0 != nil {
		this1 = this0.ImplementsGtkAppChooser()}
	C.gtk_app_chooser_refresh(this1)
}
type AppChooserButtonLike interface {
	ComboBoxLike
	InheritedFromGtkAppChooserButton() *C.GtkAppChooserButton
}

type AppChooserButton struct {
	ComboBox
	atk.ImplementorIfaceImpl
	AppChooserImpl
	BuildableImpl
	CellEditableImpl
	CellLayoutImpl
}

func ToAppChooserButton(objlike gobject.ObjectLike) *AppChooserButton {
	c := objlike.InheritedFromGObject()
	if c == nil {
		return nil
	}
	t := (*AppChooserButton)(nil).GetStaticType()
	obj := gobject.ObjectGrabIfType(unsafe.Pointer(c), t)
	if obj != nil {
		return (*AppChooserButton)(obj)
	}
	panic("cannot cast to AppChooserButton")
}

func (this0 *AppChooserButton) InheritedFromGtkAppChooserButton() *C.GtkAppChooserButton {
	if this0 == nil {
		return nil
	}
	return (*C.GtkAppChooserButton)(this0.C)
}

func (this0 *AppChooserButton) GetStaticType() gobject.Type {
	return gobject.Type(C.gtk_app_chooser_button_get_type())
}

func AppChooserButtonGetType() gobject.Type {
	return (*AppChooserButton)(nil).GetStaticType()
}
func NewAppChooserButton(content_type0 string) *AppChooserButton {
	var content_type1 *C.char
	content_type1 = _GoStringToGString(content_type0)
	defer C.free(unsafe.Pointer(content_type1))
	ret1 := C.gtk_app_chooser_button_new(content_type1)
	var ret2 *AppChooserButton
	ret2 = (*AppChooserButton)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
func (this0 *AppChooserButton) AppendCustomItem(name0 string, label0 string, icon0 gio.IconLike) {
	var this1 *C.GtkAppChooserButton
	var name1 *C.char
	var label1 *C.char
	var icon1 *C.GIcon
	if this0 != nil {
		this1 = this0.InheritedFromGtkAppChooserButton()
	}
	name1 = _GoStringToGString(name0)
	defer C.free(unsafe.Pointer(name1))
	label1 = _GoStringToGString(label0)
	defer C.free(unsafe.Pointer(label1))
	if icon0 != nil {
		icon1 = icon0.ImplementsGIcon()}
	C.gtk_app_chooser_button_append_custom_item(this1, name1, label1, icon1)
}
func (this0 *AppChooserButton) AppendSeparator() {
	var this1 *C.GtkAppChooserButton
	if this0 != nil {
		this1 = this0.InheritedFromGtkAppChooserButton()
	}
	C.gtk_app_chooser_button_append_separator(this1)
}
func (this0 *AppChooserButton) GetHeading() string {
	var this1 *C.GtkAppChooserButton
	if this0 != nil {
		this1 = this0.InheritedFromGtkAppChooserButton()
	}
	ret1 := C.gtk_app_chooser_button_get_heading(this1)
	var ret2 string
	ret2 = C.GoString(ret1)
	return ret2
}
func (this0 *AppChooserButton) GetShowDefaultItem() bool {
	var this1 *C.GtkAppChooserButton
	if this0 != nil {
		this1 = this0.InheritedFromGtkAppChooserButton()
	}
	ret1 := C.gtk_app_chooser_button_get_show_default_item(this1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *AppChooserButton) GetShowDialogItem() bool {
	var this1 *C.GtkAppChooserButton
	if this0 != nil {
		this1 = this0.InheritedFromGtkAppChooserButton()
	}
	ret1 := C.gtk_app_chooser_button_get_show_dialog_item(this1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *AppChooserButton) SetActiveCustomItem(name0 string) {
	var this1 *C.GtkAppChooserButton
	var name1 *C.char
	if this0 != nil {
		this1 = this0.InheritedFromGtkAppChooserButton()
	}
	name1 = _GoStringToGString(name0)
	defer C.free(unsafe.Pointer(name1))
	C.gtk_app_chooser_button_set_active_custom_item(this1, name1)
}
func (this0 *AppChooserButton) SetHeading(heading0 string) {
	var this1 *C.GtkAppChooserButton
	var heading1 *C.char
	if this0 != nil {
		this1 = this0.InheritedFromGtkAppChooserButton()
	}
	heading1 = _GoStringToGString(heading0)
	defer C.free(unsafe.Pointer(heading1))
	C.gtk_app_chooser_button_set_heading(this1, heading1)
}
func (this0 *AppChooserButton) SetShowDefaultItem(setting0 bool) {
	var this1 *C.GtkAppChooserButton
	var setting1 C.int
	if this0 != nil {
		this1 = this0.InheritedFromGtkAppChooserButton()
	}
	setting1 = _GoBoolToCBool(setting0)
	C.gtk_app_chooser_button_set_show_default_item(this1, setting1)
}
func (this0 *AppChooserButton) SetShowDialogItem(setting0 bool) {
	var this1 *C.GtkAppChooserButton
	var setting1 C.int
	if this0 != nil {
		this1 = this0.InheritedFromGtkAppChooserButton()
	}
	setting1 = _GoBoolToCBool(setting0)
	C.gtk_app_chooser_button_set_show_dialog_item(this1, setting1)
}
type AppChooserDialogLike interface {
	DialogLike
	InheritedFromGtkAppChooserDialog() *C.GtkAppChooserDialog
}

type AppChooserDialog struct {
	Dialog
	atk.ImplementorIfaceImpl
	AppChooserImpl
	BuildableImpl
}

func ToAppChooserDialog(objlike gobject.ObjectLike) *AppChooserDialog {
	c := objlike.InheritedFromGObject()
	if c == nil {
		return nil
	}
	t := (*AppChooserDialog)(nil).GetStaticType()
	obj := gobject.ObjectGrabIfType(unsafe.Pointer(c), t)
	if obj != nil {
		return (*AppChooserDialog)(obj)
	}
	panic("cannot cast to AppChooserDialog")
}

func (this0 *AppChooserDialog) InheritedFromGtkAppChooserDialog() *C.GtkAppChooserDialog {
	if this0 == nil {
		return nil
	}
	return (*C.GtkAppChooserDialog)(this0.C)
}

func (this0 *AppChooserDialog) GetStaticType() gobject.Type {
	return gobject.Type(C.gtk_app_chooser_dialog_get_type())
}

func AppChooserDialogGetType() gobject.Type {
	return (*AppChooserDialog)(nil).GetStaticType()
}
func NewAppChooserDialog(parent0 WindowLike, flags0 DialogFlags, file0 gio.FileLike) *AppChooserDialog {
	var parent1 *C.GtkWindow
	var flags1 C.GtkDialogFlags
	var file1 *C.GFile
	if parent0 != nil {
		parent1 = parent0.InheritedFromGtkWindow()
	}
	flags1 = C.GtkDialogFlags(flags0)
	if file0 != nil {
		file1 = file0.ImplementsGFile()}
	ret1 := C.gtk_app_chooser_dialog_new(parent1, flags1, file1)
	var ret2 *AppChooserDialog
	ret2 = (*AppChooserDialog)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
func NewAppChooserDialogForContentType(parent0 WindowLike, flags0 DialogFlags, content_type0 string) *AppChooserDialog {
	var parent1 *C.GtkWindow
	var flags1 C.GtkDialogFlags
	var content_type1 *C.char
	if parent0 != nil {
		parent1 = parent0.InheritedFromGtkWindow()
	}
	flags1 = C.GtkDialogFlags(flags0)
	content_type1 = _GoStringToGString(content_type0)
	defer C.free(unsafe.Pointer(content_type1))
	ret1 := C.gtk_app_chooser_dialog_new_for_content_type(parent1, flags1, content_type1)
	var ret2 *AppChooserDialog
	ret2 = (*AppChooserDialog)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
func (this0 *AppChooserDialog) GetHeading() string {
	var this1 *C.GtkAppChooserDialog
	if this0 != nil {
		this1 = this0.InheritedFromGtkAppChooserDialog()
	}
	ret1 := C.gtk_app_chooser_dialog_get_heading(this1)
	var ret2 string
	ret2 = C.GoString(ret1)
	return ret2
}
func (this0 *AppChooserDialog) GetWidget() *Widget {
	var this1 *C.GtkAppChooserDialog
	if this0 != nil {
		this1 = this0.InheritedFromGtkAppChooserDialog()
	}
	ret1 := C.gtk_app_chooser_dialog_get_widget(this1)
	var ret2 *Widget
	ret2 = (*Widget)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
func (this0 *AppChooserDialog) SetHeading(heading0 string) {
	var this1 *C.GtkAppChooserDialog
	var heading1 *C.char
	if this0 != nil {
		this1 = this0.InheritedFromGtkAppChooserDialog()
	}
	heading1 = _GoStringToGString(heading0)
	defer C.free(unsafe.Pointer(heading1))
	C.gtk_app_chooser_dialog_set_heading(this1, heading1)
}
type AppChooserWidgetLike interface {
	BoxLike
	InheritedFromGtkAppChooserWidget() *C.GtkAppChooserWidget
}

type AppChooserWidget struct {
	Box
	atk.ImplementorIfaceImpl
	AppChooserImpl
	BuildableImpl
	OrientableImpl
}

func ToAppChooserWidget(objlike gobject.ObjectLike) *AppChooserWidget {
	c := objlike.InheritedFromGObject()
	if c == nil {
		return nil
	}
	t := (*AppChooserWidget)(nil).GetStaticType()
	obj := gobject.ObjectGrabIfType(unsafe.Pointer(c), t)
	if obj != nil {
		return (*AppChooserWidget)(obj)
	}
	panic("cannot cast to AppChooserWidget")
}

func (this0 *AppChooserWidget) InheritedFromGtkAppChooserWidget() *C.GtkAppChooserWidget {
	if this0 == nil {
		return nil
	}
	return (*C.GtkAppChooserWidget)(this0.C)
}

func (this0 *AppChooserWidget) GetStaticType() gobject.Type {
	return gobject.Type(C.gtk_app_chooser_widget_get_type())
}

func AppChooserWidgetGetType() gobject.Type {
	return (*AppChooserWidget)(nil).GetStaticType()
}
func NewAppChooserWidget(content_type0 string) *AppChooserWidget {
	var content_type1 *C.char
	content_type1 = _GoStringToGString(content_type0)
	defer C.free(unsafe.Pointer(content_type1))
	ret1 := C.gtk_app_chooser_widget_new(content_type1)
	var ret2 *AppChooserWidget
	ret2 = (*AppChooserWidget)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
func (this0 *AppChooserWidget) GetDefaultText() string {
	var this1 *C.GtkAppChooserWidget
	if this0 != nil {
		this1 = this0.InheritedFromGtkAppChooserWidget()
	}
	ret1 := C.gtk_app_chooser_widget_get_default_text(this1)
	var ret2 string
	ret2 = C.GoString(ret1)
	return ret2
}
func (this0 *AppChooserWidget) GetShowAll() bool {
	var this1 *C.GtkAppChooserWidget
	if this0 != nil {
		this1 = this0.InheritedFromGtkAppChooserWidget()
	}
	ret1 := C.gtk_app_chooser_widget_get_show_all(this1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *AppChooserWidget) GetShowDefault() bool {
	var this1 *C.GtkAppChooserWidget
	if this0 != nil {
		this1 = this0.InheritedFromGtkAppChooserWidget()
	}
	ret1 := C.gtk_app_chooser_widget_get_show_default(this1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *AppChooserWidget) GetShowFallback() bool {
	var this1 *C.GtkAppChooserWidget
	if this0 != nil {
		this1 = this0.InheritedFromGtkAppChooserWidget()
	}
	ret1 := C.gtk_app_chooser_widget_get_show_fallback(this1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *AppChooserWidget) GetShowOther() bool {
	var this1 *C.GtkAppChooserWidget
	if this0 != nil {
		this1 = this0.InheritedFromGtkAppChooserWidget()
	}
	ret1 := C.gtk_app_chooser_widget_get_show_other(this1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *AppChooserWidget) GetShowRecommended() bool {
	var this1 *C.GtkAppChooserWidget
	if this0 != nil {
		this1 = this0.InheritedFromGtkAppChooserWidget()
	}
	ret1 := C.gtk_app_chooser_widget_get_show_recommended(this1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *AppChooserWidget) SetDefaultText(text0 string) {
	var this1 *C.GtkAppChooserWidget
	var text1 *C.char
	if this0 != nil {
		this1 = this0.InheritedFromGtkAppChooserWidget()
	}
	text1 = _GoStringToGString(text0)
	defer C.free(unsafe.Pointer(text1))
	C.gtk_app_chooser_widget_set_default_text(this1, text1)
}
func (this0 *AppChooserWidget) SetShowAll(setting0 bool) {
	var this1 *C.GtkAppChooserWidget
	var setting1 C.int
	if this0 != nil {
		this1 = this0.InheritedFromGtkAppChooserWidget()
	}
	setting1 = _GoBoolToCBool(setting0)
	C.gtk_app_chooser_widget_set_show_all(this1, setting1)
}
func (this0 *AppChooserWidget) SetShowDefault(setting0 bool) {
	var this1 *C.GtkAppChooserWidget
	var setting1 C.int
	if this0 != nil {
		this1 = this0.InheritedFromGtkAppChooserWidget()
	}
	setting1 = _GoBoolToCBool(setting0)
	C.gtk_app_chooser_widget_set_show_default(this1, setting1)
}
func (this0 *AppChooserWidget) SetShowFallback(setting0 bool) {
	var this1 *C.GtkAppChooserWidget
	var setting1 C.int
	if this0 != nil {
		this1 = this0.InheritedFromGtkAppChooserWidget()
	}
	setting1 = _GoBoolToCBool(setting0)
	C.gtk_app_chooser_widget_set_show_fallback(this1, setting1)
}
func (this0 *AppChooserWidget) SetShowOther(setting0 bool) {
	var this1 *C.GtkAppChooserWidget
	var setting1 C.int
	if this0 != nil {
		this1 = this0.InheritedFromGtkAppChooserWidget()
	}
	setting1 = _GoBoolToCBool(setting0)
	C.gtk_app_chooser_widget_set_show_other(this1, setting1)
}
func (this0 *AppChooserWidget) SetShowRecommended(setting0 bool) {
	var this1 *C.GtkAppChooserWidget
	var setting1 C.int
	if this0 != nil {
		this1 = this0.InheritedFromGtkAppChooserWidget()
	}
	setting1 = _GoBoolToCBool(setting0)
	C.gtk_app_chooser_widget_set_show_recommended(this1, setting1)
}
type ApplicationLike interface {
	gio.ApplicationLike
	InheritedFromGtkApplication() *C.GtkApplication
}

type Application struct {
	gio.Application
	gio.ActionGroupImpl
}

func ToApplication(objlike gobject.ObjectLike) *Application {
	c := objlike.InheritedFromGObject()
	if c == nil {
		return nil
	}
	t := (*Application)(nil).GetStaticType()
	obj := gobject.ObjectGrabIfType(unsafe.Pointer(c), t)
	if obj != nil {
		return (*Application)(obj)
	}
	panic("cannot cast to Application")
}

func (this0 *Application) InheritedFromGtkApplication() *C.GtkApplication {
	if this0 == nil {
		return nil
	}
	return (*C.GtkApplication)(this0.C)
}

func (this0 *Application) GetStaticType() gobject.Type {
	return gobject.Type(C.gtk_application_get_type())
}

func ApplicationGetType() gobject.Type {
	return (*Application)(nil).GetStaticType()
}
func NewApplication(application_id0 string, flags0 gio.ApplicationFlags) *Application {
	var application_id1 *C.char
	var flags1 C.GApplicationFlags
	application_id1 = _GoStringToGString(application_id0)
	defer C.free(unsafe.Pointer(application_id1))
	flags1 = C.GApplicationFlags(flags0)
	ret1 := C.gtk_application_new(application_id1, flags1)
	var ret2 *Application
	ret2 = (*Application)(gobject.ObjectWrap(unsafe.Pointer(ret1), false))
	return ret2
}
func (this0 *Application) AddWindow(window0 WindowLike) {
	var this1 *C.GtkApplication
	var window1 *C.GtkWindow
	if this0 != nil {
		this1 = this0.InheritedFromGtkApplication()
	}
	if window0 != nil {
		window1 = window0.InheritedFromGtkWindow()
	}
	C.gtk_application_add_window(this1, window1)
}
func (this0 *Application) GetWindows() []*Window {
	var this1 *C.GtkApplication
	if this0 != nil {
		this1 = this0.InheritedFromGtkApplication()
	}
	ret1 := C.gtk_application_get_windows(this1)
	var ret2 []*Window
	for iter := (*_GList)(unsafe.Pointer(ret1)); iter != nil; iter = iter.next {
		var elt *Window
		elt = (*Window)(gobject.ObjectWrap(unsafe.Pointer((*C.GtkWindow)(iter.data)), true))
		ret2 = append(ret2, elt)
	}
	return ret2
}
func (this0 *Application) RemoveWindow(window0 WindowLike) {
	var this1 *C.GtkApplication
	var window1 *C.GtkWindow
	if this0 != nil {
		this1 = this0.InheritedFromGtkApplication()
	}
	if window0 != nil {
		window1 = window0.InheritedFromGtkWindow()
	}
	C.gtk_application_remove_window(this1, window1)
}
type ArrowLike interface {
	MiscLike
	InheritedFromGtkArrow() *C.GtkArrow
}

type Arrow struct {
	Misc
	atk.ImplementorIfaceImpl
	BuildableImpl
}

func ToArrow(objlike gobject.ObjectLike) *Arrow {
	c := objlike.InheritedFromGObject()
	if c == nil {
		return nil
	}
	t := (*Arrow)(nil).GetStaticType()
	obj := gobject.ObjectGrabIfType(unsafe.Pointer(c), t)
	if obj != nil {
		return (*Arrow)(obj)
	}
	panic("cannot cast to Arrow")
}

func (this0 *Arrow) InheritedFromGtkArrow() *C.GtkArrow {
	if this0 == nil {
		return nil
	}
	return (*C.GtkArrow)(this0.C)
}

func (this0 *Arrow) GetStaticType() gobject.Type {
	return gobject.Type(C.gtk_arrow_get_type())
}

func ArrowGetType() gobject.Type {
	return (*Arrow)(nil).GetStaticType()
}
func NewArrow(arrow_type0 ArrowType, shadow_type0 ShadowType) *Arrow {
	var arrow_type1 C.GtkArrowType
	var shadow_type1 C.GtkShadowType
	arrow_type1 = C.GtkArrowType(arrow_type0)
	shadow_type1 = C.GtkShadowType(shadow_type0)
	ret1 := C.gtk_arrow_new(arrow_type1, shadow_type1)
	var ret2 *Arrow
	ret2 = (*Arrow)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
func (this0 *Arrow) Set(arrow_type0 ArrowType, shadow_type0 ShadowType) {
	var this1 *C.GtkArrow
	var arrow_type1 C.GtkArrowType
	var shadow_type1 C.GtkShadowType
	if this0 != nil {
		this1 = this0.InheritedFromGtkArrow()
	}
	arrow_type1 = C.GtkArrowType(arrow_type0)
	shadow_type1 = C.GtkShadowType(shadow_type0)
	C.gtk_arrow_set(this1, arrow_type1, shadow_type1)
}
type ArrowPlacement C.uint32_t
const (
	ArrowPlacementBoth ArrowPlacement = 0
	ArrowPlacementStart ArrowPlacement = 1
	ArrowPlacementEnd ArrowPlacement = 2
)
type ArrowType C.uint32_t
const (
	ArrowTypeUp ArrowType = 0
	ArrowTypeDown ArrowType = 1
	ArrowTypeLeft ArrowType = 2
	ArrowTypeRight ArrowType = 3
	ArrowTypeNone ArrowType = 4
)
type AspectFrameLike interface {
	FrameLike
	InheritedFromGtkAspectFrame() *C.GtkAspectFrame
}

type AspectFrame struct {
	Frame
	atk.ImplementorIfaceImpl
	BuildableImpl
}

func ToAspectFrame(objlike gobject.ObjectLike) *AspectFrame {
	c := objlike.InheritedFromGObject()
	if c == nil {
		return nil
	}
	t := (*AspectFrame)(nil).GetStaticType()
	obj := gobject.ObjectGrabIfType(unsafe.Pointer(c), t)
	if obj != nil {
		return (*AspectFrame)(obj)
	}
	panic("cannot cast to AspectFrame")
}

func (this0 *AspectFrame) InheritedFromGtkAspectFrame() *C.GtkAspectFrame {
	if this0 == nil {
		return nil
	}
	return (*C.GtkAspectFrame)(this0.C)
}

func (this0 *AspectFrame) GetStaticType() gobject.Type {
	return gobject.Type(C.gtk_aspect_frame_get_type())
}

func AspectFrameGetType() gobject.Type {
	return (*AspectFrame)(nil).GetStaticType()
}
func NewAspectFrame(label0 string, xalign0 float64, yalign0 float64, ratio0 float64, obey_child0 bool) *AspectFrame {
	var label1 *C.char
	var xalign1 C.float
	var yalign1 C.float
	var ratio1 C.float
	var obey_child1 C.int
	label1 = _GoStringToGString(label0)
	defer C.free(unsafe.Pointer(label1))
	xalign1 = C.float(xalign0)
	yalign1 = C.float(yalign0)
	ratio1 = C.float(ratio0)
	obey_child1 = _GoBoolToCBool(obey_child0)
	ret1 := C.gtk_aspect_frame_new(label1, xalign1, yalign1, ratio1, obey_child1)
	var ret2 *AspectFrame
	ret2 = (*AspectFrame)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
func (this0 *AspectFrame) Set(xalign0 float64, yalign0 float64, ratio0 float64, obey_child0 bool) {
	var this1 *C.GtkAspectFrame
	var xalign1 C.float
	var yalign1 C.float
	var ratio1 C.float
	var obey_child1 C.int
	if this0 != nil {
		this1 = this0.InheritedFromGtkAspectFrame()
	}
	xalign1 = C.float(xalign0)
	yalign1 = C.float(yalign0)
	ratio1 = C.float(ratio0)
	obey_child1 = _GoBoolToCBool(obey_child0)
	C.gtk_aspect_frame_set(this1, xalign1, yalign1, ratio1, obey_child1)
}
type AssistantLike interface {
	WindowLike
	InheritedFromGtkAssistant() *C.GtkAssistant
}

type Assistant struct {
	Window
	atk.ImplementorIfaceImpl
	BuildableImpl
}

func ToAssistant(objlike gobject.ObjectLike) *Assistant {
	c := objlike.InheritedFromGObject()
	if c == nil {
		return nil
	}
	t := (*Assistant)(nil).GetStaticType()
	obj := gobject.ObjectGrabIfType(unsafe.Pointer(c), t)
	if obj != nil {
		return (*Assistant)(obj)
	}
	panic("cannot cast to Assistant")
}

func (this0 *Assistant) InheritedFromGtkAssistant() *C.GtkAssistant {
	if this0 == nil {
		return nil
	}
	return (*C.GtkAssistant)(this0.C)
}

func (this0 *Assistant) GetStaticType() gobject.Type {
	return gobject.Type(C.gtk_assistant_get_type())
}

func AssistantGetType() gobject.Type {
	return (*Assistant)(nil).GetStaticType()
}
func NewAssistant() *Assistant {
	ret1 := C.gtk_assistant_new()
	var ret2 *Assistant
	ret2 = (*Assistant)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
func (this0 *Assistant) AddActionWidget(child0 WidgetLike) {
	var this1 *C.GtkAssistant
	var child1 *C.GtkWidget
	if this0 != nil {
		this1 = this0.InheritedFromGtkAssistant()
	}
	if child0 != nil {
		child1 = child0.InheritedFromGtkWidget()
	}
	C.gtk_assistant_add_action_widget(this1, child1)
}
func (this0 *Assistant) AppendPage(page0 WidgetLike) int {
	var this1 *C.GtkAssistant
	var page1 *C.GtkWidget
	if this0 != nil {
		this1 = this0.InheritedFromGtkAssistant()
	}
	if page0 != nil {
		page1 = page0.InheritedFromGtkWidget()
	}
	ret1 := C.gtk_assistant_append_page(this1, page1)
	var ret2 int
	ret2 = int(ret1)
	return ret2
}
func (this0 *Assistant) Commit() {
	var this1 *C.GtkAssistant
	if this0 != nil {
		this1 = this0.InheritedFromGtkAssistant()
	}
	C.gtk_assistant_commit(this1)
}
func (this0 *Assistant) GetCurrentPage() int {
	var this1 *C.GtkAssistant
	if this0 != nil {
		this1 = this0.InheritedFromGtkAssistant()
	}
	ret1 := C.gtk_assistant_get_current_page(this1)
	var ret2 int
	ret2 = int(ret1)
	return ret2
}
func (this0 *Assistant) GetNPages() int {
	var this1 *C.GtkAssistant
	if this0 != nil {
		this1 = this0.InheritedFromGtkAssistant()
	}
	ret1 := C.gtk_assistant_get_n_pages(this1)
	var ret2 int
	ret2 = int(ret1)
	return ret2
}
func (this0 *Assistant) GetNthPage(page_num0 int) *Widget {
	var this1 *C.GtkAssistant
	var page_num1 C.int32_t
	if this0 != nil {
		this1 = this0.InheritedFromGtkAssistant()
	}
	page_num1 = C.int32_t(page_num0)
	ret1 := C.gtk_assistant_get_nth_page(this1, page_num1)
	var ret2 *Widget
	ret2 = (*Widget)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
func (this0 *Assistant) GetPageComplete(page0 WidgetLike) bool {
	var this1 *C.GtkAssistant
	var page1 *C.GtkWidget
	if this0 != nil {
		this1 = this0.InheritedFromGtkAssistant()
	}
	if page0 != nil {
		page1 = page0.InheritedFromGtkWidget()
	}
	ret1 := C.gtk_assistant_get_page_complete(this1, page1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *Assistant) GetPageHeaderImage(page0 WidgetLike) *gdkpixbuf.Pixbuf {
	var this1 *C.GtkAssistant
	var page1 *C.GtkWidget
	if this0 != nil {
		this1 = this0.InheritedFromGtkAssistant()
	}
	if page0 != nil {
		page1 = page0.InheritedFromGtkWidget()
	}
	ret1 := C.gtk_assistant_get_page_header_image(this1, page1)
	var ret2 *gdkpixbuf.Pixbuf
	ret2 = (*gdkpixbuf.Pixbuf)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
func (this0 *Assistant) GetPageSideImage(page0 WidgetLike) *gdkpixbuf.Pixbuf {
	var this1 *C.GtkAssistant
	var page1 *C.GtkWidget
	if this0 != nil {
		this1 = this0.InheritedFromGtkAssistant()
	}
	if page0 != nil {
		page1 = page0.InheritedFromGtkWidget()
	}
	ret1 := C.gtk_assistant_get_page_side_image(this1, page1)
	var ret2 *gdkpixbuf.Pixbuf
	ret2 = (*gdkpixbuf.Pixbuf)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
func (this0 *Assistant) GetPageTitle(page0 WidgetLike) string {
	var this1 *C.GtkAssistant
	var page1 *C.GtkWidget
	if this0 != nil {
		this1 = this0.InheritedFromGtkAssistant()
	}
	if page0 != nil {
		page1 = page0.InheritedFromGtkWidget()
	}
	ret1 := C.gtk_assistant_get_page_title(this1, page1)
	var ret2 string
	ret2 = C.GoString(ret1)
	return ret2
}
func (this0 *Assistant) GetPageType(page0 WidgetLike) AssistantPageType {
	var this1 *C.GtkAssistant
	var page1 *C.GtkWidget
	if this0 != nil {
		this1 = this0.InheritedFromGtkAssistant()
	}
	if page0 != nil {
		page1 = page0.InheritedFromGtkWidget()
	}
	ret1 := C.gtk_assistant_get_page_type(this1, page1)
	var ret2 AssistantPageType
	ret2 = AssistantPageType(ret1)
	return ret2
}
func (this0 *Assistant) InsertPage(page0 WidgetLike, position0 int) int {
	var this1 *C.GtkAssistant
	var page1 *C.GtkWidget
	var position1 C.int32_t
	if this0 != nil {
		this1 = this0.InheritedFromGtkAssistant()
	}
	if page0 != nil {
		page1 = page0.InheritedFromGtkWidget()
	}
	position1 = C.int32_t(position0)
	ret1 := C.gtk_assistant_insert_page(this1, page1, position1)
	var ret2 int
	ret2 = int(ret1)
	return ret2
}
func (this0 *Assistant) NextPage() {
	var this1 *C.GtkAssistant
	if this0 != nil {
		this1 = this0.InheritedFromGtkAssistant()
	}
	C.gtk_assistant_next_page(this1)
}
func (this0 *Assistant) PrependPage(page0 WidgetLike) int {
	var this1 *C.GtkAssistant
	var page1 *C.GtkWidget
	if this0 != nil {
		this1 = this0.InheritedFromGtkAssistant()
	}
	if page0 != nil {
		page1 = page0.InheritedFromGtkWidget()
	}
	ret1 := C.gtk_assistant_prepend_page(this1, page1)
	var ret2 int
	ret2 = int(ret1)
	return ret2
}
func (this0 *Assistant) PreviousPage() {
	var this1 *C.GtkAssistant
	if this0 != nil {
		this1 = this0.InheritedFromGtkAssistant()
	}
	C.gtk_assistant_previous_page(this1)
}
func (this0 *Assistant) RemoveActionWidget(child0 WidgetLike) {
	var this1 *C.GtkAssistant
	var child1 *C.GtkWidget
	if this0 != nil {
		this1 = this0.InheritedFromGtkAssistant()
	}
	if child0 != nil {
		child1 = child0.InheritedFromGtkWidget()
	}
	C.gtk_assistant_remove_action_widget(this1, child1)
}
func (this0 *Assistant) RemovePage(page_num0 int) {
	var this1 *C.GtkAssistant
	var page_num1 C.int32_t
	if this0 != nil {
		this1 = this0.InheritedFromGtkAssistant()
	}
	page_num1 = C.int32_t(page_num0)
	C.gtk_assistant_remove_page(this1, page_num1)
}
func (this0 *Assistant) SetCurrentPage(page_num0 int) {
	var this1 *C.GtkAssistant
	var page_num1 C.int32_t
	if this0 != nil {
		this1 = this0.InheritedFromGtkAssistant()
	}
	page_num1 = C.int32_t(page_num0)
	C.gtk_assistant_set_current_page(this1, page_num1)
}
func (this0 *Assistant) SetForwardPageFunc(page_func0 AssistantPageFunc) {
	var this1 *C.GtkAssistant
	var page_func1 unsafe.Pointer
	if this0 != nil {
		this1 = this0.InheritedFromGtkAssistant()
	}
	if page_func0 != nil {
		page_func1 = unsafe.Pointer(&page_func0)}
	gobject.Holder.Grab(page_func1)
	C._gtk_assistant_set_forward_page_func(this1, page_func1)
}
func (this0 *Assistant) SetPageComplete(page0 WidgetLike, complete0 bool) {
	var this1 *C.GtkAssistant
	var page1 *C.GtkWidget
	var complete1 C.int
	if this0 != nil {
		this1 = this0.InheritedFromGtkAssistant()
	}
	if page0 != nil {
		page1 = page0.InheritedFromGtkWidget()
	}
	complete1 = _GoBoolToCBool(complete0)
	C.gtk_assistant_set_page_complete(this1, page1, complete1)
}
func (this0 *Assistant) SetPageHeaderImage(page0 WidgetLike, pixbuf0 gdkpixbuf.PixbufLike) {
	var this1 *C.GtkAssistant
	var page1 *C.GtkWidget
	var pixbuf1 *C.GdkPixbuf
	if this0 != nil {
		this1 = this0.InheritedFromGtkAssistant()
	}
	if page0 != nil {
		page1 = page0.InheritedFromGtkWidget()
	}
	if pixbuf0 != nil {
		pixbuf1 = pixbuf0.InheritedFromGdkPixbuf()
	}
	C.gtk_assistant_set_page_header_image(this1, page1, pixbuf1)
}
func (this0 *Assistant) SetPageSideImage(page0 WidgetLike, pixbuf0 gdkpixbuf.PixbufLike) {
	var this1 *C.GtkAssistant
	var page1 *C.GtkWidget
	var pixbuf1 *C.GdkPixbuf
	if this0 != nil {
		this1 = this0.InheritedFromGtkAssistant()
	}
	if page0 != nil {
		page1 = page0.InheritedFromGtkWidget()
	}
	if pixbuf0 != nil {
		pixbuf1 = pixbuf0.InheritedFromGdkPixbuf()
	}
	C.gtk_assistant_set_page_side_image(this1, page1, pixbuf1)
}
func (this0 *Assistant) SetPageTitle(page0 WidgetLike, title0 string) {
	var this1 *C.GtkAssistant
	var page1 *C.GtkWidget
	var title1 *C.char
	if this0 != nil {
		this1 = this0.InheritedFromGtkAssistant()
	}
	if page0 != nil {
		page1 = page0.InheritedFromGtkWidget()
	}
	title1 = _GoStringToGString(title0)
	defer C.free(unsafe.Pointer(title1))
	C.gtk_assistant_set_page_title(this1, page1, title1)
}
func (this0 *Assistant) SetPageType(page0 WidgetLike, type0 AssistantPageType) {
	var this1 *C.GtkAssistant
	var page1 *C.GtkWidget
	var type1 C.GtkAssistantPageType
	if this0 != nil {
		this1 = this0.InheritedFromGtkAssistant()
	}
	if page0 != nil {
		page1 = page0.InheritedFromGtkWidget()
	}
	type1 = C.GtkAssistantPageType(type0)
	C.gtk_assistant_set_page_type(this1, page1, type1)
}
func (this0 *Assistant) UpdateButtonsState() {
	var this1 *C.GtkAssistant
	if this0 != nil {
		this1 = this0.InheritedFromGtkAssistant()
	}
	C.gtk_assistant_update_buttons_state(this1)
}
type AssistantPageFunc func(current_page int) int
//export _GtkAssistantPageFunc_c_wrapper
func _GtkAssistantPageFunc_c_wrapper(current_page0 int32, data0 unsafe.Pointer) int32 {
	var current_page1 int
	var data1 AssistantPageFunc
	current_page1 = int((C.int32_t)(current_page0))
	data1 = *(*AssistantPageFunc)(data0)
	ret1 := data1(current_page1)
	var ret2 C.int32_t
	ret2 = C.int32_t(ret1)
	return (int32)(ret2)
}
//export _GtkAssistantPageFunc_c_wrapper_once
func _GtkAssistantPageFunc_c_wrapper_once(current_page0 int32, data0 unsafe.Pointer) int32 {
	ret := _GtkAssistantPageFunc_c_wrapper(current_page0, data0)
	gobject.Holder.Release(data0)
	return ret
}
type AssistantPageType C.uint32_t
const (
	AssistantPageTypeContent AssistantPageType = 0
	AssistantPageTypeIntro AssistantPageType = 1
	AssistantPageTypeConfirm AssistantPageType = 2
	AssistantPageTypeSummary AssistantPageType = 3
	AssistantPageTypeProgress AssistantPageType = 4
	AssistantPageTypeCustom AssistantPageType = 5
)
type AttachOptions C.uint32_t
const (
	AttachOptionsExpand AttachOptions = 1
	AttachOptionsShrink AttachOptions = 2
	AttachOptionsFill AttachOptions = 4
)
const BinaryAge = 203
type BinLike interface {
	ContainerLike
	InheritedFromGtkBin() *C.GtkBin
}

type Bin struct {
	Container
	atk.ImplementorIfaceImpl
	BuildableImpl
}

func ToBin(objlike gobject.ObjectLike) *Bin {
	c := objlike.InheritedFromGObject()
	if c == nil {
		return nil
	}
	t := (*Bin)(nil).GetStaticType()
	obj := gobject.ObjectGrabIfType(unsafe.Pointer(c), t)
	if obj != nil {
		return (*Bin)(obj)
	}
	panic("cannot cast to Bin")
}

func (this0 *Bin) InheritedFromGtkBin() *C.GtkBin {
	if this0 == nil {
		return nil
	}
	return (*C.GtkBin)(this0.C)
}

func (this0 *Bin) GetStaticType() gobject.Type {
	return gobject.Type(C.gtk_bin_get_type())
}

func BinGetType() gobject.Type {
	return (*Bin)(nil).GetStaticType()
}
func (this0 *Bin) GetChild() *Widget {
	var this1 *C.GtkBin
	if this0 != nil {
		this1 = this0.InheritedFromGtkBin()
	}
	ret1 := C.gtk_bin_get_child(this1)
	var ret2 *Widget
	ret2 = (*Widget)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
type BindingArg struct {
	ArgType gobject.Type
}
type BindingEntry struct {
	Keyval uint32
	Modifiers gdk.ModifierType
	BindingSet *BindingSet
	Destroyed uint32
	InEmission uint32
	MarksUnbound uint32
	_ [4]byte
	SetNext *BindingEntry
	HashNext *BindingEntry
	Signals *BindingSignal
}
func BindingEntryAddSignalFromString(binding_set0 *BindingSet, signal_desc0 string) glib.TokenType {
	var binding_set1 *C.GtkBindingSet
	var signal_desc1 *C.char
	binding_set1 = (*C.GtkBindingSet)(unsafe.Pointer(binding_set0))
	signal_desc1 = _GoStringToGString(signal_desc0)
	defer C.free(unsafe.Pointer(signal_desc1))
	ret1 := C.gtk_binding_entry_add_signal_from_string(binding_set1, signal_desc1)
	var ret2 glib.TokenType
	ret2 = glib.TokenType(ret1)
	return ret2
}
func BindingEntryAddSignall(binding_set0 *BindingSet, keyval0 int, modifiers0 gdk.ModifierType, signal_name0 string, binding_args0 []BindingArg) {
	var binding_set1 *C.GtkBindingSet
	var keyval1 C.uint32_t
	var modifiers1 C.GdkModifierType
	var signal_name1 *C.char
	var binding_args1 *C.GSList
	binding_set1 = (*C.GtkBindingSet)(unsafe.Pointer(binding_set0))
	keyval1 = C.uint32_t(keyval0)
	modifiers1 = C.GdkModifierType(modifiers0)
	signal_name1 = _GoStringToGString(signal_name0)
	defer C.free(unsafe.Pointer(signal_name1))
	C.gtk_binding_entry_add_signall(binding_set1, keyval1, modifiers1, signal_name1, binding_args1)
}
func BindingEntryRemove(binding_set0 *BindingSet, keyval0 int, modifiers0 gdk.ModifierType) {
	var binding_set1 *C.GtkBindingSet
	var keyval1 C.uint32_t
	var modifiers1 C.GdkModifierType
	binding_set1 = (*C.GtkBindingSet)(unsafe.Pointer(binding_set0))
	keyval1 = C.uint32_t(keyval0)
	modifiers1 = C.GdkModifierType(modifiers0)
	C.gtk_binding_entry_remove(binding_set1, keyval1, modifiers1)
}
func BindingEntrySkip(binding_set0 *BindingSet, keyval0 int, modifiers0 gdk.ModifierType) {
	var binding_set1 *C.GtkBindingSet
	var keyval1 C.uint32_t
	var modifiers1 C.GdkModifierType
	binding_set1 = (*C.GtkBindingSet)(unsafe.Pointer(binding_set0))
	keyval1 = C.uint32_t(keyval0)
	modifiers1 = C.GdkModifierType(modifiers0)
	C.gtk_binding_entry_skip(binding_set1, keyval1, modifiers1)
}
type BindingSet struct {
	set_name0 *C.char
	Priority int32
	_ [4]byte
	widget_path_pspecs0 *C.GSList
	widget_class_pspecs0 *C.GSList
	class_branch_pspecs0 *C.GSList
	Entries *BindingEntry
	Current *BindingEntry
	Parsed uint32
	_ [4]byte
}
func (this0 *BindingSet) SetName() string {
	var set_name1 string
	set_name1 = C.GoString(this0.set_name0)
	return set_name1
}
func (this0 *BindingSet) WidgetPathPspecs() []unsafe.Pointer {
	var widget_path_pspecs1 []unsafe.Pointer
	for iter := (*_GSList)(unsafe.Pointer(this0.widget_path_pspecs0)); iter != nil; iter = iter.next {
		var elt unsafe.Pointer
		elt = (unsafe.Pointer)(iter.data)
		widget_path_pspecs1 = append(widget_path_pspecs1, elt)
	}
	return widget_path_pspecs1
}
func (this0 *BindingSet) WidgetClassPspecs() []unsafe.Pointer {
	var widget_class_pspecs1 []unsafe.Pointer
	for iter := (*_GSList)(unsafe.Pointer(this0.widget_class_pspecs0)); iter != nil; iter = iter.next {
		var elt unsafe.Pointer
		elt = (unsafe.Pointer)(iter.data)
		widget_class_pspecs1 = append(widget_class_pspecs1, elt)
	}
	return widget_class_pspecs1
}
func (this0 *BindingSet) ClassBranchPspecs() []unsafe.Pointer {
	var class_branch_pspecs1 []unsafe.Pointer
	for iter := (*_GSList)(unsafe.Pointer(this0.class_branch_pspecs0)); iter != nil; iter = iter.next {
		var elt unsafe.Pointer
		elt = (unsafe.Pointer)(iter.data)
		class_branch_pspecs1 = append(class_branch_pspecs1, elt)
	}
	return class_branch_pspecs1
}
func (this0 *BindingSet) Activate(keyval0 int, modifiers0 gdk.ModifierType, object0 gobject.ObjectLike) bool {
	var this1 *C.GtkBindingSet
	var keyval1 C.uint32_t
	var modifiers1 C.GdkModifierType
	var object1 *C.GObject
	this1 = (*C.GtkBindingSet)(unsafe.Pointer(this0))
	keyval1 = C.uint32_t(keyval0)
	modifiers1 = C.GdkModifierType(modifiers0)
	if object0 != nil {
		object1 = object0.InheritedFromGObject()
	}
	ret1 := C.gtk_binding_set_activate(this1, keyval1, modifiers1, object1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *BindingSet) AddPath(path_type0 PathType, path_pattern0 string, priority0 PathPriorityType) {
	var this1 *C.GtkBindingSet
	var path_type1 C.GtkPathType
	var path_pattern1 *C.char
	var priority1 C.GtkPathPriorityType
	this1 = (*C.GtkBindingSet)(unsafe.Pointer(this0))
	path_type1 = C.GtkPathType(path_type0)
	path_pattern1 = _GoStringToGString(path_pattern0)
	defer C.free(unsafe.Pointer(path_pattern1))
	priority1 = C.GtkPathPriorityType(priority0)
	C.gtk_binding_set_add_path(this1, path_type1, path_pattern1, priority1)
}
func BindingSetFind(set_name0 string) *BindingSet {
	var set_name1 *C.char
	set_name1 = _GoStringToGString(set_name0)
	defer C.free(unsafe.Pointer(set_name1))
	ret1 := C.gtk_binding_set_find(set_name1)
	var ret2 *BindingSet
	ret2 = (*BindingSet)(unsafe.Pointer(ret1))
	return ret2
}
type BindingSignal struct {
	Next *BindingSignal
	signal_name0 *C.char
	NArgs uint32
	_ [4]byte
	Args *BindingArg
}
func (this0 *BindingSignal) SignalName() string {
	var signal_name1 string
	signal_name1 = C.GoString(this0.signal_name0)
	return signal_name1
}
type Border struct {
	Left int16
	Right int16
	Top int16
	Bottom int16
}
func NewBorder() *Border {
	ret1 := C.gtk_border_new()
	var ret2 *Border
	ret2 = (*Border)(unsafe.Pointer(ret1))
	return ret2
}
func (this0 *Border) Copy() *Border {
	var this1 *C.GtkBorder
	this1 = (*C.GtkBorder)(unsafe.Pointer(this0))
	ret1 := C.gtk_border_copy(this1)
	var ret2 *Border
	ret2 = (*Border)(unsafe.Pointer(ret1))
	return ret2
}
func (this0 *Border) Free() {
	var this1 *C.GtkBorder
	this1 = (*C.GtkBorder)(unsafe.Pointer(this0))
	C.gtk_border_free(this1)
}
type BorderStyle C.uint32_t
const (
	BorderStyleNone BorderStyle = 0
	BorderStyleSolid BorderStyle = 1
	BorderStyleInset BorderStyle = 2
	BorderStyleOutset BorderStyle = 3
)
type BoxLike interface {
	ContainerLike
	InheritedFromGtkBox() *C.GtkBox
}

type Box struct {
	Container
	atk.ImplementorIfaceImpl
	BuildableImpl
	OrientableImpl
}

func ToBox(objlike gobject.ObjectLike) *Box {
	c := objlike.InheritedFromGObject()
	if c == nil {
		return nil
	}
	t := (*Box)(nil).GetStaticType()
	obj := gobject.ObjectGrabIfType(unsafe.Pointer(c), t)
	if obj != nil {
		return (*Box)(obj)
	}
	panic("cannot cast to Box")
}

func (this0 *Box) InheritedFromGtkBox() *C.GtkBox {
	if this0 == nil {
		return nil
	}
	return (*C.GtkBox)(this0.C)
}

func (this0 *Box) GetStaticType() gobject.Type {
	return gobject.Type(C.gtk_box_get_type())
}

func BoxGetType() gobject.Type {
	return (*Box)(nil).GetStaticType()
}
func NewBox(orientation0 Orientation, spacing0 int) *Box {
	var orientation1 C.GtkOrientation
	var spacing1 C.int32_t
	orientation1 = C.GtkOrientation(orientation0)
	spacing1 = C.int32_t(spacing0)
	ret1 := C.gtk_box_new(orientation1, spacing1)
	var ret2 *Box
	ret2 = (*Box)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
func (this0 *Box) GetHomogeneous() bool {
	var this1 *C.GtkBox
	if this0 != nil {
		this1 = this0.InheritedFromGtkBox()
	}
	ret1 := C.gtk_box_get_homogeneous(this1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *Box) GetSpacing() int {
	var this1 *C.GtkBox
	if this0 != nil {
		this1 = this0.InheritedFromGtkBox()
	}
	ret1 := C.gtk_box_get_spacing(this1)
	var ret2 int
	ret2 = int(ret1)
	return ret2
}
func (this0 *Box) PackEnd(child0 WidgetLike, expand0 bool, fill0 bool, padding0 int) {
	var this1 *C.GtkBox
	var child1 *C.GtkWidget
	var expand1 C.int
	var fill1 C.int
	var padding1 C.uint32_t
	if this0 != nil {
		this1 = this0.InheritedFromGtkBox()
	}
	if child0 != nil {
		child1 = child0.InheritedFromGtkWidget()
	}
	expand1 = _GoBoolToCBool(expand0)
	fill1 = _GoBoolToCBool(fill0)
	padding1 = C.uint32_t(padding0)
	C.gtk_box_pack_end(this1, child1, expand1, fill1, padding1)
}
func (this0 *Box) PackStart(child0 WidgetLike, expand0 bool, fill0 bool, padding0 int) {
	var this1 *C.GtkBox
	var child1 *C.GtkWidget
	var expand1 C.int
	var fill1 C.int
	var padding1 C.uint32_t
	if this0 != nil {
		this1 = this0.InheritedFromGtkBox()
	}
	if child0 != nil {
		child1 = child0.InheritedFromGtkWidget()
	}
	expand1 = _GoBoolToCBool(expand0)
	fill1 = _GoBoolToCBool(fill0)
	padding1 = C.uint32_t(padding0)
	C.gtk_box_pack_start(this1, child1, expand1, fill1, padding1)
}
func (this0 *Box) QueryChildPacking(child0 WidgetLike) (bool, bool, int, PackType) {
	var this1 *C.GtkBox
	var child1 *C.GtkWidget
	var expand1 C.int
	var fill1 C.int
	var padding1 C.uint32_t
	var pack_type1 C.GtkPackType
	if this0 != nil {
		this1 = this0.InheritedFromGtkBox()
	}
	if child0 != nil {
		child1 = child0.InheritedFromGtkWidget()
	}
	C.gtk_box_query_child_packing(this1, child1, &expand1, &fill1, &padding1, &pack_type1)
	var expand2 bool
	var fill2 bool
	var padding2 int
	var pack_type2 PackType
	expand2 = expand1 != 0
	fill2 = fill1 != 0
	padding2 = int(padding1)
	pack_type2 = PackType(pack_type1)
	return expand2, fill2, padding2, pack_type2
}
func (this0 *Box) ReorderChild(child0 WidgetLike, position0 int) {
	var this1 *C.GtkBox
	var child1 *C.GtkWidget
	var position1 C.int32_t
	if this0 != nil {
		this1 = this0.InheritedFromGtkBox()
	}
	if child0 != nil {
		child1 = child0.InheritedFromGtkWidget()
	}
	position1 = C.int32_t(position0)
	C.gtk_box_reorder_child(this1, child1, position1)
}
func (this0 *Box) SetChildPacking(child0 WidgetLike, expand0 bool, fill0 bool, padding0 int, pack_type0 PackType) {
	var this1 *C.GtkBox
	var child1 *C.GtkWidget
	var expand1 C.int
	var fill1 C.int
	var padding1 C.uint32_t
	var pack_type1 C.GtkPackType
	if this0 != nil {
		this1 = this0.InheritedFromGtkBox()
	}
	if child0 != nil {
		child1 = child0.InheritedFromGtkWidget()
	}
	expand1 = _GoBoolToCBool(expand0)
	fill1 = _GoBoolToCBool(fill0)
	padding1 = C.uint32_t(padding0)
	pack_type1 = C.GtkPackType(pack_type0)
	C.gtk_box_set_child_packing(this1, child1, expand1, fill1, padding1, pack_type1)
}
func (this0 *Box) SetHomogeneous(homogeneous0 bool) {
	var this1 *C.GtkBox
	var homogeneous1 C.int
	if this0 != nil {
		this1 = this0.InheritedFromGtkBox()
	}
	homogeneous1 = _GoBoolToCBool(homogeneous0)
	C.gtk_box_set_homogeneous(this1, homogeneous1)
}
func (this0 *Box) SetSpacing(spacing0 int) {
	var this1 *C.GtkBox
	var spacing1 C.int32_t
	if this0 != nil {
		this1 = this0.InheritedFromGtkBox()
	}
	spacing1 = C.int32_t(spacing0)
	C.gtk_box_set_spacing(this1, spacing1)
}
type BuildableLike interface {
	ImplementsGtkBuildable() *C.GtkBuildable
}

type Buildable struct {
	gobject.Object
	BuildableImpl
}

type BuildableImpl struct {}

func ToBuildable(objlike gobject.ObjectLike) *Buildable {
	t := (*BuildableImpl)(nil).GetStaticType()
	c := objlike.InheritedFromGObject()
	obj := gobject.ObjectGrabIfType(unsafe.Pointer(c), t)
	if obj != nil {
		return (*Buildable)(obj)
	}
	panic("cannot cast to Buildable")
}

func (this0 *BuildableImpl) ImplementsGtkBuildable() *C.GtkBuildable {
	obj := uintptr(unsafe.Pointer(this0)) - unsafe.Sizeof(uintptr(0))
	return (*C.GtkBuildable)((*gobject.Object)(unsafe.Pointer(obj)).C)
}

func (this0 *BuildableImpl) GetStaticType() gobject.Type {
	return gobject.Type(C.gtk_buildable_get_type())
}

func BuildableGetType() gobject.Type {
	return (*BuildableImpl)(nil).GetStaticType()
}
func (this0 *BuildableImpl) AddChild(builder0 BuilderLike, child0 gobject.ObjectLike, type0 string) {
	var this1 *C.GtkBuildable
	var builder1 *C.GtkBuilder
	var child1 *C.GObject
	var type1 *C.char
	if this0 != nil {
		this1 = this0.ImplementsGtkBuildable()}
	if builder0 != nil {
		builder1 = builder0.InheritedFromGtkBuilder()
	}
	if child0 != nil {
		child1 = child0.InheritedFromGObject()
	}
	type1 = _GoStringToGString(type0)
	defer C.free(unsafe.Pointer(type1))
	C.gtk_buildable_add_child(this1, builder1, child1, type1)
}
func (this0 *BuildableImpl) ConstructChild(builder0 BuilderLike, name0 string) *gobject.Object {
	var this1 *C.GtkBuildable
	var builder1 *C.GtkBuilder
	var name1 *C.char
	if this0 != nil {
		this1 = this0.ImplementsGtkBuildable()}
	if builder0 != nil {
		builder1 = builder0.InheritedFromGtkBuilder()
	}
	name1 = _GoStringToGString(name0)
	defer C.free(unsafe.Pointer(name1))
	ret1 := C.gtk_buildable_construct_child(this1, builder1, name1)
	var ret2 *gobject.Object
	ret2 = (*gobject.Object)(gobject.ObjectWrap(unsafe.Pointer(ret1), false))
	return ret2
}
func (this0 *BuildableImpl) CustomFinished(builder0 BuilderLike, child0 gobject.ObjectLike, tagname0 string, data0 unsafe.Pointer) {
	var this1 *C.GtkBuildable
	var builder1 *C.GtkBuilder
	var child1 *C.GObject
	var tagname1 *C.char
	var data1 unsafe.Pointer
	if this0 != nil {
		this1 = this0.ImplementsGtkBuildable()}
	if builder0 != nil {
		builder1 = builder0.InheritedFromGtkBuilder()
	}
	if child0 != nil {
		child1 = child0.InheritedFromGObject()
	}
	tagname1 = _GoStringToGString(tagname0)
	defer C.free(unsafe.Pointer(tagname1))
	data1 = unsafe.Pointer(data0)
	C.gtk_buildable_custom_finished(this1, builder1, child1, tagname1, data1)
}
func (this0 *BuildableImpl) CustomTagEnd(builder0 BuilderLike, child0 gobject.ObjectLike, tagname0 string, data0 unsafe.Pointer) {
	var this1 *C.GtkBuildable
	var builder1 *C.GtkBuilder
	var child1 *C.GObject
	var tagname1 *C.char
	var data1 unsafe.Pointer
	if this0 != nil {
		this1 = this0.ImplementsGtkBuildable()}
	if builder0 != nil {
		builder1 = builder0.InheritedFromGtkBuilder()
	}
	if child0 != nil {
		child1 = child0.InheritedFromGObject()
	}
	tagname1 = _GoStringToGString(tagname0)
	defer C.free(unsafe.Pointer(tagname1))
	data1 = unsafe.Pointer(data0)
	C.gtk_buildable_custom_tag_end(this1, builder1, child1, tagname1, data1)
}
// blacklisted: Buildable.custom_tag_start (method)
func (this0 *BuildableImpl) GetInternalChild(builder0 BuilderLike, childname0 string) *gobject.Object {
	var this1 *C.GtkBuildable
	var builder1 *C.GtkBuilder
	var childname1 *C.char
	if this0 != nil {
		this1 = this0.ImplementsGtkBuildable()}
	if builder0 != nil {
		builder1 = builder0.InheritedFromGtkBuilder()
	}
	childname1 = _GoStringToGString(childname0)
	defer C.free(unsafe.Pointer(childname1))
	ret1 := C.gtk_buildable_get_internal_child(this1, builder1, childname1)
	var ret2 *gobject.Object
	ret2 = (*gobject.Object)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
func (this0 *BuildableImpl) GetName() string {
	var this1 *C.GtkBuildable
	if this0 != nil {
		this1 = this0.ImplementsGtkBuildable()}
	ret1 := C.gtk_buildable_get_name(this1)
	var ret2 string
	ret2 = C.GoString(ret1)
	return ret2
}
func (this0 *BuildableImpl) ParserFinished(builder0 BuilderLike) {
	var this1 *C.GtkBuildable
	var builder1 *C.GtkBuilder
	if this0 != nil {
		this1 = this0.ImplementsGtkBuildable()}
	if builder0 != nil {
		builder1 = builder0.InheritedFromGtkBuilder()
	}
	C.gtk_buildable_parser_finished(this1, builder1)
}
func (this0 *BuildableImpl) SetBuildableProperty(builder0 BuilderLike, name0 string, value0 *gobject.Value) {
	var this1 *C.GtkBuildable
	var builder1 *C.GtkBuilder
	var name1 *C.char
	var value1 *C.GValue
	if this0 != nil {
		this1 = this0.ImplementsGtkBuildable()}
	if builder0 != nil {
		builder1 = builder0.InheritedFromGtkBuilder()
	}
	name1 = _GoStringToGString(name0)
	defer C.free(unsafe.Pointer(name1))
	value1 = (*C.GValue)(unsafe.Pointer(value0))
	C.gtk_buildable_set_buildable_property(this1, builder1, name1, value1)
}
func (this0 *BuildableImpl) SetName(name0 string) {
	var this1 *C.GtkBuildable
	var name1 *C.char
	if this0 != nil {
		this1 = this0.ImplementsGtkBuildable()}
	name1 = _GoStringToGString(name0)
	defer C.free(unsafe.Pointer(name1))
	C.gtk_buildable_set_name(this1, name1)
}
type BuilderLike interface {
	gobject.ObjectLike
	InheritedFromGtkBuilder() *C.GtkBuilder
}

type Builder struct {
	gobject.Object
	
}

func ToBuilder(objlike gobject.ObjectLike) *Builder {
	c := objlike.InheritedFromGObject()
	if c == nil {
		return nil
	}
	t := (*Builder)(nil).GetStaticType()
	obj := gobject.ObjectGrabIfType(unsafe.Pointer(c), t)
	if obj != nil {
		return (*Builder)(obj)
	}
	panic("cannot cast to Builder")
}

func (this0 *Builder) InheritedFromGtkBuilder() *C.GtkBuilder {
	if this0 == nil {
		return nil
	}
	return (*C.GtkBuilder)(this0.C)
}

func (this0 *Builder) GetStaticType() gobject.Type {
	return gobject.Type(C.gtk_builder_get_type())
}

func BuilderGetType() gobject.Type {
	return (*Builder)(nil).GetStaticType()
}
func NewBuilder() *Builder {
	ret1 := C.gtk_builder_new()
	var ret2 *Builder
	ret2 = (*Builder)(gobject.ObjectWrap(unsafe.Pointer(ret1), false))
	return ret2
}
func (this0 *Builder) AddFromFile(filename0 string) (int, error) {
	var this1 *C.GtkBuilder
	var filename1 *C.char
	var err1 *C.GError
	if this0 != nil {
		this1 = this0.InheritedFromGtkBuilder()
	}
	filename1 = _GoStringToGString(filename0)
	defer C.free(unsafe.Pointer(filename1))
	ret1 := C.gtk_builder_add_from_file(this1, filename1, &err1)
	var ret2 int
	var err2 error
	ret2 = int(ret1)
	if err1 != nil {
		err2 = errors.New(C.GoString(((*_GError)(unsafe.Pointer(err1))).message))
		C.g_error_free(err1)
	}
	return ret2, err2
}
func (this0 *Builder) AddFromString(buffer0 string, length0 uint64) (int, error) {
	var this1 *C.GtkBuilder
	var buffer1 *C.char
	var length1 C.uint64_t
	var err1 *C.GError
	if this0 != nil {
		this1 = this0.InheritedFromGtkBuilder()
	}
	buffer1 = _GoStringToGString(buffer0)
	defer C.free(unsafe.Pointer(buffer1))
	length1 = C.uint64_t(length0)
	ret1 := C.gtk_builder_add_from_string(this1, buffer1, length1, &err1)
	var ret2 int
	var err2 error
	ret2 = int(ret1)
	if err1 != nil {
		err2 = errors.New(C.GoString(((*_GError)(unsafe.Pointer(err1))).message))
		C.g_error_free(err1)
	}
	return ret2, err2
}
func (this0 *Builder) AddObjectsFromFile(filename0 string, object_ids0 []string) (int, error) {
	var this1 *C.GtkBuilder
	var filename1 *C.char
	var object_ids1 **C.char
	var err1 *C.GError
	if this0 != nil {
		this1 = this0.InheritedFromGtkBuilder()
	}
	filename1 = _GoStringToGString(filename0)
	defer C.free(unsafe.Pointer(filename1))
	object_ids1 = (**C.char)(C.malloc(C.size_t(int(unsafe.Sizeof(*object_ids1)) * (len(object_ids0) + 1))))
	defer C.free(unsafe.Pointer(object_ids1))
	for i, e := range object_ids0 {
		(*(*[999999]*C.char)(unsafe.Pointer(object_ids1)))[i] = _GoStringToGString(e)
		defer C.free(unsafe.Pointer((*(*[999999]*C.char)(unsafe.Pointer(object_ids1)))[i]))
	}
	(*(*[999999]*C.char)(unsafe.Pointer(object_ids1)))[len(object_ids0)] = nil
	ret1 := C.gtk_builder_add_objects_from_file(this1, filename1, object_ids1, &err1)
	var ret2 int
	var err2 error
	ret2 = int(ret1)
	if err1 != nil {
		err2 = errors.New(C.GoString(((*_GError)(unsafe.Pointer(err1))).message))
		C.g_error_free(err1)
	}
	return ret2, err2
}
func (this0 *Builder) AddObjectsFromString(buffer0 string, length0 uint64, object_ids0 []string) (int, error) {
	var this1 *C.GtkBuilder
	var buffer1 *C.char
	var length1 C.uint64_t
	var object_ids1 **C.char
	var err1 *C.GError
	if this0 != nil {
		this1 = this0.InheritedFromGtkBuilder()
	}
	buffer1 = _GoStringToGString(buffer0)
	defer C.free(unsafe.Pointer(buffer1))
	length1 = C.uint64_t(length0)
	object_ids1 = (**C.char)(C.malloc(C.size_t(int(unsafe.Sizeof(*object_ids1)) * (len(object_ids0) + 1))))
	defer C.free(unsafe.Pointer(object_ids1))
	for i, e := range object_ids0 {
		(*(*[999999]*C.char)(unsafe.Pointer(object_ids1)))[i] = _GoStringToGString(e)
		defer C.free(unsafe.Pointer((*(*[999999]*C.char)(unsafe.Pointer(object_ids1)))[i]))
	}
	(*(*[999999]*C.char)(unsafe.Pointer(object_ids1)))[len(object_ids0)] = nil
	ret1 := C.gtk_builder_add_objects_from_string(this1, buffer1, length1, object_ids1, &err1)
	var ret2 int
	var err2 error
	ret2 = int(ret1)
	if err1 != nil {
		err2 = errors.New(C.GoString(((*_GError)(unsafe.Pointer(err1))).message))
		C.g_error_free(err1)
	}
	return ret2, err2
}
// blacklisted: Builder.connect_signals (method)
func (this0 *Builder) ConnectSignalsFull(func0 BuilderConnectFunc) {
	var this1 *C.GtkBuilder
	var func1 unsafe.Pointer
	if this0 != nil {
		this1 = this0.InheritedFromGtkBuilder()
	}
	if func0 != nil {
		func1 = unsafe.Pointer(&func0)}
	C._gtk_builder_connect_signals_full(this1, func1)
}
func (this0 *Builder) GetObject(name0 string) *gobject.Object {
	var this1 *C.GtkBuilder
	var name1 *C.char
	if this0 != nil {
		this1 = this0.InheritedFromGtkBuilder()
	}
	name1 = _GoStringToGString(name0)
	defer C.free(unsafe.Pointer(name1))
	ret1 := C.gtk_builder_get_object(this1, name1)
	var ret2 *gobject.Object
	ret2 = (*gobject.Object)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
func (this0 *Builder) GetObjects() []*gobject.Object {
	var this1 *C.GtkBuilder
	if this0 != nil {
		this1 = this0.InheritedFromGtkBuilder()
	}
	ret1 := C.gtk_builder_get_objects(this1)
	var ret2 []*gobject.Object
	for iter := (*_GSList)(unsafe.Pointer(ret1)); iter != nil; iter = iter.next {
		var elt *gobject.Object
		elt = (*gobject.Object)(gobject.ObjectWrap(unsafe.Pointer((*C.GObject)(iter.data)), true))
		ret2 = append(ret2, elt)
	}
	return ret2
}
func (this0 *Builder) GetTranslationDomain() string {
	var this1 *C.GtkBuilder
	if this0 != nil {
		this1 = this0.InheritedFromGtkBuilder()
	}
	ret1 := C.gtk_builder_get_translation_domain(this1)
	var ret2 string
	ret2 = C.GoString(ret1)
	return ret2
}
func (this0 *Builder) GetTypeFromName(type_name0 string) gobject.Type {
	var this1 *C.GtkBuilder
	var type_name1 *C.char
	if this0 != nil {
		this1 = this0.InheritedFromGtkBuilder()
	}
	type_name1 = _GoStringToGString(type_name0)
	defer C.free(unsafe.Pointer(type_name1))
	ret1 := C.gtk_builder_get_type_from_name(this1, type_name1)
	var ret2 gobject.Type
	ret2 = gobject.Type(ret1)
	return ret2
}
func (this0 *Builder) SetTranslationDomain(domain0 string) {
	var this1 *C.GtkBuilder
	var domain1 *C.char
	if this0 != nil {
		this1 = this0.InheritedFromGtkBuilder()
	}
	domain1 = _GoStringToGString(domain0)
	defer C.free(unsafe.Pointer(domain1))
	C.gtk_builder_set_translation_domain(this1, domain1)
}
func (this0 *Builder) ValueFromString(pspec0 gobject.ParamSpecLike, string0 string) (gobject.Value, bool, error) {
	var this1 *C.GtkBuilder
	var pspec1 *C.GParamSpec
	var string1 *C.char
	var value1 C.GValue
	var err1 *C.GError
	if this0 != nil {
		this1 = this0.InheritedFromGtkBuilder()
	}
	if pspec0 != nil {
		pspec1 = pspec0.InheritedFromGParamSpec()
	}
	string1 = _GoStringToGString(string0)
	defer C.free(unsafe.Pointer(string1))
	ret1 := C.gtk_builder_value_from_string(this1, pspec1, string1, &value1, &err1)
	var value2 gobject.Value
	var ret2 bool
	var err2 error
	value2 = *(*gobject.Value)(unsafe.Pointer(&value1))
	ret2 = ret1 != 0
	if err1 != nil {
		err2 = errors.New(C.GoString(((*_GError)(unsafe.Pointer(err1))).message))
		C.g_error_free(err1)
	}
	return value2, ret2, err2
}
func (this0 *Builder) ValueFromStringType(type0 gobject.Type, string0 string) (gobject.Value, bool, error) {
	var this1 *C.GtkBuilder
	var type1 C.GType
	var string1 *C.char
	var value1 C.GValue
	var err1 *C.GError
	if this0 != nil {
		this1 = this0.InheritedFromGtkBuilder()
	}
	type1 = C.GType(type0)
	string1 = _GoStringToGString(string0)
	defer C.free(unsafe.Pointer(string1))
	ret1 := C.gtk_builder_value_from_string_type(this1, type1, string1, &value1, &err1)
	var value2 gobject.Value
	var ret2 bool
	var err2 error
	value2 = *(*gobject.Value)(unsafe.Pointer(&value1))
	ret2 = ret1 != 0
	if err1 != nil {
		err2 = errors.New(C.GoString(((*_GError)(unsafe.Pointer(err1))).message))
		C.g_error_free(err1)
	}
	return value2, ret2, err2
}
type BuilderConnectFunc func(builder *Builder, object *gobject.Object, signal_name string, handler_name string, connect_object *gobject.Object, flags gobject.ConnectFlags)
//export _GtkBuilderConnectFunc_c_wrapper
func _GtkBuilderConnectFunc_c_wrapper(builder0 unsafe.Pointer, object0 unsafe.Pointer, signal_name0 unsafe.Pointer, handler_name0 unsafe.Pointer, connect_object0 unsafe.Pointer, flags0 uint32, user_data0 unsafe.Pointer) {
	var builder1 *Builder
	var object1 *gobject.Object
	var signal_name1 string
	var handler_name1 string
	var connect_object1 *gobject.Object
	var flags1 gobject.ConnectFlags
	var user_data1 BuilderConnectFunc
	builder1 = (*Builder)(gobject.ObjectWrap(unsafe.Pointer((*C.GtkBuilder)(builder0)), true))
	object1 = (*gobject.Object)(gobject.ObjectWrap(unsafe.Pointer((*C.GObject)(object0)), true))
	signal_name1 = C.GoString((*C.char)(signal_name0))
	handler_name1 = C.GoString((*C.char)(handler_name0))
	connect_object1 = (*gobject.Object)(gobject.ObjectWrap(unsafe.Pointer((*C.GObject)(connect_object0)), true))
	flags1 = gobject.ConnectFlags((C.GConnectFlags)(flags0))
	user_data1 = *(*BuilderConnectFunc)(user_data0)
	user_data1(builder1, object1, signal_name1, handler_name1, connect_object1, flags1)
}
//export _GtkBuilderConnectFunc_c_wrapper_once
func _GtkBuilderConnectFunc_c_wrapper_once(builder0 unsafe.Pointer, object0 unsafe.Pointer, signal_name0 unsafe.Pointer, handler_name0 unsafe.Pointer, connect_object0 unsafe.Pointer, flags0 uint32, user_data0 unsafe.Pointer) {
	_GtkBuilderConnectFunc_c_wrapper(builder0, object0, signal_name0, handler_name0, connect_object0, flags0, user_data0)
	gobject.Holder.Release(user_data0)
}
type BuilderError C.uint32_t
const (
	BuilderErrorInvalidTypeFunction BuilderError = 0
	BuilderErrorUnhandledTag BuilderError = 1
	BuilderErrorMissingAttribute BuilderError = 2
	BuilderErrorInvalidAttribute BuilderError = 3
	BuilderErrorInvalidTag BuilderError = 4
	BuilderErrorMissingPropertyValue BuilderError = 5
	BuilderErrorInvalidValue BuilderError = 6
	BuilderErrorVersionMismatch BuilderError = 7
	BuilderErrorDuplicateID BuilderError = 8
)
type ButtonLike interface {
	BinLike
	InheritedFromGtkButton() *C.GtkButton
}

type Button struct {
	Bin
	atk.ImplementorIfaceImpl
	ActivatableImpl
	BuildableImpl
}

func ToButton(objlike gobject.ObjectLike) *Button {
	c := objlike.InheritedFromGObject()
	if c == nil {
		return nil
	}
	t := (*Button)(nil).GetStaticType()
	obj := gobject.ObjectGrabIfType(unsafe.Pointer(c), t)
	if obj != nil {
		return (*Button)(obj)
	}
	panic("cannot cast to Button")
}

func (this0 *Button) InheritedFromGtkButton() *C.GtkButton {
	if this0 == nil {
		return nil
	}
	return (*C.GtkButton)(this0.C)
}

func (this0 *Button) GetStaticType() gobject.Type {
	return gobject.Type(C.gtk_button_get_type())
}

func ButtonGetType() gobject.Type {
	return (*Button)(nil).GetStaticType()
}
func NewButton() *Button {
	ret1 := C.gtk_button_new()
	var ret2 *Button
	ret2 = (*Button)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
func NewButtonFromStock(stock_id0 string) *Button {
	var stock_id1 *C.char
	stock_id1 = _GoStringToGString(stock_id0)
	defer C.free(unsafe.Pointer(stock_id1))
	ret1 := C.gtk_button_new_from_stock(stock_id1)
	var ret2 *Button
	ret2 = (*Button)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
func NewButtonWithLabel(label0 string) *Button {
	var label1 *C.char
	label1 = _GoStringToGString(label0)
	defer C.free(unsafe.Pointer(label1))
	ret1 := C.gtk_button_new_with_label(label1)
	var ret2 *Button
	ret2 = (*Button)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
func NewButtonWithMnemonic(label0 string) *Button {
	var label1 *C.char
	label1 = _GoStringToGString(label0)
	defer C.free(unsafe.Pointer(label1))
	ret1 := C.gtk_button_new_with_mnemonic(label1)
	var ret2 *Button
	ret2 = (*Button)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
func (this0 *Button) Clicked() {
	var this1 *C.GtkButton
	if this0 != nil {
		this1 = this0.InheritedFromGtkButton()
	}
	C.gtk_button_clicked(this1)
}
func (this0 *Button) Enter() {
	var this1 *C.GtkButton
	if this0 != nil {
		this1 = this0.InheritedFromGtkButton()
	}
	C.gtk_button_enter(this1)
}
func (this0 *Button) GetAlignment() (float64, float64) {
	var this1 *C.GtkButton
	var xalign1 C.float
	var yalign1 C.float
	if this0 != nil {
		this1 = this0.InheritedFromGtkButton()
	}
	C.gtk_button_get_alignment(this1, &xalign1, &yalign1)
	var xalign2 float64
	var yalign2 float64
	xalign2 = float64(xalign1)
	yalign2 = float64(yalign1)
	return xalign2, yalign2
}
func (this0 *Button) GetEventWindow() *gdk.Window {
	var this1 *C.GtkButton
	if this0 != nil {
		this1 = this0.InheritedFromGtkButton()
	}
	ret1 := C.gtk_button_get_event_window(this1)
	var ret2 *gdk.Window
	ret2 = (*gdk.Window)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
func (this0 *Button) GetFocusOnClick() bool {
	var this1 *C.GtkButton
	if this0 != nil {
		this1 = this0.InheritedFromGtkButton()
	}
	ret1 := C.gtk_button_get_focus_on_click(this1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *Button) GetImage() *Widget {
	var this1 *C.GtkButton
	if this0 != nil {
		this1 = this0.InheritedFromGtkButton()
	}
	ret1 := C.gtk_button_get_image(this1)
	var ret2 *Widget
	ret2 = (*Widget)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
func (this0 *Button) GetImagePosition() PositionType {
	var this1 *C.GtkButton
	if this0 != nil {
		this1 = this0.InheritedFromGtkButton()
	}
	ret1 := C.gtk_button_get_image_position(this1)
	var ret2 PositionType
	ret2 = PositionType(ret1)
	return ret2
}
func (this0 *Button) GetLabel() string {
	var this1 *C.GtkButton
	if this0 != nil {
		this1 = this0.InheritedFromGtkButton()
	}
	ret1 := C.gtk_button_get_label(this1)
	var ret2 string
	ret2 = C.GoString(ret1)
	return ret2
}
func (this0 *Button) GetRelief() ReliefStyle {
	var this1 *C.GtkButton
	if this0 != nil {
		this1 = this0.InheritedFromGtkButton()
	}
	ret1 := C.gtk_button_get_relief(this1)
	var ret2 ReliefStyle
	ret2 = ReliefStyle(ret1)
	return ret2
}
func (this0 *Button) GetUseStock() bool {
	var this1 *C.GtkButton
	if this0 != nil {
		this1 = this0.InheritedFromGtkButton()
	}
	ret1 := C.gtk_button_get_use_stock(this1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *Button) GetUseUnderline() bool {
	var this1 *C.GtkButton
	if this0 != nil {
		this1 = this0.InheritedFromGtkButton()
	}
	ret1 := C.gtk_button_get_use_underline(this1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *Button) Leave() {
	var this1 *C.GtkButton
	if this0 != nil {
		this1 = this0.InheritedFromGtkButton()
	}
	C.gtk_button_leave(this1)
}
func (this0 *Button) Pressed() {
	var this1 *C.GtkButton
	if this0 != nil {
		this1 = this0.InheritedFromGtkButton()
	}
	C.gtk_button_pressed(this1)
}
func (this0 *Button) Released() {
	var this1 *C.GtkButton
	if this0 != nil {
		this1 = this0.InheritedFromGtkButton()
	}
	C.gtk_button_released(this1)
}
func (this0 *Button) SetAlignment(xalign0 float64, yalign0 float64) {
	var this1 *C.GtkButton
	var xalign1 C.float
	var yalign1 C.float
	if this0 != nil {
		this1 = this0.InheritedFromGtkButton()
	}
	xalign1 = C.float(xalign0)
	yalign1 = C.float(yalign0)
	C.gtk_button_set_alignment(this1, xalign1, yalign1)
}
func (this0 *Button) SetFocusOnClick(focus_on_click0 bool) {
	var this1 *C.GtkButton
	var focus_on_click1 C.int
	if this0 != nil {
		this1 = this0.InheritedFromGtkButton()
	}
	focus_on_click1 = _GoBoolToCBool(focus_on_click0)
	C.gtk_button_set_focus_on_click(this1, focus_on_click1)
}
func (this0 *Button) SetImage(image0 WidgetLike) {
	var this1 *C.GtkButton
	var image1 *C.GtkWidget
	if this0 != nil {
		this1 = this0.InheritedFromGtkButton()
	}
	if image0 != nil {
		image1 = image0.InheritedFromGtkWidget()
	}
	C.gtk_button_set_image(this1, image1)
}
func (this0 *Button) SetImagePosition(position0 PositionType) {
	var this1 *C.GtkButton
	var position1 C.GtkPositionType
	if this0 != nil {
		this1 = this0.InheritedFromGtkButton()
	}
	position1 = C.GtkPositionType(position0)
	C.gtk_button_set_image_position(this1, position1)
}
func (this0 *Button) SetLabel(label0 string) {
	var this1 *C.GtkButton
	var label1 *C.char
	if this0 != nil {
		this1 = this0.InheritedFromGtkButton()
	}
	label1 = _GoStringToGString(label0)
	defer C.free(unsafe.Pointer(label1))
	C.gtk_button_set_label(this1, label1)
}
func (this0 *Button) SetRelief(newstyle0 ReliefStyle) {
	var this1 *C.GtkButton
	var newstyle1 C.GtkReliefStyle
	if this0 != nil {
		this1 = this0.InheritedFromGtkButton()
	}
	newstyle1 = C.GtkReliefStyle(newstyle0)
	C.gtk_button_set_relief(this1, newstyle1)
}
func (this0 *Button) SetUseStock(use_stock0 bool) {
	var this1 *C.GtkButton
	var use_stock1 C.int
	if this0 != nil {
		this1 = this0.InheritedFromGtkButton()
	}
	use_stock1 = _GoBoolToCBool(use_stock0)
	C.gtk_button_set_use_stock(this1, use_stock1)
}
func (this0 *Button) SetUseUnderline(use_underline0 bool) {
	var this1 *C.GtkButton
	var use_underline1 C.int
	if this0 != nil {
		this1 = this0.InheritedFromGtkButton()
	}
	use_underline1 = _GoBoolToCBool(use_underline0)
	C.gtk_button_set_use_underline(this1, use_underline1)
}
type ButtonBoxLike interface {
	BoxLike
	InheritedFromGtkButtonBox() *C.GtkButtonBox
}

type ButtonBox struct {
	Box
	atk.ImplementorIfaceImpl
	BuildableImpl
	OrientableImpl
}

func ToButtonBox(objlike gobject.ObjectLike) *ButtonBox {
	c := objlike.InheritedFromGObject()
	if c == nil {
		return nil
	}
	t := (*ButtonBox)(nil).GetStaticType()
	obj := gobject.ObjectGrabIfType(unsafe.Pointer(c), t)
	if obj != nil {
		return (*ButtonBox)(obj)
	}
	panic("cannot cast to ButtonBox")
}

func (this0 *ButtonBox) InheritedFromGtkButtonBox() *C.GtkButtonBox {
	if this0 == nil {
		return nil
	}
	return (*C.GtkButtonBox)(this0.C)
}

func (this0 *ButtonBox) GetStaticType() gobject.Type {
	return gobject.Type(C.gtk_button_box_get_type())
}

func ButtonBoxGetType() gobject.Type {
	return (*ButtonBox)(nil).GetStaticType()
}
func NewButtonBox(orientation0 Orientation) *ButtonBox {
	var orientation1 C.GtkOrientation
	orientation1 = C.GtkOrientation(orientation0)
	ret1 := C.gtk_button_box_new(orientation1)
	var ret2 *ButtonBox
	ret2 = (*ButtonBox)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
func (this0 *ButtonBox) GetChildNonHomogeneous(child0 WidgetLike) bool {
	var this1 *C.GtkButtonBox
	var child1 *C.GtkWidget
	if this0 != nil {
		this1 = this0.InheritedFromGtkButtonBox()
	}
	if child0 != nil {
		child1 = child0.InheritedFromGtkWidget()
	}
	ret1 := C.gtk_button_box_get_child_non_homogeneous(this1, child1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *ButtonBox) GetChildSecondary(child0 WidgetLike) bool {
	var this1 *C.GtkButtonBox
	var child1 *C.GtkWidget
	if this0 != nil {
		this1 = this0.InheritedFromGtkButtonBox()
	}
	if child0 != nil {
		child1 = child0.InheritedFromGtkWidget()
	}
	ret1 := C.gtk_button_box_get_child_secondary(this1, child1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *ButtonBox) GetLayout() ButtonBoxStyle {
	var this1 *C.GtkButtonBox
	if this0 != nil {
		this1 = this0.InheritedFromGtkButtonBox()
	}
	ret1 := C.gtk_button_box_get_layout(this1)
	var ret2 ButtonBoxStyle
	ret2 = ButtonBoxStyle(ret1)
	return ret2
}
func (this0 *ButtonBox) SetChildNonHomogeneous(child0 WidgetLike, non_homogeneous0 bool) {
	var this1 *C.GtkButtonBox
	var child1 *C.GtkWidget
	var non_homogeneous1 C.int
	if this0 != nil {
		this1 = this0.InheritedFromGtkButtonBox()
	}
	if child0 != nil {
		child1 = child0.InheritedFromGtkWidget()
	}
	non_homogeneous1 = _GoBoolToCBool(non_homogeneous0)
	C.gtk_button_box_set_child_non_homogeneous(this1, child1, non_homogeneous1)
}
func (this0 *ButtonBox) SetChildSecondary(child0 WidgetLike, is_secondary0 bool) {
	var this1 *C.GtkButtonBox
	var child1 *C.GtkWidget
	var is_secondary1 C.int
	if this0 != nil {
		this1 = this0.InheritedFromGtkButtonBox()
	}
	if child0 != nil {
		child1 = child0.InheritedFromGtkWidget()
	}
	is_secondary1 = _GoBoolToCBool(is_secondary0)
	C.gtk_button_box_set_child_secondary(this1, child1, is_secondary1)
}
func (this0 *ButtonBox) SetLayout(layout_style0 ButtonBoxStyle) {
	var this1 *C.GtkButtonBox
	var layout_style1 C.GtkButtonBoxStyle
	if this0 != nil {
		this1 = this0.InheritedFromGtkButtonBox()
	}
	layout_style1 = C.GtkButtonBoxStyle(layout_style0)
	C.gtk_button_box_set_layout(this1, layout_style1)
}
type ButtonBoxStyle C.uint32_t
const (
	ButtonBoxStyleSpread ButtonBoxStyle = 1
	ButtonBoxStyleEdge ButtonBoxStyle = 2
	ButtonBoxStyleStart ButtonBoxStyle = 3
	ButtonBoxStyleEnd ButtonBoxStyle = 4
	ButtonBoxStyleCenter ButtonBoxStyle = 5
)
type ButtonsType C.uint32_t
const (
	ButtonsTypeNone ButtonsType = 0
	ButtonsTypeOk ButtonsType = 1
	ButtonsTypeClose ButtonsType = 2
	ButtonsTypeCancel ButtonsType = 3
	ButtonsTypeYesNo ButtonsType = 4
	ButtonsTypeOkCancel ButtonsType = 5
)
type CalendarLike interface {
	WidgetLike
	InheritedFromGtkCalendar() *C.GtkCalendar
}

type Calendar struct {
	Widget
	atk.ImplementorIfaceImpl
	BuildableImpl
}

func ToCalendar(objlike gobject.ObjectLike) *Calendar {
	c := objlike.InheritedFromGObject()
	if c == nil {
		return nil
	}
	t := (*Calendar)(nil).GetStaticType()
	obj := gobject.ObjectGrabIfType(unsafe.Pointer(c), t)
	if obj != nil {
		return (*Calendar)(obj)
	}
	panic("cannot cast to Calendar")
}

func (this0 *Calendar) InheritedFromGtkCalendar() *C.GtkCalendar {
	if this0 == nil {
		return nil
	}
	return (*C.GtkCalendar)(this0.C)
}

func (this0 *Calendar) GetStaticType() gobject.Type {
	return gobject.Type(C.gtk_calendar_get_type())
}

func CalendarGetType() gobject.Type {
	return (*Calendar)(nil).GetStaticType()
}
func NewCalendar() *Calendar {
	ret1 := C.gtk_calendar_new()
	var ret2 *Calendar
	ret2 = (*Calendar)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
func (this0 *Calendar) ClearMarks() {
	var this1 *C.GtkCalendar
	if this0 != nil {
		this1 = this0.InheritedFromGtkCalendar()
	}
	C.gtk_calendar_clear_marks(this1)
}
func (this0 *Calendar) GetDate() (int, int, int) {
	var this1 *C.GtkCalendar
	var year1 C.uint32_t
	var month1 C.uint32_t
	var day1 C.uint32_t
	if this0 != nil {
		this1 = this0.InheritedFromGtkCalendar()
	}
	C.gtk_calendar_get_date(this1, &year1, &month1, &day1)
	var year2 int
	var month2 int
	var day2 int
	year2 = int(year1)
	month2 = int(month1)
	day2 = int(day1)
	return year2, month2, day2
}
func (this0 *Calendar) GetDayIsMarked(day0 int) bool {
	var this1 *C.GtkCalendar
	var day1 C.uint32_t
	if this0 != nil {
		this1 = this0.InheritedFromGtkCalendar()
	}
	day1 = C.uint32_t(day0)
	ret1 := C.gtk_calendar_get_day_is_marked(this1, day1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *Calendar) GetDetailHeightRows() int {
	var this1 *C.GtkCalendar
	if this0 != nil {
		this1 = this0.InheritedFromGtkCalendar()
	}
	ret1 := C.gtk_calendar_get_detail_height_rows(this1)
	var ret2 int
	ret2 = int(ret1)
	return ret2
}
func (this0 *Calendar) GetDetailWidthChars() int {
	var this1 *C.GtkCalendar
	if this0 != nil {
		this1 = this0.InheritedFromGtkCalendar()
	}
	ret1 := C.gtk_calendar_get_detail_width_chars(this1)
	var ret2 int
	ret2 = int(ret1)
	return ret2
}
func (this0 *Calendar) GetDisplayOptions() CalendarDisplayOptions {
	var this1 *C.GtkCalendar
	if this0 != nil {
		this1 = this0.InheritedFromGtkCalendar()
	}
	ret1 := C.gtk_calendar_get_display_options(this1)
	var ret2 CalendarDisplayOptions
	ret2 = CalendarDisplayOptions(ret1)
	return ret2
}
func (this0 *Calendar) MarkDay(day0 int) {
	var this1 *C.GtkCalendar
	var day1 C.uint32_t
	if this0 != nil {
		this1 = this0.InheritedFromGtkCalendar()
	}
	day1 = C.uint32_t(day0)
	C.gtk_calendar_mark_day(this1, day1)
}
func (this0 *Calendar) SelectDay(day0 int) {
	var this1 *C.GtkCalendar
	var day1 C.uint32_t
	if this0 != nil {
		this1 = this0.InheritedFromGtkCalendar()
	}
	day1 = C.uint32_t(day0)
	C.gtk_calendar_select_day(this1, day1)
}
func (this0 *Calendar) SelectMonth(month0 int, year0 int) {
	var this1 *C.GtkCalendar
	var month1 C.uint32_t
	var year1 C.uint32_t
	if this0 != nil {
		this1 = this0.InheritedFromGtkCalendar()
	}
	month1 = C.uint32_t(month0)
	year1 = C.uint32_t(year0)
	C.gtk_calendar_select_month(this1, month1, year1)
}
func (this0 *Calendar) SetDetailFunc(func0 CalendarDetailFunc) {
	var this1 *C.GtkCalendar
	var func1 unsafe.Pointer
	if this0 != nil {
		this1 = this0.InheritedFromGtkCalendar()
	}
	if func0 != nil {
		func1 = unsafe.Pointer(&func0)}
	gobject.Holder.Grab(func1)
	C._gtk_calendar_set_detail_func(this1, func1)
}
func (this0 *Calendar) SetDetailHeightRows(rows0 int) {
	var this1 *C.GtkCalendar
	var rows1 C.int32_t
	if this0 != nil {
		this1 = this0.InheritedFromGtkCalendar()
	}
	rows1 = C.int32_t(rows0)
	C.gtk_calendar_set_detail_height_rows(this1, rows1)
}
func (this0 *Calendar) SetDetailWidthChars(chars0 int) {
	var this1 *C.GtkCalendar
	var chars1 C.int32_t
	if this0 != nil {
		this1 = this0.InheritedFromGtkCalendar()
	}
	chars1 = C.int32_t(chars0)
	C.gtk_calendar_set_detail_width_chars(this1, chars1)
}
func (this0 *Calendar) SetDisplayOptions(flags0 CalendarDisplayOptions) {
	var this1 *C.GtkCalendar
	var flags1 C.GtkCalendarDisplayOptions
	if this0 != nil {
		this1 = this0.InheritedFromGtkCalendar()
	}
	flags1 = C.GtkCalendarDisplayOptions(flags0)
	C.gtk_calendar_set_display_options(this1, flags1)
}
func (this0 *Calendar) UnmarkDay(day0 int) {
	var this1 *C.GtkCalendar
	var day1 C.uint32_t
	if this0 != nil {
		this1 = this0.InheritedFromGtkCalendar()
	}
	day1 = C.uint32_t(day0)
	C.gtk_calendar_unmark_day(this1, day1)
}
type CalendarDetailFunc func(calendar *Calendar, year int, month int, day int) string
//export _GtkCalendarDetailFunc_c_wrapper
func _GtkCalendarDetailFunc_c_wrapper(calendar0 unsafe.Pointer, year0 uint32, month0 uint32, day0 uint32, user_data0 unsafe.Pointer) unsafe.Pointer {
	var calendar1 *Calendar
	var year1 int
	var month1 int
	var day1 int
	var user_data1 CalendarDetailFunc
	calendar1 = (*Calendar)(gobject.ObjectWrap(unsafe.Pointer((*C.GtkCalendar)(calendar0)), true))
	year1 = int((C.uint32_t)(year0))
	month1 = int((C.uint32_t)(month0))
	day1 = int((C.uint32_t)(day0))
	user_data1 = *(*CalendarDetailFunc)(user_data0)
	ret1 := user_data1(calendar1, year1, month1, day1)
	var ret2 *C.char
	ret2 = _GoStringToGString(ret1)
	return (unsafe.Pointer)(ret2)
}
//export _GtkCalendarDetailFunc_c_wrapper_once
func _GtkCalendarDetailFunc_c_wrapper_once(calendar0 unsafe.Pointer, year0 uint32, month0 uint32, day0 uint32, user_data0 unsafe.Pointer) unsafe.Pointer {
	ret := _GtkCalendarDetailFunc_c_wrapper(calendar0, year0, month0, day0, user_data0)
	gobject.Holder.Release(user_data0)
	return ret
}
type CalendarDisplayOptions C.uint32_t
const (
	CalendarDisplayOptionsShowHeading CalendarDisplayOptions = 1
	CalendarDisplayOptionsShowDayNames CalendarDisplayOptions = 2
	CalendarDisplayOptionsNoMonthChange CalendarDisplayOptions = 4
	CalendarDisplayOptionsShowWeekNumbers CalendarDisplayOptions = 8
	CalendarDisplayOptionsShowDetails CalendarDisplayOptions = 32
)
type Callback func(widget *Widget)
//export _GtkCallback_c_wrapper
func _GtkCallback_c_wrapper(widget0 unsafe.Pointer, data0 unsafe.Pointer) {
	var widget1 *Widget
	var data1 Callback
	widget1 = (*Widget)(gobject.ObjectWrap(unsafe.Pointer((*C.GtkWidget)(widget0)), true))
	data1 = *(*Callback)(data0)
	data1(widget1)
}
//export _GtkCallback_c_wrapper_once
func _GtkCallback_c_wrapper_once(widget0 unsafe.Pointer, data0 unsafe.Pointer) {
	_GtkCallback_c_wrapper(widget0, data0)
	gobject.Holder.Release(data0)
}
type CellAllocCallback func(renderer *CellRenderer, cell_area *cairo.RectangleInt, cell_background *cairo.RectangleInt) bool
//export _GtkCellAllocCallback_c_wrapper
func _GtkCellAllocCallback_c_wrapper(renderer0 unsafe.Pointer, cell_area0 unsafe.Pointer, cell_background0 unsafe.Pointer, data0 unsafe.Pointer) int32 {
	var renderer1 *CellRenderer
	var cell_area1 *cairo.RectangleInt
	var cell_background1 *cairo.RectangleInt
	var data1 CellAllocCallback
	renderer1 = (*CellRenderer)(gobject.ObjectWrap(unsafe.Pointer((*C.GtkCellRenderer)(renderer0)), true))
	cell_area1 = (*cairo.RectangleInt)(unsafe.Pointer((*C.cairoRectangleInt)(cell_area0)))
	cell_background1 = (*cairo.RectangleInt)(unsafe.Pointer((*C.cairoRectangleInt)(cell_background0)))
	data1 = *(*CellAllocCallback)(data0)
	ret1 := data1(renderer1, cell_area1, cell_background1)
	var ret2 C.int
	ret2 = _GoBoolToCBool(ret1)
	return (int32)(ret2)
}
//export _GtkCellAllocCallback_c_wrapper_once
func _GtkCellAllocCallback_c_wrapper_once(renderer0 unsafe.Pointer, cell_area0 unsafe.Pointer, cell_background0 unsafe.Pointer, data0 unsafe.Pointer) int32 {
	ret := _GtkCellAllocCallback_c_wrapper(renderer0, cell_area0, cell_background0, data0)
	gobject.Holder.Release(data0)
	return ret
}
type CellAreaLike interface {
	gobject.InitiallyUnownedLike
	InheritedFromGtkCellArea() *C.GtkCellArea
}

type CellArea struct {
	gobject.InitiallyUnowned
	BuildableImpl
	CellLayoutImpl
}

func ToCellArea(objlike gobject.ObjectLike) *CellArea {
	c := objlike.InheritedFromGObject()
	if c == nil {
		return nil
	}
	t := (*CellArea)(nil).GetStaticType()
	obj := gobject.ObjectGrabIfType(unsafe.Pointer(c), t)
	if obj != nil {
		return (*CellArea)(obj)
	}
	panic("cannot cast to CellArea")
}

func (this0 *CellArea) InheritedFromGtkCellArea() *C.GtkCellArea {
	if this0 == nil {
		return nil
	}
	return (*C.GtkCellArea)(this0.C)
}

func (this0 *CellArea) GetStaticType() gobject.Type {
	return gobject.Type(C.gtk_cell_area_get_type())
}

func CellAreaGetType() gobject.Type {
	return (*CellArea)(nil).GetStaticType()
}
func (this0 *CellArea) Activate(context0 CellAreaContextLike, widget0 WidgetLike, cell_area0 *cairo.RectangleInt, flags0 CellRendererState, edit_only0 bool) bool {
	var this1 *C.GtkCellArea
	var context1 *C.GtkCellAreaContext
	var widget1 *C.GtkWidget
	var cell_area1 *C.cairoRectangleInt
	var flags1 C.GtkCellRendererState
	var edit_only1 C.int
	if this0 != nil {
		this1 = this0.InheritedFromGtkCellArea()
	}
	if context0 != nil {
		context1 = context0.InheritedFromGtkCellAreaContext()
	}
	if widget0 != nil {
		widget1 = widget0.InheritedFromGtkWidget()
	}
	cell_area1 = (*C.cairoRectangleInt)(unsafe.Pointer(cell_area0))
	flags1 = C.GtkCellRendererState(flags0)
	edit_only1 = _GoBoolToCBool(edit_only0)
	ret1 := C.gtk_cell_area_activate(this1, context1, widget1, cell_area1, flags1, edit_only1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *CellArea) ActivateCell(widget0 WidgetLike, renderer0 CellRendererLike, event0 *gdk.Event, cell_area0 *cairo.RectangleInt, flags0 CellRendererState) bool {
	var this1 *C.GtkCellArea
	var widget1 *C.GtkWidget
	var renderer1 *C.GtkCellRenderer
	var event1 *C.GdkEvent
	var cell_area1 *C.cairoRectangleInt
	var flags1 C.GtkCellRendererState
	if this0 != nil {
		this1 = this0.InheritedFromGtkCellArea()
	}
	if widget0 != nil {
		widget1 = widget0.InheritedFromGtkWidget()
	}
	if renderer0 != nil {
		renderer1 = renderer0.InheritedFromGtkCellRenderer()
	}
	cell_area1 = (*C.cairoRectangleInt)(unsafe.Pointer(cell_area0))
	flags1 = C.GtkCellRendererState(flags0)
	ret1 := C.gtk_cell_area_activate_cell(this1, widget1, renderer1, event1, cell_area1, flags1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *CellArea) Add(renderer0 CellRendererLike) {
	var this1 *C.GtkCellArea
	var renderer1 *C.GtkCellRenderer
	if this0 != nil {
		this1 = this0.InheritedFromGtkCellArea()
	}
	if renderer0 != nil {
		renderer1 = renderer0.InheritedFromGtkCellRenderer()
	}
	C.gtk_cell_area_add(this1, renderer1)
}
func (this0 *CellArea) AddFocusSibling(renderer0 CellRendererLike, sibling0 CellRendererLike) {
	var this1 *C.GtkCellArea
	var renderer1 *C.GtkCellRenderer
	var sibling1 *C.GtkCellRenderer
	if this0 != nil {
		this1 = this0.InheritedFromGtkCellArea()
	}
	if renderer0 != nil {
		renderer1 = renderer0.InheritedFromGtkCellRenderer()
	}
	if sibling0 != nil {
		sibling1 = sibling0.InheritedFromGtkCellRenderer()
	}
	C.gtk_cell_area_add_focus_sibling(this1, renderer1, sibling1)
}
func (this0 *CellArea) ApplyAttributes(tree_model0 TreeModelLike, iter0 *TreeIter, is_expander0 bool, is_expanded0 bool) {
	var this1 *C.GtkCellArea
	var tree_model1 *C.GtkTreeModel
	var iter1 *C.GtkTreeIter
	var is_expander1 C.int
	var is_expanded1 C.int
	if this0 != nil {
		this1 = this0.InheritedFromGtkCellArea()
	}
	if tree_model0 != nil {
		tree_model1 = tree_model0.ImplementsGtkTreeModel()}
	iter1 = (*C.GtkTreeIter)(unsafe.Pointer(iter0))
	is_expander1 = _GoBoolToCBool(is_expander0)
	is_expanded1 = _GoBoolToCBool(is_expanded0)
	C.gtk_cell_area_apply_attributes(this1, tree_model1, iter1, is_expander1, is_expanded1)
}
func (this0 *CellArea) AttributeConnect(renderer0 CellRendererLike, attribute0 string, column0 int) {
	var this1 *C.GtkCellArea
	var renderer1 *C.GtkCellRenderer
	var attribute1 *C.char
	var column1 C.int32_t
	if this0 != nil {
		this1 = this0.InheritedFromGtkCellArea()
	}
	if renderer0 != nil {
		renderer1 = renderer0.InheritedFromGtkCellRenderer()
	}
	attribute1 = _GoStringToGString(attribute0)
	defer C.free(unsafe.Pointer(attribute1))
	column1 = C.int32_t(column0)
	C.gtk_cell_area_attribute_connect(this1, renderer1, attribute1, column1)
}
func (this0 *CellArea) AttributeDisconnect(renderer0 CellRendererLike, attribute0 string) {
	var this1 *C.GtkCellArea
	var renderer1 *C.GtkCellRenderer
	var attribute1 *C.char
	if this0 != nil {
		this1 = this0.InheritedFromGtkCellArea()
	}
	if renderer0 != nil {
		renderer1 = renderer0.InheritedFromGtkCellRenderer()
	}
	attribute1 = _GoStringToGString(attribute0)
	defer C.free(unsafe.Pointer(attribute1))
	C.gtk_cell_area_attribute_disconnect(this1, renderer1, attribute1)
}
func (this0 *CellArea) CellGetProperty(renderer0 CellRendererLike, property_name0 string, value0 *gobject.Value) {
	var this1 *C.GtkCellArea
	var renderer1 *C.GtkCellRenderer
	var property_name1 *C.char
	var value1 *C.GValue
	if this0 != nil {
		this1 = this0.InheritedFromGtkCellArea()
	}
	if renderer0 != nil {
		renderer1 = renderer0.InheritedFromGtkCellRenderer()
	}
	property_name1 = _GoStringToGString(property_name0)
	defer C.free(unsafe.Pointer(property_name1))
	value1 = (*C.GValue)(unsafe.Pointer(value0))
	C.gtk_cell_area_cell_get_property(this1, renderer1, property_name1, value1)
}
func (this0 *CellArea) CellSetProperty(renderer0 CellRendererLike, property_name0 string, value0 *gobject.Value) {
	var this1 *C.GtkCellArea
	var renderer1 *C.GtkCellRenderer
	var property_name1 *C.char
	var value1 *C.GValue
	if this0 != nil {
		this1 = this0.InheritedFromGtkCellArea()
	}
	if renderer0 != nil {
		renderer1 = renderer0.InheritedFromGtkCellRenderer()
	}
	property_name1 = _GoStringToGString(property_name0)
	defer C.free(unsafe.Pointer(property_name1))
	value1 = (*C.GValue)(unsafe.Pointer(value0))
	C.gtk_cell_area_cell_set_property(this1, renderer1, property_name1, value1)
}
func (this0 *CellArea) CopyContext(context0 CellAreaContextLike) *CellAreaContext {
	var this1 *C.GtkCellArea
	var context1 *C.GtkCellAreaContext
	if this0 != nil {
		this1 = this0.InheritedFromGtkCellArea()
	}
	if context0 != nil {
		context1 = context0.InheritedFromGtkCellAreaContext()
	}
	ret1 := C.gtk_cell_area_copy_context(this1, context1)
	var ret2 *CellAreaContext
	ret2 = (*CellAreaContext)(gobject.ObjectWrap(unsafe.Pointer(ret1), false))
	return ret2
}
func (this0 *CellArea) CreateContext() *CellAreaContext {
	var this1 *C.GtkCellArea
	if this0 != nil {
		this1 = this0.InheritedFromGtkCellArea()
	}
	ret1 := C.gtk_cell_area_create_context(this1)
	var ret2 *CellAreaContext
	ret2 = (*CellAreaContext)(gobject.ObjectWrap(unsafe.Pointer(ret1), false))
	return ret2
}
func (this0 *CellArea) Event(context0 CellAreaContextLike, widget0 WidgetLike, event0 *gdk.Event, cell_area0 *cairo.RectangleInt, flags0 CellRendererState) int {
	var this1 *C.GtkCellArea
	var context1 *C.GtkCellAreaContext
	var widget1 *C.GtkWidget
	var event1 *C.GdkEvent
	var cell_area1 *C.cairoRectangleInt
	var flags1 C.GtkCellRendererState
	if this0 != nil {
		this1 = this0.InheritedFromGtkCellArea()
	}
	if context0 != nil {
		context1 = context0.InheritedFromGtkCellAreaContext()
	}
	if widget0 != nil {
		widget1 = widget0.InheritedFromGtkWidget()
	}
	cell_area1 = (*C.cairoRectangleInt)(unsafe.Pointer(cell_area0))
	flags1 = C.GtkCellRendererState(flags0)
	ret1 := C.gtk_cell_area_event(this1, context1, widget1, event1, cell_area1, flags1)
	var ret2 int
	ret2 = int(ret1)
	return ret2
}
func (this0 *CellArea) Focus(direction0 DirectionType) bool {
	var this1 *C.GtkCellArea
	var direction1 C.GtkDirectionType
	if this0 != nil {
		this1 = this0.InheritedFromGtkCellArea()
	}
	direction1 = C.GtkDirectionType(direction0)
	ret1 := C.gtk_cell_area_focus(this1, direction1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *CellArea) Foreach(callback0 CellCallback) {
	var this1 *C.GtkCellArea
	var callback1 unsafe.Pointer
	if this0 != nil {
		this1 = this0.InheritedFromGtkCellArea()
	}
	if callback0 != nil {
		callback1 = unsafe.Pointer(&callback0)}
	C._gtk_cell_area_foreach(this1, callback1)
}
func (this0 *CellArea) ForeachAlloc(context0 CellAreaContextLike, widget0 WidgetLike, cell_area0 *cairo.RectangleInt, background_area0 *cairo.RectangleInt, callback0 CellAllocCallback) {
	var this1 *C.GtkCellArea
	var context1 *C.GtkCellAreaContext
	var widget1 *C.GtkWidget
	var cell_area1 *C.cairoRectangleInt
	var background_area1 *C.cairoRectangleInt
	var callback1 unsafe.Pointer
	if this0 != nil {
		this1 = this0.InheritedFromGtkCellArea()
	}
	if context0 != nil {
		context1 = context0.InheritedFromGtkCellAreaContext()
	}
	if widget0 != nil {
		widget1 = widget0.InheritedFromGtkWidget()
	}
	cell_area1 = (*C.cairoRectangleInt)(unsafe.Pointer(cell_area0))
	background_area1 = (*C.cairoRectangleInt)(unsafe.Pointer(background_area0))
	if callback0 != nil {
		callback1 = unsafe.Pointer(&callback0)}
	C._gtk_cell_area_foreach_alloc(this1, context1, widget1, cell_area1, background_area1, callback1)
}
func (this0 *CellArea) GetCellAllocation(context0 CellAreaContextLike, widget0 WidgetLike, renderer0 CellRendererLike, cell_area0 *cairo.RectangleInt) cairo.RectangleInt {
	var this1 *C.GtkCellArea
	var context1 *C.GtkCellAreaContext
	var widget1 *C.GtkWidget
	var renderer1 *C.GtkCellRenderer
	var cell_area1 *C.cairoRectangleInt
	var allocation1 C.cairoRectangleInt
	if this0 != nil {
		this1 = this0.InheritedFromGtkCellArea()
	}
	if context0 != nil {
		context1 = context0.InheritedFromGtkCellAreaContext()
	}
	if widget0 != nil {
		widget1 = widget0.InheritedFromGtkWidget()
	}
	if renderer0 != nil {
		renderer1 = renderer0.InheritedFromGtkCellRenderer()
	}
	cell_area1 = (*C.cairoRectangleInt)(unsafe.Pointer(cell_area0))
	C.gtk_cell_area_get_cell_allocation(this1, context1, widget1, renderer1, cell_area1, &allocation1)
	var allocation2 cairo.RectangleInt
	allocation2 = *(*cairo.RectangleInt)(unsafe.Pointer(&allocation1))
	return allocation2
}
func (this0 *CellArea) GetCellAtPosition(context0 CellAreaContextLike, widget0 WidgetLike, cell_area0 *cairo.RectangleInt, x0 int, y0 int) (cairo.RectangleInt, *CellRenderer) {
	var this1 *C.GtkCellArea
	var context1 *C.GtkCellAreaContext
	var widget1 *C.GtkWidget
	var cell_area1 *C.cairoRectangleInt
	var x1 C.int32_t
	var y1 C.int32_t
	var alloc_area1 C.cairoRectangleInt
	if this0 != nil {
		this1 = this0.InheritedFromGtkCellArea()
	}
	if context0 != nil {
		context1 = context0.InheritedFromGtkCellAreaContext()
	}
	if widget0 != nil {
		widget1 = widget0.InheritedFromGtkWidget()
	}
	cell_area1 = (*C.cairoRectangleInt)(unsafe.Pointer(cell_area0))
	x1 = C.int32_t(x0)
	y1 = C.int32_t(y0)
	ret1 := C.gtk_cell_area_get_cell_at_position(this1, context1, widget1, cell_area1, x1, y1, &alloc_area1)
	var alloc_area2 cairo.RectangleInt
	var ret2 *CellRenderer
	alloc_area2 = *(*cairo.RectangleInt)(unsafe.Pointer(&alloc_area1))
	ret2 = (*CellRenderer)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return alloc_area2, ret2
}
func (this0 *CellArea) GetCurrentPathString() string {
	var this1 *C.GtkCellArea
	if this0 != nil {
		this1 = this0.InheritedFromGtkCellArea()
	}
	ret1 := C.gtk_cell_area_get_current_path_string(this1)
	var ret2 string
	ret2 = C.GoString(ret1)
	return ret2
}
func (this0 *CellArea) GetEditWidget() *CellEditable {
	var this1 *C.GtkCellArea
	if this0 != nil {
		this1 = this0.InheritedFromGtkCellArea()
	}
	ret1 := C.gtk_cell_area_get_edit_widget(this1)
	var ret2 *CellEditable
	ret2 = (*CellEditable)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
func (this0 *CellArea) GetEditedCell() *CellRenderer {
	var this1 *C.GtkCellArea
	if this0 != nil {
		this1 = this0.InheritedFromGtkCellArea()
	}
	ret1 := C.gtk_cell_area_get_edited_cell(this1)
	var ret2 *CellRenderer
	ret2 = (*CellRenderer)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
func (this0 *CellArea) GetFocusCell() *CellRenderer {
	var this1 *C.GtkCellArea
	if this0 != nil {
		this1 = this0.InheritedFromGtkCellArea()
	}
	ret1 := C.gtk_cell_area_get_focus_cell(this1)
	var ret2 *CellRenderer
	ret2 = (*CellRenderer)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
func (this0 *CellArea) GetFocusFromSibling(renderer0 CellRendererLike) *CellRenderer {
	var this1 *C.GtkCellArea
	var renderer1 *C.GtkCellRenderer
	if this0 != nil {
		this1 = this0.InheritedFromGtkCellArea()
	}
	if renderer0 != nil {
		renderer1 = renderer0.InheritedFromGtkCellRenderer()
	}
	ret1 := C.gtk_cell_area_get_focus_from_sibling(this1, renderer1)
	var ret2 *CellRenderer
	ret2 = (*CellRenderer)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
func (this0 *CellArea) GetFocusSiblings(renderer0 CellRendererLike) []*CellRenderer {
	var this1 *C.GtkCellArea
	var renderer1 *C.GtkCellRenderer
	if this0 != nil {
		this1 = this0.InheritedFromGtkCellArea()
	}
	if renderer0 != nil {
		renderer1 = renderer0.InheritedFromGtkCellRenderer()
	}
	ret1 := C.gtk_cell_area_get_focus_siblings(this1, renderer1)
	var ret2 []*CellRenderer
	for iter := (*_GList)(unsafe.Pointer(ret1)); iter != nil; iter = iter.next {
		var elt *CellRenderer
		elt = (*CellRenderer)(gobject.ObjectWrap(unsafe.Pointer((*C.GtkCellRenderer)(iter.data)), true))
		ret2 = append(ret2, elt)
	}
	return ret2
}
func (this0 *CellArea) GetPreferredHeight(context0 CellAreaContextLike, widget0 WidgetLike) (int, int) {
	var this1 *C.GtkCellArea
	var context1 *C.GtkCellAreaContext
	var widget1 *C.GtkWidget
	var minimum_height1 C.int32_t
	var natural_height1 C.int32_t
	if this0 != nil {
		this1 = this0.InheritedFromGtkCellArea()
	}
	if context0 != nil {
		context1 = context0.InheritedFromGtkCellAreaContext()
	}
	if widget0 != nil {
		widget1 = widget0.InheritedFromGtkWidget()
	}
	C.gtk_cell_area_get_preferred_height(this1, context1, widget1, &minimum_height1, &natural_height1)
	var minimum_height2 int
	var natural_height2 int
	minimum_height2 = int(minimum_height1)
	natural_height2 = int(natural_height1)
	return minimum_height2, natural_height2
}
func (this0 *CellArea) GetPreferredHeightForWidth(context0 CellAreaContextLike, widget0 WidgetLike, width0 int) (int, int) {
	var this1 *C.GtkCellArea
	var context1 *C.GtkCellAreaContext
	var widget1 *C.GtkWidget
	var width1 C.int32_t
	var minimum_height1 C.int32_t
	var natural_height1 C.int32_t
	if this0 != nil {
		this1 = this0.InheritedFromGtkCellArea()
	}
	if context0 != nil {
		context1 = context0.InheritedFromGtkCellAreaContext()
	}
	if widget0 != nil {
		widget1 = widget0.InheritedFromGtkWidget()
	}
	width1 = C.int32_t(width0)
	C.gtk_cell_area_get_preferred_height_for_width(this1, context1, widget1, width1, &minimum_height1, &natural_height1)
	var minimum_height2 int
	var natural_height2 int
	minimum_height2 = int(minimum_height1)
	natural_height2 = int(natural_height1)
	return minimum_height2, natural_height2
}
func (this0 *CellArea) GetPreferredWidth(context0 CellAreaContextLike, widget0 WidgetLike) (int, int) {
	var this1 *C.GtkCellArea
	var context1 *C.GtkCellAreaContext
	var widget1 *C.GtkWidget
	var minimum_width1 C.int32_t
	var natural_width1 C.int32_t
	if this0 != nil {
		this1 = this0.InheritedFromGtkCellArea()
	}
	if context0 != nil {
		context1 = context0.InheritedFromGtkCellAreaContext()
	}
	if widget0 != nil {
		widget1 = widget0.InheritedFromGtkWidget()
	}
	C.gtk_cell_area_get_preferred_width(this1, context1, widget1, &minimum_width1, &natural_width1)
	var minimum_width2 int
	var natural_width2 int
	minimum_width2 = int(minimum_width1)
	natural_width2 = int(natural_width1)
	return minimum_width2, natural_width2
}
func (this0 *CellArea) GetPreferredWidthForHeight(context0 CellAreaContextLike, widget0 WidgetLike, height0 int) (int, int) {
	var this1 *C.GtkCellArea
	var context1 *C.GtkCellAreaContext
	var widget1 *C.GtkWidget
	var height1 C.int32_t
	var minimum_width1 C.int32_t
	var natural_width1 C.int32_t
	if this0 != nil {
		this1 = this0.InheritedFromGtkCellArea()
	}
	if context0 != nil {
		context1 = context0.InheritedFromGtkCellAreaContext()
	}
	if widget0 != nil {
		widget1 = widget0.InheritedFromGtkWidget()
	}
	height1 = C.int32_t(height0)
	C.gtk_cell_area_get_preferred_width_for_height(this1, context1, widget1, height1, &minimum_width1, &natural_width1)
	var minimum_width2 int
	var natural_width2 int
	minimum_width2 = int(minimum_width1)
	natural_width2 = int(natural_width1)
	return minimum_width2, natural_width2
}
func (this0 *CellArea) GetRequestMode() SizeRequestMode {
	var this1 *C.GtkCellArea
	if this0 != nil {
		this1 = this0.InheritedFromGtkCellArea()
	}
	ret1 := C.gtk_cell_area_get_request_mode(this1)
	var ret2 SizeRequestMode
	ret2 = SizeRequestMode(ret1)
	return ret2
}
func (this0 *CellArea) HasRenderer(renderer0 CellRendererLike) bool {
	var this1 *C.GtkCellArea
	var renderer1 *C.GtkCellRenderer
	if this0 != nil {
		this1 = this0.InheritedFromGtkCellArea()
	}
	if renderer0 != nil {
		renderer1 = renderer0.InheritedFromGtkCellRenderer()
	}
	ret1 := C.gtk_cell_area_has_renderer(this1, renderer1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *CellArea) InnerCellArea(widget0 WidgetLike, cell_area0 *cairo.RectangleInt) cairo.RectangleInt {
	var this1 *C.GtkCellArea
	var widget1 *C.GtkWidget
	var cell_area1 *C.cairoRectangleInt
	var inner_area1 C.cairoRectangleInt
	if this0 != nil {
		this1 = this0.InheritedFromGtkCellArea()
	}
	if widget0 != nil {
		widget1 = widget0.InheritedFromGtkWidget()
	}
	cell_area1 = (*C.cairoRectangleInt)(unsafe.Pointer(cell_area0))
	C.gtk_cell_area_inner_cell_area(this1, widget1, cell_area1, &inner_area1)
	var inner_area2 cairo.RectangleInt
	inner_area2 = *(*cairo.RectangleInt)(unsafe.Pointer(&inner_area1))
	return inner_area2
}
func (this0 *CellArea) IsActivatable() bool {
	var this1 *C.GtkCellArea
	if this0 != nil {
		this1 = this0.InheritedFromGtkCellArea()
	}
	ret1 := C.gtk_cell_area_is_activatable(this1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *CellArea) IsFocusSibling(renderer0 CellRendererLike, sibling0 CellRendererLike) bool {
	var this1 *C.GtkCellArea
	var renderer1 *C.GtkCellRenderer
	var sibling1 *C.GtkCellRenderer
	if this0 != nil {
		this1 = this0.InheritedFromGtkCellArea()
	}
	if renderer0 != nil {
		renderer1 = renderer0.InheritedFromGtkCellRenderer()
	}
	if sibling0 != nil {
		sibling1 = sibling0.InheritedFromGtkCellRenderer()
	}
	ret1 := C.gtk_cell_area_is_focus_sibling(this1, renderer1, sibling1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *CellArea) Remove(renderer0 CellRendererLike) {
	var this1 *C.GtkCellArea
	var renderer1 *C.GtkCellRenderer
	if this0 != nil {
		this1 = this0.InheritedFromGtkCellArea()
	}
	if renderer0 != nil {
		renderer1 = renderer0.InheritedFromGtkCellRenderer()
	}
	C.gtk_cell_area_remove(this1, renderer1)
}
func (this0 *CellArea) RemoveFocusSibling(renderer0 CellRendererLike, sibling0 CellRendererLike) {
	var this1 *C.GtkCellArea
	var renderer1 *C.GtkCellRenderer
	var sibling1 *C.GtkCellRenderer
	if this0 != nil {
		this1 = this0.InheritedFromGtkCellArea()
	}
	if renderer0 != nil {
		renderer1 = renderer0.InheritedFromGtkCellRenderer()
	}
	if sibling0 != nil {
		sibling1 = sibling0.InheritedFromGtkCellRenderer()
	}
	C.gtk_cell_area_remove_focus_sibling(this1, renderer1, sibling1)
}
func (this0 *CellArea) Render(context0 CellAreaContextLike, widget0 WidgetLike, cr0 *cairo.Context, background_area0 *cairo.RectangleInt, cell_area0 *cairo.RectangleInt, flags0 CellRendererState, paint_focus0 bool) {
	var this1 *C.GtkCellArea
	var context1 *C.GtkCellAreaContext
	var widget1 *C.GtkWidget
	var cr1 *C.cairoContext
	var background_area1 *C.cairoRectangleInt
	var cell_area1 *C.cairoRectangleInt
	var flags1 C.GtkCellRendererState
	var paint_focus1 C.int
	if this0 != nil {
		this1 = this0.InheritedFromGtkCellArea()
	}
	if context0 != nil {
		context1 = context0.InheritedFromGtkCellAreaContext()
	}
	if widget0 != nil {
		widget1 = widget0.InheritedFromGtkWidget()
	}
	if cr0 != nil {
		cr1 = (*C.cairoContext)(cr0.C)
	}
	background_area1 = (*C.cairoRectangleInt)(unsafe.Pointer(background_area0))
	cell_area1 = (*C.cairoRectangleInt)(unsafe.Pointer(cell_area0))
	flags1 = C.GtkCellRendererState(flags0)
	paint_focus1 = _GoBoolToCBool(paint_focus0)
	C.gtk_cell_area_render(this1, context1, widget1, cr1, background_area1, cell_area1, flags1, paint_focus1)
}
func (this0 *CellArea) RequestRenderer(renderer0 CellRendererLike, orientation0 Orientation, widget0 WidgetLike, for_size0 int) (int, int) {
	var this1 *C.GtkCellArea
	var renderer1 *C.GtkCellRenderer
	var orientation1 C.GtkOrientation
	var widget1 *C.GtkWidget
	var for_size1 C.int32_t
	var minimum_size1 C.int32_t
	var natural_size1 C.int32_t
	if this0 != nil {
		this1 = this0.InheritedFromGtkCellArea()
	}
	if renderer0 != nil {
		renderer1 = renderer0.InheritedFromGtkCellRenderer()
	}
	orientation1 = C.GtkOrientation(orientation0)
	if widget0 != nil {
		widget1 = widget0.InheritedFromGtkWidget()
	}
	for_size1 = C.int32_t(for_size0)
	C.gtk_cell_area_request_renderer(this1, renderer1, orientation1, widget1, for_size1, &minimum_size1, &natural_size1)
	var minimum_size2 int
	var natural_size2 int
	minimum_size2 = int(minimum_size1)
	natural_size2 = int(natural_size1)
	return minimum_size2, natural_size2
}
func (this0 *CellArea) SetFocusCell(renderer0 CellRendererLike) {
	var this1 *C.GtkCellArea
	var renderer1 *C.GtkCellRenderer
	if this0 != nil {
		this1 = this0.InheritedFromGtkCellArea()
	}
	if renderer0 != nil {
		renderer1 = renderer0.InheritedFromGtkCellRenderer()
	}
	C.gtk_cell_area_set_focus_cell(this1, renderer1)
}
func (this0 *CellArea) StopEditing(canceled0 bool) {
	var this1 *C.GtkCellArea
	var canceled1 C.int
	if this0 != nil {
		this1 = this0.InheritedFromGtkCellArea()
	}
	canceled1 = _GoBoolToCBool(canceled0)
	C.gtk_cell_area_stop_editing(this1, canceled1)
}
type CellAreaBoxLike interface {
	CellAreaLike
	InheritedFromGtkCellAreaBox() *C.GtkCellAreaBox
}

type CellAreaBox struct {
	CellArea
	BuildableImpl
	CellLayoutImpl
	OrientableImpl
}

func ToCellAreaBox(objlike gobject.ObjectLike) *CellAreaBox {
	c := objlike.InheritedFromGObject()
	if c == nil {
		return nil
	}
	t := (*CellAreaBox)(nil).GetStaticType()
	obj := gobject.ObjectGrabIfType(unsafe.Pointer(c), t)
	if obj != nil {
		return (*CellAreaBox)(obj)
	}
	panic("cannot cast to CellAreaBox")
}

func (this0 *CellAreaBox) InheritedFromGtkCellAreaBox() *C.GtkCellAreaBox {
	if this0 == nil {
		return nil
	}
	return (*C.GtkCellAreaBox)(this0.C)
}

func (this0 *CellAreaBox) GetStaticType() gobject.Type {
	return gobject.Type(C.gtk_cell_area_box_get_type())
}

func CellAreaBoxGetType() gobject.Type {
	return (*CellAreaBox)(nil).GetStaticType()
}
func NewCellAreaBox() *CellAreaBox {
	ret1 := C.gtk_cell_area_box_new()
	var ret2 *CellAreaBox
	ret2 = (*CellAreaBox)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
func (this0 *CellAreaBox) GetSpacing() int {
	var this1 *C.GtkCellAreaBox
	if this0 != nil {
		this1 = this0.InheritedFromGtkCellAreaBox()
	}
	ret1 := C.gtk_cell_area_box_get_spacing(this1)
	var ret2 int
	ret2 = int(ret1)
	return ret2
}
func (this0 *CellAreaBox) PackEnd(renderer0 CellRendererLike, expand0 bool, align0 bool, fixed0 bool) {
	var this1 *C.GtkCellAreaBox
	var renderer1 *C.GtkCellRenderer
	var expand1 C.int
	var align1 C.int
	var fixed1 C.int
	if this0 != nil {
		this1 = this0.InheritedFromGtkCellAreaBox()
	}
	if renderer0 != nil {
		renderer1 = renderer0.InheritedFromGtkCellRenderer()
	}
	expand1 = _GoBoolToCBool(expand0)
	align1 = _GoBoolToCBool(align0)
	fixed1 = _GoBoolToCBool(fixed0)
	C.gtk_cell_area_box_pack_end(this1, renderer1, expand1, align1, fixed1)
}
func (this0 *CellAreaBox) PackStart(renderer0 CellRendererLike, expand0 bool, align0 bool, fixed0 bool) {
	var this1 *C.GtkCellAreaBox
	var renderer1 *C.GtkCellRenderer
	var expand1 C.int
	var align1 C.int
	var fixed1 C.int
	if this0 != nil {
		this1 = this0.InheritedFromGtkCellAreaBox()
	}
	if renderer0 != nil {
		renderer1 = renderer0.InheritedFromGtkCellRenderer()
	}
	expand1 = _GoBoolToCBool(expand0)
	align1 = _GoBoolToCBool(align0)
	fixed1 = _GoBoolToCBool(fixed0)
	C.gtk_cell_area_box_pack_start(this1, renderer1, expand1, align1, fixed1)
}
func (this0 *CellAreaBox) SetSpacing(spacing0 int) {
	var this1 *C.GtkCellAreaBox
	var spacing1 C.int32_t
	if this0 != nil {
		this1 = this0.InheritedFromGtkCellAreaBox()
	}
	spacing1 = C.int32_t(spacing0)
	C.gtk_cell_area_box_set_spacing(this1, spacing1)
}
type CellAreaContextLike interface {
	gobject.ObjectLike
	InheritedFromGtkCellAreaContext() *C.GtkCellAreaContext
}

type CellAreaContext struct {
	gobject.Object
	
}

func ToCellAreaContext(objlike gobject.ObjectLike) *CellAreaContext {
	c := objlike.InheritedFromGObject()
	if c == nil {
		return nil
	}
	t := (*CellAreaContext)(nil).GetStaticType()
	obj := gobject.ObjectGrabIfType(unsafe.Pointer(c), t)
	if obj != nil {
		return (*CellAreaContext)(obj)
	}
	panic("cannot cast to CellAreaContext")
}

func (this0 *CellAreaContext) InheritedFromGtkCellAreaContext() *C.GtkCellAreaContext {
	if this0 == nil {
		return nil
	}
	return (*C.GtkCellAreaContext)(this0.C)
}

func (this0 *CellAreaContext) GetStaticType() gobject.Type {
	return gobject.Type(C.gtk_cell_area_context_get_type())
}

func CellAreaContextGetType() gobject.Type {
	return (*CellAreaContext)(nil).GetStaticType()
}
func (this0 *CellAreaContext) Allocate(width0 int, height0 int) {
	var this1 *C.GtkCellAreaContext
	var width1 C.int32_t
	var height1 C.int32_t
	if this0 != nil {
		this1 = this0.InheritedFromGtkCellAreaContext()
	}
	width1 = C.int32_t(width0)
	height1 = C.int32_t(height0)
	C.gtk_cell_area_context_allocate(this1, width1, height1)
}
func (this0 *CellAreaContext) GetAllocation() (int, int) {
	var this1 *C.GtkCellAreaContext
	var width1 C.int32_t
	var height1 C.int32_t
	if this0 != nil {
		this1 = this0.InheritedFromGtkCellAreaContext()
	}
	C.gtk_cell_area_context_get_allocation(this1, &width1, &height1)
	var width2 int
	var height2 int
	width2 = int(width1)
	height2 = int(height1)
	return width2, height2
}
func (this0 *CellAreaContext) GetArea() *CellArea {
	var this1 *C.GtkCellAreaContext
	if this0 != nil {
		this1 = this0.InheritedFromGtkCellAreaContext()
	}
	ret1 := C.gtk_cell_area_context_get_area(this1)
	var ret2 *CellArea
	ret2 = (*CellArea)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
func (this0 *CellAreaContext) GetPreferredHeight() (int, int) {
	var this1 *C.GtkCellAreaContext
	var minimum_height1 C.int32_t
	var natural_height1 C.int32_t
	if this0 != nil {
		this1 = this0.InheritedFromGtkCellAreaContext()
	}
	C.gtk_cell_area_context_get_preferred_height(this1, &minimum_height1, &natural_height1)
	var minimum_height2 int
	var natural_height2 int
	minimum_height2 = int(minimum_height1)
	natural_height2 = int(natural_height1)
	return minimum_height2, natural_height2
}
func (this0 *CellAreaContext) GetPreferredHeightForWidth(width0 int) (int, int) {
	var this1 *C.GtkCellAreaContext
	var width1 C.int32_t
	var minimum_height1 C.int32_t
	var natural_height1 C.int32_t
	if this0 != nil {
		this1 = this0.InheritedFromGtkCellAreaContext()
	}
	width1 = C.int32_t(width0)
	C.gtk_cell_area_context_get_preferred_height_for_width(this1, width1, &minimum_height1, &natural_height1)
	var minimum_height2 int
	var natural_height2 int
	minimum_height2 = int(minimum_height1)
	natural_height2 = int(natural_height1)
	return minimum_height2, natural_height2
}
func (this0 *CellAreaContext) GetPreferredWidth() (int, int) {
	var this1 *C.GtkCellAreaContext
	var minimum_width1 C.int32_t
	var natural_width1 C.int32_t
	if this0 != nil {
		this1 = this0.InheritedFromGtkCellAreaContext()
	}
	C.gtk_cell_area_context_get_preferred_width(this1, &minimum_width1, &natural_width1)
	var minimum_width2 int
	var natural_width2 int
	minimum_width2 = int(minimum_width1)
	natural_width2 = int(natural_width1)
	return minimum_width2, natural_width2
}
func (this0 *CellAreaContext) GetPreferredWidthForHeight(height0 int) (int, int) {
	var this1 *C.GtkCellAreaContext
	var height1 C.int32_t
	var minimum_width1 C.int32_t
	var natural_width1 C.int32_t
	if this0 != nil {
		this1 = this0.InheritedFromGtkCellAreaContext()
	}
	height1 = C.int32_t(height0)
	C.gtk_cell_area_context_get_preferred_width_for_height(this1, height1, &minimum_width1, &natural_width1)
	var minimum_width2 int
	var natural_width2 int
	minimum_width2 = int(minimum_width1)
	natural_width2 = int(natural_width1)
	return minimum_width2, natural_width2
}
func (this0 *CellAreaContext) PushPreferredHeight(minimum_height0 int, natural_height0 int) {
	var this1 *C.GtkCellAreaContext
	var minimum_height1 C.int32_t
	var natural_height1 C.int32_t
	if this0 != nil {
		this1 = this0.InheritedFromGtkCellAreaContext()
	}
	minimum_height1 = C.int32_t(minimum_height0)
	natural_height1 = C.int32_t(natural_height0)
	C.gtk_cell_area_context_push_preferred_height(this1, minimum_height1, natural_height1)
}
func (this0 *CellAreaContext) PushPreferredWidth(minimum_width0 int, natural_width0 int) {
	var this1 *C.GtkCellAreaContext
	var minimum_width1 C.int32_t
	var natural_width1 C.int32_t
	if this0 != nil {
		this1 = this0.InheritedFromGtkCellAreaContext()
	}
	minimum_width1 = C.int32_t(minimum_width0)
	natural_width1 = C.int32_t(natural_width0)
	C.gtk_cell_area_context_push_preferred_width(this1, minimum_width1, natural_width1)
}
func (this0 *CellAreaContext) Reset() {
	var this1 *C.GtkCellAreaContext
	if this0 != nil {
		this1 = this0.InheritedFromGtkCellAreaContext()
	}
	C.gtk_cell_area_context_reset(this1)
}
type CellCallback func(renderer *CellRenderer) bool
//export _GtkCellCallback_c_wrapper
func _GtkCellCallback_c_wrapper(renderer0 unsafe.Pointer, data0 unsafe.Pointer) int32 {
	var renderer1 *CellRenderer
	var data1 CellCallback
	renderer1 = (*CellRenderer)(gobject.ObjectWrap(unsafe.Pointer((*C.GtkCellRenderer)(renderer0)), true))
	data1 = *(*CellCallback)(data0)
	ret1 := data1(renderer1)
	var ret2 C.int
	ret2 = _GoBoolToCBool(ret1)
	return (int32)(ret2)
}
//export _GtkCellCallback_c_wrapper_once
func _GtkCellCallback_c_wrapper_once(renderer0 unsafe.Pointer, data0 unsafe.Pointer) int32 {
	ret := _GtkCellCallback_c_wrapper(renderer0, data0)
	gobject.Holder.Release(data0)
	return ret
}
type CellEditableLike interface {
	ImplementsGtkCellEditable() *C.GtkCellEditable
}

type CellEditable struct {
	gobject.Object
	CellEditableImpl
}

type CellEditableImpl struct {}

func ToCellEditable(objlike gobject.ObjectLike) *CellEditable {
	t := (*CellEditableImpl)(nil).GetStaticType()
	c := objlike.InheritedFromGObject()
	obj := gobject.ObjectGrabIfType(unsafe.Pointer(c), t)
	if obj != nil {
		return (*CellEditable)(obj)
	}
	panic("cannot cast to CellEditable")
}

func (this0 *CellEditableImpl) ImplementsGtkCellEditable() *C.GtkCellEditable {
	obj := uintptr(unsafe.Pointer(this0)) - unsafe.Sizeof(uintptr(0))
	return (*C.GtkCellEditable)((*gobject.Object)(unsafe.Pointer(obj)).C)
}

func (this0 *CellEditableImpl) GetStaticType() gobject.Type {
	return gobject.Type(C.gtk_cell_editable_get_type())
}

func CellEditableGetType() gobject.Type {
	return (*CellEditableImpl)(nil).GetStaticType()
}
func (this0 *CellEditableImpl) EditingDone() {
	var this1 *C.GtkCellEditable
	if this0 != nil {
		this1 = this0.ImplementsGtkCellEditable()}
	C.gtk_cell_editable_editing_done(this1)
}
func (this0 *CellEditableImpl) RemoveWidget() {
	var this1 *C.GtkCellEditable
	if this0 != nil {
		this1 = this0.ImplementsGtkCellEditable()}
	C.gtk_cell_editable_remove_widget(this1)
}
func (this0 *CellEditableImpl) StartEditing(event0 *gdk.Event) {
	var this1 *C.GtkCellEditable
	var event1 *C.GdkEvent
	if this0 != nil {
		this1 = this0.ImplementsGtkCellEditable()}
	C.gtk_cell_editable_start_editing(this1, event1)
}
type CellLayoutLike interface {
	ImplementsGtkCellLayout() *C.GtkCellLayout
}

type CellLayout struct {
	gobject.Object
	CellLayoutImpl
}

type CellLayoutImpl struct {}

func ToCellLayout(objlike gobject.ObjectLike) *CellLayout {
	t := (*CellLayoutImpl)(nil).GetStaticType()
	c := objlike.InheritedFromGObject()
	obj := gobject.ObjectGrabIfType(unsafe.Pointer(c), t)
	if obj != nil {
		return (*CellLayout)(obj)
	}
	panic("cannot cast to CellLayout")
}

func (this0 *CellLayoutImpl) ImplementsGtkCellLayout() *C.GtkCellLayout {
	obj := uintptr(unsafe.Pointer(this0)) - unsafe.Sizeof(uintptr(0))
	return (*C.GtkCellLayout)((*gobject.Object)(unsafe.Pointer(obj)).C)
}

func (this0 *CellLayoutImpl) GetStaticType() gobject.Type {
	return gobject.Type(C.gtk_cell_layout_get_type())
}

func CellLayoutGetType() gobject.Type {
	return (*CellLayoutImpl)(nil).GetStaticType()
}
func (this0 *CellLayoutImpl) AddAttribute(cell0 CellRendererLike, attribute0 string, column0 int) {
	var this1 *C.GtkCellLayout
	var cell1 *C.GtkCellRenderer
	var attribute1 *C.char
	var column1 C.int32_t
	if this0 != nil {
		this1 = this0.ImplementsGtkCellLayout()}
	if cell0 != nil {
		cell1 = cell0.InheritedFromGtkCellRenderer()
	}
	attribute1 = _GoStringToGString(attribute0)
	defer C.free(unsafe.Pointer(attribute1))
	column1 = C.int32_t(column0)
	C.gtk_cell_layout_add_attribute(this1, cell1, attribute1, column1)
}
func (this0 *CellLayoutImpl) Clear() {
	var this1 *C.GtkCellLayout
	if this0 != nil {
		this1 = this0.ImplementsGtkCellLayout()}
	C.gtk_cell_layout_clear(this1)
}
func (this0 *CellLayoutImpl) ClearAttributes(cell0 CellRendererLike) {
	var this1 *C.GtkCellLayout
	var cell1 *C.GtkCellRenderer
	if this0 != nil {
		this1 = this0.ImplementsGtkCellLayout()}
	if cell0 != nil {
		cell1 = cell0.InheritedFromGtkCellRenderer()
	}
	C.gtk_cell_layout_clear_attributes(this1, cell1)
}
func (this0 *CellLayoutImpl) GetArea() *CellArea {
	var this1 *C.GtkCellLayout
	if this0 != nil {
		this1 = this0.ImplementsGtkCellLayout()}
	ret1 := C.gtk_cell_layout_get_area(this1)
	var ret2 *CellArea
	ret2 = (*CellArea)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
func (this0 *CellLayoutImpl) GetCells() []*CellRenderer {
	var this1 *C.GtkCellLayout
	if this0 != nil {
		this1 = this0.ImplementsGtkCellLayout()}
	ret1 := C.gtk_cell_layout_get_cells(this1)
	var ret2 []*CellRenderer
	for iter := (*_GList)(unsafe.Pointer(ret1)); iter != nil; iter = iter.next {
		var elt *CellRenderer
		elt = (*CellRenderer)(gobject.ObjectWrap(unsafe.Pointer((*C.GtkCellRenderer)(iter.data)), true))
		ret2 = append(ret2, elt)
	}
	return ret2
}
func (this0 *CellLayoutImpl) PackEnd(cell0 CellRendererLike, expand0 bool) {
	var this1 *C.GtkCellLayout
	var cell1 *C.GtkCellRenderer
	var expand1 C.int
	if this0 != nil {
		this1 = this0.ImplementsGtkCellLayout()}
	if cell0 != nil {
		cell1 = cell0.InheritedFromGtkCellRenderer()
	}
	expand1 = _GoBoolToCBool(expand0)
	C.gtk_cell_layout_pack_end(this1, cell1, expand1)
}
func (this0 *CellLayoutImpl) PackStart(cell0 CellRendererLike, expand0 bool) {
	var this1 *C.GtkCellLayout
	var cell1 *C.GtkCellRenderer
	var expand1 C.int
	if this0 != nil {
		this1 = this0.ImplementsGtkCellLayout()}
	if cell0 != nil {
		cell1 = cell0.InheritedFromGtkCellRenderer()
	}
	expand1 = _GoBoolToCBool(expand0)
	C.gtk_cell_layout_pack_start(this1, cell1, expand1)
}
func (this0 *CellLayoutImpl) Reorder(cell0 CellRendererLike, position0 int) {
	var this1 *C.GtkCellLayout
	var cell1 *C.GtkCellRenderer
	var position1 C.int32_t
	if this0 != nil {
		this1 = this0.ImplementsGtkCellLayout()}
	if cell0 != nil {
		cell1 = cell0.InheritedFromGtkCellRenderer()
	}
	position1 = C.int32_t(position0)
	C.gtk_cell_layout_reorder(this1, cell1, position1)
}
func (this0 *CellLayoutImpl) SetCellDataFunc(cell0 CellRendererLike, func0 CellLayoutDataFunc) {
	var this1 *C.GtkCellLayout
	var cell1 *C.GtkCellRenderer
	var func1 unsafe.Pointer
	if this0 != nil {
		this1 = this0.ImplementsGtkCellLayout()}
	if cell0 != nil {
		cell1 = cell0.InheritedFromGtkCellRenderer()
	}
	if func0 != nil {
		func1 = unsafe.Pointer(&func0)}
	gobject.Holder.Grab(func1)
	C._gtk_cell_layout_set_cell_data_func(this1, cell1, func1)
}
type CellLayoutDataFunc func(cell_layout *CellLayout, cell *CellRenderer, tree_model *TreeModel, iter *TreeIter)
//export _GtkCellLayoutDataFunc_c_wrapper
func _GtkCellLayoutDataFunc_c_wrapper(cell_layout0 unsafe.Pointer, cell0 unsafe.Pointer, tree_model0 unsafe.Pointer, iter0 unsafe.Pointer, data0 unsafe.Pointer) {
	var cell_layout1 *CellLayout
	var cell1 *CellRenderer
	var tree_model1 *TreeModel
	var iter1 *TreeIter
	var data1 CellLayoutDataFunc
	cell_layout1 = (*CellLayout)(gobject.ObjectWrap(unsafe.Pointer((*C.GtkCellLayout)(cell_layout0)), true))
	cell1 = (*CellRenderer)(gobject.ObjectWrap(unsafe.Pointer((*C.GtkCellRenderer)(cell0)), true))
	tree_model1 = (*TreeModel)(gobject.ObjectWrap(unsafe.Pointer((*C.GtkTreeModel)(tree_model0)), true))
	iter1 = (*TreeIter)(unsafe.Pointer((*C.GtkTreeIter)(iter0)))
	data1 = *(*CellLayoutDataFunc)(data0)
	data1(cell_layout1, cell1, tree_model1, iter1)
}
//export _GtkCellLayoutDataFunc_c_wrapper_once
func _GtkCellLayoutDataFunc_c_wrapper_once(cell_layout0 unsafe.Pointer, cell0 unsafe.Pointer, tree_model0 unsafe.Pointer, iter0 unsafe.Pointer, data0 unsafe.Pointer) {
	_GtkCellLayoutDataFunc_c_wrapper(cell_layout0, cell0, tree_model0, iter0, data0)
	gobject.Holder.Release(data0)
}
type CellRendererLike interface {
	gobject.InitiallyUnownedLike
	InheritedFromGtkCellRenderer() *C.GtkCellRenderer
}

type CellRenderer struct {
	gobject.InitiallyUnowned
	
}

func ToCellRenderer(objlike gobject.ObjectLike) *CellRenderer {
	c := objlike.InheritedFromGObject()
	if c == nil {
		return nil
	}
	t := (*CellRenderer)(nil).GetStaticType()
	obj := gobject.ObjectGrabIfType(unsafe.Pointer(c), t)
	if obj != nil {
		return (*CellRenderer)(obj)
	}
	panic("cannot cast to CellRenderer")
}

func (this0 *CellRenderer) InheritedFromGtkCellRenderer() *C.GtkCellRenderer {
	if this0 == nil {
		return nil
	}
	return (*C.GtkCellRenderer)(this0.C)
}

func (this0 *CellRenderer) GetStaticType() gobject.Type {
	return gobject.Type(C.gtk_cell_renderer_get_type())
}

func CellRendererGetType() gobject.Type {
	return (*CellRenderer)(nil).GetStaticType()
}
func (this0 *CellRenderer) Activate(event0 *gdk.Event, widget0 WidgetLike, path0 string, background_area0 *cairo.RectangleInt, cell_area0 *cairo.RectangleInt, flags0 CellRendererState) bool {
	var this1 *C.GtkCellRenderer
	var event1 *C.GdkEvent
	var widget1 *C.GtkWidget
	var path1 *C.char
	var background_area1 *C.cairoRectangleInt
	var cell_area1 *C.cairoRectangleInt
	var flags1 C.GtkCellRendererState
	if this0 != nil {
		this1 = this0.InheritedFromGtkCellRenderer()
	}
	if widget0 != nil {
		widget1 = widget0.InheritedFromGtkWidget()
	}
	path1 = _GoStringToGString(path0)
	defer C.free(unsafe.Pointer(path1))
	background_area1 = (*C.cairoRectangleInt)(unsafe.Pointer(background_area0))
	cell_area1 = (*C.cairoRectangleInt)(unsafe.Pointer(cell_area0))
	flags1 = C.GtkCellRendererState(flags0)
	ret1 := C.gtk_cell_renderer_activate(this1, event1, widget1, path1, background_area1, cell_area1, flags1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *CellRenderer) GetAlignedArea(widget0 WidgetLike, flags0 CellRendererState, cell_area0 *cairo.RectangleInt) cairo.RectangleInt {
	var this1 *C.GtkCellRenderer
	var widget1 *C.GtkWidget
	var flags1 C.GtkCellRendererState
	var cell_area1 *C.cairoRectangleInt
	var aligned_area1 C.cairoRectangleInt
	if this0 != nil {
		this1 = this0.InheritedFromGtkCellRenderer()
	}
	if widget0 != nil {
		widget1 = widget0.InheritedFromGtkWidget()
	}
	flags1 = C.GtkCellRendererState(flags0)
	cell_area1 = (*C.cairoRectangleInt)(unsafe.Pointer(cell_area0))
	C.gtk_cell_renderer_get_aligned_area(this1, widget1, flags1, cell_area1, &aligned_area1)
	var aligned_area2 cairo.RectangleInt
	aligned_area2 = *(*cairo.RectangleInt)(unsafe.Pointer(&aligned_area1))
	return aligned_area2
}
func (this0 *CellRenderer) GetAlignment() (float64, float64) {
	var this1 *C.GtkCellRenderer
	var xalign1 C.float
	var yalign1 C.float
	if this0 != nil {
		this1 = this0.InheritedFromGtkCellRenderer()
	}
	C.gtk_cell_renderer_get_alignment(this1, &xalign1, &yalign1)
	var xalign2 float64
	var yalign2 float64
	xalign2 = float64(xalign1)
	yalign2 = float64(yalign1)
	return xalign2, yalign2
}
func (this0 *CellRenderer) GetFixedSize() (int, int) {
	var this1 *C.GtkCellRenderer
	var width1 C.int32_t
	var height1 C.int32_t
	if this0 != nil {
		this1 = this0.InheritedFromGtkCellRenderer()
	}
	C.gtk_cell_renderer_get_fixed_size(this1, &width1, &height1)
	var width2 int
	var height2 int
	width2 = int(width1)
	height2 = int(height1)
	return width2, height2
}
func (this0 *CellRenderer) GetPadding() (int, int) {
	var this1 *C.GtkCellRenderer
	var xpad1 C.int32_t
	var ypad1 C.int32_t
	if this0 != nil {
		this1 = this0.InheritedFromGtkCellRenderer()
	}
	C.gtk_cell_renderer_get_padding(this1, &xpad1, &ypad1)
	var xpad2 int
	var ypad2 int
	xpad2 = int(xpad1)
	ypad2 = int(ypad1)
	return xpad2, ypad2
}
func (this0 *CellRenderer) GetPreferredHeight(widget0 WidgetLike) (int, int) {
	var this1 *C.GtkCellRenderer
	var widget1 *C.GtkWidget
	var minimum_size1 C.int32_t
	var natural_size1 C.int32_t
	if this0 != nil {
		this1 = this0.InheritedFromGtkCellRenderer()
	}
	if widget0 != nil {
		widget1 = widget0.InheritedFromGtkWidget()
	}
	C.gtk_cell_renderer_get_preferred_height(this1, widget1, &minimum_size1, &natural_size1)
	var minimum_size2 int
	var natural_size2 int
	minimum_size2 = int(minimum_size1)
	natural_size2 = int(natural_size1)
	return minimum_size2, natural_size2
}
func (this0 *CellRenderer) GetPreferredHeightForWidth(widget0 WidgetLike, width0 int) (int, int) {
	var this1 *C.GtkCellRenderer
	var widget1 *C.GtkWidget
	var width1 C.int32_t
	var minimum_height1 C.int32_t
	var natural_height1 C.int32_t
	if this0 != nil {
		this1 = this0.InheritedFromGtkCellRenderer()
	}
	if widget0 != nil {
		widget1 = widget0.InheritedFromGtkWidget()
	}
	width1 = C.int32_t(width0)
	C.gtk_cell_renderer_get_preferred_height_for_width(this1, widget1, width1, &minimum_height1, &natural_height1)
	var minimum_height2 int
	var natural_height2 int
	minimum_height2 = int(minimum_height1)
	natural_height2 = int(natural_height1)
	return minimum_height2, natural_height2
}
func (this0 *CellRenderer) GetPreferredSize(widget0 WidgetLike) (Requisition, Requisition) {
	var this1 *C.GtkCellRenderer
	var widget1 *C.GtkWidget
	var minimum_size1 C.GtkRequisition
	var natural_size1 C.GtkRequisition
	if this0 != nil {
		this1 = this0.InheritedFromGtkCellRenderer()
	}
	if widget0 != nil {
		widget1 = widget0.InheritedFromGtkWidget()
	}
	C.gtk_cell_renderer_get_preferred_size(this1, widget1, &minimum_size1, &natural_size1)
	var minimum_size2 Requisition
	var natural_size2 Requisition
	minimum_size2 = *(*Requisition)(unsafe.Pointer(&minimum_size1))
	natural_size2 = *(*Requisition)(unsafe.Pointer(&natural_size1))
	return minimum_size2, natural_size2
}
func (this0 *CellRenderer) GetPreferredWidth(widget0 WidgetLike) (int, int) {
	var this1 *C.GtkCellRenderer
	var widget1 *C.GtkWidget
	var minimum_size1 C.int32_t
	var natural_size1 C.int32_t
	if this0 != nil {
		this1 = this0.InheritedFromGtkCellRenderer()
	}
	if widget0 != nil {
		widget1 = widget0.InheritedFromGtkWidget()
	}
	C.gtk_cell_renderer_get_preferred_width(this1, widget1, &minimum_size1, &natural_size1)
	var minimum_size2 int
	var natural_size2 int
	minimum_size2 = int(minimum_size1)
	natural_size2 = int(natural_size1)
	return minimum_size2, natural_size2
}
func (this0 *CellRenderer) GetPreferredWidthForHeight(widget0 WidgetLike, height0 int) (int, int) {
	var this1 *C.GtkCellRenderer
	var widget1 *C.GtkWidget
	var height1 C.int32_t
	var minimum_width1 C.int32_t
	var natural_width1 C.int32_t
	if this0 != nil {
		this1 = this0.InheritedFromGtkCellRenderer()
	}
	if widget0 != nil {
		widget1 = widget0.InheritedFromGtkWidget()
	}
	height1 = C.int32_t(height0)
	C.gtk_cell_renderer_get_preferred_width_for_height(this1, widget1, height1, &minimum_width1, &natural_width1)
	var minimum_width2 int
	var natural_width2 int
	minimum_width2 = int(minimum_width1)
	natural_width2 = int(natural_width1)
	return minimum_width2, natural_width2
}
func (this0 *CellRenderer) GetRequestMode() SizeRequestMode {
	var this1 *C.GtkCellRenderer
	if this0 != nil {
		this1 = this0.InheritedFromGtkCellRenderer()
	}
	ret1 := C.gtk_cell_renderer_get_request_mode(this1)
	var ret2 SizeRequestMode
	ret2 = SizeRequestMode(ret1)
	return ret2
}
func (this0 *CellRenderer) GetSensitive() bool {
	var this1 *C.GtkCellRenderer
	if this0 != nil {
		this1 = this0.InheritedFromGtkCellRenderer()
	}
	ret1 := C.gtk_cell_renderer_get_sensitive(this1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *CellRenderer) GetSize(widget0 WidgetLike, cell_area0 *cairo.RectangleInt) (int, int, int, int) {
	var this1 *C.GtkCellRenderer
	var widget1 *C.GtkWidget
	var cell_area1 *C.cairoRectangleInt
	var x_offset1 C.int32_t
	var y_offset1 C.int32_t
	var width1 C.int32_t
	var height1 C.int32_t
	if this0 != nil {
		this1 = this0.InheritedFromGtkCellRenderer()
	}
	if widget0 != nil {
		widget1 = widget0.InheritedFromGtkWidget()
	}
	cell_area1 = (*C.cairoRectangleInt)(unsafe.Pointer(cell_area0))
	C.gtk_cell_renderer_get_size(this1, widget1, cell_area1, &x_offset1, &y_offset1, &width1, &height1)
	var x_offset2 int
	var y_offset2 int
	var width2 int
	var height2 int
	x_offset2 = int(x_offset1)
	y_offset2 = int(y_offset1)
	width2 = int(width1)
	height2 = int(height1)
	return x_offset2, y_offset2, width2, height2
}
func (this0 *CellRenderer) GetState(widget0 WidgetLike, cell_state0 CellRendererState) StateFlags {
	var this1 *C.GtkCellRenderer
	var widget1 *C.GtkWidget
	var cell_state1 C.GtkCellRendererState
	if this0 != nil {
		this1 = this0.InheritedFromGtkCellRenderer()
	}
	if widget0 != nil {
		widget1 = widget0.InheritedFromGtkWidget()
	}
	cell_state1 = C.GtkCellRendererState(cell_state0)
	ret1 := C.gtk_cell_renderer_get_state(this1, widget1, cell_state1)
	var ret2 StateFlags
	ret2 = StateFlags(ret1)
	return ret2
}
func (this0 *CellRenderer) GetVisible() bool {
	var this1 *C.GtkCellRenderer
	if this0 != nil {
		this1 = this0.InheritedFromGtkCellRenderer()
	}
	ret1 := C.gtk_cell_renderer_get_visible(this1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *CellRenderer) IsActivatable() bool {
	var this1 *C.GtkCellRenderer
	if this0 != nil {
		this1 = this0.InheritedFromGtkCellRenderer()
	}
	ret1 := C.gtk_cell_renderer_is_activatable(this1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *CellRenderer) Render(cr0 *cairo.Context, widget0 WidgetLike, background_area0 *cairo.RectangleInt, cell_area0 *cairo.RectangleInt, flags0 CellRendererState) {
	var this1 *C.GtkCellRenderer
	var cr1 *C.cairoContext
	var widget1 *C.GtkWidget
	var background_area1 *C.cairoRectangleInt
	var cell_area1 *C.cairoRectangleInt
	var flags1 C.GtkCellRendererState
	if this0 != nil {
		this1 = this0.InheritedFromGtkCellRenderer()
	}
	if cr0 != nil {
		cr1 = (*C.cairoContext)(cr0.C)
	}
	if widget0 != nil {
		widget1 = widget0.InheritedFromGtkWidget()
	}
	background_area1 = (*C.cairoRectangleInt)(unsafe.Pointer(background_area0))
	cell_area1 = (*C.cairoRectangleInt)(unsafe.Pointer(cell_area0))
	flags1 = C.GtkCellRendererState(flags0)
	C.gtk_cell_renderer_render(this1, cr1, widget1, background_area1, cell_area1, flags1)
}
func (this0 *CellRenderer) SetAlignment(xalign0 float64, yalign0 float64) {
	var this1 *C.GtkCellRenderer
	var xalign1 C.float
	var yalign1 C.float
	if this0 != nil {
		this1 = this0.InheritedFromGtkCellRenderer()
	}
	xalign1 = C.float(xalign0)
	yalign1 = C.float(yalign0)
	C.gtk_cell_renderer_set_alignment(this1, xalign1, yalign1)
}
func (this0 *CellRenderer) SetFixedSize(width0 int, height0 int) {
	var this1 *C.GtkCellRenderer
	var width1 C.int32_t
	var height1 C.int32_t
	if this0 != nil {
		this1 = this0.InheritedFromGtkCellRenderer()
	}
	width1 = C.int32_t(width0)
	height1 = C.int32_t(height0)
	C.gtk_cell_renderer_set_fixed_size(this1, width1, height1)
}
func (this0 *CellRenderer) SetPadding(xpad0 int, ypad0 int) {
	var this1 *C.GtkCellRenderer
	var xpad1 C.int32_t
	var ypad1 C.int32_t
	if this0 != nil {
		this1 = this0.InheritedFromGtkCellRenderer()
	}
	xpad1 = C.int32_t(xpad0)
	ypad1 = C.int32_t(ypad0)
	C.gtk_cell_renderer_set_padding(this1, xpad1, ypad1)
}
func (this0 *CellRenderer) SetSensitive(sensitive0 bool) {
	var this1 *C.GtkCellRenderer
	var sensitive1 C.int
	if this0 != nil {
		this1 = this0.InheritedFromGtkCellRenderer()
	}
	sensitive1 = _GoBoolToCBool(sensitive0)
	C.gtk_cell_renderer_set_sensitive(this1, sensitive1)
}
func (this0 *CellRenderer) SetVisible(visible0 bool) {
	var this1 *C.GtkCellRenderer
	var visible1 C.int
	if this0 != nil {
		this1 = this0.InheritedFromGtkCellRenderer()
	}
	visible1 = _GoBoolToCBool(visible0)
	C.gtk_cell_renderer_set_visible(this1, visible1)
}
func (this0 *CellRenderer) StartEditing(event0 *gdk.Event, widget0 WidgetLike, path0 string, background_area0 *cairo.RectangleInt, cell_area0 *cairo.RectangleInt, flags0 CellRendererState) *CellEditable {
	var this1 *C.GtkCellRenderer
	var event1 *C.GdkEvent
	var widget1 *C.GtkWidget
	var path1 *C.char
	var background_area1 *C.cairoRectangleInt
	var cell_area1 *C.cairoRectangleInt
	var flags1 C.GtkCellRendererState
	if this0 != nil {
		this1 = this0.InheritedFromGtkCellRenderer()
	}
	if widget0 != nil {
		widget1 = widget0.InheritedFromGtkWidget()
	}
	path1 = _GoStringToGString(path0)
	defer C.free(unsafe.Pointer(path1))
	background_area1 = (*C.cairoRectangleInt)(unsafe.Pointer(background_area0))
	cell_area1 = (*C.cairoRectangleInt)(unsafe.Pointer(cell_area0))
	flags1 = C.GtkCellRendererState(flags0)
	ret1 := C.gtk_cell_renderer_start_editing(this1, event1, widget1, path1, background_area1, cell_area1, flags1)
	var ret2 *CellEditable
	ret2 = (*CellEditable)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
func (this0 *CellRenderer) StopEditing(canceled0 bool) {
	var this1 *C.GtkCellRenderer
	var canceled1 C.int
	if this0 != nil {
		this1 = this0.InheritedFromGtkCellRenderer()
	}
	canceled1 = _GoBoolToCBool(canceled0)
	C.gtk_cell_renderer_stop_editing(this1, canceled1)
}
type CellRendererAccelLike interface {
	CellRendererTextLike
	InheritedFromGtkCellRendererAccel() *C.GtkCellRendererAccel
}

type CellRendererAccel struct {
	CellRendererText
	
}

func ToCellRendererAccel(objlike gobject.ObjectLike) *CellRendererAccel {
	c := objlike.InheritedFromGObject()
	if c == nil {
		return nil
	}
	t := (*CellRendererAccel)(nil).GetStaticType()
	obj := gobject.ObjectGrabIfType(unsafe.Pointer(c), t)
	if obj != nil {
		return (*CellRendererAccel)(obj)
	}
	panic("cannot cast to CellRendererAccel")
}

func (this0 *CellRendererAccel) InheritedFromGtkCellRendererAccel() *C.GtkCellRendererAccel {
	if this0 == nil {
		return nil
	}
	return (*C.GtkCellRendererAccel)(this0.C)
}

func (this0 *CellRendererAccel) GetStaticType() gobject.Type {
	return gobject.Type(C.gtk_cell_renderer_accel_get_type())
}

func CellRendererAccelGetType() gobject.Type {
	return (*CellRendererAccel)(nil).GetStaticType()
}
func NewCellRendererAccel() *CellRendererAccel {
	ret1 := C.gtk_cell_renderer_accel_new()
	var ret2 *CellRendererAccel
	ret2 = (*CellRendererAccel)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
type CellRendererAccelMode C.uint32_t
const (
	CellRendererAccelModeGtk CellRendererAccelMode = 0
	CellRendererAccelModeOther CellRendererAccelMode = 1
)
type CellRendererComboLike interface {
	CellRendererTextLike
	InheritedFromGtkCellRendererCombo() *C.GtkCellRendererCombo
}

type CellRendererCombo struct {
	CellRendererText
	
}

func ToCellRendererCombo(objlike gobject.ObjectLike) *CellRendererCombo {
	c := objlike.InheritedFromGObject()
	if c == nil {
		return nil
	}
	t := (*CellRendererCombo)(nil).GetStaticType()
	obj := gobject.ObjectGrabIfType(unsafe.Pointer(c), t)
	if obj != nil {
		return (*CellRendererCombo)(obj)
	}
	panic("cannot cast to CellRendererCombo")
}

func (this0 *CellRendererCombo) InheritedFromGtkCellRendererCombo() *C.GtkCellRendererCombo {
	if this0 == nil {
		return nil
	}
	return (*C.GtkCellRendererCombo)(this0.C)
}

func (this0 *CellRendererCombo) GetStaticType() gobject.Type {
	return gobject.Type(C.gtk_cell_renderer_combo_get_type())
}

func CellRendererComboGetType() gobject.Type {
	return (*CellRendererCombo)(nil).GetStaticType()
}
func NewCellRendererCombo() *CellRendererCombo {
	ret1 := C.gtk_cell_renderer_combo_new()
	var ret2 *CellRendererCombo
	ret2 = (*CellRendererCombo)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
type CellRendererMode C.uint32_t
const (
	CellRendererModeInert CellRendererMode = 0
	CellRendererModeActivatable CellRendererMode = 1
	CellRendererModeEditable CellRendererMode = 2
)
type CellRendererPixbufLike interface {
	CellRendererLike
	InheritedFromGtkCellRendererPixbuf() *C.GtkCellRendererPixbuf
}

type CellRendererPixbuf struct {
	CellRenderer
	
}

func ToCellRendererPixbuf(objlike gobject.ObjectLike) *CellRendererPixbuf {
	c := objlike.InheritedFromGObject()
	if c == nil {
		return nil
	}
	t := (*CellRendererPixbuf)(nil).GetStaticType()
	obj := gobject.ObjectGrabIfType(unsafe.Pointer(c), t)
	if obj != nil {
		return (*CellRendererPixbuf)(obj)
	}
	panic("cannot cast to CellRendererPixbuf")
}

func (this0 *CellRendererPixbuf) InheritedFromGtkCellRendererPixbuf() *C.GtkCellRendererPixbuf {
	if this0 == nil {
		return nil
	}
	return (*C.GtkCellRendererPixbuf)(this0.C)
}

func (this0 *CellRendererPixbuf) GetStaticType() gobject.Type {
	return gobject.Type(C.gtk_cell_renderer_pixbuf_get_type())
}

func CellRendererPixbufGetType() gobject.Type {
	return (*CellRendererPixbuf)(nil).GetStaticType()
}
func NewCellRendererPixbuf() *CellRendererPixbuf {
	ret1 := C.gtk_cell_renderer_pixbuf_new()
	var ret2 *CellRendererPixbuf
	ret2 = (*CellRendererPixbuf)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
type CellRendererProgressLike interface {
	CellRendererLike
	InheritedFromGtkCellRendererProgress() *C.GtkCellRendererProgress
}

type CellRendererProgress struct {
	CellRenderer
	OrientableImpl
}

func ToCellRendererProgress(objlike gobject.ObjectLike) *CellRendererProgress {
	c := objlike.InheritedFromGObject()
	if c == nil {
		return nil
	}
	t := (*CellRendererProgress)(nil).GetStaticType()
	obj := gobject.ObjectGrabIfType(unsafe.Pointer(c), t)
	if obj != nil {
		return (*CellRendererProgress)(obj)
	}
	panic("cannot cast to CellRendererProgress")
}

func (this0 *CellRendererProgress) InheritedFromGtkCellRendererProgress() *C.GtkCellRendererProgress {
	if this0 == nil {
		return nil
	}
	return (*C.GtkCellRendererProgress)(this0.C)
}

func (this0 *CellRendererProgress) GetStaticType() gobject.Type {
	return gobject.Type(C.gtk_cell_renderer_progress_get_type())
}

func CellRendererProgressGetType() gobject.Type {
	return (*CellRendererProgress)(nil).GetStaticType()
}
func NewCellRendererProgress() *CellRendererProgress {
	ret1 := C.gtk_cell_renderer_progress_new()
	var ret2 *CellRendererProgress
	ret2 = (*CellRendererProgress)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
type CellRendererSpinLike interface {
	CellRendererTextLike
	InheritedFromGtkCellRendererSpin() *C.GtkCellRendererSpin
}

type CellRendererSpin struct {
	CellRendererText
	
}

func ToCellRendererSpin(objlike gobject.ObjectLike) *CellRendererSpin {
	c := objlike.InheritedFromGObject()
	if c == nil {
		return nil
	}
	t := (*CellRendererSpin)(nil).GetStaticType()
	obj := gobject.ObjectGrabIfType(unsafe.Pointer(c), t)
	if obj != nil {
		return (*CellRendererSpin)(obj)
	}
	panic("cannot cast to CellRendererSpin")
}

func (this0 *CellRendererSpin) InheritedFromGtkCellRendererSpin() *C.GtkCellRendererSpin {
	if this0 == nil {
		return nil
	}
	return (*C.GtkCellRendererSpin)(this0.C)
}

func (this0 *CellRendererSpin) GetStaticType() gobject.Type {
	return gobject.Type(C.gtk_cell_renderer_spin_get_type())
}

func CellRendererSpinGetType() gobject.Type {
	return (*CellRendererSpin)(nil).GetStaticType()
}
func NewCellRendererSpin() *CellRendererSpin {
	ret1 := C.gtk_cell_renderer_spin_new()
	var ret2 *CellRendererSpin
	ret2 = (*CellRendererSpin)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
type CellRendererSpinnerLike interface {
	CellRendererLike
	InheritedFromGtkCellRendererSpinner() *C.GtkCellRendererSpinner
}

type CellRendererSpinner struct {
	CellRenderer
	
}

func ToCellRendererSpinner(objlike gobject.ObjectLike) *CellRendererSpinner {
	c := objlike.InheritedFromGObject()
	if c == nil {
		return nil
	}
	t := (*CellRendererSpinner)(nil).GetStaticType()
	obj := gobject.ObjectGrabIfType(unsafe.Pointer(c), t)
	if obj != nil {
		return (*CellRendererSpinner)(obj)
	}
	panic("cannot cast to CellRendererSpinner")
}

func (this0 *CellRendererSpinner) InheritedFromGtkCellRendererSpinner() *C.GtkCellRendererSpinner {
	if this0 == nil {
		return nil
	}
	return (*C.GtkCellRendererSpinner)(this0.C)
}

func (this0 *CellRendererSpinner) GetStaticType() gobject.Type {
	return gobject.Type(C.gtk_cell_renderer_spinner_get_type())
}

func CellRendererSpinnerGetType() gobject.Type {
	return (*CellRendererSpinner)(nil).GetStaticType()
}
func NewCellRendererSpinner() *CellRendererSpinner {
	ret1 := C.gtk_cell_renderer_spinner_new()
	var ret2 *CellRendererSpinner
	ret2 = (*CellRendererSpinner)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
type CellRendererState C.uint32_t
const (
	CellRendererStateSelected CellRendererState = 1
	CellRendererStatePrelit CellRendererState = 2
	CellRendererStateInsensitive CellRendererState = 4
	CellRendererStateSorted CellRendererState = 8
	CellRendererStateFocused CellRendererState = 16
)
type CellRendererTextLike interface {
	CellRendererLike
	InheritedFromGtkCellRendererText() *C.GtkCellRendererText
}

type CellRendererText struct {
	CellRenderer
	
}

func ToCellRendererText(objlike gobject.ObjectLike) *CellRendererText {
	c := objlike.InheritedFromGObject()
	if c == nil {
		return nil
	}
	t := (*CellRendererText)(nil).GetStaticType()
	obj := gobject.ObjectGrabIfType(unsafe.Pointer(c), t)
	if obj != nil {
		return (*CellRendererText)(obj)
	}
	panic("cannot cast to CellRendererText")
}

func (this0 *CellRendererText) InheritedFromGtkCellRendererText() *C.GtkCellRendererText {
	if this0 == nil {
		return nil
	}
	return (*C.GtkCellRendererText)(this0.C)
}

func (this0 *CellRendererText) GetStaticType() gobject.Type {
	return gobject.Type(C.gtk_cell_renderer_text_get_type())
}

func CellRendererTextGetType() gobject.Type {
	return (*CellRendererText)(nil).GetStaticType()
}
func NewCellRendererText() *CellRendererText {
	ret1 := C.gtk_cell_renderer_text_new()
	var ret2 *CellRendererText
	ret2 = (*CellRendererText)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
func (this0 *CellRendererText) SetFixedHeightFromFont(number_of_rows0 int) {
	var this1 *C.GtkCellRendererText
	var number_of_rows1 C.int32_t
	if this0 != nil {
		this1 = this0.InheritedFromGtkCellRendererText()
	}
	number_of_rows1 = C.int32_t(number_of_rows0)
	C.gtk_cell_renderer_text_set_fixed_height_from_font(this1, number_of_rows1)
}
type CellRendererToggleLike interface {
	CellRendererLike
	InheritedFromGtkCellRendererToggle() *C.GtkCellRendererToggle
}

type CellRendererToggle struct {
	CellRenderer
	
}

func ToCellRendererToggle(objlike gobject.ObjectLike) *CellRendererToggle {
	c := objlike.InheritedFromGObject()
	if c == nil {
		return nil
	}
	t := (*CellRendererToggle)(nil).GetStaticType()
	obj := gobject.ObjectGrabIfType(unsafe.Pointer(c), t)
	if obj != nil {
		return (*CellRendererToggle)(obj)
	}
	panic("cannot cast to CellRendererToggle")
}

func (this0 *CellRendererToggle) InheritedFromGtkCellRendererToggle() *C.GtkCellRendererToggle {
	if this0 == nil {
		return nil
	}
	return (*C.GtkCellRendererToggle)(this0.C)
}

func (this0 *CellRendererToggle) GetStaticType() gobject.Type {
	return gobject.Type(C.gtk_cell_renderer_toggle_get_type())
}

func CellRendererToggleGetType() gobject.Type {
	return (*CellRendererToggle)(nil).GetStaticType()
}
func NewCellRendererToggle() *CellRendererToggle {
	ret1 := C.gtk_cell_renderer_toggle_new()
	var ret2 *CellRendererToggle
	ret2 = (*CellRendererToggle)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
func (this0 *CellRendererToggle) GetActivatable() bool {
	var this1 *C.GtkCellRendererToggle
	if this0 != nil {
		this1 = this0.InheritedFromGtkCellRendererToggle()
	}
	ret1 := C.gtk_cell_renderer_toggle_get_activatable(this1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *CellRendererToggle) GetActive() bool {
	var this1 *C.GtkCellRendererToggle
	if this0 != nil {
		this1 = this0.InheritedFromGtkCellRendererToggle()
	}
	ret1 := C.gtk_cell_renderer_toggle_get_active(this1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *CellRendererToggle) GetRadio() bool {
	var this1 *C.GtkCellRendererToggle
	if this0 != nil {
		this1 = this0.InheritedFromGtkCellRendererToggle()
	}
	ret1 := C.gtk_cell_renderer_toggle_get_radio(this1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *CellRendererToggle) SetActivatable(setting0 bool) {
	var this1 *C.GtkCellRendererToggle
	var setting1 C.int
	if this0 != nil {
		this1 = this0.InheritedFromGtkCellRendererToggle()
	}
	setting1 = _GoBoolToCBool(setting0)
	C.gtk_cell_renderer_toggle_set_activatable(this1, setting1)
}
func (this0 *CellRendererToggle) SetActive(setting0 bool) {
	var this1 *C.GtkCellRendererToggle
	var setting1 C.int
	if this0 != nil {
		this1 = this0.InheritedFromGtkCellRendererToggle()
	}
	setting1 = _GoBoolToCBool(setting0)
	C.gtk_cell_renderer_toggle_set_active(this1, setting1)
}
func (this0 *CellRendererToggle) SetRadio(radio0 bool) {
	var this1 *C.GtkCellRendererToggle
	var radio1 C.int
	if this0 != nil {
		this1 = this0.InheritedFromGtkCellRendererToggle()
	}
	radio1 = _GoBoolToCBool(radio0)
	C.gtk_cell_renderer_toggle_set_radio(this1, radio1)
}
type CellViewLike interface {
	WidgetLike
	InheritedFromGtkCellView() *C.GtkCellView
}

type CellView struct {
	Widget
	atk.ImplementorIfaceImpl
	BuildableImpl
	CellLayoutImpl
	OrientableImpl
}

func ToCellView(objlike gobject.ObjectLike) *CellView {
	c := objlike.InheritedFromGObject()
	if c == nil {
		return nil
	}
	t := (*CellView)(nil).GetStaticType()
	obj := gobject.ObjectGrabIfType(unsafe.Pointer(c), t)
	if obj != nil {
		return (*CellView)(obj)
	}
	panic("cannot cast to CellView")
}

func (this0 *CellView) InheritedFromGtkCellView() *C.GtkCellView {
	if this0 == nil {
		return nil
	}
	return (*C.GtkCellView)(this0.C)
}

func (this0 *CellView) GetStaticType() gobject.Type {
	return gobject.Type(C.gtk_cell_view_get_type())
}

func CellViewGetType() gobject.Type {
	return (*CellView)(nil).GetStaticType()
}
func NewCellView() *CellView {
	ret1 := C.gtk_cell_view_new()
	var ret2 *CellView
	ret2 = (*CellView)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
func NewCellViewWithContext(area0 CellAreaLike, context0 CellAreaContextLike) *CellView {
	var area1 *C.GtkCellArea
	var context1 *C.GtkCellAreaContext
	if area0 != nil {
		area1 = area0.InheritedFromGtkCellArea()
	}
	if context0 != nil {
		context1 = context0.InheritedFromGtkCellAreaContext()
	}
	ret1 := C.gtk_cell_view_new_with_context(area1, context1)
	var ret2 *CellView
	ret2 = (*CellView)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
func NewCellViewWithMarkup(markup0 string) *CellView {
	var markup1 *C.char
	markup1 = _GoStringToGString(markup0)
	defer C.free(unsafe.Pointer(markup1))
	ret1 := C.gtk_cell_view_new_with_markup(markup1)
	var ret2 *CellView
	ret2 = (*CellView)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
func NewCellViewWithPixbuf(pixbuf0 gdkpixbuf.PixbufLike) *CellView {
	var pixbuf1 *C.GdkPixbuf
	if pixbuf0 != nil {
		pixbuf1 = pixbuf0.InheritedFromGdkPixbuf()
	}
	ret1 := C.gtk_cell_view_new_with_pixbuf(pixbuf1)
	var ret2 *CellView
	ret2 = (*CellView)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
func NewCellViewWithText(text0 string) *CellView {
	var text1 *C.char
	text1 = _GoStringToGString(text0)
	defer C.free(unsafe.Pointer(text1))
	ret1 := C.gtk_cell_view_new_with_text(text1)
	var ret2 *CellView
	ret2 = (*CellView)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
func (this0 *CellView) GetDisplayedRow() *TreePath {
	var this1 *C.GtkCellView
	if this0 != nil {
		this1 = this0.InheritedFromGtkCellView()
	}
	ret1 := C.gtk_cell_view_get_displayed_row(this1)
	var ret2 *TreePath
	ret2 = (*TreePath)(unsafe.Pointer(ret1))
	return ret2
}
func (this0 *CellView) GetDrawSensitive() bool {
	var this1 *C.GtkCellView
	if this0 != nil {
		this1 = this0.InheritedFromGtkCellView()
	}
	ret1 := C.gtk_cell_view_get_draw_sensitive(this1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *CellView) GetFitModel() bool {
	var this1 *C.GtkCellView
	if this0 != nil {
		this1 = this0.InheritedFromGtkCellView()
	}
	ret1 := C.gtk_cell_view_get_fit_model(this1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *CellView) GetModel() *TreeModel {
	var this1 *C.GtkCellView
	if this0 != nil {
		this1 = this0.InheritedFromGtkCellView()
	}
	ret1 := C.gtk_cell_view_get_model(this1)
	var ret2 *TreeModel
	ret2 = (*TreeModel)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
func (this0 *CellView) GetSizeOfRow(path0 *TreePath) (Requisition, bool) {
	var this1 *C.GtkCellView
	var path1 *C.GtkTreePath
	var requisition1 C.GtkRequisition
	if this0 != nil {
		this1 = this0.InheritedFromGtkCellView()
	}
	path1 = (*C.GtkTreePath)(unsafe.Pointer(path0))
	ret1 := C.gtk_cell_view_get_size_of_row(this1, path1, &requisition1)
	var requisition2 Requisition
	var ret2 bool
	requisition2 = *(*Requisition)(unsafe.Pointer(&requisition1))
	ret2 = ret1 != 0
	return requisition2, ret2
}
func (this0 *CellView) SetBackgroundColor(color0 *gdk.Color) {
	var this1 *C.GtkCellView
	var color1 *C.GdkColor
	if this0 != nil {
		this1 = this0.InheritedFromGtkCellView()
	}
	color1 = (*C.GdkColor)(unsafe.Pointer(color0))
	C.gtk_cell_view_set_background_color(this1, color1)
}
func (this0 *CellView) SetBackgroundRGBA(rgba0 *gdk.RGBA) {
	var this1 *C.GtkCellView
	var rgba1 *C.GdkRGBA
	if this0 != nil {
		this1 = this0.InheritedFromGtkCellView()
	}
	rgba1 = (*C.GdkRGBA)(unsafe.Pointer(rgba0))
	C.gtk_cell_view_set_background_rgba(this1, rgba1)
}
func (this0 *CellView) SetDisplayedRow(path0 *TreePath) {
	var this1 *C.GtkCellView
	var path1 *C.GtkTreePath
	if this0 != nil {
		this1 = this0.InheritedFromGtkCellView()
	}
	path1 = (*C.GtkTreePath)(unsafe.Pointer(path0))
	C.gtk_cell_view_set_displayed_row(this1, path1)
}
func (this0 *CellView) SetDrawSensitive(draw_sensitive0 bool) {
	var this1 *C.GtkCellView
	var draw_sensitive1 C.int
	if this0 != nil {
		this1 = this0.InheritedFromGtkCellView()
	}
	draw_sensitive1 = _GoBoolToCBool(draw_sensitive0)
	C.gtk_cell_view_set_draw_sensitive(this1, draw_sensitive1)
}
func (this0 *CellView) SetFitModel(fit_model0 bool) {
	var this1 *C.GtkCellView
	var fit_model1 C.int
	if this0 != nil {
		this1 = this0.InheritedFromGtkCellView()
	}
	fit_model1 = _GoBoolToCBool(fit_model0)
	C.gtk_cell_view_set_fit_model(this1, fit_model1)
}
func (this0 *CellView) SetModel(model0 TreeModelLike) {
	var this1 *C.GtkCellView
	var model1 *C.GtkTreeModel
	if this0 != nil {
		this1 = this0.InheritedFromGtkCellView()
	}
	if model0 != nil {
		model1 = model0.ImplementsGtkTreeModel()}
	C.gtk_cell_view_set_model(this1, model1)
}
type CheckButtonLike interface {
	ToggleButtonLike
	InheritedFromGtkCheckButton() *C.GtkCheckButton
}

type CheckButton struct {
	ToggleButton
	atk.ImplementorIfaceImpl
	ActivatableImpl
	BuildableImpl
}

func ToCheckButton(objlike gobject.ObjectLike) *CheckButton {
	c := objlike.InheritedFromGObject()
	if c == nil {
		return nil
	}
	t := (*CheckButton)(nil).GetStaticType()
	obj := gobject.ObjectGrabIfType(unsafe.Pointer(c), t)
	if obj != nil {
		return (*CheckButton)(obj)
	}
	panic("cannot cast to CheckButton")
}

func (this0 *CheckButton) InheritedFromGtkCheckButton() *C.GtkCheckButton {
	if this0 == nil {
		return nil
	}
	return (*C.GtkCheckButton)(this0.C)
}

func (this0 *CheckButton) GetStaticType() gobject.Type {
	return gobject.Type(C.gtk_check_button_get_type())
}

func CheckButtonGetType() gobject.Type {
	return (*CheckButton)(nil).GetStaticType()
}
func NewCheckButton() *CheckButton {
	ret1 := C.gtk_check_button_new()
	var ret2 *CheckButton
	ret2 = (*CheckButton)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
func NewCheckButtonWithLabel(label0 string) *CheckButton {
	var label1 *C.char
	label1 = _GoStringToGString(label0)
	defer C.free(unsafe.Pointer(label1))
	ret1 := C.gtk_check_button_new_with_label(label1)
	var ret2 *CheckButton
	ret2 = (*CheckButton)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
func NewCheckButtonWithMnemonic(label0 string) *CheckButton {
	var label1 *C.char
	label1 = _GoStringToGString(label0)
	defer C.free(unsafe.Pointer(label1))
	ret1 := C.gtk_check_button_new_with_mnemonic(label1)
	var ret2 *CheckButton
	ret2 = (*CheckButton)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
type CheckMenuItemLike interface {
	MenuItemLike
	InheritedFromGtkCheckMenuItem() *C.GtkCheckMenuItem
}

type CheckMenuItem struct {
	MenuItem
	atk.ImplementorIfaceImpl
	ActivatableImpl
	BuildableImpl
}

func ToCheckMenuItem(objlike gobject.ObjectLike) *CheckMenuItem {
	c := objlike.InheritedFromGObject()
	if c == nil {
		return nil
	}
	t := (*CheckMenuItem)(nil).GetStaticType()
	obj := gobject.ObjectGrabIfType(unsafe.Pointer(c), t)
	if obj != nil {
		return (*CheckMenuItem)(obj)
	}
	panic("cannot cast to CheckMenuItem")
}

func (this0 *CheckMenuItem) InheritedFromGtkCheckMenuItem() *C.GtkCheckMenuItem {
	if this0 == nil {
		return nil
	}
	return (*C.GtkCheckMenuItem)(this0.C)
}

func (this0 *CheckMenuItem) GetStaticType() gobject.Type {
	return gobject.Type(C.gtk_check_menu_item_get_type())
}

func CheckMenuItemGetType() gobject.Type {
	return (*CheckMenuItem)(nil).GetStaticType()
}
func NewCheckMenuItem() *CheckMenuItem {
	ret1 := C.gtk_check_menu_item_new()
	var ret2 *CheckMenuItem
	ret2 = (*CheckMenuItem)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
func NewCheckMenuItemWithLabel(label0 string) *CheckMenuItem {
	var label1 *C.char
	label1 = _GoStringToGString(label0)
	defer C.free(unsafe.Pointer(label1))
	ret1 := C.gtk_check_menu_item_new_with_label(label1)
	var ret2 *CheckMenuItem
	ret2 = (*CheckMenuItem)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
func NewCheckMenuItemWithMnemonic(label0 string) *CheckMenuItem {
	var label1 *C.char
	label1 = _GoStringToGString(label0)
	defer C.free(unsafe.Pointer(label1))
	ret1 := C.gtk_check_menu_item_new_with_mnemonic(label1)
	var ret2 *CheckMenuItem
	ret2 = (*CheckMenuItem)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
func (this0 *CheckMenuItem) GetActive() bool {
	var this1 *C.GtkCheckMenuItem
	if this0 != nil {
		this1 = this0.InheritedFromGtkCheckMenuItem()
	}
	ret1 := C.gtk_check_menu_item_get_active(this1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *CheckMenuItem) GetDrawAsRadio() bool {
	var this1 *C.GtkCheckMenuItem
	if this0 != nil {
		this1 = this0.InheritedFromGtkCheckMenuItem()
	}
	ret1 := C.gtk_check_menu_item_get_draw_as_radio(this1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *CheckMenuItem) GetInconsistent() bool {
	var this1 *C.GtkCheckMenuItem
	if this0 != nil {
		this1 = this0.InheritedFromGtkCheckMenuItem()
	}
	ret1 := C.gtk_check_menu_item_get_inconsistent(this1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *CheckMenuItem) SetActive(is_active0 bool) {
	var this1 *C.GtkCheckMenuItem
	var is_active1 C.int
	if this0 != nil {
		this1 = this0.InheritedFromGtkCheckMenuItem()
	}
	is_active1 = _GoBoolToCBool(is_active0)
	C.gtk_check_menu_item_set_active(this1, is_active1)
}
func (this0 *CheckMenuItem) SetDrawAsRadio(draw_as_radio0 bool) {
	var this1 *C.GtkCheckMenuItem
	var draw_as_radio1 C.int
	if this0 != nil {
		this1 = this0.InheritedFromGtkCheckMenuItem()
	}
	draw_as_radio1 = _GoBoolToCBool(draw_as_radio0)
	C.gtk_check_menu_item_set_draw_as_radio(this1, draw_as_radio1)
}
func (this0 *CheckMenuItem) SetInconsistent(setting0 bool) {
	var this1 *C.GtkCheckMenuItem
	var setting1 C.int
	if this0 != nil {
		this1 = this0.InheritedFromGtkCheckMenuItem()
	}
	setting1 = _GoBoolToCBool(setting0)
	C.gtk_check_menu_item_set_inconsistent(this1, setting1)
}
func (this0 *CheckMenuItem) Toggled() {
	var this1 *C.GtkCheckMenuItem
	if this0 != nil {
		this1 = this0.InheritedFromGtkCheckMenuItem()
	}
	C.gtk_check_menu_item_toggled(this1)
}
type ClipboardLike interface {
	gobject.ObjectLike
	InheritedFromGtkClipboard() *C.GtkClipboard
}

type Clipboard struct {
	gobject.Object
	
}

func ToClipboard(objlike gobject.ObjectLike) *Clipboard {
	c := objlike.InheritedFromGObject()
	if c == nil {
		return nil
	}
	t := (*Clipboard)(nil).GetStaticType()
	obj := gobject.ObjectGrabIfType(unsafe.Pointer(c), t)
	if obj != nil {
		return (*Clipboard)(obj)
	}
	panic("cannot cast to Clipboard")
}

func (this0 *Clipboard) InheritedFromGtkClipboard() *C.GtkClipboard {
	if this0 == nil {
		return nil
	}
	return (*C.GtkClipboard)(this0.C)
}

func (this0 *Clipboard) GetStaticType() gobject.Type {
	return gobject.Type(C.gtk_clipboard_get_type())
}

func ClipboardGetType() gobject.Type {
	return (*Clipboard)(nil).GetStaticType()
}
func ClipboardGet(selection0 gdk.Atom) *Clipboard {
	var selection1 C.GdkAtom
	selection1 = *(*C.GdkAtom)(unsafe.Pointer(&selection0))
	ret1 := C.gtk_clipboard_get(selection1)
	var ret2 *Clipboard
	ret2 = (*Clipboard)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
func ClipboardGetForDisplay(display0 gdk.DisplayLike, selection0 gdk.Atom) *Clipboard {
	var display1 *C.GdkDisplay
	var selection1 C.GdkAtom
	if display0 != nil {
		display1 = display0.InheritedFromGdkDisplay()
	}
	selection1 = *(*C.GdkAtom)(unsafe.Pointer(&selection0))
	ret1 := C.gtk_clipboard_get_for_display(display1, selection1)
	var ret2 *Clipboard
	ret2 = (*Clipboard)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
func (this0 *Clipboard) Clear() {
	var this1 *C.GtkClipboard
	if this0 != nil {
		this1 = this0.InheritedFromGtkClipboard()
	}
	C.gtk_clipboard_clear(this1)
}
func (this0 *Clipboard) GetDisplay() *gdk.Display {
	var this1 *C.GtkClipboard
	if this0 != nil {
		this1 = this0.InheritedFromGtkClipboard()
	}
	ret1 := C.gtk_clipboard_get_display(this1)
	var ret2 *gdk.Display
	ret2 = (*gdk.Display)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
func (this0 *Clipboard) GetOwner() *gobject.Object {
	var this1 *C.GtkClipboard
	if this0 != nil {
		this1 = this0.InheritedFromGtkClipboard()
	}
	ret1 := C.gtk_clipboard_get_owner(this1)
	var ret2 *gobject.Object
	ret2 = (*gobject.Object)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
func (this0 *Clipboard) RequestContents(target0 gdk.Atom, callback0 ClipboardReceivedFunc) {
	var this1 *C.GtkClipboard
	var target1 C.GdkAtom
	var callback1 unsafe.Pointer
	if this0 != nil {
		this1 = this0.InheritedFromGtkClipboard()
	}
	target1 = *(*C.GdkAtom)(unsafe.Pointer(&target0))
	if callback0 != nil {
		callback1 = unsafe.Pointer(&callback0)}
	gobject.Holder.Grab(callback1)
	C._gtk_clipboard_request_contents(this1, target1, callback1)
}
func (this0 *Clipboard) RequestImage(callback0 ClipboardImageReceivedFunc) {
	var this1 *C.GtkClipboard
	var callback1 unsafe.Pointer
	if this0 != nil {
		this1 = this0.InheritedFromGtkClipboard()
	}
	if callback0 != nil {
		callback1 = unsafe.Pointer(&callback0)}
	gobject.Holder.Grab(callback1)
	C._gtk_clipboard_request_image(this1, callback1)
}
// blacklisted: Clipboard.request_rich_text (method)
func (this0 *Clipboard) RequestTargets(callback0 ClipboardTargetsReceivedFunc) {
	var this1 *C.GtkClipboard
	var callback1 unsafe.Pointer
	if this0 != nil {
		this1 = this0.InheritedFromGtkClipboard()
	}
	if callback0 != nil {
		callback1 = unsafe.Pointer(&callback0)}
	gobject.Holder.Grab(callback1)
	C._gtk_clipboard_request_targets(this1, callback1)
}
func (this0 *Clipboard) RequestText(callback0 ClipboardTextReceivedFunc) {
	var this1 *C.GtkClipboard
	var callback1 unsafe.Pointer
	if this0 != nil {
		this1 = this0.InheritedFromGtkClipboard()
	}
	if callback0 != nil {
		callback1 = unsafe.Pointer(&callback0)}
	gobject.Holder.Grab(callback1)
	C._gtk_clipboard_request_text(this1, callback1)
}
func (this0 *Clipboard) RequestURIs(callback0 ClipboardURIReceivedFunc) {
	var this1 *C.GtkClipboard
	var callback1 unsafe.Pointer
	if this0 != nil {
		this1 = this0.InheritedFromGtkClipboard()
	}
	if callback0 != nil {
		callback1 = unsafe.Pointer(&callback0)}
	gobject.Holder.Grab(callback1)
	C._gtk_clipboard_request_uris(this1, callback1)
}
func (this0 *Clipboard) SetCanStore(targets0 []TargetEntry) {
	var this1 *C.GtkClipboard
	var targets1 *C.GtkTargetEntry
	var n_targets1 C.int32_t
	if this0 != nil {
		this1 = this0.InheritedFromGtkClipboard()
	}
	targets1 = (*C.GtkTargetEntry)(C.malloc(C.size_t(int(unsafe.Sizeof(*targets1)) * len(targets0))))
	defer C.free(unsafe.Pointer(targets1))
	for i, e := range targets0 {
		(*(*[999999]C.GtkTargetEntry)(unsafe.Pointer(targets1)))[i] = *(*C.GtkTargetEntry)(unsafe.Pointer(&e))
	}
	n_targets1 = C.int32_t(len(targets0))
	C.gtk_clipboard_set_can_store(this1, targets1, n_targets1)
}
func (this0 *Clipboard) SetImage(pixbuf0 gdkpixbuf.PixbufLike) {
	var this1 *C.GtkClipboard
	var pixbuf1 *C.GdkPixbuf
	if this0 != nil {
		this1 = this0.InheritedFromGtkClipboard()
	}
	if pixbuf0 != nil {
		pixbuf1 = pixbuf0.InheritedFromGdkPixbuf()
	}
	C.gtk_clipboard_set_image(this1, pixbuf1)
}
func (this0 *Clipboard) SetText(text0 string, len0 int) {
	var this1 *C.GtkClipboard
	var text1 *C.char
	var len1 C.int32_t
	if this0 != nil {
		this1 = this0.InheritedFromGtkClipboard()
	}
	text1 = _GoStringToGString(text0)
	defer C.free(unsafe.Pointer(text1))
	len1 = C.int32_t(len0)
	C.gtk_clipboard_set_text(this1, text1, len1)
}
func (this0 *Clipboard) Store() {
	var this1 *C.GtkClipboard
	if this0 != nil {
		this1 = this0.InheritedFromGtkClipboard()
	}
	C.gtk_clipboard_store(this1)
}
func (this0 *Clipboard) WaitForContents(target0 gdk.Atom) *SelectionData {
	var this1 *C.GtkClipboard
	var target1 C.GdkAtom
	if this0 != nil {
		this1 = this0.InheritedFromGtkClipboard()
	}
	target1 = *(*C.GdkAtom)(unsafe.Pointer(&target0))
	ret1 := C.gtk_clipboard_wait_for_contents(this1, target1)
	var ret2 *SelectionData
	ret2 = (*SelectionData)(unsafe.Pointer(ret1))
	return ret2
}
func (this0 *Clipboard) WaitForImage() *gdkpixbuf.Pixbuf {
	var this1 *C.GtkClipboard
	if this0 != nil {
		this1 = this0.InheritedFromGtkClipboard()
	}
	ret1 := C.gtk_clipboard_wait_for_image(this1)
	var ret2 *gdkpixbuf.Pixbuf
	ret2 = (*gdkpixbuf.Pixbuf)(gobject.ObjectWrap(unsafe.Pointer(ret1), false))
	return ret2
}
func (this0 *Clipboard) WaitForRichText(buffer0 TextBufferLike) (gdk.Atom, uint64, []int) {
	var this1 *C.GtkClipboard
	var buffer1 *C.GtkTextBuffer
	var format1 C.GdkAtom
	var length1 C.uint64_t
	if this0 != nil {
		this1 = this0.InheritedFromGtkClipboard()
	}
	if buffer0 != nil {
		buffer1 = buffer0.InheritedFromGtkTextBuffer()
	}
	ret1 := C.gtk_clipboard_wait_for_rich_text(this1, buffer1, &format1, &length1)
	var format2 gdk.Atom
	var length2 uint64
	var ret2 []int
	format2 = gdk.Atom{unsafe.Pointer(format1)}
	length2 = uint64(length1)
	ret2 = make([]int, length1)
	for i := range ret2 {
		ret2[i] = int((*(*[999999]C.uint8_t)(unsafe.Pointer(ret1)))[i])
	}
	return format2, length2, ret2
}
func (this0 *Clipboard) WaitForTargets() ([]gdk.Atom, bool) {
	var this1 *C.GtkClipboard
	var targets1 *C.GdkAtom
	var n_targets1 C.int32_t
	if this0 != nil {
		this1 = this0.InheritedFromGtkClipboard()
	}
	ret1 := C.gtk_clipboard_wait_for_targets(this1, &targets1, &n_targets1)
	var targets2 []gdk.Atom
	var ret2 bool
	targets2 = make([]gdk.Atom, n_targets1)
	for i := range targets2 {
		targets2[i] = gdk.Atom{unsafe.Pointer((*(*[999999]C.GdkAtom)(unsafe.Pointer(targets1)))[i])}
	}
	ret2 = ret1 != 0
	return targets2, ret2
}
func (this0 *Clipboard) WaitForText() string {
	var this1 *C.GtkClipboard
	if this0 != nil {
		this1 = this0.InheritedFromGtkClipboard()
	}
	ret1 := C.gtk_clipboard_wait_for_text(this1)
	var ret2 string
	ret2 = C.GoString(ret1)
	C.g_free(unsafe.Pointer(ret1))
	return ret2
}
func (this0 *Clipboard) WaitForURIs() []string {
	var this1 *C.GtkClipboard
	if this0 != nil {
		this1 = this0.InheritedFromGtkClipboard()
	}
	ret1 := C.gtk_clipboard_wait_for_uris(this1)
	var ret2 []string
	for i := range ret2 {
		ret2[i] = C.GoString((*(*[999999]*C.char)(unsafe.Pointer(ret1)))[i])
		C.g_free(unsafe.Pointer((*(*[999999]*C.char)(unsafe.Pointer(ret1)))[i]))
	}
	return ret2
}
func (this0 *Clipboard) WaitIsImageAvailable() bool {
	var this1 *C.GtkClipboard
	if this0 != nil {
		this1 = this0.InheritedFromGtkClipboard()
	}
	ret1 := C.gtk_clipboard_wait_is_image_available(this1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *Clipboard) WaitIsRichTextAvailable(buffer0 TextBufferLike) bool {
	var this1 *C.GtkClipboard
	var buffer1 *C.GtkTextBuffer
	if this0 != nil {
		this1 = this0.InheritedFromGtkClipboard()
	}
	if buffer0 != nil {
		buffer1 = buffer0.InheritedFromGtkTextBuffer()
	}
	ret1 := C.gtk_clipboard_wait_is_rich_text_available(this1, buffer1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *Clipboard) WaitIsTargetAvailable(target0 gdk.Atom) bool {
	var this1 *C.GtkClipboard
	var target1 C.GdkAtom
	if this0 != nil {
		this1 = this0.InheritedFromGtkClipboard()
	}
	target1 = *(*C.GdkAtom)(unsafe.Pointer(&target0))
	ret1 := C.gtk_clipboard_wait_is_target_available(this1, target1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *Clipboard) WaitIsTextAvailable() bool {
	var this1 *C.GtkClipboard
	if this0 != nil {
		this1 = this0.InheritedFromGtkClipboard()
	}
	ret1 := C.gtk_clipboard_wait_is_text_available(this1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *Clipboard) WaitIsURIsAvailable() bool {
	var this1 *C.GtkClipboard
	if this0 != nil {
		this1 = this0.InheritedFromGtkClipboard()
	}
	ret1 := C.gtk_clipboard_wait_is_uris_available(this1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
type ClipboardClearFunc func(clipboard *Clipboard)
//export _GtkClipboardClearFunc_c_wrapper
func _GtkClipboardClearFunc_c_wrapper(clipboard0 unsafe.Pointer, user_data_or_owner0 unsafe.Pointer) {
	var clipboard1 *Clipboard
	var user_data_or_owner1 ClipboardClearFunc
	clipboard1 = (*Clipboard)(gobject.ObjectWrap(unsafe.Pointer((*C.GtkClipboard)(clipboard0)), true))
	user_data_or_owner1 = *(*ClipboardClearFunc)(user_data_or_owner0)
	user_data_or_owner1(clipboard1)
}
//export _GtkClipboardClearFunc_c_wrapper_once
func _GtkClipboardClearFunc_c_wrapper_once(clipboard0 unsafe.Pointer, user_data_or_owner0 unsafe.Pointer) {
	_GtkClipboardClearFunc_c_wrapper(clipboard0, user_data_or_owner0)
	gobject.Holder.Release(user_data_or_owner0)
}
type ClipboardGetFunc func(clipboard *Clipboard, selection_data *SelectionData, info int)
//export _GtkClipboardGetFunc_c_wrapper
func _GtkClipboardGetFunc_c_wrapper(clipboard0 unsafe.Pointer, selection_data0 unsafe.Pointer, info0 uint32, user_data_or_owner0 unsafe.Pointer) {
	var clipboard1 *Clipboard
	var selection_data1 *SelectionData
	var info1 int
	var user_data_or_owner1 ClipboardGetFunc
	clipboard1 = (*Clipboard)(gobject.ObjectWrap(unsafe.Pointer((*C.GtkClipboard)(clipboard0)), true))
	selection_data1 = (*SelectionData)(unsafe.Pointer((*C.GtkSelectionData)(selection_data0)))
	info1 = int((C.uint32_t)(info0))
	user_data_or_owner1 = *(*ClipboardGetFunc)(user_data_or_owner0)
	user_data_or_owner1(clipboard1, selection_data1, info1)
}
//export _GtkClipboardGetFunc_c_wrapper_once
func _GtkClipboardGetFunc_c_wrapper_once(clipboard0 unsafe.Pointer, selection_data0 unsafe.Pointer, info0 uint32, user_data_or_owner0 unsafe.Pointer) {
	_GtkClipboardGetFunc_c_wrapper(clipboard0, selection_data0, info0, user_data_or_owner0)
	gobject.Holder.Release(user_data_or_owner0)
}
type ClipboardImageReceivedFunc func(clipboard *Clipboard, pixbuf *gdkpixbuf.Pixbuf)
//export _GtkClipboardImageReceivedFunc_c_wrapper
func _GtkClipboardImageReceivedFunc_c_wrapper(clipboard0 unsafe.Pointer, pixbuf0 unsafe.Pointer, data0 unsafe.Pointer) {
	var clipboard1 *Clipboard
	var pixbuf1 *gdkpixbuf.Pixbuf
	var data1 ClipboardImageReceivedFunc
	clipboard1 = (*Clipboard)(gobject.ObjectWrap(unsafe.Pointer((*C.GtkClipboard)(clipboard0)), true))
	pixbuf1 = (*gdkpixbuf.Pixbuf)(gobject.ObjectWrap(unsafe.Pointer((*C.GdkPixbuf)(pixbuf0)), true))
	data1 = *(*ClipboardImageReceivedFunc)(data0)
	data1(clipboard1, pixbuf1)
}
//export _GtkClipboardImageReceivedFunc_c_wrapper_once
func _GtkClipboardImageReceivedFunc_c_wrapper_once(clipboard0 unsafe.Pointer, pixbuf0 unsafe.Pointer, data0 unsafe.Pointer) {
	_GtkClipboardImageReceivedFunc_c_wrapper(clipboard0, pixbuf0, data0)
	gobject.Holder.Release(data0)
}
type ClipboardReceivedFunc func(clipboard *Clipboard, selection_data *SelectionData)
//export _GtkClipboardReceivedFunc_c_wrapper
func _GtkClipboardReceivedFunc_c_wrapper(clipboard0 unsafe.Pointer, selection_data0 unsafe.Pointer, data0 unsafe.Pointer) {
	var clipboard1 *Clipboard
	var selection_data1 *SelectionData
	var data1 ClipboardReceivedFunc
	clipboard1 = (*Clipboard)(gobject.ObjectWrap(unsafe.Pointer((*C.GtkClipboard)(clipboard0)), true))
	selection_data1 = (*SelectionData)(unsafe.Pointer((*C.GtkSelectionData)(selection_data0)))
	data1 = *(*ClipboardReceivedFunc)(data0)
	data1(clipboard1, selection_data1)
}
//export _GtkClipboardReceivedFunc_c_wrapper_once
func _GtkClipboardReceivedFunc_c_wrapper_once(clipboard0 unsafe.Pointer, selection_data0 unsafe.Pointer, data0 unsafe.Pointer) {
	_GtkClipboardReceivedFunc_c_wrapper(clipboard0, selection_data0, data0)
	gobject.Holder.Release(data0)
}
// blacklisted: ClipboardRichTextReceivedFunc (callback)
type ClipboardTargetsReceivedFunc func(clipboard *Clipboard, atoms gdk.Atom, n_atoms int)
//export _GtkClipboardTargetsReceivedFunc_c_wrapper
func _GtkClipboardTargetsReceivedFunc_c_wrapper(clipboard0 unsafe.Pointer, atoms0 unsafe.Pointer, n_atoms0 int32, data0 unsafe.Pointer) {
	var clipboard1 *Clipboard
	var atoms1 gdk.Atom
	var n_atoms1 int
	var data1 ClipboardTargetsReceivedFunc
	clipboard1 = (*Clipboard)(gobject.ObjectWrap(unsafe.Pointer((*C.GtkClipboard)(clipboard0)), true))
	atoms1 = gdk.Atom{unsafe.Pointer((C.GdkAtom)(atoms0))}
	n_atoms1 = int((C.int32_t)(n_atoms0))
	data1 = *(*ClipboardTargetsReceivedFunc)(data0)
	data1(clipboard1, atoms1, n_atoms1)
}
//export _GtkClipboardTargetsReceivedFunc_c_wrapper_once
func _GtkClipboardTargetsReceivedFunc_c_wrapper_once(clipboard0 unsafe.Pointer, atoms0 unsafe.Pointer, n_atoms0 int32, data0 unsafe.Pointer) {
	_GtkClipboardTargetsReceivedFunc_c_wrapper(clipboard0, atoms0, n_atoms0, data0)
	gobject.Holder.Release(data0)
}
type ClipboardTextReceivedFunc func(clipboard *Clipboard, text string)
//export _GtkClipboardTextReceivedFunc_c_wrapper
func _GtkClipboardTextReceivedFunc_c_wrapper(clipboard0 unsafe.Pointer, text0 unsafe.Pointer, data0 unsafe.Pointer) {
	var clipboard1 *Clipboard
	var text1 string
	var data1 ClipboardTextReceivedFunc
	clipboard1 = (*Clipboard)(gobject.ObjectWrap(unsafe.Pointer((*C.GtkClipboard)(clipboard0)), true))
	text1 = C.GoString((*C.char)(text0))
	data1 = *(*ClipboardTextReceivedFunc)(data0)
	data1(clipboard1, text1)
}
//export _GtkClipboardTextReceivedFunc_c_wrapper_once
func _GtkClipboardTextReceivedFunc_c_wrapper_once(clipboard0 unsafe.Pointer, text0 unsafe.Pointer, data0 unsafe.Pointer) {
	_GtkClipboardTextReceivedFunc_c_wrapper(clipboard0, text0, data0)
	gobject.Holder.Release(data0)
}
type ClipboardURIReceivedFunc func(clipboard *Clipboard, uris string)
//export _GtkClipboardURIReceivedFunc_c_wrapper
func _GtkClipboardURIReceivedFunc_c_wrapper(clipboard0 unsafe.Pointer, uris0 unsafe.Pointer, data0 unsafe.Pointer) {
	var clipboard1 *Clipboard
	var uris1 string
	var data1 ClipboardURIReceivedFunc
	clipboard1 = (*Clipboard)(gobject.ObjectWrap(unsafe.Pointer((*C.GtkClipboard)(clipboard0)), true))
	uris1 = C.GoString((*C.char)(uris0))
	data1 = *(*ClipboardURIReceivedFunc)(data0)
	data1(clipboard1, uris1)
}
//export _GtkClipboardURIReceivedFunc_c_wrapper_once
func _GtkClipboardURIReceivedFunc_c_wrapper_once(clipboard0 unsafe.Pointer, uris0 unsafe.Pointer, data0 unsafe.Pointer) {
	_GtkClipboardURIReceivedFunc_c_wrapper(clipboard0, uris0, data0)
	gobject.Holder.Release(data0)
}
type ColorButtonLike interface {
	ButtonLike
	InheritedFromGtkColorButton() *C.GtkColorButton
}

type ColorButton struct {
	Button
	atk.ImplementorIfaceImpl
	ActivatableImpl
	BuildableImpl
}

func ToColorButton(objlike gobject.ObjectLike) *ColorButton {
	c := objlike.InheritedFromGObject()
	if c == nil {
		return nil
	}
	t := (*ColorButton)(nil).GetStaticType()
	obj := gobject.ObjectGrabIfType(unsafe.Pointer(c), t)
	if obj != nil {
		return (*ColorButton)(obj)
	}
	panic("cannot cast to ColorButton")
}

func (this0 *ColorButton) InheritedFromGtkColorButton() *C.GtkColorButton {
	if this0 == nil {
		return nil
	}
	return (*C.GtkColorButton)(this0.C)
}

func (this0 *ColorButton) GetStaticType() gobject.Type {
	return gobject.Type(C.gtk_color_button_get_type())
}

func ColorButtonGetType() gobject.Type {
	return (*ColorButton)(nil).GetStaticType()
}
func NewColorButton() *ColorButton {
	ret1 := C.gtk_color_button_new()
	var ret2 *ColorButton
	ret2 = (*ColorButton)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
func NewColorButtonWithColor(color0 *gdk.Color) *ColorButton {
	var color1 *C.GdkColor
	color1 = (*C.GdkColor)(unsafe.Pointer(color0))
	ret1 := C.gtk_color_button_new_with_color(color1)
	var ret2 *ColorButton
	ret2 = (*ColorButton)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
func NewColorButtonWithRGBA(rgba0 *gdk.RGBA) *ColorButton {
	var rgba1 *C.GdkRGBA
	rgba1 = (*C.GdkRGBA)(unsafe.Pointer(rgba0))
	ret1 := C.gtk_color_button_new_with_rgba(rgba1)
	var ret2 *ColorButton
	ret2 = (*ColorButton)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
func (this0 *ColorButton) GetAlpha() int {
	var this1 *C.GtkColorButton
	if this0 != nil {
		this1 = this0.InheritedFromGtkColorButton()
	}
	ret1 := C.gtk_color_button_get_alpha(this1)
	var ret2 int
	ret2 = int(ret1)
	return ret2
}
func (this0 *ColorButton) GetColor() gdk.Color {
	var this1 *C.GtkColorButton
	var color1 C.GdkColor
	if this0 != nil {
		this1 = this0.InheritedFromGtkColorButton()
	}
	C.gtk_color_button_get_color(this1, &color1)
	var color2 gdk.Color
	color2 = *(*gdk.Color)(unsafe.Pointer(&color1))
	return color2
}
func (this0 *ColorButton) GetRGBA() gdk.RGBA {
	var this1 *C.GtkColorButton
	var rgba1 C.GdkRGBA
	if this0 != nil {
		this1 = this0.InheritedFromGtkColorButton()
	}
	C.gtk_color_button_get_rgba(this1, &rgba1)
	var rgba2 gdk.RGBA
	rgba2 = *(*gdk.RGBA)(unsafe.Pointer(&rgba1))
	return rgba2
}
func (this0 *ColorButton) GetTitle() string {
	var this1 *C.GtkColorButton
	if this0 != nil {
		this1 = this0.InheritedFromGtkColorButton()
	}
	ret1 := C.gtk_color_button_get_title(this1)
	var ret2 string
	ret2 = C.GoString(ret1)
	return ret2
}
func (this0 *ColorButton) GetUseAlpha() bool {
	var this1 *C.GtkColorButton
	if this0 != nil {
		this1 = this0.InheritedFromGtkColorButton()
	}
	ret1 := C.gtk_color_button_get_use_alpha(this1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *ColorButton) SetAlpha(alpha0 int) {
	var this1 *C.GtkColorButton
	var alpha1 C.uint16_t
	if this0 != nil {
		this1 = this0.InheritedFromGtkColorButton()
	}
	alpha1 = C.uint16_t(alpha0)
	C.gtk_color_button_set_alpha(this1, alpha1)
}
func (this0 *ColorButton) SetColor(color0 *gdk.Color) {
	var this1 *C.GtkColorButton
	var color1 *C.GdkColor
	if this0 != nil {
		this1 = this0.InheritedFromGtkColorButton()
	}
	color1 = (*C.GdkColor)(unsafe.Pointer(color0))
	C.gtk_color_button_set_color(this1, color1)
}
func (this0 *ColorButton) SetRGBA(rgba0 *gdk.RGBA) {
	var this1 *C.GtkColorButton
	var rgba1 *C.GdkRGBA
	if this0 != nil {
		this1 = this0.InheritedFromGtkColorButton()
	}
	rgba1 = (*C.GdkRGBA)(unsafe.Pointer(rgba0))
	C.gtk_color_button_set_rgba(this1, rgba1)
}
func (this0 *ColorButton) SetTitle(title0 string) {
	var this1 *C.GtkColorButton
	var title1 *C.char
	if this0 != nil {
		this1 = this0.InheritedFromGtkColorButton()
	}
	title1 = _GoStringToGString(title0)
	defer C.free(unsafe.Pointer(title1))
	C.gtk_color_button_set_title(this1, title1)
}
func (this0 *ColorButton) SetUseAlpha(use_alpha0 bool) {
	var this1 *C.GtkColorButton
	var use_alpha1 C.int
	if this0 != nil {
		this1 = this0.InheritedFromGtkColorButton()
	}
	use_alpha1 = _GoBoolToCBool(use_alpha0)
	C.gtk_color_button_set_use_alpha(this1, use_alpha1)
}
type ColorSelectionLike interface {
	BoxLike
	InheritedFromGtkColorSelection() *C.GtkColorSelection
}

type ColorSelection struct {
	Box
	atk.ImplementorIfaceImpl
	BuildableImpl
	OrientableImpl
}

func ToColorSelection(objlike gobject.ObjectLike) *ColorSelection {
	c := objlike.InheritedFromGObject()
	if c == nil {
		return nil
	}
	t := (*ColorSelection)(nil).GetStaticType()
	obj := gobject.ObjectGrabIfType(unsafe.Pointer(c), t)
	if obj != nil {
		return (*ColorSelection)(obj)
	}
	panic("cannot cast to ColorSelection")
}

func (this0 *ColorSelection) InheritedFromGtkColorSelection() *C.GtkColorSelection {
	if this0 == nil {
		return nil
	}
	return (*C.GtkColorSelection)(this0.C)
}

func (this0 *ColorSelection) GetStaticType() gobject.Type {
	return gobject.Type(C.gtk_color_selection_get_type())
}

func ColorSelectionGetType() gobject.Type {
	return (*ColorSelection)(nil).GetStaticType()
}
func NewColorSelection() *ColorSelection {
	ret1 := C.gtk_color_selection_new()
	var ret2 *ColorSelection
	ret2 = (*ColorSelection)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
func ColorSelectionPaletteFromString(str0 string) ([]gdk.Color, bool) {
	var str1 *C.char
	var colors1 *C.GdkColor
	var n_colors1 C.int32_t
	str1 = _GoStringToGString(str0)
	defer C.free(unsafe.Pointer(str1))
	ret1 := C.gtk_color_selection_palette_from_string(str1, &colors1, &n_colors1)
	var colors2 []gdk.Color
	var ret2 bool
	colors2 = make([]gdk.Color, n_colors1)
	for i := range colors2 {
		colors2[i] = *(*gdk.Color)(unsafe.Pointer(&(*(*[999999]C.GdkColor)(unsafe.Pointer(colors1)))[i]))
	}
	ret2 = ret1 != 0
	return colors2, ret2
}
func ColorSelectionPaletteToString(colors0 []gdk.Color) string {
	var colors1 *C.GdkColor
	var n_colors1 C.int32_t
	colors1 = (*C.GdkColor)(C.malloc(C.size_t(int(unsafe.Sizeof(*colors1)) * len(colors0))))
	defer C.free(unsafe.Pointer(colors1))
	for i, e := range colors0 {
		(*(*[999999]C.GdkColor)(unsafe.Pointer(colors1)))[i] = *(*C.GdkColor)(unsafe.Pointer(&e))
	}
	n_colors1 = C.int32_t(len(colors0))
	ret1 := C.gtk_color_selection_palette_to_string(colors1, n_colors1)
	var ret2 string
	ret2 = C.GoString(ret1)
	C.g_free(unsafe.Pointer(ret1))
	return ret2
}
func (this0 *ColorSelection) GetCurrentAlpha() int {
	var this1 *C.GtkColorSelection
	if this0 != nil {
		this1 = this0.InheritedFromGtkColorSelection()
	}
	ret1 := C.gtk_color_selection_get_current_alpha(this1)
	var ret2 int
	ret2 = int(ret1)
	return ret2
}
func (this0 *ColorSelection) GetCurrentColor() gdk.Color {
	var this1 *C.GtkColorSelection
	var color1 C.GdkColor
	if this0 != nil {
		this1 = this0.InheritedFromGtkColorSelection()
	}
	C.gtk_color_selection_get_current_color(this1, &color1)
	var color2 gdk.Color
	color2 = *(*gdk.Color)(unsafe.Pointer(&color1))
	return color2
}
func (this0 *ColorSelection) GetCurrentRGBA() gdk.RGBA {
	var this1 *C.GtkColorSelection
	var rgba1 C.GdkRGBA
	if this0 != nil {
		this1 = this0.InheritedFromGtkColorSelection()
	}
	C.gtk_color_selection_get_current_rgba(this1, &rgba1)
	var rgba2 gdk.RGBA
	rgba2 = *(*gdk.RGBA)(unsafe.Pointer(&rgba1))
	return rgba2
}
func (this0 *ColorSelection) GetHasOpacityControl() bool {
	var this1 *C.GtkColorSelection
	if this0 != nil {
		this1 = this0.InheritedFromGtkColorSelection()
	}
	ret1 := C.gtk_color_selection_get_has_opacity_control(this1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *ColorSelection) GetHasPalette() bool {
	var this1 *C.GtkColorSelection
	if this0 != nil {
		this1 = this0.InheritedFromGtkColorSelection()
	}
	ret1 := C.gtk_color_selection_get_has_palette(this1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *ColorSelection) GetPreviousAlpha() int {
	var this1 *C.GtkColorSelection
	if this0 != nil {
		this1 = this0.InheritedFromGtkColorSelection()
	}
	ret1 := C.gtk_color_selection_get_previous_alpha(this1)
	var ret2 int
	ret2 = int(ret1)
	return ret2
}
func (this0 *ColorSelection) GetPreviousColor() gdk.Color {
	var this1 *C.GtkColorSelection
	var color1 C.GdkColor
	if this0 != nil {
		this1 = this0.InheritedFromGtkColorSelection()
	}
	C.gtk_color_selection_get_previous_color(this1, &color1)
	var color2 gdk.Color
	color2 = *(*gdk.Color)(unsafe.Pointer(&color1))
	return color2
}
func (this0 *ColorSelection) GetPreviousRGBA() gdk.RGBA {
	var this1 *C.GtkColorSelection
	var rgba1 C.GdkRGBA
	if this0 != nil {
		this1 = this0.InheritedFromGtkColorSelection()
	}
	C.gtk_color_selection_get_previous_rgba(this1, &rgba1)
	var rgba2 gdk.RGBA
	rgba2 = *(*gdk.RGBA)(unsafe.Pointer(&rgba1))
	return rgba2
}
func (this0 *ColorSelection) IsAdjusting() bool {
	var this1 *C.GtkColorSelection
	if this0 != nil {
		this1 = this0.InheritedFromGtkColorSelection()
	}
	ret1 := C.gtk_color_selection_is_adjusting(this1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *ColorSelection) SetCurrentAlpha(alpha0 int) {
	var this1 *C.GtkColorSelection
	var alpha1 C.uint16_t
	if this0 != nil {
		this1 = this0.InheritedFromGtkColorSelection()
	}
	alpha1 = C.uint16_t(alpha0)
	C.gtk_color_selection_set_current_alpha(this1, alpha1)
}
func (this0 *ColorSelection) SetCurrentColor(color0 *gdk.Color) {
	var this1 *C.GtkColorSelection
	var color1 *C.GdkColor
	if this0 != nil {
		this1 = this0.InheritedFromGtkColorSelection()
	}
	color1 = (*C.GdkColor)(unsafe.Pointer(color0))
	C.gtk_color_selection_set_current_color(this1, color1)
}
func (this0 *ColorSelection) SetCurrentRGBA(rgba0 *gdk.RGBA) {
	var this1 *C.GtkColorSelection
	var rgba1 *C.GdkRGBA
	if this0 != nil {
		this1 = this0.InheritedFromGtkColorSelection()
	}
	rgba1 = (*C.GdkRGBA)(unsafe.Pointer(rgba0))
	C.gtk_color_selection_set_current_rgba(this1, rgba1)
}
func (this0 *ColorSelection) SetHasOpacityControl(has_opacity0 bool) {
	var this1 *C.GtkColorSelection
	var has_opacity1 C.int
	if this0 != nil {
		this1 = this0.InheritedFromGtkColorSelection()
	}
	has_opacity1 = _GoBoolToCBool(has_opacity0)
	C.gtk_color_selection_set_has_opacity_control(this1, has_opacity1)
}
func (this0 *ColorSelection) SetHasPalette(has_palette0 bool) {
	var this1 *C.GtkColorSelection
	var has_palette1 C.int
	if this0 != nil {
		this1 = this0.InheritedFromGtkColorSelection()
	}
	has_palette1 = _GoBoolToCBool(has_palette0)
	C.gtk_color_selection_set_has_palette(this1, has_palette1)
}
func (this0 *ColorSelection) SetPreviousAlpha(alpha0 int) {
	var this1 *C.GtkColorSelection
	var alpha1 C.uint16_t
	if this0 != nil {
		this1 = this0.InheritedFromGtkColorSelection()
	}
	alpha1 = C.uint16_t(alpha0)
	C.gtk_color_selection_set_previous_alpha(this1, alpha1)
}
func (this0 *ColorSelection) SetPreviousColor(color0 *gdk.Color) {
	var this1 *C.GtkColorSelection
	var color1 *C.GdkColor
	if this0 != nil {
		this1 = this0.InheritedFromGtkColorSelection()
	}
	color1 = (*C.GdkColor)(unsafe.Pointer(color0))
	C.gtk_color_selection_set_previous_color(this1, color1)
}
func (this0 *ColorSelection) SetPreviousRGBA(rgba0 *gdk.RGBA) {
	var this1 *C.GtkColorSelection
	var rgba1 *C.GdkRGBA
	if this0 != nil {
		this1 = this0.InheritedFromGtkColorSelection()
	}
	rgba1 = (*C.GdkRGBA)(unsafe.Pointer(rgba0))
	C.gtk_color_selection_set_previous_rgba(this1, rgba1)
}
// blacklisted (no userdata): type ColorSelectionChangePaletteFunc func(colors *gdk.Color, n_colors int)
// blacklisted (no userdata): type ColorSelectionChangePaletteWithScreenFunc func(screen *gdk.Screen, colors *gdk.Color, n_colors int)
type ColorSelectionDialogLike interface {
	DialogLike
	InheritedFromGtkColorSelectionDialog() *C.GtkColorSelectionDialog
}

type ColorSelectionDialog struct {
	Dialog
	atk.ImplementorIfaceImpl
	BuildableImpl
}

func ToColorSelectionDialog(objlike gobject.ObjectLike) *ColorSelectionDialog {
	c := objlike.InheritedFromGObject()
	if c == nil {
		return nil
	}
	t := (*ColorSelectionDialog)(nil).GetStaticType()
	obj := gobject.ObjectGrabIfType(unsafe.Pointer(c), t)
	if obj != nil {
		return (*ColorSelectionDialog)(obj)
	}
	panic("cannot cast to ColorSelectionDialog")
}

func (this0 *ColorSelectionDialog) InheritedFromGtkColorSelectionDialog() *C.GtkColorSelectionDialog {
	if this0 == nil {
		return nil
	}
	return (*C.GtkColorSelectionDialog)(this0.C)
}

func (this0 *ColorSelectionDialog) GetStaticType() gobject.Type {
	return gobject.Type(C.gtk_color_selection_dialog_get_type())
}

func ColorSelectionDialogGetType() gobject.Type {
	return (*ColorSelectionDialog)(nil).GetStaticType()
}
func NewColorSelectionDialog(title0 string) *ColorSelectionDialog {
	var title1 *C.char
	title1 = _GoStringToGString(title0)
	defer C.free(unsafe.Pointer(title1))
	ret1 := C.gtk_color_selection_dialog_new(title1)
	var ret2 *ColorSelectionDialog
	ret2 = (*ColorSelectionDialog)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
func (this0 *ColorSelectionDialog) GetColorSelection() *Widget {
	var this1 *C.GtkColorSelectionDialog
	if this0 != nil {
		this1 = this0.InheritedFromGtkColorSelectionDialog()
	}
	ret1 := C.gtk_color_selection_dialog_get_color_selection(this1)
	var ret2 *Widget
	ret2 = (*Widget)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
type ComboBoxLike interface {
	BinLike
	InheritedFromGtkComboBox() *C.GtkComboBox
}

type ComboBox struct {
	Bin
	atk.ImplementorIfaceImpl
	BuildableImpl
	CellEditableImpl
	CellLayoutImpl
}

func ToComboBox(objlike gobject.ObjectLike) *ComboBox {
	c := objlike.InheritedFromGObject()
	if c == nil {
		return nil
	}
	t := (*ComboBox)(nil).GetStaticType()
	obj := gobject.ObjectGrabIfType(unsafe.Pointer(c), t)
	if obj != nil {
		return (*ComboBox)(obj)
	}
	panic("cannot cast to ComboBox")
}

func (this0 *ComboBox) InheritedFromGtkComboBox() *C.GtkComboBox {
	if this0 == nil {
		return nil
	}
	return (*C.GtkComboBox)(this0.C)
}

func (this0 *ComboBox) GetStaticType() gobject.Type {
	return gobject.Type(C.gtk_combo_box_get_type())
}

func ComboBoxGetType() gobject.Type {
	return (*ComboBox)(nil).GetStaticType()
}
func NewComboBox() *ComboBox {
	ret1 := C.gtk_combo_box_new()
	var ret2 *ComboBox
	ret2 = (*ComboBox)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
func NewComboBoxWithArea(area0 CellAreaLike) *ComboBox {
	var area1 *C.GtkCellArea
	if area0 != nil {
		area1 = area0.InheritedFromGtkCellArea()
	}
	ret1 := C.gtk_combo_box_new_with_area(area1)
	var ret2 *ComboBox
	ret2 = (*ComboBox)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
func NewComboBoxWithAreaAndEntry(area0 CellAreaLike) *ComboBox {
	var area1 *C.GtkCellArea
	if area0 != nil {
		area1 = area0.InheritedFromGtkCellArea()
	}
	ret1 := C.gtk_combo_box_new_with_area_and_entry(area1)
	var ret2 *ComboBox
	ret2 = (*ComboBox)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
func NewComboBoxWithEntry() *ComboBox {
	ret1 := C.gtk_combo_box_new_with_entry()
	var ret2 *ComboBox
	ret2 = (*ComboBox)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
func NewComboBoxWithModel(model0 TreeModelLike) *ComboBox {
	var model1 *C.GtkTreeModel
	if model0 != nil {
		model1 = model0.ImplementsGtkTreeModel()}
	ret1 := C.gtk_combo_box_new_with_model(model1)
	var ret2 *ComboBox
	ret2 = (*ComboBox)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
func NewComboBoxWithModelAndEntry(model0 TreeModelLike) *ComboBox {
	var model1 *C.GtkTreeModel
	if model0 != nil {
		model1 = model0.ImplementsGtkTreeModel()}
	ret1 := C.gtk_combo_box_new_with_model_and_entry(model1)
	var ret2 *ComboBox
	ret2 = (*ComboBox)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
func (this0 *ComboBox) GetActive() int {
	var this1 *C.GtkComboBox
	if this0 != nil {
		this1 = this0.InheritedFromGtkComboBox()
	}
	ret1 := C.gtk_combo_box_get_active(this1)
	var ret2 int
	ret2 = int(ret1)
	return ret2
}
func (this0 *ComboBox) GetActiveID() string {
	var this1 *C.GtkComboBox
	if this0 != nil {
		this1 = this0.InheritedFromGtkComboBox()
	}
	ret1 := C.gtk_combo_box_get_active_id(this1)
	var ret2 string
	ret2 = C.GoString(ret1)
	return ret2
}
func (this0 *ComboBox) GetActiveIter() (TreeIter, bool) {
	var this1 *C.GtkComboBox
	var iter1 C.GtkTreeIter
	if this0 != nil {
		this1 = this0.InheritedFromGtkComboBox()
	}
	ret1 := C.gtk_combo_box_get_active_iter(this1, &iter1)
	var iter2 TreeIter
	var ret2 bool
	iter2 = *(*TreeIter)(unsafe.Pointer(&iter1))
	ret2 = ret1 != 0
	return iter2, ret2
}
func (this0 *ComboBox) GetAddTearoffs() bool {
	var this1 *C.GtkComboBox
	if this0 != nil {
		this1 = this0.InheritedFromGtkComboBox()
	}
	ret1 := C.gtk_combo_box_get_add_tearoffs(this1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *ComboBox) GetButtonSensitivity() SensitivityType {
	var this1 *C.GtkComboBox
	if this0 != nil {
		this1 = this0.InheritedFromGtkComboBox()
	}
	ret1 := C.gtk_combo_box_get_button_sensitivity(this1)
	var ret2 SensitivityType
	ret2 = SensitivityType(ret1)
	return ret2
}
func (this0 *ComboBox) GetColumnSpanColumn() int {
	var this1 *C.GtkComboBox
	if this0 != nil {
		this1 = this0.InheritedFromGtkComboBox()
	}
	ret1 := C.gtk_combo_box_get_column_span_column(this1)
	var ret2 int
	ret2 = int(ret1)
	return ret2
}
func (this0 *ComboBox) GetEntryTextColumn() int {
	var this1 *C.GtkComboBox
	if this0 != nil {
		this1 = this0.InheritedFromGtkComboBox()
	}
	ret1 := C.gtk_combo_box_get_entry_text_column(this1)
	var ret2 int
	ret2 = int(ret1)
	return ret2
}
func (this0 *ComboBox) GetFocusOnClick() bool {
	var this1 *C.GtkComboBox
	if this0 != nil {
		this1 = this0.InheritedFromGtkComboBox()
	}
	ret1 := C.gtk_combo_box_get_focus_on_click(this1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *ComboBox) GetHasEntry() bool {
	var this1 *C.GtkComboBox
	if this0 != nil {
		this1 = this0.InheritedFromGtkComboBox()
	}
	ret1 := C.gtk_combo_box_get_has_entry(this1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *ComboBox) GetIDColumn() int {
	var this1 *C.GtkComboBox
	if this0 != nil {
		this1 = this0.InheritedFromGtkComboBox()
	}
	ret1 := C.gtk_combo_box_get_id_column(this1)
	var ret2 int
	ret2 = int(ret1)
	return ret2
}
func (this0 *ComboBox) GetModel() *TreeModel {
	var this1 *C.GtkComboBox
	if this0 != nil {
		this1 = this0.InheritedFromGtkComboBox()
	}
	ret1 := C.gtk_combo_box_get_model(this1)
	var ret2 *TreeModel
	ret2 = (*TreeModel)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
func (this0 *ComboBox) GetPopupAccessible() *atk.Object {
	var this1 *C.GtkComboBox
	if this0 != nil {
		this1 = this0.InheritedFromGtkComboBox()
	}
	ret1 := C.gtk_combo_box_get_popup_accessible(this1)
	var ret2 *atk.Object
	ret2 = (*atk.Object)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
func (this0 *ComboBox) GetPopupFixedWidth() bool {
	var this1 *C.GtkComboBox
	if this0 != nil {
		this1 = this0.InheritedFromGtkComboBox()
	}
	ret1 := C.gtk_combo_box_get_popup_fixed_width(this1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *ComboBox) GetRowSpanColumn() int {
	var this1 *C.GtkComboBox
	if this0 != nil {
		this1 = this0.InheritedFromGtkComboBox()
	}
	ret1 := C.gtk_combo_box_get_row_span_column(this1)
	var ret2 int
	ret2 = int(ret1)
	return ret2
}
func (this0 *ComboBox) GetTitle() string {
	var this1 *C.GtkComboBox
	if this0 != nil {
		this1 = this0.InheritedFromGtkComboBox()
	}
	ret1 := C.gtk_combo_box_get_title(this1)
	var ret2 string
	ret2 = C.GoString(ret1)
	return ret2
}
func (this0 *ComboBox) GetWrapWidth() int {
	var this1 *C.GtkComboBox
	if this0 != nil {
		this1 = this0.InheritedFromGtkComboBox()
	}
	ret1 := C.gtk_combo_box_get_wrap_width(this1)
	var ret2 int
	ret2 = int(ret1)
	return ret2
}
func (this0 *ComboBox) Popdown() {
	var this1 *C.GtkComboBox
	if this0 != nil {
		this1 = this0.InheritedFromGtkComboBox()
	}
	C.gtk_combo_box_popdown(this1)
}
func (this0 *ComboBox) Popup() {
	var this1 *C.GtkComboBox
	if this0 != nil {
		this1 = this0.InheritedFromGtkComboBox()
	}
	C.gtk_combo_box_popup(this1)
}
func (this0 *ComboBox) PopupForDevice(device0 gdk.DeviceLike) {
	var this1 *C.GtkComboBox
	var device1 *C.GdkDevice
	if this0 != nil {
		this1 = this0.InheritedFromGtkComboBox()
	}
	if device0 != nil {
		device1 = device0.InheritedFromGdkDevice()
	}
	C.gtk_combo_box_popup_for_device(this1, device1)
}
func (this0 *ComboBox) SetActive(index_0 int) {
	var this1 *C.GtkComboBox
	var index_1 C.int32_t
	if this0 != nil {
		this1 = this0.InheritedFromGtkComboBox()
	}
	index_1 = C.int32_t(index_0)
	C.gtk_combo_box_set_active(this1, index_1)
}
func (this0 *ComboBox) SetActiveID(active_id0 string) bool {
	var this1 *C.GtkComboBox
	var active_id1 *C.char
	if this0 != nil {
		this1 = this0.InheritedFromGtkComboBox()
	}
	active_id1 = _GoStringToGString(active_id0)
	defer C.free(unsafe.Pointer(active_id1))
	ret1 := C.gtk_combo_box_set_active_id(this1, active_id1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *ComboBox) SetActiveIter(iter0 *TreeIter) {
	var this1 *C.GtkComboBox
	var iter1 *C.GtkTreeIter
	if this0 != nil {
		this1 = this0.InheritedFromGtkComboBox()
	}
	iter1 = (*C.GtkTreeIter)(unsafe.Pointer(iter0))
	C.gtk_combo_box_set_active_iter(this1, iter1)
}
func (this0 *ComboBox) SetAddTearoffs(add_tearoffs0 bool) {
	var this1 *C.GtkComboBox
	var add_tearoffs1 C.int
	if this0 != nil {
		this1 = this0.InheritedFromGtkComboBox()
	}
	add_tearoffs1 = _GoBoolToCBool(add_tearoffs0)
	C.gtk_combo_box_set_add_tearoffs(this1, add_tearoffs1)
}
func (this0 *ComboBox) SetButtonSensitivity(sensitivity0 SensitivityType) {
	var this1 *C.GtkComboBox
	var sensitivity1 C.GtkSensitivityType
	if this0 != nil {
		this1 = this0.InheritedFromGtkComboBox()
	}
	sensitivity1 = C.GtkSensitivityType(sensitivity0)
	C.gtk_combo_box_set_button_sensitivity(this1, sensitivity1)
}
func (this0 *ComboBox) SetColumnSpanColumn(column_span0 int) {
	var this1 *C.GtkComboBox
	var column_span1 C.int32_t
	if this0 != nil {
		this1 = this0.InheritedFromGtkComboBox()
	}
	column_span1 = C.int32_t(column_span0)
	C.gtk_combo_box_set_column_span_column(this1, column_span1)
}
func (this0 *ComboBox) SetEntryTextColumn(text_column0 int) {
	var this1 *C.GtkComboBox
	var text_column1 C.int32_t
	if this0 != nil {
		this1 = this0.InheritedFromGtkComboBox()
	}
	text_column1 = C.int32_t(text_column0)
	C.gtk_combo_box_set_entry_text_column(this1, text_column1)
}
func (this0 *ComboBox) SetFocusOnClick(focus_on_click0 bool) {
	var this1 *C.GtkComboBox
	var focus_on_click1 C.int
	if this0 != nil {
		this1 = this0.InheritedFromGtkComboBox()
	}
	focus_on_click1 = _GoBoolToCBool(focus_on_click0)
	C.gtk_combo_box_set_focus_on_click(this1, focus_on_click1)
}
func (this0 *ComboBox) SetIDColumn(id_column0 int) {
	var this1 *C.GtkComboBox
	var id_column1 C.int32_t
	if this0 != nil {
		this1 = this0.InheritedFromGtkComboBox()
	}
	id_column1 = C.int32_t(id_column0)
	C.gtk_combo_box_set_id_column(this1, id_column1)
}
func (this0 *ComboBox) SetModel(model0 TreeModelLike) {
	var this1 *C.GtkComboBox
	var model1 *C.GtkTreeModel
	if this0 != nil {
		this1 = this0.InheritedFromGtkComboBox()
	}
	if model0 != nil {
		model1 = model0.ImplementsGtkTreeModel()}
	C.gtk_combo_box_set_model(this1, model1)
}
func (this0 *ComboBox) SetPopupFixedWidth(fixed0 bool) {
	var this1 *C.GtkComboBox
	var fixed1 C.int
	if this0 != nil {
		this1 = this0.InheritedFromGtkComboBox()
	}
	fixed1 = _GoBoolToCBool(fixed0)
	C.gtk_combo_box_set_popup_fixed_width(this1, fixed1)
}
func (this0 *ComboBox) SetRowSeparatorFunc(func0 TreeViewRowSeparatorFunc) {
	var this1 *C.GtkComboBox
	var func1 unsafe.Pointer
	if this0 != nil {
		this1 = this0.InheritedFromGtkComboBox()
	}
	if func0 != nil {
		func1 = unsafe.Pointer(&func0)}
	gobject.Holder.Grab(func1)
	C._gtk_combo_box_set_row_separator_func(this1, func1)
}
func (this0 *ComboBox) SetRowSpanColumn(row_span0 int) {
	var this1 *C.GtkComboBox
	var row_span1 C.int32_t
	if this0 != nil {
		this1 = this0.InheritedFromGtkComboBox()
	}
	row_span1 = C.int32_t(row_span0)
	C.gtk_combo_box_set_row_span_column(this1, row_span1)
}
func (this0 *ComboBox) SetTitle(title0 string) {
	var this1 *C.GtkComboBox
	var title1 *C.char
	if this0 != nil {
		this1 = this0.InheritedFromGtkComboBox()
	}
	title1 = _GoStringToGString(title0)
	defer C.free(unsafe.Pointer(title1))
	C.gtk_combo_box_set_title(this1, title1)
}
func (this0 *ComboBox) SetWrapWidth(width0 int) {
	var this1 *C.GtkComboBox
	var width1 C.int32_t
	if this0 != nil {
		this1 = this0.InheritedFromGtkComboBox()
	}
	width1 = C.int32_t(width0)
	C.gtk_combo_box_set_wrap_width(this1, width1)
}
type ComboBoxTextLike interface {
	ComboBoxLike
	InheritedFromGtkComboBoxText() *C.GtkComboBoxText
}

type ComboBoxText struct {
	ComboBox
	atk.ImplementorIfaceImpl
	BuildableImpl
	CellEditableImpl
	CellLayoutImpl
}

func ToComboBoxText(objlike gobject.ObjectLike) *ComboBoxText {
	c := objlike.InheritedFromGObject()
	if c == nil {
		return nil
	}
	t := (*ComboBoxText)(nil).GetStaticType()
	obj := gobject.ObjectGrabIfType(unsafe.Pointer(c), t)
	if obj != nil {
		return (*ComboBoxText)(obj)
	}
	panic("cannot cast to ComboBoxText")
}

func (this0 *ComboBoxText) InheritedFromGtkComboBoxText() *C.GtkComboBoxText {
	if this0 == nil {
		return nil
	}
	return (*C.GtkComboBoxText)(this0.C)
}

func (this0 *ComboBoxText) GetStaticType() gobject.Type {
	return gobject.Type(C.gtk_combo_box_text_get_type())
}

func ComboBoxTextGetType() gobject.Type {
	return (*ComboBoxText)(nil).GetStaticType()
}
func NewComboBoxText() *ComboBoxText {
	ret1 := C.gtk_combo_box_text_new()
	var ret2 *ComboBoxText
	ret2 = (*ComboBoxText)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
func NewComboBoxTextWithEntry() *ComboBoxText {
	ret1 := C.gtk_combo_box_text_new_with_entry()
	var ret2 *ComboBoxText
	ret2 = (*ComboBoxText)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
func (this0 *ComboBoxText) Append(id0 string, text0 string) {
	var this1 *C.GtkComboBoxText
	var id1 *C.char
	var text1 *C.char
	if this0 != nil {
		this1 = this0.InheritedFromGtkComboBoxText()
	}
	id1 = _GoStringToGString(id0)
	defer C.free(unsafe.Pointer(id1))
	text1 = _GoStringToGString(text0)
	defer C.free(unsafe.Pointer(text1))
	C.gtk_combo_box_text_append(this1, id1, text1)
}
func (this0 *ComboBoxText) AppendText(text0 string) {
	var this1 *C.GtkComboBoxText
	var text1 *C.char
	if this0 != nil {
		this1 = this0.InheritedFromGtkComboBoxText()
	}
	text1 = _GoStringToGString(text0)
	defer C.free(unsafe.Pointer(text1))
	C.gtk_combo_box_text_append_text(this1, text1)
}
func (this0 *ComboBoxText) GetActiveText() string {
	var this1 *C.GtkComboBoxText
	if this0 != nil {
		this1 = this0.InheritedFromGtkComboBoxText()
	}
	ret1 := C.gtk_combo_box_text_get_active_text(this1)
	var ret2 string
	ret2 = C.GoString(ret1)
	C.g_free(unsafe.Pointer(ret1))
	return ret2
}
func (this0 *ComboBoxText) Insert(position0 int, id0 string, text0 string) {
	var this1 *C.GtkComboBoxText
	var position1 C.int32_t
	var id1 *C.char
	var text1 *C.char
	if this0 != nil {
		this1 = this0.InheritedFromGtkComboBoxText()
	}
	position1 = C.int32_t(position0)
	id1 = _GoStringToGString(id0)
	defer C.free(unsafe.Pointer(id1))
	text1 = _GoStringToGString(text0)
	defer C.free(unsafe.Pointer(text1))
	C.gtk_combo_box_text_insert(this1, position1, id1, text1)
}
func (this0 *ComboBoxText) InsertText(position0 int, text0 string) {
	var this1 *C.GtkComboBoxText
	var position1 C.int32_t
	var text1 *C.char
	if this0 != nil {
		this1 = this0.InheritedFromGtkComboBoxText()
	}
	position1 = C.int32_t(position0)
	text1 = _GoStringToGString(text0)
	defer C.free(unsafe.Pointer(text1))
	C.gtk_combo_box_text_insert_text(this1, position1, text1)
}
func (this0 *ComboBoxText) Prepend(id0 string, text0 string) {
	var this1 *C.GtkComboBoxText
	var id1 *C.char
	var text1 *C.char
	if this0 != nil {
		this1 = this0.InheritedFromGtkComboBoxText()
	}
	id1 = _GoStringToGString(id0)
	defer C.free(unsafe.Pointer(id1))
	text1 = _GoStringToGString(text0)
	defer C.free(unsafe.Pointer(text1))
	C.gtk_combo_box_text_prepend(this1, id1, text1)
}
func (this0 *ComboBoxText) PrependText(text0 string) {
	var this1 *C.GtkComboBoxText
	var text1 *C.char
	if this0 != nil {
		this1 = this0.InheritedFromGtkComboBoxText()
	}
	text1 = _GoStringToGString(text0)
	defer C.free(unsafe.Pointer(text1))
	C.gtk_combo_box_text_prepend_text(this1, text1)
}
func (this0 *ComboBoxText) Remove(position0 int) {
	var this1 *C.GtkComboBoxText
	var position1 C.int32_t
	if this0 != nil {
		this1 = this0.InheritedFromGtkComboBoxText()
	}
	position1 = C.int32_t(position0)
	C.gtk_combo_box_text_remove(this1, position1)
}
func (this0 *ComboBoxText) RemoveAll() {
	var this1 *C.GtkComboBoxText
	if this0 != nil {
		this1 = this0.InheritedFromGtkComboBoxText()
	}
	C.gtk_combo_box_text_remove_all(this1)
}
type ContainerLike interface {
	WidgetLike
	InheritedFromGtkContainer() *C.GtkContainer
}

type Container struct {
	Widget
	atk.ImplementorIfaceImpl
	BuildableImpl
}

func ToContainer(objlike gobject.ObjectLike) *Container {
	c := objlike.InheritedFromGObject()
	if c == nil {
		return nil
	}
	t := (*Container)(nil).GetStaticType()
	obj := gobject.ObjectGrabIfType(unsafe.Pointer(c), t)
	if obj != nil {
		return (*Container)(obj)
	}
	panic("cannot cast to Container")
}

func (this0 *Container) InheritedFromGtkContainer() *C.GtkContainer {
	if this0 == nil {
		return nil
	}
	return (*C.GtkContainer)(this0.C)
}

func (this0 *Container) GetStaticType() gobject.Type {
	return gobject.Type(C.gtk_container_get_type())
}

func ContainerGetType() gobject.Type {
	return (*Container)(nil).GetStaticType()
}
func (this0 *Container) Add(widget0 WidgetLike) {
	var this1 *C.GtkContainer
	var widget1 *C.GtkWidget
	if this0 != nil {
		this1 = this0.InheritedFromGtkContainer()
	}
	if widget0 != nil {
		widget1 = widget0.InheritedFromGtkWidget()
	}
	C.gtk_container_add(this1, widget1)
}
func (this0 *Container) CheckResize() {
	var this1 *C.GtkContainer
	if this0 != nil {
		this1 = this0.InheritedFromGtkContainer()
	}
	C.gtk_container_check_resize(this1)
}
func (this0 *Container) ChildGetProperty(child0 WidgetLike, property_name0 string, value0 *gobject.Value) {
	var this1 *C.GtkContainer
	var child1 *C.GtkWidget
	var property_name1 *C.char
	var value1 *C.GValue
	if this0 != nil {
		this1 = this0.InheritedFromGtkContainer()
	}
	if child0 != nil {
		child1 = child0.InheritedFromGtkWidget()
	}
	property_name1 = _GoStringToGString(property_name0)
	defer C.free(unsafe.Pointer(property_name1))
	value1 = (*C.GValue)(unsafe.Pointer(value0))
	C.gtk_container_child_get_property(this1, child1, property_name1, value1)
}
func (this0 *Container) ChildNotify(child0 WidgetLike, child_property0 string) {
	var this1 *C.GtkContainer
	var child1 *C.GtkWidget
	var child_property1 *C.char
	if this0 != nil {
		this1 = this0.InheritedFromGtkContainer()
	}
	if child0 != nil {
		child1 = child0.InheritedFromGtkWidget()
	}
	child_property1 = _GoStringToGString(child_property0)
	defer C.free(unsafe.Pointer(child_property1))
	C.gtk_container_child_notify(this1, child1, child_property1)
}
func (this0 *Container) ChildSetProperty(child0 WidgetLike, property_name0 string, value0 *gobject.Value) {
	var this1 *C.GtkContainer
	var child1 *C.GtkWidget
	var property_name1 *C.char
	var value1 *C.GValue
	if this0 != nil {
		this1 = this0.InheritedFromGtkContainer()
	}
	if child0 != nil {
		child1 = child0.InheritedFromGtkWidget()
	}
	property_name1 = _GoStringToGString(property_name0)
	defer C.free(unsafe.Pointer(property_name1))
	value1 = (*C.GValue)(unsafe.Pointer(value0))
	C.gtk_container_child_set_property(this1, child1, property_name1, value1)
}
func (this0 *Container) ChildType() gobject.Type {
	var this1 *C.GtkContainer
	if this0 != nil {
		this1 = this0.InheritedFromGtkContainer()
	}
	ret1 := C.gtk_container_child_type(this1)
	var ret2 gobject.Type
	ret2 = gobject.Type(ret1)
	return ret2
}
func (this0 *Container) Forall(callback0 Callback) {
	var this1 *C.GtkContainer
	var callback1 unsafe.Pointer
	if this0 != nil {
		this1 = this0.InheritedFromGtkContainer()
	}
	if callback0 != nil {
		callback1 = unsafe.Pointer(&callback0)}
	C._gtk_container_forall(this1, callback1)
}
func (this0 *Container) Foreach(callback0 Callback) {
	var this1 *C.GtkContainer
	var callback1 unsafe.Pointer
	if this0 != nil {
		this1 = this0.InheritedFromGtkContainer()
	}
	if callback0 != nil {
		callback1 = unsafe.Pointer(&callback0)}
	C._gtk_container_foreach(this1, callback1)
}
func (this0 *Container) GetBorderWidth() int {
	var this1 *C.GtkContainer
	if this0 != nil {
		this1 = this0.InheritedFromGtkContainer()
	}
	ret1 := C.gtk_container_get_border_width(this1)
	var ret2 int
	ret2 = int(ret1)
	return ret2
}
func (this0 *Container) GetChildren() []*Widget {
	var this1 *C.GtkContainer
	if this0 != nil {
		this1 = this0.InheritedFromGtkContainer()
	}
	ret1 := C.gtk_container_get_children(this1)
	var ret2 []*Widget
	for iter := (*_GList)(unsafe.Pointer(ret1)); iter != nil; iter = iter.next {
		var elt *Widget
		elt = (*Widget)(gobject.ObjectWrap(unsafe.Pointer((*C.GtkWidget)(iter.data)), true))
		ret2 = append(ret2, elt)
	}
	return ret2
}
func (this0 *Container) GetFocusChain() ([]*Widget, bool) {
	var this1 *C.GtkContainer
	var focusable_widgets1 *C.GList
	if this0 != nil {
		this1 = this0.InheritedFromGtkContainer()
	}
	ret1 := C.gtk_container_get_focus_chain(this1, &focusable_widgets1)
	var focusable_widgets2 []*Widget
	var ret2 bool
	for iter := (*_GList)(unsafe.Pointer(focusable_widgets1)); iter != nil; iter = iter.next {
		var elt *Widget
		elt = (*Widget)(gobject.ObjectWrap(unsafe.Pointer((*C.GtkWidget)(iter.data)), true))
		focusable_widgets2 = append(focusable_widgets2, elt)
	}
	ret2 = ret1 != 0
	return focusable_widgets2, ret2
}
func (this0 *Container) GetFocusChild() *Widget {
	var this1 *C.GtkContainer
	if this0 != nil {
		this1 = this0.InheritedFromGtkContainer()
	}
	ret1 := C.gtk_container_get_focus_child(this1)
	var ret2 *Widget
	ret2 = (*Widget)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
func (this0 *Container) GetFocusHAdjustment() *Adjustment {
	var this1 *C.GtkContainer
	if this0 != nil {
		this1 = this0.InheritedFromGtkContainer()
	}
	ret1 := C.gtk_container_get_focus_hadjustment(this1)
	var ret2 *Adjustment
	ret2 = (*Adjustment)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
func (this0 *Container) GetFocusVAdjustment() *Adjustment {
	var this1 *C.GtkContainer
	if this0 != nil {
		this1 = this0.InheritedFromGtkContainer()
	}
	ret1 := C.gtk_container_get_focus_vadjustment(this1)
	var ret2 *Adjustment
	ret2 = (*Adjustment)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
func (this0 *Container) GetPathForChild(child0 WidgetLike) *WidgetPath {
	var this1 *C.GtkContainer
	var child1 *C.GtkWidget
	if this0 != nil {
		this1 = this0.InheritedFromGtkContainer()
	}
	if child0 != nil {
		child1 = child0.InheritedFromGtkWidget()
	}
	ret1 := C.gtk_container_get_path_for_child(this1, child1)
	var ret2 *WidgetPath
	ret2 = (*WidgetPath)(unsafe.Pointer(ret1))
	return ret2
}
func (this0 *Container) GetResizeMode() ResizeMode {
	var this1 *C.GtkContainer
	if this0 != nil {
		this1 = this0.InheritedFromGtkContainer()
	}
	ret1 := C.gtk_container_get_resize_mode(this1)
	var ret2 ResizeMode
	ret2 = ResizeMode(ret1)
	return ret2
}
func (this0 *Container) PropagateDraw(child0 WidgetLike, cr0 *cairo.Context) {
	var this1 *C.GtkContainer
	var child1 *C.GtkWidget
	var cr1 *C.cairoContext
	if this0 != nil {
		this1 = this0.InheritedFromGtkContainer()
	}
	if child0 != nil {
		child1 = child0.InheritedFromGtkWidget()
	}
	if cr0 != nil {
		cr1 = (*C.cairoContext)(cr0.C)
	}
	C.gtk_container_propagate_draw(this1, child1, cr1)
}
func (this0 *Container) Remove(widget0 WidgetLike) {
	var this1 *C.GtkContainer
	var widget1 *C.GtkWidget
	if this0 != nil {
		this1 = this0.InheritedFromGtkContainer()
	}
	if widget0 != nil {
		widget1 = widget0.InheritedFromGtkWidget()
	}
	C.gtk_container_remove(this1, widget1)
}
func (this0 *Container) ResizeChildren() {
	var this1 *C.GtkContainer
	if this0 != nil {
		this1 = this0.InheritedFromGtkContainer()
	}
	C.gtk_container_resize_children(this1)
}
func (this0 *Container) SetBorderWidth(border_width0 int) {
	var this1 *C.GtkContainer
	var border_width1 C.uint32_t
	if this0 != nil {
		this1 = this0.InheritedFromGtkContainer()
	}
	border_width1 = C.uint32_t(border_width0)
	C.gtk_container_set_border_width(this1, border_width1)
}
func (this0 *Container) SetFocusChain(focusable_widgets0 []*Widget) {
	var this1 *C.GtkContainer
	var focusable_widgets1 *C.GList
	if this0 != nil {
		this1 = this0.InheritedFromGtkContainer()
	}
	C.gtk_container_set_focus_chain(this1, focusable_widgets1)
}
func (this0 *Container) SetFocusChild(child0 WidgetLike) {
	var this1 *C.GtkContainer
	var child1 *C.GtkWidget
	if this0 != nil {
		this1 = this0.InheritedFromGtkContainer()
	}
	if child0 != nil {
		child1 = child0.InheritedFromGtkWidget()
	}
	C.gtk_container_set_focus_child(this1, child1)
}
func (this0 *Container) SetFocusHAdjustment(adjustment0 AdjustmentLike) {
	var this1 *C.GtkContainer
	var adjustment1 *C.GtkAdjustment
	if this0 != nil {
		this1 = this0.InheritedFromGtkContainer()
	}
	if adjustment0 != nil {
		adjustment1 = adjustment0.InheritedFromGtkAdjustment()
	}
	C.gtk_container_set_focus_hadjustment(this1, adjustment1)
}
func (this0 *Container) SetFocusVAdjustment(adjustment0 AdjustmentLike) {
	var this1 *C.GtkContainer
	var adjustment1 *C.GtkAdjustment
	if this0 != nil {
		this1 = this0.InheritedFromGtkContainer()
	}
	if adjustment0 != nil {
		adjustment1 = adjustment0.InheritedFromGtkAdjustment()
	}
	C.gtk_container_set_focus_vadjustment(this1, adjustment1)
}
func (this0 *Container) SetReallocateRedraws(needs_redraws0 bool) {
	var this1 *C.GtkContainer
	var needs_redraws1 C.int
	if this0 != nil {
		this1 = this0.InheritedFromGtkContainer()
	}
	needs_redraws1 = _GoBoolToCBool(needs_redraws0)
	C.gtk_container_set_reallocate_redraws(this1, needs_redraws1)
}
func (this0 *Container) SetResizeMode(resize_mode0 ResizeMode) {
	var this1 *C.GtkContainer
	var resize_mode1 C.GtkResizeMode
	if this0 != nil {
		this1 = this0.InheritedFromGtkContainer()
	}
	resize_mode1 = C.GtkResizeMode(resize_mode0)
	C.gtk_container_set_resize_mode(this1, resize_mode1)
}
func (this0 *Container) UnsetFocusChain() {
	var this1 *C.GtkContainer
	if this0 != nil {
		this1 = this0.InheritedFromGtkContainer()
	}
	C.gtk_container_unset_focus_chain(this1)
}
type CornerType C.uint32_t
const (
	CornerTypeTopLeft CornerType = 0
	CornerTypeBottomLeft CornerType = 1
	CornerTypeTopRight CornerType = 2
	CornerTypeBottomRight CornerType = 3
)
type CssProviderLike interface {
	gobject.ObjectLike
	InheritedFromGtkCssProvider() *C.GtkCssProvider
}

type CssProvider struct {
	gobject.Object
	StyleProviderImpl
}

func ToCssProvider(objlike gobject.ObjectLike) *CssProvider {
	c := objlike.InheritedFromGObject()
	if c == nil {
		return nil
	}
	t := (*CssProvider)(nil).GetStaticType()
	obj := gobject.ObjectGrabIfType(unsafe.Pointer(c), t)
	if obj != nil {
		return (*CssProvider)(obj)
	}
	panic("cannot cast to CssProvider")
}

func (this0 *CssProvider) InheritedFromGtkCssProvider() *C.GtkCssProvider {
	if this0 == nil {
		return nil
	}
	return (*C.GtkCssProvider)(this0.C)
}

func (this0 *CssProvider) GetStaticType() gobject.Type {
	return gobject.Type(C.gtk_css_provider_get_type())
}

func CssProviderGetType() gobject.Type {
	return (*CssProvider)(nil).GetStaticType()
}
func NewCssProvider() *CssProvider {
	ret1 := C.gtk_css_provider_new()
	var ret2 *CssProvider
	ret2 = (*CssProvider)(gobject.ObjectWrap(unsafe.Pointer(ret1), false))
	return ret2
}
func CssProviderGetDefault() *CssProvider {
	ret1 := C.gtk_css_provider_get_default()
	var ret2 *CssProvider
	ret2 = (*CssProvider)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
func CssProviderGetNamed(name0 string, variant0 string) *CssProvider {
	var name1 *C.char
	var variant1 *C.char
	name1 = _GoStringToGString(name0)
	defer C.free(unsafe.Pointer(name1))
	variant1 = _GoStringToGString(variant0)
	defer C.free(unsafe.Pointer(variant1))
	ret1 := C.gtk_css_provider_get_named(name1, variant1)
	var ret2 *CssProvider
	ret2 = (*CssProvider)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
func (this0 *CssProvider) LoadFromData(data0 []int) (bool, error) {
	var this1 *C.GtkCssProvider
	var data1 *C.uint8_t
	var length1 C.int64_t
	var err1 *C.GError
	if this0 != nil {
		this1 = this0.InheritedFromGtkCssProvider()
	}
	data1 = (*C.uint8_t)(C.malloc(C.size_t(int(unsafe.Sizeof(*data1)) * len(data0))))
	defer C.free(unsafe.Pointer(data1))
	for i, e := range data0 {
		(*(*[999999]C.uint8_t)(unsafe.Pointer(data1)))[i] = C.uint8_t(e)
	}
	length1 = C.int64_t(len(data0))
	ret1 := C.gtk_css_provider_load_from_data(this1, data1, length1, &err1)
	var ret2 bool
	var err2 error
	ret2 = ret1 != 0
	if err1 != nil {
		err2 = errors.New(C.GoString(((*_GError)(unsafe.Pointer(err1))).message))
		C.g_error_free(err1)
	}
	return ret2, err2
}
func (this0 *CssProvider) LoadFromFile(file0 gio.FileLike) (bool, error) {
	var this1 *C.GtkCssProvider
	var file1 *C.GFile
	var err1 *C.GError
	if this0 != nil {
		this1 = this0.InheritedFromGtkCssProvider()
	}
	if file0 != nil {
		file1 = file0.ImplementsGFile()}
	ret1 := C.gtk_css_provider_load_from_file(this1, file1, &err1)
	var ret2 bool
	var err2 error
	ret2 = ret1 != 0
	if err1 != nil {
		err2 = errors.New(C.GoString(((*_GError)(unsafe.Pointer(err1))).message))
		C.g_error_free(err1)
	}
	return ret2, err2
}
func (this0 *CssProvider) LoadFromPath(path0 string) (bool, error) {
	var this1 *C.GtkCssProvider
	var path1 *C.char
	var err1 *C.GError
	if this0 != nil {
		this1 = this0.InheritedFromGtkCssProvider()
	}
	path1 = _GoStringToGString(path0)
	defer C.free(unsafe.Pointer(path1))
	ret1 := C.gtk_css_provider_load_from_path(this1, path1, &err1)
	var ret2 bool
	var err2 error
	ret2 = ret1 != 0
	if err1 != nil {
		err2 = errors.New(C.GoString(((*_GError)(unsafe.Pointer(err1))).message))
		C.g_error_free(err1)
	}
	return ret2, err2
}
func (this0 *CssProvider) ToString() string {
	var this1 *C.GtkCssProvider
	if this0 != nil {
		this1 = this0.InheritedFromGtkCssProvider()
	}
	ret1 := C.gtk_css_provider_to_string(this1)
	var ret2 string
	ret2 = C.GoString(ret1)
	C.g_free(unsafe.Pointer(ret1))
	return ret2
}
type CssProviderError C.uint32_t
const (
	CssProviderErrorFailed CssProviderError = 0
	CssProviderErrorSyntax CssProviderError = 1
	CssProviderErrorImport CssProviderError = 2
	CssProviderErrorName CssProviderError = 3
	CssProviderErrorDeprecated CssProviderError = 4
	CssProviderErrorUnknownValue CssProviderError = 5
)
type CssSection struct {}
func (this0 *CssSection) GetEndLine() int {
	var this1 *C.GtkCssSection
	this1 = (*C.GtkCssSection)(unsafe.Pointer(this0))
	ret1 := C.gtk_css_section_get_end_line(this1)
	var ret2 int
	ret2 = int(ret1)
	return ret2
}
func (this0 *CssSection) GetEndPosition() int {
	var this1 *C.GtkCssSection
	this1 = (*C.GtkCssSection)(unsafe.Pointer(this0))
	ret1 := C.gtk_css_section_get_end_position(this1)
	var ret2 int
	ret2 = int(ret1)
	return ret2
}
func (this0 *CssSection) GetParent() *CssSection {
	var this1 *C.GtkCssSection
	this1 = (*C.GtkCssSection)(unsafe.Pointer(this0))
	ret1 := C.gtk_css_section_get_parent(this1)
	var ret2 *CssSection
	ret2 = (*CssSection)(unsafe.Pointer(ret1))
	return ret2
}
func (this0 *CssSection) GetSectionType() CssSectionType {
	var this1 *C.GtkCssSection
	this1 = (*C.GtkCssSection)(unsafe.Pointer(this0))
	ret1 := C.gtk_css_section_get_section_type(this1)
	var ret2 CssSectionType
	ret2 = CssSectionType(ret1)
	return ret2
}
func (this0 *CssSection) GetStartLine() int {
	var this1 *C.GtkCssSection
	this1 = (*C.GtkCssSection)(unsafe.Pointer(this0))
	ret1 := C.gtk_css_section_get_start_line(this1)
	var ret2 int
	ret2 = int(ret1)
	return ret2
}
func (this0 *CssSection) GetStartPosition() int {
	var this1 *C.GtkCssSection
	this1 = (*C.GtkCssSection)(unsafe.Pointer(this0))
	ret1 := C.gtk_css_section_get_start_position(this1)
	var ret2 int
	ret2 = int(ret1)
	return ret2
}
type CssSectionType C.uint32_t
const (
	CssSectionTypeDocument CssSectionType = 0
	CssSectionTypeImport CssSectionType = 1
	CssSectionTypeColorDefinition CssSectionType = 2
	CssSectionTypeBindingSet CssSectionType = 3
	CssSectionTypeRuleset CssSectionType = 4
	CssSectionTypeSelector CssSectionType = 5
	CssSectionTypeDeclaration CssSectionType = 6
	CssSectionTypeValue CssSectionType = 7
)
type DebugFlag C.uint32_t
const (
	DebugFlagMisc DebugFlag = 1
	DebugFlagPlugsocket DebugFlag = 2
	DebugFlagText DebugFlag = 4
	DebugFlagTree DebugFlag = 8
	DebugFlagUpdates DebugFlag = 16
	DebugFlagKeybindings DebugFlag = 32
	DebugFlagMultihead DebugFlag = 64
	DebugFlagModules DebugFlag = 128
	DebugFlagGeometry DebugFlag = 256
	DebugFlagIcontheme DebugFlag = 512
	DebugFlagPrinting DebugFlag = 1024
	DebugFlagBuilder DebugFlag = 2048
	DebugFlagSizeRequest DebugFlag = 4096
)
type DeleteType C.uint32_t
const (
	DeleteTypeChars DeleteType = 0
	DeleteTypeWordEnds DeleteType = 1
	DeleteTypeWords DeleteType = 2
	DeleteTypeDisplayLines DeleteType = 3
	DeleteTypeDisplayLineEnds DeleteType = 4
	DeleteTypeParagraphEnds DeleteType = 5
	DeleteTypeParagraphs DeleteType = 6
	DeleteTypeWhitespace DeleteType = 7
)
type DestDefaults C.uint32_t
const (
	DestDefaultsMotion DestDefaults = 1
	DestDefaultsHighlight DestDefaults = 2
	DestDefaultsDrop DestDefaults = 4
	DestDefaultsAll DestDefaults = 7
)
type DialogLike interface {
	WindowLike
	InheritedFromGtkDialog() *C.GtkDialog
}

type Dialog struct {
	Window
	atk.ImplementorIfaceImpl
	BuildableImpl
}

func ToDialog(objlike gobject.ObjectLike) *Dialog {
	c := objlike.InheritedFromGObject()
	if c == nil {
		return nil
	}
	t := (*Dialog)(nil).GetStaticType()
	obj := gobject.ObjectGrabIfType(unsafe.Pointer(c), t)
	if obj != nil {
		return (*Dialog)(obj)
	}
	panic("cannot cast to Dialog")
}

func (this0 *Dialog) InheritedFromGtkDialog() *C.GtkDialog {
	if this0 == nil {
		return nil
	}
	return (*C.GtkDialog)(this0.C)
}

func (this0 *Dialog) GetStaticType() gobject.Type {
	return gobject.Type(C.gtk_dialog_get_type())
}

func DialogGetType() gobject.Type {
	return (*Dialog)(nil).GetStaticType()
}
func NewDialog() *Dialog {
	ret1 := C.gtk_dialog_new()
	var ret2 *Dialog
	ret2 = (*Dialog)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
func (this0 *Dialog) AddActionWidget(child0 WidgetLike, response_id0 int) {
	var this1 *C.GtkDialog
	var child1 *C.GtkWidget
	var response_id1 C.int32_t
	if this0 != nil {
		this1 = this0.InheritedFromGtkDialog()
	}
	if child0 != nil {
		child1 = child0.InheritedFromGtkWidget()
	}
	response_id1 = C.int32_t(response_id0)
	C.gtk_dialog_add_action_widget(this1, child1, response_id1)
}
func (this0 *Dialog) _AddButton(button_text0 string, response_id0 int) *Widget {
	var this1 *C.GtkDialog
	var button_text1 *C.char
	var response_id1 C.int32_t
	if this0 != nil {
		this1 = this0.InheritedFromGtkDialog()
	}
	button_text1 = _GoStringToGString(button_text0)
	defer C.free(unsafe.Pointer(button_text1))
	response_id1 = C.int32_t(response_id0)
	ret1 := C.gtk_dialog_add_button(this1, button_text1, response_id1)
	var ret2 *Widget
	ret2 = (*Widget)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
func (this0 *Dialog) GetActionArea() *Widget {
	var this1 *C.GtkDialog
	if this0 != nil {
		this1 = this0.InheritedFromGtkDialog()
	}
	ret1 := C.gtk_dialog_get_action_area(this1)
	var ret2 *Widget
	ret2 = (*Widget)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
func (this0 *Dialog) GetContentArea() *Widget {
	var this1 *C.GtkDialog
	if this0 != nil {
		this1 = this0.InheritedFromGtkDialog()
	}
	ret1 := C.gtk_dialog_get_content_area(this1)
	var ret2 *Widget
	ret2 = (*Widget)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
func (this0 *Dialog) GetResponseForWidget(widget0 WidgetLike) int {
	var this1 *C.GtkDialog
	var widget1 *C.GtkWidget
	if this0 != nil {
		this1 = this0.InheritedFromGtkDialog()
	}
	if widget0 != nil {
		widget1 = widget0.InheritedFromGtkWidget()
	}
	ret1 := C.gtk_dialog_get_response_for_widget(this1, widget1)
	var ret2 int
	ret2 = int(ret1)
	return ret2
}
func (this0 *Dialog) GetWidgetForResponse(response_id0 int) *Widget {
	var this1 *C.GtkDialog
	var response_id1 C.int32_t
	if this0 != nil {
		this1 = this0.InheritedFromGtkDialog()
	}
	response_id1 = C.int32_t(response_id0)
	ret1 := C.gtk_dialog_get_widget_for_response(this1, response_id1)
	var ret2 *Widget
	ret2 = (*Widget)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
func (this0 *Dialog) Response(response_id0 int) {
	var this1 *C.GtkDialog
	var response_id1 C.int32_t
	if this0 != nil {
		this1 = this0.InheritedFromGtkDialog()
	}
	response_id1 = C.int32_t(response_id0)
	C.gtk_dialog_response(this1, response_id1)
}
func (this0 *Dialog) _Run() int {
	var this1 *C.GtkDialog
	if this0 != nil {
		this1 = this0.InheritedFromGtkDialog()
	}
	ret1 := C.gtk_dialog_run(this1)
	var ret2 int
	ret2 = int(ret1)
	return ret2
}
func (this0 *Dialog) SetAlternativeButtonOrderFromArray(new_order0 []int) {
	var this1 *C.GtkDialog
	var new_order1 *C.int32_t
	var n_params1 C.int32_t
	if this0 != nil {
		this1 = this0.InheritedFromGtkDialog()
	}
	new_order1 = (*C.int32_t)(C.malloc(C.size_t(int(unsafe.Sizeof(*new_order1)) * len(new_order0))))
	defer C.free(unsafe.Pointer(new_order1))
	for i, e := range new_order0 {
		(*(*[999999]C.int32_t)(unsafe.Pointer(new_order1)))[i] = C.int32_t(e)
	}
	n_params1 = C.int32_t(len(new_order0))
	C.gtk_dialog_set_alternative_button_order_from_array(this1, n_params1, new_order1)
}
func (this0 *Dialog) SetDefaultResponse(response_id0 int) {
	var this1 *C.GtkDialog
	var response_id1 C.int32_t
	if this0 != nil {
		this1 = this0.InheritedFromGtkDialog()
	}
	response_id1 = C.int32_t(response_id0)
	C.gtk_dialog_set_default_response(this1, response_id1)
}
func (this0 *Dialog) SetResponseSensitive(response_id0 int, setting0 bool) {
	var this1 *C.GtkDialog
	var response_id1 C.int32_t
	var setting1 C.int
	if this0 != nil {
		this1 = this0.InheritedFromGtkDialog()
	}
	response_id1 = C.int32_t(response_id0)
	setting1 = _GoBoolToCBool(setting0)
	C.gtk_dialog_set_response_sensitive(this1, response_id1, setting1)
}
type DialogFlags C.uint32_t
const (
	DialogFlagsModal DialogFlags = 1
	DialogFlagsDestroyWithParent DialogFlags = 2
)
type DirectionType C.uint32_t
const (
	DirectionTypeTabForward DirectionType = 0
	DirectionTypeTabBackward DirectionType = 1
	DirectionTypeUp DirectionType = 2
	DirectionTypeDown DirectionType = 3
	DirectionTypeLeft DirectionType = 4
	DirectionTypeRight DirectionType = 5
)
type DragResult C.uint32_t
const (
	DragResultSuccess DragResult = 0
	DragResultNoTarget DragResult = 1
	DragResultUserCancelled DragResult = 2
	DragResultTimeoutExpired DragResult = 3
	DragResultGrabBroken DragResult = 4
	DragResultError DragResult = 5
)
type DrawingAreaLike interface {
	WidgetLike
	InheritedFromGtkDrawingArea() *C.GtkDrawingArea
}

type DrawingArea struct {
	Widget
	atk.ImplementorIfaceImpl
	BuildableImpl
}

func ToDrawingArea(objlike gobject.ObjectLike) *DrawingArea {
	c := objlike.InheritedFromGObject()
	if c == nil {
		return nil
	}
	t := (*DrawingArea)(nil).GetStaticType()
	obj := gobject.ObjectGrabIfType(unsafe.Pointer(c), t)
	if obj != nil {
		return (*DrawingArea)(obj)
	}
	panic("cannot cast to DrawingArea")
}

func (this0 *DrawingArea) InheritedFromGtkDrawingArea() *C.GtkDrawingArea {
	if this0 == nil {
		return nil
	}
	return (*C.GtkDrawingArea)(this0.C)
}

func (this0 *DrawingArea) GetStaticType() gobject.Type {
	return gobject.Type(C.gtk_drawing_area_get_type())
}

func DrawingAreaGetType() gobject.Type {
	return (*DrawingArea)(nil).GetStaticType()
}
func NewDrawingArea() *DrawingArea {
	ret1 := C.gtk_drawing_area_new()
	var ret2 *DrawingArea
	ret2 = (*DrawingArea)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
type EditableLike interface {
	ImplementsGtkEditable() *C.GtkEditable
}

type Editable struct {
	gobject.Object
	EditableImpl
}

type EditableImpl struct {}

func ToEditable(objlike gobject.ObjectLike) *Editable {
	t := (*EditableImpl)(nil).GetStaticType()
	c := objlike.InheritedFromGObject()
	obj := gobject.ObjectGrabIfType(unsafe.Pointer(c), t)
	if obj != nil {
		return (*Editable)(obj)
	}
	panic("cannot cast to Editable")
}

func (this0 *EditableImpl) ImplementsGtkEditable() *C.GtkEditable {
	obj := uintptr(unsafe.Pointer(this0)) - unsafe.Sizeof(uintptr(0))
	return (*C.GtkEditable)((*gobject.Object)(unsafe.Pointer(obj)).C)
}

func (this0 *EditableImpl) GetStaticType() gobject.Type {
	return gobject.Type(C.gtk_editable_get_type())
}

func EditableGetType() gobject.Type {
	return (*EditableImpl)(nil).GetStaticType()
}
func (this0 *EditableImpl) CopyClipboard() {
	var this1 *C.GtkEditable
	if this0 != nil {
		this1 = this0.ImplementsGtkEditable()}
	C.gtk_editable_copy_clipboard(this1)
}
func (this0 *EditableImpl) CutClipboard() {
	var this1 *C.GtkEditable
	if this0 != nil {
		this1 = this0.ImplementsGtkEditable()}
	C.gtk_editable_cut_clipboard(this1)
}
func (this0 *EditableImpl) DeleteSelection() {
	var this1 *C.GtkEditable
	if this0 != nil {
		this1 = this0.ImplementsGtkEditable()}
	C.gtk_editable_delete_selection(this1)
}
func (this0 *EditableImpl) DeleteText(start_pos0 int, end_pos0 int) {
	var this1 *C.GtkEditable
	var start_pos1 C.int32_t
	var end_pos1 C.int32_t
	if this0 != nil {
		this1 = this0.ImplementsGtkEditable()}
	start_pos1 = C.int32_t(start_pos0)
	end_pos1 = C.int32_t(end_pos0)
	C.gtk_editable_delete_text(this1, start_pos1, end_pos1)
}
func (this0 *EditableImpl) GetChars(start_pos0 int, end_pos0 int) string {
	var this1 *C.GtkEditable
	var start_pos1 C.int32_t
	var end_pos1 C.int32_t
	if this0 != nil {
		this1 = this0.ImplementsGtkEditable()}
	start_pos1 = C.int32_t(start_pos0)
	end_pos1 = C.int32_t(end_pos0)
	ret1 := C.gtk_editable_get_chars(this1, start_pos1, end_pos1)
	var ret2 string
	ret2 = C.GoString(ret1)
	C.g_free(unsafe.Pointer(ret1))
	return ret2
}
func (this0 *EditableImpl) GetEditable() bool {
	var this1 *C.GtkEditable
	if this0 != nil {
		this1 = this0.ImplementsGtkEditable()}
	ret1 := C.gtk_editable_get_editable(this1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *EditableImpl) GetPosition() int {
	var this1 *C.GtkEditable
	if this0 != nil {
		this1 = this0.ImplementsGtkEditable()}
	ret1 := C.gtk_editable_get_position(this1)
	var ret2 int
	ret2 = int(ret1)
	return ret2
}
func (this0 *EditableImpl) GetSelectionBounds() (int, int, bool) {
	var this1 *C.GtkEditable
	var start_pos1 C.int32_t
	var end_pos1 C.int32_t
	if this0 != nil {
		this1 = this0.ImplementsGtkEditable()}
	ret1 := C.gtk_editable_get_selection_bounds(this1, &start_pos1, &end_pos1)
	var start_pos2 int
	var end_pos2 int
	var ret2 bool
	start_pos2 = int(start_pos1)
	end_pos2 = int(end_pos1)
	ret2 = ret1 != 0
	return start_pos2, end_pos2, ret2
}
func (this0 *EditableImpl) InsertText(new_text0 string, new_text_length0 int, position0 int) int {
	var this1 *C.GtkEditable
	var new_text1 *C.char
	var new_text_length1 C.int32_t
	var position1 C.int32_t
	if this0 != nil {
		this1 = this0.ImplementsGtkEditable()}
	new_text1 = _GoStringToGString(new_text0)
	defer C.free(unsafe.Pointer(new_text1))
	new_text_length1 = C.int32_t(new_text_length0)
	position1 = C.int32_t(position0)
	C.gtk_editable_insert_text(this1, new_text1, new_text_length1, &position1)
	var position2 int
	position2 = int(position1)
	return position2
}
func (this0 *EditableImpl) PasteClipboard() {
	var this1 *C.GtkEditable
	if this0 != nil {
		this1 = this0.ImplementsGtkEditable()}
	C.gtk_editable_paste_clipboard(this1)
}
func (this0 *EditableImpl) SelectRegion(start_pos0 int, end_pos0 int) {
	var this1 *C.GtkEditable
	var start_pos1 C.int32_t
	var end_pos1 C.int32_t
	if this0 != nil {
		this1 = this0.ImplementsGtkEditable()}
	start_pos1 = C.int32_t(start_pos0)
	end_pos1 = C.int32_t(end_pos0)
	C.gtk_editable_select_region(this1, start_pos1, end_pos1)
}
func (this0 *EditableImpl) SetEditable(is_editable0 bool) {
	var this1 *C.GtkEditable
	var is_editable1 C.int
	if this0 != nil {
		this1 = this0.ImplementsGtkEditable()}
	is_editable1 = _GoBoolToCBool(is_editable0)
	C.gtk_editable_set_editable(this1, is_editable1)
}
func (this0 *EditableImpl) SetPosition(position0 int) {
	var this1 *C.GtkEditable
	var position1 C.int32_t
	if this0 != nil {
		this1 = this0.ImplementsGtkEditable()}
	position1 = C.int32_t(position0)
	C.gtk_editable_set_position(this1, position1)
}
type EntryLike interface {
	WidgetLike
	InheritedFromGtkEntry() *C.GtkEntry
}

type Entry struct {
	Widget
	atk.ImplementorIfaceImpl
	BuildableImpl
	CellEditableImpl
	EditableImpl
}

func ToEntry(objlike gobject.ObjectLike) *Entry {
	c := objlike.InheritedFromGObject()
	if c == nil {
		return nil
	}
	t := (*Entry)(nil).GetStaticType()
	obj := gobject.ObjectGrabIfType(unsafe.Pointer(c), t)
	if obj != nil {
		return (*Entry)(obj)
	}
	panic("cannot cast to Entry")
}

func (this0 *Entry) InheritedFromGtkEntry() *C.GtkEntry {
	if this0 == nil {
		return nil
	}
	return (*C.GtkEntry)(this0.C)
}

func (this0 *Entry) GetStaticType() gobject.Type {
	return gobject.Type(C.gtk_entry_get_type())
}

func EntryGetType() gobject.Type {
	return (*Entry)(nil).GetStaticType()
}
func NewEntry() *Entry {
	ret1 := C.gtk_entry_new()
	var ret2 *Entry
	ret2 = (*Entry)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
func NewEntryWithBuffer(buffer0 EntryBufferLike) *Entry {
	var buffer1 *C.GtkEntryBuffer
	if buffer0 != nil {
		buffer1 = buffer0.InheritedFromGtkEntryBuffer()
	}
	ret1 := C.gtk_entry_new_with_buffer(buffer1)
	var ret2 *Entry
	ret2 = (*Entry)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
func (this0 *Entry) GetActivatesDefault() bool {
	var this1 *C.GtkEntry
	if this0 != nil {
		this1 = this0.InheritedFromGtkEntry()
	}
	ret1 := C.gtk_entry_get_activates_default(this1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *Entry) GetAlignment() float64 {
	var this1 *C.GtkEntry
	if this0 != nil {
		this1 = this0.InheritedFromGtkEntry()
	}
	ret1 := C.gtk_entry_get_alignment(this1)
	var ret2 float64
	ret2 = float64(ret1)
	return ret2
}
func (this0 *Entry) GetBuffer() *EntryBuffer {
	var this1 *C.GtkEntry
	if this0 != nil {
		this1 = this0.InheritedFromGtkEntry()
	}
	ret1 := C.gtk_entry_get_buffer(this1)
	var ret2 *EntryBuffer
	ret2 = (*EntryBuffer)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
func (this0 *Entry) GetCompletion() *EntryCompletion {
	var this1 *C.GtkEntry
	if this0 != nil {
		this1 = this0.InheritedFromGtkEntry()
	}
	ret1 := C.gtk_entry_get_completion(this1)
	var ret2 *EntryCompletion
	ret2 = (*EntryCompletion)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
func (this0 *Entry) GetCurrentIconDragSource() int {
	var this1 *C.GtkEntry
	if this0 != nil {
		this1 = this0.InheritedFromGtkEntry()
	}
	ret1 := C.gtk_entry_get_current_icon_drag_source(this1)
	var ret2 int
	ret2 = int(ret1)
	return ret2
}
func (this0 *Entry) GetCursorHAdjustment() *Adjustment {
	var this1 *C.GtkEntry
	if this0 != nil {
		this1 = this0.InheritedFromGtkEntry()
	}
	ret1 := C.gtk_entry_get_cursor_hadjustment(this1)
	var ret2 *Adjustment
	ret2 = (*Adjustment)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
func (this0 *Entry) GetHasFrame() bool {
	var this1 *C.GtkEntry
	if this0 != nil {
		this1 = this0.InheritedFromGtkEntry()
	}
	ret1 := C.gtk_entry_get_has_frame(this1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *Entry) GetIconActivatable(icon_pos0 EntryIconPosition) bool {
	var this1 *C.GtkEntry
	var icon_pos1 C.GtkEntryIconPosition
	if this0 != nil {
		this1 = this0.InheritedFromGtkEntry()
	}
	icon_pos1 = C.GtkEntryIconPosition(icon_pos0)
	ret1 := C.gtk_entry_get_icon_activatable(this1, icon_pos1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *Entry) GetIconArea(icon_pos0 EntryIconPosition) cairo.RectangleInt {
	var this1 *C.GtkEntry
	var icon_pos1 C.GtkEntryIconPosition
	var icon_area1 C.cairoRectangleInt
	if this0 != nil {
		this1 = this0.InheritedFromGtkEntry()
	}
	icon_pos1 = C.GtkEntryIconPosition(icon_pos0)
	C.gtk_entry_get_icon_area(this1, icon_pos1, &icon_area1)
	var icon_area2 cairo.RectangleInt
	icon_area2 = *(*cairo.RectangleInt)(unsafe.Pointer(&icon_area1))
	return icon_area2
}
func (this0 *Entry) GetIconAtPos(x0 int, y0 int) int {
	var this1 *C.GtkEntry
	var x1 C.int32_t
	var y1 C.int32_t
	if this0 != nil {
		this1 = this0.InheritedFromGtkEntry()
	}
	x1 = C.int32_t(x0)
	y1 = C.int32_t(y0)
	ret1 := C.gtk_entry_get_icon_at_pos(this1, x1, y1)
	var ret2 int
	ret2 = int(ret1)
	return ret2
}
func (this0 *Entry) GetIconGIcon(icon_pos0 EntryIconPosition) *gio.Icon {
	var this1 *C.GtkEntry
	var icon_pos1 C.GtkEntryIconPosition
	if this0 != nil {
		this1 = this0.InheritedFromGtkEntry()
	}
	icon_pos1 = C.GtkEntryIconPosition(icon_pos0)
	ret1 := C.gtk_entry_get_icon_gicon(this1, icon_pos1)
	var ret2 *gio.Icon
	ret2 = (*gio.Icon)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
func (this0 *Entry) GetIconName(icon_pos0 EntryIconPosition) string {
	var this1 *C.GtkEntry
	var icon_pos1 C.GtkEntryIconPosition
	if this0 != nil {
		this1 = this0.InheritedFromGtkEntry()
	}
	icon_pos1 = C.GtkEntryIconPosition(icon_pos0)
	ret1 := C.gtk_entry_get_icon_name(this1, icon_pos1)
	var ret2 string
	ret2 = C.GoString(ret1)
	return ret2
}
func (this0 *Entry) GetIconPixbuf(icon_pos0 EntryIconPosition) *gdkpixbuf.Pixbuf {
	var this1 *C.GtkEntry
	var icon_pos1 C.GtkEntryIconPosition
	if this0 != nil {
		this1 = this0.InheritedFromGtkEntry()
	}
	icon_pos1 = C.GtkEntryIconPosition(icon_pos0)
	ret1 := C.gtk_entry_get_icon_pixbuf(this1, icon_pos1)
	var ret2 *gdkpixbuf.Pixbuf
	ret2 = (*gdkpixbuf.Pixbuf)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
func (this0 *Entry) GetIconSensitive(icon_pos0 EntryIconPosition) bool {
	var this1 *C.GtkEntry
	var icon_pos1 C.GtkEntryIconPosition
	if this0 != nil {
		this1 = this0.InheritedFromGtkEntry()
	}
	icon_pos1 = C.GtkEntryIconPosition(icon_pos0)
	ret1 := C.gtk_entry_get_icon_sensitive(this1, icon_pos1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *Entry) GetIconStock(icon_pos0 EntryIconPosition) string {
	var this1 *C.GtkEntry
	var icon_pos1 C.GtkEntryIconPosition
	if this0 != nil {
		this1 = this0.InheritedFromGtkEntry()
	}
	icon_pos1 = C.GtkEntryIconPosition(icon_pos0)
	ret1 := C.gtk_entry_get_icon_stock(this1, icon_pos1)
	var ret2 string
	ret2 = C.GoString(ret1)
	return ret2
}
func (this0 *Entry) GetIconStorageType(icon_pos0 EntryIconPosition) ImageType {
	var this1 *C.GtkEntry
	var icon_pos1 C.GtkEntryIconPosition
	if this0 != nil {
		this1 = this0.InheritedFromGtkEntry()
	}
	icon_pos1 = C.GtkEntryIconPosition(icon_pos0)
	ret1 := C.gtk_entry_get_icon_storage_type(this1, icon_pos1)
	var ret2 ImageType
	ret2 = ImageType(ret1)
	return ret2
}
func (this0 *Entry) GetIconTooltipMarkup(icon_pos0 EntryIconPosition) string {
	var this1 *C.GtkEntry
	var icon_pos1 C.GtkEntryIconPosition
	if this0 != nil {
		this1 = this0.InheritedFromGtkEntry()
	}
	icon_pos1 = C.GtkEntryIconPosition(icon_pos0)
	ret1 := C.gtk_entry_get_icon_tooltip_markup(this1, icon_pos1)
	var ret2 string
	ret2 = C.GoString(ret1)
	C.g_free(unsafe.Pointer(ret1))
	return ret2
}
func (this0 *Entry) GetIconTooltipText(icon_pos0 EntryIconPosition) string {
	var this1 *C.GtkEntry
	var icon_pos1 C.GtkEntryIconPosition
	if this0 != nil {
		this1 = this0.InheritedFromGtkEntry()
	}
	icon_pos1 = C.GtkEntryIconPosition(icon_pos0)
	ret1 := C.gtk_entry_get_icon_tooltip_text(this1, icon_pos1)
	var ret2 string
	ret2 = C.GoString(ret1)
	C.g_free(unsafe.Pointer(ret1))
	return ret2
}
func (this0 *Entry) GetInnerBorder() *Border {
	var this1 *C.GtkEntry
	if this0 != nil {
		this1 = this0.InheritedFromGtkEntry()
	}
	ret1 := C.gtk_entry_get_inner_border(this1)
	var ret2 *Border
	ret2 = (*Border)(unsafe.Pointer(ret1))
	return ret2
}
func (this0 *Entry) GetInvisibleChar() rune {
	var this1 *C.GtkEntry
	if this0 != nil {
		this1 = this0.InheritedFromGtkEntry()
	}
	ret1 := C.gtk_entry_get_invisible_char(this1)
	var ret2 rune
	ret2 = rune(ret1)
	return ret2
}
func (this0 *Entry) GetLayout() *pango.Layout {
	var this1 *C.GtkEntry
	if this0 != nil {
		this1 = this0.InheritedFromGtkEntry()
	}
	ret1 := C.gtk_entry_get_layout(this1)
	var ret2 *pango.Layout
	ret2 = (*pango.Layout)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
func (this0 *Entry) GetLayoutOffsets() (int, int) {
	var this1 *C.GtkEntry
	var x1 C.int32_t
	var y1 C.int32_t
	if this0 != nil {
		this1 = this0.InheritedFromGtkEntry()
	}
	C.gtk_entry_get_layout_offsets(this1, &x1, &y1)
	var x2 int
	var y2 int
	x2 = int(x1)
	y2 = int(y1)
	return x2, y2
}
func (this0 *Entry) GetMaxLength() int {
	var this1 *C.GtkEntry
	if this0 != nil {
		this1 = this0.InheritedFromGtkEntry()
	}
	ret1 := C.gtk_entry_get_max_length(this1)
	var ret2 int
	ret2 = int(ret1)
	return ret2
}
func (this0 *Entry) GetOverwriteMode() bool {
	var this1 *C.GtkEntry
	if this0 != nil {
		this1 = this0.InheritedFromGtkEntry()
	}
	ret1 := C.gtk_entry_get_overwrite_mode(this1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *Entry) GetPlaceholderText() string {
	var this1 *C.GtkEntry
	if this0 != nil {
		this1 = this0.InheritedFromGtkEntry()
	}
	ret1 := C.gtk_entry_get_placeholder_text(this1)
	var ret2 string
	ret2 = C.GoString(ret1)
	return ret2
}
func (this0 *Entry) GetProgressFraction() float64 {
	var this1 *C.GtkEntry
	if this0 != nil {
		this1 = this0.InheritedFromGtkEntry()
	}
	ret1 := C.gtk_entry_get_progress_fraction(this1)
	var ret2 float64
	ret2 = float64(ret1)
	return ret2
}
func (this0 *Entry) GetProgressPulseStep() float64 {
	var this1 *C.GtkEntry
	if this0 != nil {
		this1 = this0.InheritedFromGtkEntry()
	}
	ret1 := C.gtk_entry_get_progress_pulse_step(this1)
	var ret2 float64
	ret2 = float64(ret1)
	return ret2
}
func (this0 *Entry) GetText() string {
	var this1 *C.GtkEntry
	if this0 != nil {
		this1 = this0.InheritedFromGtkEntry()
	}
	ret1 := C.gtk_entry_get_text(this1)
	var ret2 string
	ret2 = C.GoString(ret1)
	return ret2
}
func (this0 *Entry) GetTextArea() cairo.RectangleInt {
	var this1 *C.GtkEntry
	var text_area1 C.cairoRectangleInt
	if this0 != nil {
		this1 = this0.InheritedFromGtkEntry()
	}
	C.gtk_entry_get_text_area(this1, &text_area1)
	var text_area2 cairo.RectangleInt
	text_area2 = *(*cairo.RectangleInt)(unsafe.Pointer(&text_area1))
	return text_area2
}
func (this0 *Entry) GetTextLength() int {
	var this1 *C.GtkEntry
	if this0 != nil {
		this1 = this0.InheritedFromGtkEntry()
	}
	ret1 := C.gtk_entry_get_text_length(this1)
	var ret2 int
	ret2 = int(ret1)
	return ret2
}
func (this0 *Entry) GetVisibility() bool {
	var this1 *C.GtkEntry
	if this0 != nil {
		this1 = this0.InheritedFromGtkEntry()
	}
	ret1 := C.gtk_entry_get_visibility(this1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *Entry) GetWidthChars() int {
	var this1 *C.GtkEntry
	if this0 != nil {
		this1 = this0.InheritedFromGtkEntry()
	}
	ret1 := C.gtk_entry_get_width_chars(this1)
	var ret2 int
	ret2 = int(ret1)
	return ret2
}
func (this0 *Entry) IMContextFilterKeypress(event0 *gdk.EventKey) bool {
	var this1 *C.GtkEntry
	var event1 *C.GdkEventKey
	if this0 != nil {
		this1 = this0.InheritedFromGtkEntry()
	}
	event1 = (*C.GdkEventKey)(unsafe.Pointer(event0))
	ret1 := C.gtk_entry_im_context_filter_keypress(this1, event1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *Entry) LayoutIndexToTextIndex(layout_index0 int) int {
	var this1 *C.GtkEntry
	var layout_index1 C.int32_t
	if this0 != nil {
		this1 = this0.InheritedFromGtkEntry()
	}
	layout_index1 = C.int32_t(layout_index0)
	ret1 := C.gtk_entry_layout_index_to_text_index(this1, layout_index1)
	var ret2 int
	ret2 = int(ret1)
	return ret2
}
func (this0 *Entry) ProgressPulse() {
	var this1 *C.GtkEntry
	if this0 != nil {
		this1 = this0.InheritedFromGtkEntry()
	}
	C.gtk_entry_progress_pulse(this1)
}
func (this0 *Entry) ResetIMContext() {
	var this1 *C.GtkEntry
	if this0 != nil {
		this1 = this0.InheritedFromGtkEntry()
	}
	C.gtk_entry_reset_im_context(this1)
}
func (this0 *Entry) SetActivatesDefault(setting0 bool) {
	var this1 *C.GtkEntry
	var setting1 C.int
	if this0 != nil {
		this1 = this0.InheritedFromGtkEntry()
	}
	setting1 = _GoBoolToCBool(setting0)
	C.gtk_entry_set_activates_default(this1, setting1)
}
func (this0 *Entry) SetAlignment(xalign0 float64) {
	var this1 *C.GtkEntry
	var xalign1 C.float
	if this0 != nil {
		this1 = this0.InheritedFromGtkEntry()
	}
	xalign1 = C.float(xalign0)
	C.gtk_entry_set_alignment(this1, xalign1)
}
func (this0 *Entry) SetBuffer(buffer0 EntryBufferLike) {
	var this1 *C.GtkEntry
	var buffer1 *C.GtkEntryBuffer
	if this0 != nil {
		this1 = this0.InheritedFromGtkEntry()
	}
	if buffer0 != nil {
		buffer1 = buffer0.InheritedFromGtkEntryBuffer()
	}
	C.gtk_entry_set_buffer(this1, buffer1)
}
func (this0 *Entry) SetCompletion(completion0 EntryCompletionLike) {
	var this1 *C.GtkEntry
	var completion1 *C.GtkEntryCompletion
	if this0 != nil {
		this1 = this0.InheritedFromGtkEntry()
	}
	if completion0 != nil {
		completion1 = completion0.InheritedFromGtkEntryCompletion()
	}
	C.gtk_entry_set_completion(this1, completion1)
}
func (this0 *Entry) SetCursorHAdjustment(adjustment0 AdjustmentLike) {
	var this1 *C.GtkEntry
	var adjustment1 *C.GtkAdjustment
	if this0 != nil {
		this1 = this0.InheritedFromGtkEntry()
	}
	if adjustment0 != nil {
		adjustment1 = adjustment0.InheritedFromGtkAdjustment()
	}
	C.gtk_entry_set_cursor_hadjustment(this1, adjustment1)
}
func (this0 *Entry) SetHasFrame(setting0 bool) {
	var this1 *C.GtkEntry
	var setting1 C.int
	if this0 != nil {
		this1 = this0.InheritedFromGtkEntry()
	}
	setting1 = _GoBoolToCBool(setting0)
	C.gtk_entry_set_has_frame(this1, setting1)
}
func (this0 *Entry) SetIconActivatable(icon_pos0 EntryIconPosition, activatable0 bool) {
	var this1 *C.GtkEntry
	var icon_pos1 C.GtkEntryIconPosition
	var activatable1 C.int
	if this0 != nil {
		this1 = this0.InheritedFromGtkEntry()
	}
	icon_pos1 = C.GtkEntryIconPosition(icon_pos0)
	activatable1 = _GoBoolToCBool(activatable0)
	C.gtk_entry_set_icon_activatable(this1, icon_pos1, activatable1)
}
func (this0 *Entry) SetIconDragSource(icon_pos0 EntryIconPosition, target_list0 *TargetList, actions0 gdk.DragAction) {
	var this1 *C.GtkEntry
	var icon_pos1 C.GtkEntryIconPosition
	var target_list1 *C.GtkTargetList
	var actions1 C.GdkDragAction
	if this0 != nil {
		this1 = this0.InheritedFromGtkEntry()
	}
	icon_pos1 = C.GtkEntryIconPosition(icon_pos0)
	target_list1 = (*C.GtkTargetList)(unsafe.Pointer(target_list0))
	actions1 = C.GdkDragAction(actions0)
	C.gtk_entry_set_icon_drag_source(this1, icon_pos1, target_list1, actions1)
}
func (this0 *Entry) SetIconFromGIcon(icon_pos0 EntryIconPosition, icon0 gio.IconLike) {
	var this1 *C.GtkEntry
	var icon_pos1 C.GtkEntryIconPosition
	var icon1 *C.GIcon
	if this0 != nil {
		this1 = this0.InheritedFromGtkEntry()
	}
	icon_pos1 = C.GtkEntryIconPosition(icon_pos0)
	if icon0 != nil {
		icon1 = icon0.ImplementsGIcon()}
	C.gtk_entry_set_icon_from_gicon(this1, icon_pos1, icon1)
}
func (this0 *Entry) SetIconFromIconName(icon_pos0 EntryIconPosition, icon_name0 string) {
	var this1 *C.GtkEntry
	var icon_pos1 C.GtkEntryIconPosition
	var icon_name1 *C.char
	if this0 != nil {
		this1 = this0.InheritedFromGtkEntry()
	}
	icon_pos1 = C.GtkEntryIconPosition(icon_pos0)
	icon_name1 = _GoStringToGString(icon_name0)
	defer C.free(unsafe.Pointer(icon_name1))
	C.gtk_entry_set_icon_from_icon_name(this1, icon_pos1, icon_name1)
}
func (this0 *Entry) SetIconFromPixbuf(icon_pos0 EntryIconPosition, pixbuf0 gdkpixbuf.PixbufLike) {
	var this1 *C.GtkEntry
	var icon_pos1 C.GtkEntryIconPosition
	var pixbuf1 *C.GdkPixbuf
	if this0 != nil {
		this1 = this0.InheritedFromGtkEntry()
	}
	icon_pos1 = C.GtkEntryIconPosition(icon_pos0)
	if pixbuf0 != nil {
		pixbuf1 = pixbuf0.InheritedFromGdkPixbuf()
	}
	C.gtk_entry_set_icon_from_pixbuf(this1, icon_pos1, pixbuf1)
}
func (this0 *Entry) SetIconFromStock(icon_pos0 EntryIconPosition, stock_id0 string) {
	var this1 *C.GtkEntry
	var icon_pos1 C.GtkEntryIconPosition
	var stock_id1 *C.char
	if this0 != nil {
		this1 = this0.InheritedFromGtkEntry()
	}
	icon_pos1 = C.GtkEntryIconPosition(icon_pos0)
	stock_id1 = _GoStringToGString(stock_id0)
	defer C.free(unsafe.Pointer(stock_id1))
	C.gtk_entry_set_icon_from_stock(this1, icon_pos1, stock_id1)
}
func (this0 *Entry) SetIconSensitive(icon_pos0 EntryIconPosition, sensitive0 bool) {
	var this1 *C.GtkEntry
	var icon_pos1 C.GtkEntryIconPosition
	var sensitive1 C.int
	if this0 != nil {
		this1 = this0.InheritedFromGtkEntry()
	}
	icon_pos1 = C.GtkEntryIconPosition(icon_pos0)
	sensitive1 = _GoBoolToCBool(sensitive0)
	C.gtk_entry_set_icon_sensitive(this1, icon_pos1, sensitive1)
}
func (this0 *Entry) SetIconTooltipMarkup(icon_pos0 EntryIconPosition, tooltip0 string) {
	var this1 *C.GtkEntry
	var icon_pos1 C.GtkEntryIconPosition
	var tooltip1 *C.char
	if this0 != nil {
		this1 = this0.InheritedFromGtkEntry()
	}
	icon_pos1 = C.GtkEntryIconPosition(icon_pos0)
	tooltip1 = _GoStringToGString(tooltip0)
	defer C.free(unsafe.Pointer(tooltip1))
	C.gtk_entry_set_icon_tooltip_markup(this1, icon_pos1, tooltip1)
}
func (this0 *Entry) SetIconTooltipText(icon_pos0 EntryIconPosition, tooltip0 string) {
	var this1 *C.GtkEntry
	var icon_pos1 C.GtkEntryIconPosition
	var tooltip1 *C.char
	if this0 != nil {
		this1 = this0.InheritedFromGtkEntry()
	}
	icon_pos1 = C.GtkEntryIconPosition(icon_pos0)
	tooltip1 = _GoStringToGString(tooltip0)
	defer C.free(unsafe.Pointer(tooltip1))
	C.gtk_entry_set_icon_tooltip_text(this1, icon_pos1, tooltip1)
}
func (this0 *Entry) SetInnerBorder(border0 *Border) {
	var this1 *C.GtkEntry
	var border1 *C.GtkBorder
	if this0 != nil {
		this1 = this0.InheritedFromGtkEntry()
	}
	border1 = (*C.GtkBorder)(unsafe.Pointer(border0))
	C.gtk_entry_set_inner_border(this1, border1)
}
func (this0 *Entry) SetInvisibleChar(ch0 rune) {
	var this1 *C.GtkEntry
	var ch1 C.uint32_t
	if this0 != nil {
		this1 = this0.InheritedFromGtkEntry()
	}
	ch1 = C.uint32_t(ch0)
	C.gtk_entry_set_invisible_char(this1, ch1)
}
func (this0 *Entry) SetMaxLength(max0 int) {
	var this1 *C.GtkEntry
	var max1 C.int32_t
	if this0 != nil {
		this1 = this0.InheritedFromGtkEntry()
	}
	max1 = C.int32_t(max0)
	C.gtk_entry_set_max_length(this1, max1)
}
func (this0 *Entry) SetOverwriteMode(overwrite0 bool) {
	var this1 *C.GtkEntry
	var overwrite1 C.int
	if this0 != nil {
		this1 = this0.InheritedFromGtkEntry()
	}
	overwrite1 = _GoBoolToCBool(overwrite0)
	C.gtk_entry_set_overwrite_mode(this1, overwrite1)
}
func (this0 *Entry) SetPlaceholderText(text0 string) {
	var this1 *C.GtkEntry
	var text1 *C.char
	if this0 != nil {
		this1 = this0.InheritedFromGtkEntry()
	}
	text1 = _GoStringToGString(text0)
	defer C.free(unsafe.Pointer(text1))
	C.gtk_entry_set_placeholder_text(this1, text1)
}
func (this0 *Entry) SetProgressFraction(fraction0 float64) {
	var this1 *C.GtkEntry
	var fraction1 C.double
	if this0 != nil {
		this1 = this0.InheritedFromGtkEntry()
	}
	fraction1 = C.double(fraction0)
	C.gtk_entry_set_progress_fraction(this1, fraction1)
}
func (this0 *Entry) SetProgressPulseStep(fraction0 float64) {
	var this1 *C.GtkEntry
	var fraction1 C.double
	if this0 != nil {
		this1 = this0.InheritedFromGtkEntry()
	}
	fraction1 = C.double(fraction0)
	C.gtk_entry_set_progress_pulse_step(this1, fraction1)
}
func (this0 *Entry) SetText(text0 string) {
	var this1 *C.GtkEntry
	var text1 *C.char
	if this0 != nil {
		this1 = this0.InheritedFromGtkEntry()
	}
	text1 = _GoStringToGString(text0)
	defer C.free(unsafe.Pointer(text1))
	C.gtk_entry_set_text(this1, text1)
}
func (this0 *Entry) SetVisibility(visible0 bool) {
	var this1 *C.GtkEntry
	var visible1 C.int
	if this0 != nil {
		this1 = this0.InheritedFromGtkEntry()
	}
	visible1 = _GoBoolToCBool(visible0)
	C.gtk_entry_set_visibility(this1, visible1)
}
func (this0 *Entry) SetWidthChars(n_chars0 int) {
	var this1 *C.GtkEntry
	var n_chars1 C.int32_t
	if this0 != nil {
		this1 = this0.InheritedFromGtkEntry()
	}
	n_chars1 = C.int32_t(n_chars0)
	C.gtk_entry_set_width_chars(this1, n_chars1)
}
func (this0 *Entry) TextIndexToLayoutIndex(text_index0 int) int {
	var this1 *C.GtkEntry
	var text_index1 C.int32_t
	if this0 != nil {
		this1 = this0.InheritedFromGtkEntry()
	}
	text_index1 = C.int32_t(text_index0)
	ret1 := C.gtk_entry_text_index_to_layout_index(this1, text_index1)
	var ret2 int
	ret2 = int(ret1)
	return ret2
}
func (this0 *Entry) UnsetInvisibleChar() {
	var this1 *C.GtkEntry
	if this0 != nil {
		this1 = this0.InheritedFromGtkEntry()
	}
	C.gtk_entry_unset_invisible_char(this1)
}
type EntryBufferLike interface {
	gobject.ObjectLike
	InheritedFromGtkEntryBuffer() *C.GtkEntryBuffer
}

type EntryBuffer struct {
	gobject.Object
	
}

func ToEntryBuffer(objlike gobject.ObjectLike) *EntryBuffer {
	c := objlike.InheritedFromGObject()
	if c == nil {
		return nil
	}
	t := (*EntryBuffer)(nil).GetStaticType()
	obj := gobject.ObjectGrabIfType(unsafe.Pointer(c), t)
	if obj != nil {
		return (*EntryBuffer)(obj)
	}
	panic("cannot cast to EntryBuffer")
}

func (this0 *EntryBuffer) InheritedFromGtkEntryBuffer() *C.GtkEntryBuffer {
	if this0 == nil {
		return nil
	}
	return (*C.GtkEntryBuffer)(this0.C)
}

func (this0 *EntryBuffer) GetStaticType() gobject.Type {
	return gobject.Type(C.gtk_entry_buffer_get_type())
}

func EntryBufferGetType() gobject.Type {
	return (*EntryBuffer)(nil).GetStaticType()
}
func NewEntryBuffer(initial_chars0 string, n_initial_chars0 int) *EntryBuffer {
	var initial_chars1 *C.char
	var n_initial_chars1 C.int32_t
	initial_chars1 = _GoStringToGString(initial_chars0)
	defer C.free(unsafe.Pointer(initial_chars1))
	n_initial_chars1 = C.int32_t(n_initial_chars0)
	ret1 := C.gtk_entry_buffer_new(initial_chars1, n_initial_chars1)
	var ret2 *EntryBuffer
	ret2 = (*EntryBuffer)(gobject.ObjectWrap(unsafe.Pointer(ret1), false))
	return ret2
}
func (this0 *EntryBuffer) DeleteText(position0 int, n_chars0 int) int {
	var this1 *C.GtkEntryBuffer
	var position1 C.uint32_t
	var n_chars1 C.int32_t
	if this0 != nil {
		this1 = this0.InheritedFromGtkEntryBuffer()
	}
	position1 = C.uint32_t(position0)
	n_chars1 = C.int32_t(n_chars0)
	ret1 := C.gtk_entry_buffer_delete_text(this1, position1, n_chars1)
	var ret2 int
	ret2 = int(ret1)
	return ret2
}
func (this0 *EntryBuffer) EmitDeletedText(position0 int, n_chars0 int) {
	var this1 *C.GtkEntryBuffer
	var position1 C.uint32_t
	var n_chars1 C.uint32_t
	if this0 != nil {
		this1 = this0.InheritedFromGtkEntryBuffer()
	}
	position1 = C.uint32_t(position0)
	n_chars1 = C.uint32_t(n_chars0)
	C.gtk_entry_buffer_emit_deleted_text(this1, position1, n_chars1)
}
func (this0 *EntryBuffer) EmitInsertedText(position0 int, chars0 string, n_chars0 int) {
	var this1 *C.GtkEntryBuffer
	var position1 C.uint32_t
	var chars1 *C.char
	var n_chars1 C.uint32_t
	if this0 != nil {
		this1 = this0.InheritedFromGtkEntryBuffer()
	}
	position1 = C.uint32_t(position0)
	chars1 = _GoStringToGString(chars0)
	defer C.free(unsafe.Pointer(chars1))
	n_chars1 = C.uint32_t(n_chars0)
	C.gtk_entry_buffer_emit_inserted_text(this1, position1, chars1, n_chars1)
}
func (this0 *EntryBuffer) GetBytes() uint64 {
	var this1 *C.GtkEntryBuffer
	if this0 != nil {
		this1 = this0.InheritedFromGtkEntryBuffer()
	}
	ret1 := C.gtk_entry_buffer_get_bytes(this1)
	var ret2 uint64
	ret2 = uint64(ret1)
	return ret2
}
func (this0 *EntryBuffer) GetLength() int {
	var this1 *C.GtkEntryBuffer
	if this0 != nil {
		this1 = this0.InheritedFromGtkEntryBuffer()
	}
	ret1 := C.gtk_entry_buffer_get_length(this1)
	var ret2 int
	ret2 = int(ret1)
	return ret2
}
func (this0 *EntryBuffer) GetMaxLength() int {
	var this1 *C.GtkEntryBuffer
	if this0 != nil {
		this1 = this0.InheritedFromGtkEntryBuffer()
	}
	ret1 := C.gtk_entry_buffer_get_max_length(this1)
	var ret2 int
	ret2 = int(ret1)
	return ret2
}
func (this0 *EntryBuffer) GetText() string {
	var this1 *C.GtkEntryBuffer
	if this0 != nil {
		this1 = this0.InheritedFromGtkEntryBuffer()
	}
	ret1 := C.gtk_entry_buffer_get_text(this1)
	var ret2 string
	ret2 = C.GoString(ret1)
	return ret2
}
func (this0 *EntryBuffer) InsertText(position0 int, chars0 string, n_chars0 int) int {
	var this1 *C.GtkEntryBuffer
	var position1 C.uint32_t
	var chars1 *C.char
	var n_chars1 C.int32_t
	if this0 != nil {
		this1 = this0.InheritedFromGtkEntryBuffer()
	}
	position1 = C.uint32_t(position0)
	chars1 = _GoStringToGString(chars0)
	defer C.free(unsafe.Pointer(chars1))
	n_chars1 = C.int32_t(n_chars0)
	ret1 := C.gtk_entry_buffer_insert_text(this1, position1, chars1, n_chars1)
	var ret2 int
	ret2 = int(ret1)
	return ret2
}
func (this0 *EntryBuffer) SetMaxLength(max_length0 int) {
	var this1 *C.GtkEntryBuffer
	var max_length1 C.int32_t
	if this0 != nil {
		this1 = this0.InheritedFromGtkEntryBuffer()
	}
	max_length1 = C.int32_t(max_length0)
	C.gtk_entry_buffer_set_max_length(this1, max_length1)
}
func (this0 *EntryBuffer) SetText(chars0 string, n_chars0 int) {
	var this1 *C.GtkEntryBuffer
	var chars1 *C.char
	var n_chars1 C.int32_t
	if this0 != nil {
		this1 = this0.InheritedFromGtkEntryBuffer()
	}
	chars1 = _GoStringToGString(chars0)
	defer C.free(unsafe.Pointer(chars1))
	n_chars1 = C.int32_t(n_chars0)
	C.gtk_entry_buffer_set_text(this1, chars1, n_chars1)
}
type EntryCompletionLike interface {
	gobject.ObjectLike
	InheritedFromGtkEntryCompletion() *C.GtkEntryCompletion
}

type EntryCompletion struct {
	gobject.Object
	BuildableImpl
	CellLayoutImpl
}

func ToEntryCompletion(objlike gobject.ObjectLike) *EntryCompletion {
	c := objlike.InheritedFromGObject()
	if c == nil {
		return nil
	}
	t := (*EntryCompletion)(nil).GetStaticType()
	obj := gobject.ObjectGrabIfType(unsafe.Pointer(c), t)
	if obj != nil {
		return (*EntryCompletion)(obj)
	}
	panic("cannot cast to EntryCompletion")
}

func (this0 *EntryCompletion) InheritedFromGtkEntryCompletion() *C.GtkEntryCompletion {
	if this0 == nil {
		return nil
	}
	return (*C.GtkEntryCompletion)(this0.C)
}

func (this0 *EntryCompletion) GetStaticType() gobject.Type {
	return gobject.Type(C.gtk_entry_completion_get_type())
}

func EntryCompletionGetType() gobject.Type {
	return (*EntryCompletion)(nil).GetStaticType()
}
func NewEntryCompletion() *EntryCompletion {
	ret1 := C.gtk_entry_completion_new()
	var ret2 *EntryCompletion
	ret2 = (*EntryCompletion)(gobject.ObjectWrap(unsafe.Pointer(ret1), false))
	return ret2
}
func NewEntryCompletionWithArea(area0 CellAreaLike) *EntryCompletion {
	var area1 *C.GtkCellArea
	if area0 != nil {
		area1 = area0.InheritedFromGtkCellArea()
	}
	ret1 := C.gtk_entry_completion_new_with_area(area1)
	var ret2 *EntryCompletion
	ret2 = (*EntryCompletion)(gobject.ObjectWrap(unsafe.Pointer(ret1), false))
	return ret2
}
func (this0 *EntryCompletion) Complete() {
	var this1 *C.GtkEntryCompletion
	if this0 != nil {
		this1 = this0.InheritedFromGtkEntryCompletion()
	}
	C.gtk_entry_completion_complete(this1)
}
func (this0 *EntryCompletion) DeleteAction(index_0 int) {
	var this1 *C.GtkEntryCompletion
	var index_1 C.int32_t
	if this0 != nil {
		this1 = this0.InheritedFromGtkEntryCompletion()
	}
	index_1 = C.int32_t(index_0)
	C.gtk_entry_completion_delete_action(this1, index_1)
}
func (this0 *EntryCompletion) GetCompletionPrefix() string {
	var this1 *C.GtkEntryCompletion
	if this0 != nil {
		this1 = this0.InheritedFromGtkEntryCompletion()
	}
	ret1 := C.gtk_entry_completion_get_completion_prefix(this1)
	var ret2 string
	ret2 = C.GoString(ret1)
	return ret2
}
func (this0 *EntryCompletion) GetEntry() *Widget {
	var this1 *C.GtkEntryCompletion
	if this0 != nil {
		this1 = this0.InheritedFromGtkEntryCompletion()
	}
	ret1 := C.gtk_entry_completion_get_entry(this1)
	var ret2 *Widget
	ret2 = (*Widget)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
func (this0 *EntryCompletion) GetInlineCompletion() bool {
	var this1 *C.GtkEntryCompletion
	if this0 != nil {
		this1 = this0.InheritedFromGtkEntryCompletion()
	}
	ret1 := C.gtk_entry_completion_get_inline_completion(this1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *EntryCompletion) GetInlineSelection() bool {
	var this1 *C.GtkEntryCompletion
	if this0 != nil {
		this1 = this0.InheritedFromGtkEntryCompletion()
	}
	ret1 := C.gtk_entry_completion_get_inline_selection(this1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *EntryCompletion) GetMinimumKeyLength() int {
	var this1 *C.GtkEntryCompletion
	if this0 != nil {
		this1 = this0.InheritedFromGtkEntryCompletion()
	}
	ret1 := C.gtk_entry_completion_get_minimum_key_length(this1)
	var ret2 int
	ret2 = int(ret1)
	return ret2
}
func (this0 *EntryCompletion) GetModel() *TreeModel {
	var this1 *C.GtkEntryCompletion
	if this0 != nil {
		this1 = this0.InheritedFromGtkEntryCompletion()
	}
	ret1 := C.gtk_entry_completion_get_model(this1)
	var ret2 *TreeModel
	ret2 = (*TreeModel)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
func (this0 *EntryCompletion) GetPopupCompletion() bool {
	var this1 *C.GtkEntryCompletion
	if this0 != nil {
		this1 = this0.InheritedFromGtkEntryCompletion()
	}
	ret1 := C.gtk_entry_completion_get_popup_completion(this1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *EntryCompletion) GetPopupSetWidth() bool {
	var this1 *C.GtkEntryCompletion
	if this0 != nil {
		this1 = this0.InheritedFromGtkEntryCompletion()
	}
	ret1 := C.gtk_entry_completion_get_popup_set_width(this1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *EntryCompletion) GetPopupSingleMatch() bool {
	var this1 *C.GtkEntryCompletion
	if this0 != nil {
		this1 = this0.InheritedFromGtkEntryCompletion()
	}
	ret1 := C.gtk_entry_completion_get_popup_single_match(this1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *EntryCompletion) GetTextColumn() int {
	var this1 *C.GtkEntryCompletion
	if this0 != nil {
		this1 = this0.InheritedFromGtkEntryCompletion()
	}
	ret1 := C.gtk_entry_completion_get_text_column(this1)
	var ret2 int
	ret2 = int(ret1)
	return ret2
}
func (this0 *EntryCompletion) InsertActionMarkup(index_0 int, markup0 string) {
	var this1 *C.GtkEntryCompletion
	var index_1 C.int32_t
	var markup1 *C.char
	if this0 != nil {
		this1 = this0.InheritedFromGtkEntryCompletion()
	}
	index_1 = C.int32_t(index_0)
	markup1 = _GoStringToGString(markup0)
	defer C.free(unsafe.Pointer(markup1))
	C.gtk_entry_completion_insert_action_markup(this1, index_1, markup1)
}
func (this0 *EntryCompletion) InsertActionText(index_0 int, text0 string) {
	var this1 *C.GtkEntryCompletion
	var index_1 C.int32_t
	var text1 *C.char
	if this0 != nil {
		this1 = this0.InheritedFromGtkEntryCompletion()
	}
	index_1 = C.int32_t(index_0)
	text1 = _GoStringToGString(text0)
	defer C.free(unsafe.Pointer(text1))
	C.gtk_entry_completion_insert_action_text(this1, index_1, text1)
}
func (this0 *EntryCompletion) InsertPrefix() {
	var this1 *C.GtkEntryCompletion
	if this0 != nil {
		this1 = this0.InheritedFromGtkEntryCompletion()
	}
	C.gtk_entry_completion_insert_prefix(this1)
}
func (this0 *EntryCompletion) SetInlineCompletion(inline_completion0 bool) {
	var this1 *C.GtkEntryCompletion
	var inline_completion1 C.int
	if this0 != nil {
		this1 = this0.InheritedFromGtkEntryCompletion()
	}
	inline_completion1 = _GoBoolToCBool(inline_completion0)
	C.gtk_entry_completion_set_inline_completion(this1, inline_completion1)
}
func (this0 *EntryCompletion) SetInlineSelection(inline_selection0 bool) {
	var this1 *C.GtkEntryCompletion
	var inline_selection1 C.int
	if this0 != nil {
		this1 = this0.InheritedFromGtkEntryCompletion()
	}
	inline_selection1 = _GoBoolToCBool(inline_selection0)
	C.gtk_entry_completion_set_inline_selection(this1, inline_selection1)
}
func (this0 *EntryCompletion) SetMatchFunc(func0 EntryCompletionMatchFunc) {
	var this1 *C.GtkEntryCompletion
	var func1 unsafe.Pointer
	if this0 != nil {
		this1 = this0.InheritedFromGtkEntryCompletion()
	}
	if func0 != nil {
		func1 = unsafe.Pointer(&func0)}
	gobject.Holder.Grab(func1)
	C._gtk_entry_completion_set_match_func(this1, func1)
}
func (this0 *EntryCompletion) SetMinimumKeyLength(length0 int) {
	var this1 *C.GtkEntryCompletion
	var length1 C.int32_t
	if this0 != nil {
		this1 = this0.InheritedFromGtkEntryCompletion()
	}
	length1 = C.int32_t(length0)
	C.gtk_entry_completion_set_minimum_key_length(this1, length1)
}
func (this0 *EntryCompletion) SetModel(model0 TreeModelLike) {
	var this1 *C.GtkEntryCompletion
	var model1 *C.GtkTreeModel
	if this0 != nil {
		this1 = this0.InheritedFromGtkEntryCompletion()
	}
	if model0 != nil {
		model1 = model0.ImplementsGtkTreeModel()}
	C.gtk_entry_completion_set_model(this1, model1)
}
func (this0 *EntryCompletion) SetPopupCompletion(popup_completion0 bool) {
	var this1 *C.GtkEntryCompletion
	var popup_completion1 C.int
	if this0 != nil {
		this1 = this0.InheritedFromGtkEntryCompletion()
	}
	popup_completion1 = _GoBoolToCBool(popup_completion0)
	C.gtk_entry_completion_set_popup_completion(this1, popup_completion1)
}
func (this0 *EntryCompletion) SetPopupSetWidth(popup_set_width0 bool) {
	var this1 *C.GtkEntryCompletion
	var popup_set_width1 C.int
	if this0 != nil {
		this1 = this0.InheritedFromGtkEntryCompletion()
	}
	popup_set_width1 = _GoBoolToCBool(popup_set_width0)
	C.gtk_entry_completion_set_popup_set_width(this1, popup_set_width1)
}
func (this0 *EntryCompletion) SetPopupSingleMatch(popup_single_match0 bool) {
	var this1 *C.GtkEntryCompletion
	var popup_single_match1 C.int
	if this0 != nil {
		this1 = this0.InheritedFromGtkEntryCompletion()
	}
	popup_single_match1 = _GoBoolToCBool(popup_single_match0)
	C.gtk_entry_completion_set_popup_single_match(this1, popup_single_match1)
}
func (this0 *EntryCompletion) SetTextColumn(column0 int) {
	var this1 *C.GtkEntryCompletion
	var column1 C.int32_t
	if this0 != nil {
		this1 = this0.InheritedFromGtkEntryCompletion()
	}
	column1 = C.int32_t(column0)
	C.gtk_entry_completion_set_text_column(this1, column1)
}
type EntryCompletionMatchFunc func(completion *EntryCompletion, key string, iter *TreeIter) bool
//export _GtkEntryCompletionMatchFunc_c_wrapper
func _GtkEntryCompletionMatchFunc_c_wrapper(completion0 unsafe.Pointer, key0 unsafe.Pointer, iter0 unsafe.Pointer, user_data0 unsafe.Pointer) int32 {
	var completion1 *EntryCompletion
	var key1 string
	var iter1 *TreeIter
	var user_data1 EntryCompletionMatchFunc
	completion1 = (*EntryCompletion)(gobject.ObjectWrap(unsafe.Pointer((*C.GtkEntryCompletion)(completion0)), true))
	key1 = C.GoString((*C.char)(key0))
	iter1 = (*TreeIter)(unsafe.Pointer((*C.GtkTreeIter)(iter0)))
	user_data1 = *(*EntryCompletionMatchFunc)(user_data0)
	ret1 := user_data1(completion1, key1, iter1)
	var ret2 C.int
	ret2 = _GoBoolToCBool(ret1)
	return (int32)(ret2)
}
//export _GtkEntryCompletionMatchFunc_c_wrapper_once
func _GtkEntryCompletionMatchFunc_c_wrapper_once(completion0 unsafe.Pointer, key0 unsafe.Pointer, iter0 unsafe.Pointer, user_data0 unsafe.Pointer) int32 {
	ret := _GtkEntryCompletionMatchFunc_c_wrapper(completion0, key0, iter0, user_data0)
	gobject.Holder.Release(user_data0)
	return ret
}
type EntryIconPosition C.uint32_t
const (
	EntryIconPositionPrimary EntryIconPosition = 0
	EntryIconPositionSecondary EntryIconPosition = 1
)
type EventBoxLike interface {
	BinLike
	InheritedFromGtkEventBox() *C.GtkEventBox
}

type EventBox struct {
	Bin
	atk.ImplementorIfaceImpl
	BuildableImpl
}

func ToEventBox(objlike gobject.ObjectLike) *EventBox {
	c := objlike.InheritedFromGObject()
	if c == nil {
		return nil
	}
	t := (*EventBox)(nil).GetStaticType()
	obj := gobject.ObjectGrabIfType(unsafe.Pointer(c), t)
	if obj != nil {
		return (*EventBox)(obj)
	}
	panic("cannot cast to EventBox")
}

func (this0 *EventBox) InheritedFromGtkEventBox() *C.GtkEventBox {
	if this0 == nil {
		return nil
	}
	return (*C.GtkEventBox)(this0.C)
}

func (this0 *EventBox) GetStaticType() gobject.Type {
	return gobject.Type(C.gtk_event_box_get_type())
}

func EventBoxGetType() gobject.Type {
	return (*EventBox)(nil).GetStaticType()
}
func NewEventBox() *EventBox {
	ret1 := C.gtk_event_box_new()
	var ret2 *EventBox
	ret2 = (*EventBox)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
func (this0 *EventBox) GetAboveChild() bool {
	var this1 *C.GtkEventBox
	if this0 != nil {
		this1 = this0.InheritedFromGtkEventBox()
	}
	ret1 := C.gtk_event_box_get_above_child(this1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *EventBox) GetVisibleWindow() bool {
	var this1 *C.GtkEventBox
	if this0 != nil {
		this1 = this0.InheritedFromGtkEventBox()
	}
	ret1 := C.gtk_event_box_get_visible_window(this1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *EventBox) SetAboveChild(above_child0 bool) {
	var this1 *C.GtkEventBox
	var above_child1 C.int
	if this0 != nil {
		this1 = this0.InheritedFromGtkEventBox()
	}
	above_child1 = _GoBoolToCBool(above_child0)
	C.gtk_event_box_set_above_child(this1, above_child1)
}
func (this0 *EventBox) SetVisibleWindow(visible_window0 bool) {
	var this1 *C.GtkEventBox
	var visible_window1 C.int
	if this0 != nil {
		this1 = this0.InheritedFromGtkEventBox()
	}
	visible_window1 = _GoBoolToCBool(visible_window0)
	C.gtk_event_box_set_visible_window(this1, visible_window1)
}
type ExpanderLike interface {
	BinLike
	InheritedFromGtkExpander() *C.GtkExpander
}

type Expander struct {
	Bin
	atk.ImplementorIfaceImpl
	BuildableImpl
}

func ToExpander(objlike gobject.ObjectLike) *Expander {
	c := objlike.InheritedFromGObject()
	if c == nil {
		return nil
	}
	t := (*Expander)(nil).GetStaticType()
	obj := gobject.ObjectGrabIfType(unsafe.Pointer(c), t)
	if obj != nil {
		return (*Expander)(obj)
	}
	panic("cannot cast to Expander")
}

func (this0 *Expander) InheritedFromGtkExpander() *C.GtkExpander {
	if this0 == nil {
		return nil
	}
	return (*C.GtkExpander)(this0.C)
}

func (this0 *Expander) GetStaticType() gobject.Type {
	return gobject.Type(C.gtk_expander_get_type())
}

func ExpanderGetType() gobject.Type {
	return (*Expander)(nil).GetStaticType()
}
func NewExpander(label0 string) *Expander {
	var label1 *C.char
	label1 = _GoStringToGString(label0)
	defer C.free(unsafe.Pointer(label1))
	ret1 := C.gtk_expander_new(label1)
	var ret2 *Expander
	ret2 = (*Expander)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
func NewExpanderWithMnemonic(label0 string) *Expander {
	var label1 *C.char
	label1 = _GoStringToGString(label0)
	defer C.free(unsafe.Pointer(label1))
	ret1 := C.gtk_expander_new_with_mnemonic(label1)
	var ret2 *Expander
	ret2 = (*Expander)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
func (this0 *Expander) GetExpanded() bool {
	var this1 *C.GtkExpander
	if this0 != nil {
		this1 = this0.InheritedFromGtkExpander()
	}
	ret1 := C.gtk_expander_get_expanded(this1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *Expander) GetLabel() string {
	var this1 *C.GtkExpander
	if this0 != nil {
		this1 = this0.InheritedFromGtkExpander()
	}
	ret1 := C.gtk_expander_get_label(this1)
	var ret2 string
	ret2 = C.GoString(ret1)
	return ret2
}
func (this0 *Expander) GetLabelFill() bool {
	var this1 *C.GtkExpander
	if this0 != nil {
		this1 = this0.InheritedFromGtkExpander()
	}
	ret1 := C.gtk_expander_get_label_fill(this1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *Expander) GetLabelWidget() *Widget {
	var this1 *C.GtkExpander
	if this0 != nil {
		this1 = this0.InheritedFromGtkExpander()
	}
	ret1 := C.gtk_expander_get_label_widget(this1)
	var ret2 *Widget
	ret2 = (*Widget)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
func (this0 *Expander) GetResizeToplevel() bool {
	var this1 *C.GtkExpander
	if this0 != nil {
		this1 = this0.InheritedFromGtkExpander()
	}
	ret1 := C.gtk_expander_get_resize_toplevel(this1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *Expander) GetSpacing() int {
	var this1 *C.GtkExpander
	if this0 != nil {
		this1 = this0.InheritedFromGtkExpander()
	}
	ret1 := C.gtk_expander_get_spacing(this1)
	var ret2 int
	ret2 = int(ret1)
	return ret2
}
func (this0 *Expander) GetUseMarkup() bool {
	var this1 *C.GtkExpander
	if this0 != nil {
		this1 = this0.InheritedFromGtkExpander()
	}
	ret1 := C.gtk_expander_get_use_markup(this1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *Expander) GetUseUnderline() bool {
	var this1 *C.GtkExpander
	if this0 != nil {
		this1 = this0.InheritedFromGtkExpander()
	}
	ret1 := C.gtk_expander_get_use_underline(this1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *Expander) SetExpanded(expanded0 bool) {
	var this1 *C.GtkExpander
	var expanded1 C.int
	if this0 != nil {
		this1 = this0.InheritedFromGtkExpander()
	}
	expanded1 = _GoBoolToCBool(expanded0)
	C.gtk_expander_set_expanded(this1, expanded1)
}
func (this0 *Expander) SetLabel(label0 string) {
	var this1 *C.GtkExpander
	var label1 *C.char
	if this0 != nil {
		this1 = this0.InheritedFromGtkExpander()
	}
	label1 = _GoStringToGString(label0)
	defer C.free(unsafe.Pointer(label1))
	C.gtk_expander_set_label(this1, label1)
}
func (this0 *Expander) SetLabelFill(label_fill0 bool) {
	var this1 *C.GtkExpander
	var label_fill1 C.int
	if this0 != nil {
		this1 = this0.InheritedFromGtkExpander()
	}
	label_fill1 = _GoBoolToCBool(label_fill0)
	C.gtk_expander_set_label_fill(this1, label_fill1)
}
func (this0 *Expander) SetLabelWidget(label_widget0 WidgetLike) {
	var this1 *C.GtkExpander
	var label_widget1 *C.GtkWidget
	if this0 != nil {
		this1 = this0.InheritedFromGtkExpander()
	}
	if label_widget0 != nil {
		label_widget1 = label_widget0.InheritedFromGtkWidget()
	}
	C.gtk_expander_set_label_widget(this1, label_widget1)
}
func (this0 *Expander) SetResizeToplevel(resize_toplevel0 bool) {
	var this1 *C.GtkExpander
	var resize_toplevel1 C.int
	if this0 != nil {
		this1 = this0.InheritedFromGtkExpander()
	}
	resize_toplevel1 = _GoBoolToCBool(resize_toplevel0)
	C.gtk_expander_set_resize_toplevel(this1, resize_toplevel1)
}
func (this0 *Expander) SetSpacing(spacing0 int) {
	var this1 *C.GtkExpander
	var spacing1 C.int32_t
	if this0 != nil {
		this1 = this0.InheritedFromGtkExpander()
	}
	spacing1 = C.int32_t(spacing0)
	C.gtk_expander_set_spacing(this1, spacing1)
}
func (this0 *Expander) SetUseMarkup(use_markup0 bool) {
	var this1 *C.GtkExpander
	var use_markup1 C.int
	if this0 != nil {
		this1 = this0.InheritedFromGtkExpander()
	}
	use_markup1 = _GoBoolToCBool(use_markup0)
	C.gtk_expander_set_use_markup(this1, use_markup1)
}
func (this0 *Expander) SetUseUnderline(use_underline0 bool) {
	var this1 *C.GtkExpander
	var use_underline1 C.int
	if this0 != nil {
		this1 = this0.InheritedFromGtkExpander()
	}
	use_underline1 = _GoBoolToCBool(use_underline0)
	C.gtk_expander_set_use_underline(this1, use_underline1)
}
type ExpanderStyle C.uint32_t
const (
	ExpanderStyleCollapsed ExpanderStyle = 0
	ExpanderStyleSemiCollapsed ExpanderStyle = 1
	ExpanderStyleSemiExpanded ExpanderStyle = 2
	ExpanderStyleExpanded ExpanderStyle = 3
)
type FileChooserLike interface {
	ImplementsGtkFileChooser() *C.GtkFileChooser
}

type FileChooser struct {
	gobject.Object
	FileChooserImpl
}

type FileChooserImpl struct {}

func ToFileChooser(objlike gobject.ObjectLike) *FileChooser {
	t := (*FileChooserImpl)(nil).GetStaticType()
	c := objlike.InheritedFromGObject()
	obj := gobject.ObjectGrabIfType(unsafe.Pointer(c), t)
	if obj != nil {
		return (*FileChooser)(obj)
	}
	panic("cannot cast to FileChooser")
}

func (this0 *FileChooserImpl) ImplementsGtkFileChooser() *C.GtkFileChooser {
	obj := uintptr(unsafe.Pointer(this0)) - unsafe.Sizeof(uintptr(0))
	return (*C.GtkFileChooser)((*gobject.Object)(unsafe.Pointer(obj)).C)
}

func (this0 *FileChooserImpl) GetStaticType() gobject.Type {
	return gobject.Type(C.gtk_file_chooser_get_type())
}

func FileChooserGetType() gobject.Type {
	return (*FileChooserImpl)(nil).GetStaticType()
}
func (this0 *FileChooserImpl) AddFilter(filter0 FileFilterLike) {
	var this1 *C.GtkFileChooser
	var filter1 *C.GtkFileFilter
	if this0 != nil {
		this1 = this0.ImplementsGtkFileChooser()}
	if filter0 != nil {
		filter1 = filter0.InheritedFromGtkFileFilter()
	}
	C.gtk_file_chooser_add_filter(this1, filter1)
}
func (this0 *FileChooserImpl) AddShortcutFolder(folder0 string) (bool, error) {
	var this1 *C.GtkFileChooser
	var folder1 *C.char
	var err1 *C.GError
	if this0 != nil {
		this1 = this0.ImplementsGtkFileChooser()}
	folder1 = _GoStringToGString(folder0)
	defer C.free(unsafe.Pointer(folder1))
	ret1 := C.gtk_file_chooser_add_shortcut_folder(this1, folder1, &err1)
	var ret2 bool
	var err2 error
	ret2 = ret1 != 0
	if err1 != nil {
		err2 = errors.New(C.GoString(((*_GError)(unsafe.Pointer(err1))).message))
		C.g_error_free(err1)
	}
	return ret2, err2
}
func (this0 *FileChooserImpl) AddShortcutFolderURI(uri0 string) (bool, error) {
	var this1 *C.GtkFileChooser
	var uri1 *C.char
	var err1 *C.GError
	if this0 != nil {
		this1 = this0.ImplementsGtkFileChooser()}
	uri1 = _GoStringToGString(uri0)
	defer C.free(unsafe.Pointer(uri1))
	ret1 := C.gtk_file_chooser_add_shortcut_folder_uri(this1, uri1, &err1)
	var ret2 bool
	var err2 error
	ret2 = ret1 != 0
	if err1 != nil {
		err2 = errors.New(C.GoString(((*_GError)(unsafe.Pointer(err1))).message))
		C.g_error_free(err1)
	}
	return ret2, err2
}
func (this0 *FileChooserImpl) GetAction() FileChooserAction {
	var this1 *C.GtkFileChooser
	if this0 != nil {
		this1 = this0.ImplementsGtkFileChooser()}
	ret1 := C.gtk_file_chooser_get_action(this1)
	var ret2 FileChooserAction
	ret2 = FileChooserAction(ret1)
	return ret2
}
func (this0 *FileChooserImpl) GetCreateFolders() bool {
	var this1 *C.GtkFileChooser
	if this0 != nil {
		this1 = this0.ImplementsGtkFileChooser()}
	ret1 := C.gtk_file_chooser_get_create_folders(this1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *FileChooserImpl) GetCurrentFolder() string {
	var this1 *C.GtkFileChooser
	if this0 != nil {
		this1 = this0.ImplementsGtkFileChooser()}
	ret1 := C.gtk_file_chooser_get_current_folder(this1)
	var ret2 string
	ret2 = C.GoString(ret1)
	C.g_free(unsafe.Pointer(ret1))
	return ret2
}
func (this0 *FileChooserImpl) GetCurrentFolderFile() *gio.File {
	var this1 *C.GtkFileChooser
	if this0 != nil {
		this1 = this0.ImplementsGtkFileChooser()}
	ret1 := C.gtk_file_chooser_get_current_folder_file(this1)
	var ret2 *gio.File
	ret2 = (*gio.File)(gobject.ObjectWrap(unsafe.Pointer(ret1), false))
	return ret2
}
func (this0 *FileChooserImpl) GetCurrentFolderURI() string {
	var this1 *C.GtkFileChooser
	if this0 != nil {
		this1 = this0.ImplementsGtkFileChooser()}
	ret1 := C.gtk_file_chooser_get_current_folder_uri(this1)
	var ret2 string
	ret2 = C.GoString(ret1)
	C.g_free(unsafe.Pointer(ret1))
	return ret2
}
func (this0 *FileChooserImpl) GetDoOverwriteConfirmation() bool {
	var this1 *C.GtkFileChooser
	if this0 != nil {
		this1 = this0.ImplementsGtkFileChooser()}
	ret1 := C.gtk_file_chooser_get_do_overwrite_confirmation(this1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *FileChooserImpl) GetExtraWidget() *Widget {
	var this1 *C.GtkFileChooser
	if this0 != nil {
		this1 = this0.ImplementsGtkFileChooser()}
	ret1 := C.gtk_file_chooser_get_extra_widget(this1)
	var ret2 *Widget
	ret2 = (*Widget)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
func (this0 *FileChooserImpl) GetFile() *gio.File {
	var this1 *C.GtkFileChooser
	if this0 != nil {
		this1 = this0.ImplementsGtkFileChooser()}
	ret1 := C.gtk_file_chooser_get_file(this1)
	var ret2 *gio.File
	ret2 = (*gio.File)(gobject.ObjectWrap(unsafe.Pointer(ret1), false))
	return ret2
}
func (this0 *FileChooserImpl) GetFilename() string {
	var this1 *C.GtkFileChooser
	if this0 != nil {
		this1 = this0.ImplementsGtkFileChooser()}
	ret1 := C.gtk_file_chooser_get_filename(this1)
	var ret2 string
	ret2 = C.GoString(ret1)
	C.g_free(unsafe.Pointer(ret1))
	return ret2
}
func (this0 *FileChooserImpl) GetFilenames() []string {
	var this1 *C.GtkFileChooser
	if this0 != nil {
		this1 = this0.ImplementsGtkFileChooser()}
	ret1 := C.gtk_file_chooser_get_filenames(this1)
	var ret2 []string
	for iter := (*_GSList)(unsafe.Pointer(ret1)); iter != nil; iter = iter.next {
		var elt string
		elt = C.GoString((*C.char)(iter.data))
		C.g_free(unsafe.Pointer((*C.char)(iter.data)))
		ret2 = append(ret2, elt)
	}
	return ret2
}
func (this0 *FileChooserImpl) GetFiles() []*gio.File {
	var this1 *C.GtkFileChooser
	if this0 != nil {
		this1 = this0.ImplementsGtkFileChooser()}
	ret1 := C.gtk_file_chooser_get_files(this1)
	var ret2 []*gio.File
	for iter := (*_GSList)(unsafe.Pointer(ret1)); iter != nil; iter = iter.next {
		var elt *gio.File
		elt = (*gio.File)(gobject.ObjectWrap(unsafe.Pointer((*C.GFile)(iter.data)), false))
		ret2 = append(ret2, elt)
	}
	return ret2
}
func (this0 *FileChooserImpl) GetFilter() *FileFilter {
	var this1 *C.GtkFileChooser
	if this0 != nil {
		this1 = this0.ImplementsGtkFileChooser()}
	ret1 := C.gtk_file_chooser_get_filter(this1)
	var ret2 *FileFilter
	ret2 = (*FileFilter)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
func (this0 *FileChooserImpl) GetLocalOnly() bool {
	var this1 *C.GtkFileChooser
	if this0 != nil {
		this1 = this0.ImplementsGtkFileChooser()}
	ret1 := C.gtk_file_chooser_get_local_only(this1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *FileChooserImpl) GetPreviewFile() *gio.File {
	var this1 *C.GtkFileChooser
	if this0 != nil {
		this1 = this0.ImplementsGtkFileChooser()}
	ret1 := C.gtk_file_chooser_get_preview_file(this1)
	var ret2 *gio.File
	ret2 = (*gio.File)(gobject.ObjectWrap(unsafe.Pointer(ret1), false))
	return ret2
}
func (this0 *FileChooserImpl) GetPreviewFilename() string {
	var this1 *C.GtkFileChooser
	if this0 != nil {
		this1 = this0.ImplementsGtkFileChooser()}
	ret1 := C.gtk_file_chooser_get_preview_filename(this1)
	var ret2 string
	ret2 = C.GoString(ret1)
	C.g_free(unsafe.Pointer(ret1))
	return ret2
}
func (this0 *FileChooserImpl) GetPreviewURI() string {
	var this1 *C.GtkFileChooser
	if this0 != nil {
		this1 = this0.ImplementsGtkFileChooser()}
	ret1 := C.gtk_file_chooser_get_preview_uri(this1)
	var ret2 string
	ret2 = C.GoString(ret1)
	C.g_free(unsafe.Pointer(ret1))
	return ret2
}
func (this0 *FileChooserImpl) GetPreviewWidget() *Widget {
	var this1 *C.GtkFileChooser
	if this0 != nil {
		this1 = this0.ImplementsGtkFileChooser()}
	ret1 := C.gtk_file_chooser_get_preview_widget(this1)
	var ret2 *Widget
	ret2 = (*Widget)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
func (this0 *FileChooserImpl) GetPreviewWidgetActive() bool {
	var this1 *C.GtkFileChooser
	if this0 != nil {
		this1 = this0.ImplementsGtkFileChooser()}
	ret1 := C.gtk_file_chooser_get_preview_widget_active(this1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *FileChooserImpl) GetSelectMultiple() bool {
	var this1 *C.GtkFileChooser
	if this0 != nil {
		this1 = this0.ImplementsGtkFileChooser()}
	ret1 := C.gtk_file_chooser_get_select_multiple(this1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *FileChooserImpl) GetShowHidden() bool {
	var this1 *C.GtkFileChooser
	if this0 != nil {
		this1 = this0.ImplementsGtkFileChooser()}
	ret1 := C.gtk_file_chooser_get_show_hidden(this1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *FileChooserImpl) GetURI() string {
	var this1 *C.GtkFileChooser
	if this0 != nil {
		this1 = this0.ImplementsGtkFileChooser()}
	ret1 := C.gtk_file_chooser_get_uri(this1)
	var ret2 string
	ret2 = C.GoString(ret1)
	C.g_free(unsafe.Pointer(ret1))
	return ret2
}
func (this0 *FileChooserImpl) GetURIs() []string {
	var this1 *C.GtkFileChooser
	if this0 != nil {
		this1 = this0.ImplementsGtkFileChooser()}
	ret1 := C.gtk_file_chooser_get_uris(this1)
	var ret2 []string
	for iter := (*_GSList)(unsafe.Pointer(ret1)); iter != nil; iter = iter.next {
		var elt string
		elt = C.GoString((*C.char)(iter.data))
		C.g_free(unsafe.Pointer((*C.char)(iter.data)))
		ret2 = append(ret2, elt)
	}
	return ret2
}
func (this0 *FileChooserImpl) GetUsePreviewLabel() bool {
	var this1 *C.GtkFileChooser
	if this0 != nil {
		this1 = this0.ImplementsGtkFileChooser()}
	ret1 := C.gtk_file_chooser_get_use_preview_label(this1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *FileChooserImpl) ListFilters() []*FileFilter {
	var this1 *C.GtkFileChooser
	if this0 != nil {
		this1 = this0.ImplementsGtkFileChooser()}
	ret1 := C.gtk_file_chooser_list_filters(this1)
	var ret2 []*FileFilter
	for iter := (*_GSList)(unsafe.Pointer(ret1)); iter != nil; iter = iter.next {
		var elt *FileFilter
		elt = (*FileFilter)(gobject.ObjectWrap(unsafe.Pointer((*C.GtkFileFilter)(iter.data)), true))
		ret2 = append(ret2, elt)
	}
	return ret2
}
func (this0 *FileChooserImpl) ListShortcutFolderURIs() []string {
	var this1 *C.GtkFileChooser
	if this0 != nil {
		this1 = this0.ImplementsGtkFileChooser()}
	ret1 := C.gtk_file_chooser_list_shortcut_folder_uris(this1)
	var ret2 []string
	for iter := (*_GSList)(unsafe.Pointer(ret1)); iter != nil; iter = iter.next {
		var elt string
		elt = C.GoString((*C.char)(iter.data))
		C.g_free(unsafe.Pointer((*C.char)(iter.data)))
		ret2 = append(ret2, elt)
	}
	return ret2
}
func (this0 *FileChooserImpl) ListShortcutFolders() []string {
	var this1 *C.GtkFileChooser
	if this0 != nil {
		this1 = this0.ImplementsGtkFileChooser()}
	ret1 := C.gtk_file_chooser_list_shortcut_folders(this1)
	var ret2 []string
	for iter := (*_GSList)(unsafe.Pointer(ret1)); iter != nil; iter = iter.next {
		var elt string
		elt = C.GoString((*C.char)(iter.data))
		C.g_free(unsafe.Pointer((*C.char)(iter.data)))
		ret2 = append(ret2, elt)
	}
	return ret2
}
func (this0 *FileChooserImpl) RemoveFilter(filter0 FileFilterLike) {
	var this1 *C.GtkFileChooser
	var filter1 *C.GtkFileFilter
	if this0 != nil {
		this1 = this0.ImplementsGtkFileChooser()}
	if filter0 != nil {
		filter1 = filter0.InheritedFromGtkFileFilter()
	}
	C.gtk_file_chooser_remove_filter(this1, filter1)
}
func (this0 *FileChooserImpl) RemoveShortcutFolder(folder0 string) (bool, error) {
	var this1 *C.GtkFileChooser
	var folder1 *C.char
	var err1 *C.GError
	if this0 != nil {
		this1 = this0.ImplementsGtkFileChooser()}
	folder1 = _GoStringToGString(folder0)
	defer C.free(unsafe.Pointer(folder1))
	ret1 := C.gtk_file_chooser_remove_shortcut_folder(this1, folder1, &err1)
	var ret2 bool
	var err2 error
	ret2 = ret1 != 0
	if err1 != nil {
		err2 = errors.New(C.GoString(((*_GError)(unsafe.Pointer(err1))).message))
		C.g_error_free(err1)
	}
	return ret2, err2
}
func (this0 *FileChooserImpl) RemoveShortcutFolderURI(uri0 string) (bool, error) {
	var this1 *C.GtkFileChooser
	var uri1 *C.char
	var err1 *C.GError
	if this0 != nil {
		this1 = this0.ImplementsGtkFileChooser()}
	uri1 = _GoStringToGString(uri0)
	defer C.free(unsafe.Pointer(uri1))
	ret1 := C.gtk_file_chooser_remove_shortcut_folder_uri(this1, uri1, &err1)
	var ret2 bool
	var err2 error
	ret2 = ret1 != 0
	if err1 != nil {
		err2 = errors.New(C.GoString(((*_GError)(unsafe.Pointer(err1))).message))
		C.g_error_free(err1)
	}
	return ret2, err2
}
func (this0 *FileChooserImpl) SelectAll() {
	var this1 *C.GtkFileChooser
	if this0 != nil {
		this1 = this0.ImplementsGtkFileChooser()}
	C.gtk_file_chooser_select_all(this1)
}
func (this0 *FileChooserImpl) SelectFile(file0 gio.FileLike) (bool, error) {
	var this1 *C.GtkFileChooser
	var file1 *C.GFile
	var err1 *C.GError
	if this0 != nil {
		this1 = this0.ImplementsGtkFileChooser()}
	if file0 != nil {
		file1 = file0.ImplementsGFile()}
	ret1 := C.gtk_file_chooser_select_file(this1, file1, &err1)
	var ret2 bool
	var err2 error
	ret2 = ret1 != 0
	if err1 != nil {
		err2 = errors.New(C.GoString(((*_GError)(unsafe.Pointer(err1))).message))
		C.g_error_free(err1)
	}
	return ret2, err2
}
func (this0 *FileChooserImpl) SelectFilename(filename0 string) bool {
	var this1 *C.GtkFileChooser
	var filename1 *C.char
	if this0 != nil {
		this1 = this0.ImplementsGtkFileChooser()}
	filename1 = _GoStringToGString(filename0)
	defer C.free(unsafe.Pointer(filename1))
	ret1 := C.gtk_file_chooser_select_filename(this1, filename1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *FileChooserImpl) SelectURI(uri0 string) bool {
	var this1 *C.GtkFileChooser
	var uri1 *C.char
	if this0 != nil {
		this1 = this0.ImplementsGtkFileChooser()}
	uri1 = _GoStringToGString(uri0)
	defer C.free(unsafe.Pointer(uri1))
	ret1 := C.gtk_file_chooser_select_uri(this1, uri1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *FileChooserImpl) SetAction(action0 FileChooserAction) {
	var this1 *C.GtkFileChooser
	var action1 C.GtkFileChooserAction
	if this0 != nil {
		this1 = this0.ImplementsGtkFileChooser()}
	action1 = C.GtkFileChooserAction(action0)
	C.gtk_file_chooser_set_action(this1, action1)
}
func (this0 *FileChooserImpl) SetCreateFolders(create_folders0 bool) {
	var this1 *C.GtkFileChooser
	var create_folders1 C.int
	if this0 != nil {
		this1 = this0.ImplementsGtkFileChooser()}
	create_folders1 = _GoBoolToCBool(create_folders0)
	C.gtk_file_chooser_set_create_folders(this1, create_folders1)
}
func (this0 *FileChooserImpl) SetCurrentFolder(filename0 string) bool {
	var this1 *C.GtkFileChooser
	var filename1 *C.char
	if this0 != nil {
		this1 = this0.ImplementsGtkFileChooser()}
	filename1 = _GoStringToGString(filename0)
	defer C.free(unsafe.Pointer(filename1))
	ret1 := C.gtk_file_chooser_set_current_folder(this1, filename1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *FileChooserImpl) SetCurrentFolderFile(file0 gio.FileLike) (bool, error) {
	var this1 *C.GtkFileChooser
	var file1 *C.GFile
	var err1 *C.GError
	if this0 != nil {
		this1 = this0.ImplementsGtkFileChooser()}
	if file0 != nil {
		file1 = file0.ImplementsGFile()}
	ret1 := C.gtk_file_chooser_set_current_folder_file(this1, file1, &err1)
	var ret2 bool
	var err2 error
	ret2 = ret1 != 0
	if err1 != nil {
		err2 = errors.New(C.GoString(((*_GError)(unsafe.Pointer(err1))).message))
		C.g_error_free(err1)
	}
	return ret2, err2
}
func (this0 *FileChooserImpl) SetCurrentFolderURI(uri0 string) bool {
	var this1 *C.GtkFileChooser
	var uri1 *C.char
	if this0 != nil {
		this1 = this0.ImplementsGtkFileChooser()}
	uri1 = _GoStringToGString(uri0)
	defer C.free(unsafe.Pointer(uri1))
	ret1 := C.gtk_file_chooser_set_current_folder_uri(this1, uri1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *FileChooserImpl) SetCurrentName(name0 string) {
	var this1 *C.GtkFileChooser
	var name1 *C.char
	if this0 != nil {
		this1 = this0.ImplementsGtkFileChooser()}
	name1 = _GoStringToGString(name0)
	defer C.free(unsafe.Pointer(name1))
	C.gtk_file_chooser_set_current_name(this1, name1)
}
func (this0 *FileChooserImpl) SetDoOverwriteConfirmation(do_overwrite_confirmation0 bool) {
	var this1 *C.GtkFileChooser
	var do_overwrite_confirmation1 C.int
	if this0 != nil {
		this1 = this0.ImplementsGtkFileChooser()}
	do_overwrite_confirmation1 = _GoBoolToCBool(do_overwrite_confirmation0)
	C.gtk_file_chooser_set_do_overwrite_confirmation(this1, do_overwrite_confirmation1)
}
func (this0 *FileChooserImpl) SetExtraWidget(extra_widget0 WidgetLike) {
	var this1 *C.GtkFileChooser
	var extra_widget1 *C.GtkWidget
	if this0 != nil {
		this1 = this0.ImplementsGtkFileChooser()}
	if extra_widget0 != nil {
		extra_widget1 = extra_widget0.InheritedFromGtkWidget()
	}
	C.gtk_file_chooser_set_extra_widget(this1, extra_widget1)
}
func (this0 *FileChooserImpl) SetFile(file0 gio.FileLike) (bool, error) {
	var this1 *C.GtkFileChooser
	var file1 *C.GFile
	var err1 *C.GError
	if this0 != nil {
		this1 = this0.ImplementsGtkFileChooser()}
	if file0 != nil {
		file1 = file0.ImplementsGFile()}
	ret1 := C.gtk_file_chooser_set_file(this1, file1, &err1)
	var ret2 bool
	var err2 error
	ret2 = ret1 != 0
	if err1 != nil {
		err2 = errors.New(C.GoString(((*_GError)(unsafe.Pointer(err1))).message))
		C.g_error_free(err1)
	}
	return ret2, err2
}
func (this0 *FileChooserImpl) SetFilename(filename0 string) bool {
	var this1 *C.GtkFileChooser
	var filename1 *C.char
	if this0 != nil {
		this1 = this0.ImplementsGtkFileChooser()}
	filename1 = _GoStringToGString(filename0)
	defer C.free(unsafe.Pointer(filename1))
	ret1 := C.gtk_file_chooser_set_filename(this1, filename1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *FileChooserImpl) SetFilter(filter0 FileFilterLike) {
	var this1 *C.GtkFileChooser
	var filter1 *C.GtkFileFilter
	if this0 != nil {
		this1 = this0.ImplementsGtkFileChooser()}
	if filter0 != nil {
		filter1 = filter0.InheritedFromGtkFileFilter()
	}
	C.gtk_file_chooser_set_filter(this1, filter1)
}
func (this0 *FileChooserImpl) SetLocalOnly(local_only0 bool) {
	var this1 *C.GtkFileChooser
	var local_only1 C.int
	if this0 != nil {
		this1 = this0.ImplementsGtkFileChooser()}
	local_only1 = _GoBoolToCBool(local_only0)
	C.gtk_file_chooser_set_local_only(this1, local_only1)
}
func (this0 *FileChooserImpl) SetPreviewWidget(preview_widget0 WidgetLike) {
	var this1 *C.GtkFileChooser
	var preview_widget1 *C.GtkWidget
	if this0 != nil {
		this1 = this0.ImplementsGtkFileChooser()}
	if preview_widget0 != nil {
		preview_widget1 = preview_widget0.InheritedFromGtkWidget()
	}
	C.gtk_file_chooser_set_preview_widget(this1, preview_widget1)
}
func (this0 *FileChooserImpl) SetPreviewWidgetActive(active0 bool) {
	var this1 *C.GtkFileChooser
	var active1 C.int
	if this0 != nil {
		this1 = this0.ImplementsGtkFileChooser()}
	active1 = _GoBoolToCBool(active0)
	C.gtk_file_chooser_set_preview_widget_active(this1, active1)
}
func (this0 *FileChooserImpl) SetSelectMultiple(select_multiple0 bool) {
	var this1 *C.GtkFileChooser
	var select_multiple1 C.int
	if this0 != nil {
		this1 = this0.ImplementsGtkFileChooser()}
	select_multiple1 = _GoBoolToCBool(select_multiple0)
	C.gtk_file_chooser_set_select_multiple(this1, select_multiple1)
}
func (this0 *FileChooserImpl) SetShowHidden(show_hidden0 bool) {
	var this1 *C.GtkFileChooser
	var show_hidden1 C.int
	if this0 != nil {
		this1 = this0.ImplementsGtkFileChooser()}
	show_hidden1 = _GoBoolToCBool(show_hidden0)
	C.gtk_file_chooser_set_show_hidden(this1, show_hidden1)
}
func (this0 *FileChooserImpl) SetURI(uri0 string) bool {
	var this1 *C.GtkFileChooser
	var uri1 *C.char
	if this0 != nil {
		this1 = this0.ImplementsGtkFileChooser()}
	uri1 = _GoStringToGString(uri0)
	defer C.free(unsafe.Pointer(uri1))
	ret1 := C.gtk_file_chooser_set_uri(this1, uri1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *FileChooserImpl) SetUsePreviewLabel(use_label0 bool) {
	var this1 *C.GtkFileChooser
	var use_label1 C.int
	if this0 != nil {
		this1 = this0.ImplementsGtkFileChooser()}
	use_label1 = _GoBoolToCBool(use_label0)
	C.gtk_file_chooser_set_use_preview_label(this1, use_label1)
}
func (this0 *FileChooserImpl) UnselectAll() {
	var this1 *C.GtkFileChooser
	if this0 != nil {
		this1 = this0.ImplementsGtkFileChooser()}
	C.gtk_file_chooser_unselect_all(this1)
}
func (this0 *FileChooserImpl) UnselectFile(file0 gio.FileLike) {
	var this1 *C.GtkFileChooser
	var file1 *C.GFile
	if this0 != nil {
		this1 = this0.ImplementsGtkFileChooser()}
	if file0 != nil {
		file1 = file0.ImplementsGFile()}
	C.gtk_file_chooser_unselect_file(this1, file1)
}
func (this0 *FileChooserImpl) UnselectFilename(filename0 string) {
	var this1 *C.GtkFileChooser
	var filename1 *C.char
	if this0 != nil {
		this1 = this0.ImplementsGtkFileChooser()}
	filename1 = _GoStringToGString(filename0)
	defer C.free(unsafe.Pointer(filename1))
	C.gtk_file_chooser_unselect_filename(this1, filename1)
}
func (this0 *FileChooserImpl) UnselectURI(uri0 string) {
	var this1 *C.GtkFileChooser
	var uri1 *C.char
	if this0 != nil {
		this1 = this0.ImplementsGtkFileChooser()}
	uri1 = _GoStringToGString(uri0)
	defer C.free(unsafe.Pointer(uri1))
	C.gtk_file_chooser_unselect_uri(this1, uri1)
}
type FileChooserAction C.uint32_t
const (
	FileChooserActionOpen FileChooserAction = 0
	FileChooserActionSave FileChooserAction = 1
	FileChooserActionSelectFolder FileChooserAction = 2
	FileChooserActionCreateFolder FileChooserAction = 3
)
type FileChooserButtonLike interface {
	BoxLike
	InheritedFromGtkFileChooserButton() *C.GtkFileChooserButton
}

type FileChooserButton struct {
	Box
	atk.ImplementorIfaceImpl
	BuildableImpl
	FileChooserImpl
	OrientableImpl
}

func ToFileChooserButton(objlike gobject.ObjectLike) *FileChooserButton {
	c := objlike.InheritedFromGObject()
	if c == nil {
		return nil
	}
	t := (*FileChooserButton)(nil).GetStaticType()
	obj := gobject.ObjectGrabIfType(unsafe.Pointer(c), t)
	if obj != nil {
		return (*FileChooserButton)(obj)
	}
	panic("cannot cast to FileChooserButton")
}

func (this0 *FileChooserButton) InheritedFromGtkFileChooserButton() *C.GtkFileChooserButton {
	if this0 == nil {
		return nil
	}
	return (*C.GtkFileChooserButton)(this0.C)
}

func (this0 *FileChooserButton) GetStaticType() gobject.Type {
	return gobject.Type(C.gtk_file_chooser_button_get_type())
}

func FileChooserButtonGetType() gobject.Type {
	return (*FileChooserButton)(nil).GetStaticType()
}
func NewFileChooserButton(title0 string, action0 FileChooserAction) *FileChooserButton {
	var title1 *C.char
	var action1 C.GtkFileChooserAction
	title1 = _GoStringToGString(title0)
	defer C.free(unsafe.Pointer(title1))
	action1 = C.GtkFileChooserAction(action0)
	ret1 := C.gtk_file_chooser_button_new(title1, action1)
	var ret2 *FileChooserButton
	ret2 = (*FileChooserButton)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
func NewFileChooserButtonWithDialog(dialog0 WidgetLike) *FileChooserButton {
	var dialog1 *C.GtkWidget
	if dialog0 != nil {
		dialog1 = dialog0.InheritedFromGtkWidget()
	}
	ret1 := C.gtk_file_chooser_button_new_with_dialog(dialog1)
	var ret2 *FileChooserButton
	ret2 = (*FileChooserButton)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
func (this0 *FileChooserButton) GetFocusOnClick() bool {
	var this1 *C.GtkFileChooserButton
	if this0 != nil {
		this1 = this0.InheritedFromGtkFileChooserButton()
	}
	ret1 := C.gtk_file_chooser_button_get_focus_on_click(this1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *FileChooserButton) GetTitle() string {
	var this1 *C.GtkFileChooserButton
	if this0 != nil {
		this1 = this0.InheritedFromGtkFileChooserButton()
	}
	ret1 := C.gtk_file_chooser_button_get_title(this1)
	var ret2 string
	ret2 = C.GoString(ret1)
	return ret2
}
func (this0 *FileChooserButton) GetWidthChars() int {
	var this1 *C.GtkFileChooserButton
	if this0 != nil {
		this1 = this0.InheritedFromGtkFileChooserButton()
	}
	ret1 := C.gtk_file_chooser_button_get_width_chars(this1)
	var ret2 int
	ret2 = int(ret1)
	return ret2
}
func (this0 *FileChooserButton) SetFocusOnClick(focus_on_click0 bool) {
	var this1 *C.GtkFileChooserButton
	var focus_on_click1 C.int
	if this0 != nil {
		this1 = this0.InheritedFromGtkFileChooserButton()
	}
	focus_on_click1 = _GoBoolToCBool(focus_on_click0)
	C.gtk_file_chooser_button_set_focus_on_click(this1, focus_on_click1)
}
func (this0 *FileChooserButton) SetTitle(title0 string) {
	var this1 *C.GtkFileChooserButton
	var title1 *C.char
	if this0 != nil {
		this1 = this0.InheritedFromGtkFileChooserButton()
	}
	title1 = _GoStringToGString(title0)
	defer C.free(unsafe.Pointer(title1))
	C.gtk_file_chooser_button_set_title(this1, title1)
}
func (this0 *FileChooserButton) SetWidthChars(n_chars0 int) {
	var this1 *C.GtkFileChooserButton
	var n_chars1 C.int32_t
	if this0 != nil {
		this1 = this0.InheritedFromGtkFileChooserButton()
	}
	n_chars1 = C.int32_t(n_chars0)
	C.gtk_file_chooser_button_set_width_chars(this1, n_chars1)
}
type FileChooserConfirmation C.uint32_t
const (
	FileChooserConfirmationConfirm FileChooserConfirmation = 0
	FileChooserConfirmationAcceptFilename FileChooserConfirmation = 1
	FileChooserConfirmationSelectAgain FileChooserConfirmation = 2
)
type FileChooserDialogLike interface {
	DialogLike
	InheritedFromGtkFileChooserDialog() *C.GtkFileChooserDialog
}

type FileChooserDialog struct {
	Dialog
	atk.ImplementorIfaceImpl
	BuildableImpl
	FileChooserImpl
}

func ToFileChooserDialog(objlike gobject.ObjectLike) *FileChooserDialog {
	c := objlike.InheritedFromGObject()
	if c == nil {
		return nil
	}
	t := (*FileChooserDialog)(nil).GetStaticType()
	obj := gobject.ObjectGrabIfType(unsafe.Pointer(c), t)
	if obj != nil {
		return (*FileChooserDialog)(obj)
	}
	panic("cannot cast to FileChooserDialog")
}

func (this0 *FileChooserDialog) InheritedFromGtkFileChooserDialog() *C.GtkFileChooserDialog {
	if this0 == nil {
		return nil
	}
	return (*C.GtkFileChooserDialog)(this0.C)
}

func (this0 *FileChooserDialog) GetStaticType() gobject.Type {
	return gobject.Type(C.gtk_file_chooser_dialog_get_type())
}

func FileChooserDialogGetType() gobject.Type {
	return (*FileChooserDialog)(nil).GetStaticType()
}
type FileChooserError C.uint32_t
const (
	FileChooserErrorNonexistent FileChooserError = 0
	FileChooserErrorBadFilename FileChooserError = 1
	FileChooserErrorAlreadyExists FileChooserError = 2
	FileChooserErrorIncompleteHostname FileChooserError = 3
)
type FileChooserWidgetLike interface {
	BoxLike
	InheritedFromGtkFileChooserWidget() *C.GtkFileChooserWidget
}

type FileChooserWidget struct {
	Box
	atk.ImplementorIfaceImpl
	BuildableImpl
	FileChooserImpl
	OrientableImpl
}

func ToFileChooserWidget(objlike gobject.ObjectLike) *FileChooserWidget {
	c := objlike.InheritedFromGObject()
	if c == nil {
		return nil
	}
	t := (*FileChooserWidget)(nil).GetStaticType()
	obj := gobject.ObjectGrabIfType(unsafe.Pointer(c), t)
	if obj != nil {
		return (*FileChooserWidget)(obj)
	}
	panic("cannot cast to FileChooserWidget")
}

func (this0 *FileChooserWidget) InheritedFromGtkFileChooserWidget() *C.GtkFileChooserWidget {
	if this0 == nil {
		return nil
	}
	return (*C.GtkFileChooserWidget)(this0.C)
}

func (this0 *FileChooserWidget) GetStaticType() gobject.Type {
	return gobject.Type(C.gtk_file_chooser_widget_get_type())
}

func FileChooserWidgetGetType() gobject.Type {
	return (*FileChooserWidget)(nil).GetStaticType()
}
func NewFileChooserWidget(action0 FileChooserAction) *FileChooserWidget {
	var action1 C.GtkFileChooserAction
	action1 = C.GtkFileChooserAction(action0)
	ret1 := C.gtk_file_chooser_widget_new(action1)
	var ret2 *FileChooserWidget
	ret2 = (*FileChooserWidget)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
type FileFilterLike interface {
	gobject.InitiallyUnownedLike
	InheritedFromGtkFileFilter() *C.GtkFileFilter
}

type FileFilter struct {
	gobject.InitiallyUnowned
	BuildableImpl
}

func ToFileFilter(objlike gobject.ObjectLike) *FileFilter {
	c := objlike.InheritedFromGObject()
	if c == nil {
		return nil
	}
	t := (*FileFilter)(nil).GetStaticType()
	obj := gobject.ObjectGrabIfType(unsafe.Pointer(c), t)
	if obj != nil {
		return (*FileFilter)(obj)
	}
	panic("cannot cast to FileFilter")
}

func (this0 *FileFilter) InheritedFromGtkFileFilter() *C.GtkFileFilter {
	if this0 == nil {
		return nil
	}
	return (*C.GtkFileFilter)(this0.C)
}

func (this0 *FileFilter) GetStaticType() gobject.Type {
	return gobject.Type(C.gtk_file_filter_get_type())
}

func FileFilterGetType() gobject.Type {
	return (*FileFilter)(nil).GetStaticType()
}
func NewFileFilter() *FileFilter {
	ret1 := C.gtk_file_filter_new()
	var ret2 *FileFilter
	ret2 = (*FileFilter)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
func (this0 *FileFilter) AddCustom(needed0 FileFilterFlags, func0 FileFilterFunc) {
	var this1 *C.GtkFileFilter
	var needed1 C.GtkFileFilterFlags
	var func1 unsafe.Pointer
	if this0 != nil {
		this1 = this0.InheritedFromGtkFileFilter()
	}
	needed1 = C.GtkFileFilterFlags(needed0)
	if func0 != nil {
		func1 = unsafe.Pointer(&func0)}
	gobject.Holder.Grab(func1)
	C._gtk_file_filter_add_custom(this1, needed1, func1)
}
func (this0 *FileFilter) AddMIMEType(mime_type0 string) {
	var this1 *C.GtkFileFilter
	var mime_type1 *C.char
	if this0 != nil {
		this1 = this0.InheritedFromGtkFileFilter()
	}
	mime_type1 = _GoStringToGString(mime_type0)
	defer C.free(unsafe.Pointer(mime_type1))
	C.gtk_file_filter_add_mime_type(this1, mime_type1)
}
func (this0 *FileFilter) AddPattern(pattern0 string) {
	var this1 *C.GtkFileFilter
	var pattern1 *C.char
	if this0 != nil {
		this1 = this0.InheritedFromGtkFileFilter()
	}
	pattern1 = _GoStringToGString(pattern0)
	defer C.free(unsafe.Pointer(pattern1))
	C.gtk_file_filter_add_pattern(this1, pattern1)
}
func (this0 *FileFilter) AddPixbufFormats() {
	var this1 *C.GtkFileFilter
	if this0 != nil {
		this1 = this0.InheritedFromGtkFileFilter()
	}
	C.gtk_file_filter_add_pixbuf_formats(this1)
}
func (this0 *FileFilter) Filter(filter_info0 *FileFilterInfo) bool {
	var this1 *C.GtkFileFilter
	var filter_info1 *C.GtkFileFilterInfo
	if this0 != nil {
		this1 = this0.InheritedFromGtkFileFilter()
	}
	filter_info1 = (*C.GtkFileFilterInfo)(unsafe.Pointer(filter_info0))
	ret1 := C.gtk_file_filter_filter(this1, filter_info1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *FileFilter) GetName() string {
	var this1 *C.GtkFileFilter
	if this0 != nil {
		this1 = this0.InheritedFromGtkFileFilter()
	}
	ret1 := C.gtk_file_filter_get_name(this1)
	var ret2 string
	ret2 = C.GoString(ret1)
	return ret2
}
func (this0 *FileFilter) GetNeeded() FileFilterFlags {
	var this1 *C.GtkFileFilter
	if this0 != nil {
		this1 = this0.InheritedFromGtkFileFilter()
	}
	ret1 := C.gtk_file_filter_get_needed(this1)
	var ret2 FileFilterFlags
	ret2 = FileFilterFlags(ret1)
	return ret2
}
func (this0 *FileFilter) SetName(name0 string) {
	var this1 *C.GtkFileFilter
	var name1 *C.char
	if this0 != nil {
		this1 = this0.InheritedFromGtkFileFilter()
	}
	name1 = _GoStringToGString(name0)
	defer C.free(unsafe.Pointer(name1))
	C.gtk_file_filter_set_name(this1, name1)
}
type FileFilterFlags C.uint32_t
const (
	FileFilterFlagsFilename FileFilterFlags = 1
	FileFilterFlagsURI FileFilterFlags = 2
	FileFilterFlagsDisplayName FileFilterFlags = 4
	FileFilterFlagsMIMEType FileFilterFlags = 8
)
type FileFilterFunc func(filter_info *FileFilterInfo) bool
//export _GtkFileFilterFunc_c_wrapper
func _GtkFileFilterFunc_c_wrapper(filter_info0 unsafe.Pointer, data0 unsafe.Pointer) int32 {
	var filter_info1 *FileFilterInfo
	var data1 FileFilterFunc
	filter_info1 = (*FileFilterInfo)(unsafe.Pointer((*C.GtkFileFilterInfo)(filter_info0)))
	data1 = *(*FileFilterFunc)(data0)
	ret1 := data1(filter_info1)
	var ret2 C.int
	ret2 = _GoBoolToCBool(ret1)
	return (int32)(ret2)
}
//export _GtkFileFilterFunc_c_wrapper_once
func _GtkFileFilterFunc_c_wrapper_once(filter_info0 unsafe.Pointer, data0 unsafe.Pointer) int32 {
	ret := _GtkFileFilterFunc_c_wrapper(filter_info0, data0)
	gobject.Holder.Release(data0)
	return ret
}
type FileFilterInfo struct {
	Contains FileFilterFlags
	_ [4]byte
	filename0 *C.char
	uri0 *C.char
	display_name0 *C.char
	mime_type0 *C.char
}
func (this0 *FileFilterInfo) Filename() string {
	var filename1 string
	filename1 = C.GoString(this0.filename0)
	return filename1
}
func (this0 *FileFilterInfo) URI() string {
	var uri1 string
	uri1 = C.GoString(this0.uri0)
	return uri1
}
func (this0 *FileFilterInfo) DisplayName() string {
	var display_name1 string
	display_name1 = C.GoString(this0.display_name0)
	return display_name1
}
func (this0 *FileFilterInfo) MIMEType() string {
	var mime_type1 string
	mime_type1 = C.GoString(this0.mime_type0)
	return mime_type1
}
type FixedLike interface {
	ContainerLike
	InheritedFromGtkFixed() *C.GtkFixed
}

type Fixed struct {
	Container
	atk.ImplementorIfaceImpl
	BuildableImpl
}

func ToFixed(objlike gobject.ObjectLike) *Fixed {
	c := objlike.InheritedFromGObject()
	if c == nil {
		return nil
	}
	t := (*Fixed)(nil).GetStaticType()
	obj := gobject.ObjectGrabIfType(unsafe.Pointer(c), t)
	if obj != nil {
		return (*Fixed)(obj)
	}
	panic("cannot cast to Fixed")
}

func (this0 *Fixed) InheritedFromGtkFixed() *C.GtkFixed {
	if this0 == nil {
		return nil
	}
	return (*C.GtkFixed)(this0.C)
}

func (this0 *Fixed) GetStaticType() gobject.Type {
	return gobject.Type(C.gtk_fixed_get_type())
}

func FixedGetType() gobject.Type {
	return (*Fixed)(nil).GetStaticType()
}
func NewFixed() *Fixed {
	ret1 := C.gtk_fixed_new()
	var ret2 *Fixed
	ret2 = (*Fixed)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
func (this0 *Fixed) Move(widget0 WidgetLike, x0 int, y0 int) {
	var this1 *C.GtkFixed
	var widget1 *C.GtkWidget
	var x1 C.int32_t
	var y1 C.int32_t
	if this0 != nil {
		this1 = this0.InheritedFromGtkFixed()
	}
	if widget0 != nil {
		widget1 = widget0.InheritedFromGtkWidget()
	}
	x1 = C.int32_t(x0)
	y1 = C.int32_t(y0)
	C.gtk_fixed_move(this1, widget1, x1, y1)
}
func (this0 *Fixed) Put(widget0 WidgetLike, x0 int, y0 int) {
	var this1 *C.GtkFixed
	var widget1 *C.GtkWidget
	var x1 C.int32_t
	var y1 C.int32_t
	if this0 != nil {
		this1 = this0.InheritedFromGtkFixed()
	}
	if widget0 != nil {
		widget1 = widget0.InheritedFromGtkWidget()
	}
	x1 = C.int32_t(x0)
	y1 = C.int32_t(y0)
	C.gtk_fixed_put(this1, widget1, x1, y1)
}
type FixedChild struct {
	widget0 *C.GtkWidget
	X int32
	Y int32
}
func (this0 *FixedChild) Widget() *Widget {
	var widget1 *Widget
	widget1 = (*Widget)(gobject.ObjectWrap(unsafe.Pointer(this0.widget0), true))
	return widget1
}
type FontButtonLike interface {
	ButtonLike
	InheritedFromGtkFontButton() *C.GtkFontButton
}

type FontButton struct {
	Button
	atk.ImplementorIfaceImpl
	ActivatableImpl
	BuildableImpl
	FontChooserImpl
}

func ToFontButton(objlike gobject.ObjectLike) *FontButton {
	c := objlike.InheritedFromGObject()
	if c == nil {
		return nil
	}
	t := (*FontButton)(nil).GetStaticType()
	obj := gobject.ObjectGrabIfType(unsafe.Pointer(c), t)
	if obj != nil {
		return (*FontButton)(obj)
	}
	panic("cannot cast to FontButton")
}

func (this0 *FontButton) InheritedFromGtkFontButton() *C.GtkFontButton {
	if this0 == nil {
		return nil
	}
	return (*C.GtkFontButton)(this0.C)
}

func (this0 *FontButton) GetStaticType() gobject.Type {
	return gobject.Type(C.gtk_font_button_get_type())
}

func FontButtonGetType() gobject.Type {
	return (*FontButton)(nil).GetStaticType()
}
func NewFontButton() *FontButton {
	ret1 := C.gtk_font_button_new()
	var ret2 *FontButton
	ret2 = (*FontButton)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
func NewFontButtonWithFont(fontname0 string) *FontButton {
	var fontname1 *C.char
	fontname1 = _GoStringToGString(fontname0)
	defer C.free(unsafe.Pointer(fontname1))
	ret1 := C.gtk_font_button_new_with_font(fontname1)
	var ret2 *FontButton
	ret2 = (*FontButton)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
func (this0 *FontButton) GetFontName() string {
	var this1 *C.GtkFontButton
	if this0 != nil {
		this1 = this0.InheritedFromGtkFontButton()
	}
	ret1 := C.gtk_font_button_get_font_name(this1)
	var ret2 string
	ret2 = C.GoString(ret1)
	return ret2
}
func (this0 *FontButton) GetShowSize() bool {
	var this1 *C.GtkFontButton
	if this0 != nil {
		this1 = this0.InheritedFromGtkFontButton()
	}
	ret1 := C.gtk_font_button_get_show_size(this1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *FontButton) GetShowStyle() bool {
	var this1 *C.GtkFontButton
	if this0 != nil {
		this1 = this0.InheritedFromGtkFontButton()
	}
	ret1 := C.gtk_font_button_get_show_style(this1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *FontButton) GetTitle() string {
	var this1 *C.GtkFontButton
	if this0 != nil {
		this1 = this0.InheritedFromGtkFontButton()
	}
	ret1 := C.gtk_font_button_get_title(this1)
	var ret2 string
	ret2 = C.GoString(ret1)
	return ret2
}
func (this0 *FontButton) GetUseFont() bool {
	var this1 *C.GtkFontButton
	if this0 != nil {
		this1 = this0.InheritedFromGtkFontButton()
	}
	ret1 := C.gtk_font_button_get_use_font(this1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *FontButton) GetUseSize() bool {
	var this1 *C.GtkFontButton
	if this0 != nil {
		this1 = this0.InheritedFromGtkFontButton()
	}
	ret1 := C.gtk_font_button_get_use_size(this1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *FontButton) SetFontName(fontname0 string) bool {
	var this1 *C.GtkFontButton
	var fontname1 *C.char
	if this0 != nil {
		this1 = this0.InheritedFromGtkFontButton()
	}
	fontname1 = _GoStringToGString(fontname0)
	defer C.free(unsafe.Pointer(fontname1))
	ret1 := C.gtk_font_button_set_font_name(this1, fontname1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *FontButton) SetShowSize(show_size0 bool) {
	var this1 *C.GtkFontButton
	var show_size1 C.int
	if this0 != nil {
		this1 = this0.InheritedFromGtkFontButton()
	}
	show_size1 = _GoBoolToCBool(show_size0)
	C.gtk_font_button_set_show_size(this1, show_size1)
}
func (this0 *FontButton) SetShowStyle(show_style0 bool) {
	var this1 *C.GtkFontButton
	var show_style1 C.int
	if this0 != nil {
		this1 = this0.InheritedFromGtkFontButton()
	}
	show_style1 = _GoBoolToCBool(show_style0)
	C.gtk_font_button_set_show_style(this1, show_style1)
}
func (this0 *FontButton) SetTitle(title0 string) {
	var this1 *C.GtkFontButton
	var title1 *C.char
	if this0 != nil {
		this1 = this0.InheritedFromGtkFontButton()
	}
	title1 = _GoStringToGString(title0)
	defer C.free(unsafe.Pointer(title1))
	C.gtk_font_button_set_title(this1, title1)
}
func (this0 *FontButton) SetUseFont(use_font0 bool) {
	var this1 *C.GtkFontButton
	var use_font1 C.int
	if this0 != nil {
		this1 = this0.InheritedFromGtkFontButton()
	}
	use_font1 = _GoBoolToCBool(use_font0)
	C.gtk_font_button_set_use_font(this1, use_font1)
}
func (this0 *FontButton) SetUseSize(use_size0 bool) {
	var this1 *C.GtkFontButton
	var use_size1 C.int
	if this0 != nil {
		this1 = this0.InheritedFromGtkFontButton()
	}
	use_size1 = _GoBoolToCBool(use_size0)
	C.gtk_font_button_set_use_size(this1, use_size1)
}
type FontChooserLike interface {
	ImplementsGtkFontChooser() *C.GtkFontChooser
}

type FontChooser struct {
	gobject.Object
	FontChooserImpl
}

type FontChooserImpl struct {}

func ToFontChooser(objlike gobject.ObjectLike) *FontChooser {
	t := (*FontChooserImpl)(nil).GetStaticType()
	c := objlike.InheritedFromGObject()
	obj := gobject.ObjectGrabIfType(unsafe.Pointer(c), t)
	if obj != nil {
		return (*FontChooser)(obj)
	}
	panic("cannot cast to FontChooser")
}

func (this0 *FontChooserImpl) ImplementsGtkFontChooser() *C.GtkFontChooser {
	obj := uintptr(unsafe.Pointer(this0)) - unsafe.Sizeof(uintptr(0))
	return (*C.GtkFontChooser)((*gobject.Object)(unsafe.Pointer(obj)).C)
}

func (this0 *FontChooserImpl) GetStaticType() gobject.Type {
	return gobject.Type(C.gtk_font_chooser_get_type())
}

func FontChooserGetType() gobject.Type {
	return (*FontChooserImpl)(nil).GetStaticType()
}
func (this0 *FontChooserImpl) GetFont() string {
	var this1 *C.GtkFontChooser
	if this0 != nil {
		this1 = this0.ImplementsGtkFontChooser()}
	ret1 := C.gtk_font_chooser_get_font(this1)
	var ret2 string
	ret2 = C.GoString(ret1)
	C.g_free(unsafe.Pointer(ret1))
	return ret2
}
func (this0 *FontChooserImpl) GetFontDesc() *pango.FontDescription {
	var this1 *C.GtkFontChooser
	if this0 != nil {
		this1 = this0.ImplementsGtkFontChooser()}
	ret1 := C.gtk_font_chooser_get_font_desc(this1)
	var ret2 *pango.FontDescription
	ret2 = (*pango.FontDescription)(unsafe.Pointer(ret1))
	return ret2
}
func (this0 *FontChooserImpl) GetFontFace() *pango.FontFace {
	var this1 *C.GtkFontChooser
	if this0 != nil {
		this1 = this0.ImplementsGtkFontChooser()}
	ret1 := C.gtk_font_chooser_get_font_face(this1)
	var ret2 *pango.FontFace
	ret2 = (*pango.FontFace)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
func (this0 *FontChooserImpl) GetFontFamily() *pango.FontFamily {
	var this1 *C.GtkFontChooser
	if this0 != nil {
		this1 = this0.ImplementsGtkFontChooser()}
	ret1 := C.gtk_font_chooser_get_font_family(this1)
	var ret2 *pango.FontFamily
	ret2 = (*pango.FontFamily)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
func (this0 *FontChooserImpl) GetFontSize() int {
	var this1 *C.GtkFontChooser
	if this0 != nil {
		this1 = this0.ImplementsGtkFontChooser()}
	ret1 := C.gtk_font_chooser_get_font_size(this1)
	var ret2 int
	ret2 = int(ret1)
	return ret2
}
func (this0 *FontChooserImpl) GetPreviewText() string {
	var this1 *C.GtkFontChooser
	if this0 != nil {
		this1 = this0.ImplementsGtkFontChooser()}
	ret1 := C.gtk_font_chooser_get_preview_text(this1)
	var ret2 string
	ret2 = C.GoString(ret1)
	C.g_free(unsafe.Pointer(ret1))
	return ret2
}
func (this0 *FontChooserImpl) GetShowPreviewEntry() bool {
	var this1 *C.GtkFontChooser
	if this0 != nil {
		this1 = this0.ImplementsGtkFontChooser()}
	ret1 := C.gtk_font_chooser_get_show_preview_entry(this1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *FontChooserImpl) SetFilterFunc(filter0 FontFilterFunc) {
	var this1 *C.GtkFontChooser
	var filter1 unsafe.Pointer
	if this0 != nil {
		this1 = this0.ImplementsGtkFontChooser()}
	if filter0 != nil {
		filter1 = unsafe.Pointer(&filter0)}
	gobject.Holder.Grab(filter1)
	C._gtk_font_chooser_set_filter_func(this1, filter1)
}
func (this0 *FontChooserImpl) SetFont(fontname0 string) {
	var this1 *C.GtkFontChooser
	var fontname1 *C.char
	if this0 != nil {
		this1 = this0.ImplementsGtkFontChooser()}
	fontname1 = _GoStringToGString(fontname0)
	defer C.free(unsafe.Pointer(fontname1))
	C.gtk_font_chooser_set_font(this1, fontname1)
}
func (this0 *FontChooserImpl) SetFontDesc(font_desc0 *pango.FontDescription) {
	var this1 *C.GtkFontChooser
	var font_desc1 *C.PangoFontDescription
	if this0 != nil {
		this1 = this0.ImplementsGtkFontChooser()}
	font_desc1 = (*C.PangoFontDescription)(unsafe.Pointer(font_desc0))
	C.gtk_font_chooser_set_font_desc(this1, font_desc1)
}
func (this0 *FontChooserImpl) SetPreviewText(text0 string) {
	var this1 *C.GtkFontChooser
	var text1 *C.char
	if this0 != nil {
		this1 = this0.ImplementsGtkFontChooser()}
	text1 = _GoStringToGString(text0)
	defer C.free(unsafe.Pointer(text1))
	C.gtk_font_chooser_set_preview_text(this1, text1)
}
func (this0 *FontChooserImpl) SetShowPreviewEntry(show_preview_entry0 bool) {
	var this1 *C.GtkFontChooser
	var show_preview_entry1 C.int
	if this0 != nil {
		this1 = this0.ImplementsGtkFontChooser()}
	show_preview_entry1 = _GoBoolToCBool(show_preview_entry0)
	C.gtk_font_chooser_set_show_preview_entry(this1, show_preview_entry1)
}
type FontChooserDialogLike interface {
	DialogLike
	InheritedFromGtkFontChooserDialog() *C.GtkFontChooserDialog
}

type FontChooserDialog struct {
	Dialog
	atk.ImplementorIfaceImpl
	BuildableImpl
	FontChooserImpl
}

func ToFontChooserDialog(objlike gobject.ObjectLike) *FontChooserDialog {
	c := objlike.InheritedFromGObject()
	if c == nil {
		return nil
	}
	t := (*FontChooserDialog)(nil).GetStaticType()
	obj := gobject.ObjectGrabIfType(unsafe.Pointer(c), t)
	if obj != nil {
		return (*FontChooserDialog)(obj)
	}
	panic("cannot cast to FontChooserDialog")
}

func (this0 *FontChooserDialog) InheritedFromGtkFontChooserDialog() *C.GtkFontChooserDialog {
	if this0 == nil {
		return nil
	}
	return (*C.GtkFontChooserDialog)(this0.C)
}

func (this0 *FontChooserDialog) GetStaticType() gobject.Type {
	return gobject.Type(C.gtk_font_chooser_dialog_get_type())
}

func FontChooserDialogGetType() gobject.Type {
	return (*FontChooserDialog)(nil).GetStaticType()
}
func NewFontChooserDialog(title0 string, window0 WindowLike) *FontChooserDialog {
	var title1 *C.char
	var window1 *C.GtkWindow
	title1 = _GoStringToGString(title0)
	defer C.free(unsafe.Pointer(title1))
	if window0 != nil {
		window1 = window0.InheritedFromGtkWindow()
	}
	ret1 := C.gtk_font_chooser_dialog_new(title1, window1)
	var ret2 *FontChooserDialog
	ret2 = (*FontChooserDialog)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
type FontChooserWidgetLike interface {
	BoxLike
	InheritedFromGtkFontChooserWidget() *C.GtkFontChooserWidget
}

type FontChooserWidget struct {
	Box
	atk.ImplementorIfaceImpl
	BuildableImpl
	FontChooserImpl
	OrientableImpl
}

func ToFontChooserWidget(objlike gobject.ObjectLike) *FontChooserWidget {
	c := objlike.InheritedFromGObject()
	if c == nil {
		return nil
	}
	t := (*FontChooserWidget)(nil).GetStaticType()
	obj := gobject.ObjectGrabIfType(unsafe.Pointer(c), t)
	if obj != nil {
		return (*FontChooserWidget)(obj)
	}
	panic("cannot cast to FontChooserWidget")
}

func (this0 *FontChooserWidget) InheritedFromGtkFontChooserWidget() *C.GtkFontChooserWidget {
	if this0 == nil {
		return nil
	}
	return (*C.GtkFontChooserWidget)(this0.C)
}

func (this0 *FontChooserWidget) GetStaticType() gobject.Type {
	return gobject.Type(C.gtk_font_chooser_widget_get_type())
}

func FontChooserWidgetGetType() gobject.Type {
	return (*FontChooserWidget)(nil).GetStaticType()
}
func NewFontChooserWidget() *FontChooserWidget {
	ret1 := C.gtk_font_chooser_widget_new()
	var ret2 *FontChooserWidget
	ret2 = (*FontChooserWidget)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
type FontFilterFunc func(family *pango.FontFamily, face *pango.FontFace) bool
//export _GtkFontFilterFunc_c_wrapper
func _GtkFontFilterFunc_c_wrapper(family0 unsafe.Pointer, face0 unsafe.Pointer, data0 unsafe.Pointer) int32 {
	var family1 *pango.FontFamily
	var face1 *pango.FontFace
	var data1 FontFilterFunc
	family1 = (*pango.FontFamily)(gobject.ObjectWrap(unsafe.Pointer((*C.PangoFontFamily)(family0)), true))
	face1 = (*pango.FontFace)(gobject.ObjectWrap(unsafe.Pointer((*C.PangoFontFace)(face0)), true))
	data1 = *(*FontFilterFunc)(data0)
	ret1 := data1(family1, face1)
	var ret2 C.int
	ret2 = _GoBoolToCBool(ret1)
	return (int32)(ret2)
}
//export _GtkFontFilterFunc_c_wrapper_once
func _GtkFontFilterFunc_c_wrapper_once(family0 unsafe.Pointer, face0 unsafe.Pointer, data0 unsafe.Pointer) int32 {
	ret := _GtkFontFilterFunc_c_wrapper(family0, face0, data0)
	gobject.Holder.Release(data0)
	return ret
}
type FontSelectionLike interface {
	BoxLike
	InheritedFromGtkFontSelection() *C.GtkFontSelection
}

type FontSelection struct {
	Box
	atk.ImplementorIfaceImpl
	BuildableImpl
	OrientableImpl
}

func ToFontSelection(objlike gobject.ObjectLike) *FontSelection {
	c := objlike.InheritedFromGObject()
	if c == nil {
		return nil
	}
	t := (*FontSelection)(nil).GetStaticType()
	obj := gobject.ObjectGrabIfType(unsafe.Pointer(c), t)
	if obj != nil {
		return (*FontSelection)(obj)
	}
	panic("cannot cast to FontSelection")
}

func (this0 *FontSelection) InheritedFromGtkFontSelection() *C.GtkFontSelection {
	if this0 == nil {
		return nil
	}
	return (*C.GtkFontSelection)(this0.C)
}

func (this0 *FontSelection) GetStaticType() gobject.Type {
	return gobject.Type(C.gtk_font_selection_get_type())
}

func FontSelectionGetType() gobject.Type {
	return (*FontSelection)(nil).GetStaticType()
}
func NewFontSelection() *FontSelection {
	ret1 := C.gtk_font_selection_new()
	var ret2 *FontSelection
	ret2 = (*FontSelection)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
func (this0 *FontSelection) GetFace() *pango.FontFace {
	var this1 *C.GtkFontSelection
	if this0 != nil {
		this1 = this0.InheritedFromGtkFontSelection()
	}
	ret1 := C.gtk_font_selection_get_face(this1)
	var ret2 *pango.FontFace
	ret2 = (*pango.FontFace)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
func (this0 *FontSelection) GetFaceList() *Widget {
	var this1 *C.GtkFontSelection
	if this0 != nil {
		this1 = this0.InheritedFromGtkFontSelection()
	}
	ret1 := C.gtk_font_selection_get_face_list(this1)
	var ret2 *Widget
	ret2 = (*Widget)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
func (this0 *FontSelection) GetFamily() *pango.FontFamily {
	var this1 *C.GtkFontSelection
	if this0 != nil {
		this1 = this0.InheritedFromGtkFontSelection()
	}
	ret1 := C.gtk_font_selection_get_family(this1)
	var ret2 *pango.FontFamily
	ret2 = (*pango.FontFamily)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
func (this0 *FontSelection) GetFamilyList() *Widget {
	var this1 *C.GtkFontSelection
	if this0 != nil {
		this1 = this0.InheritedFromGtkFontSelection()
	}
	ret1 := C.gtk_font_selection_get_family_list(this1)
	var ret2 *Widget
	ret2 = (*Widget)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
func (this0 *FontSelection) GetFontName() string {
	var this1 *C.GtkFontSelection
	if this0 != nil {
		this1 = this0.InheritedFromGtkFontSelection()
	}
	ret1 := C.gtk_font_selection_get_font_name(this1)
	var ret2 string
	ret2 = C.GoString(ret1)
	C.g_free(unsafe.Pointer(ret1))
	return ret2
}
func (this0 *FontSelection) GetPreviewEntry() *Widget {
	var this1 *C.GtkFontSelection
	if this0 != nil {
		this1 = this0.InheritedFromGtkFontSelection()
	}
	ret1 := C.gtk_font_selection_get_preview_entry(this1)
	var ret2 *Widget
	ret2 = (*Widget)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
func (this0 *FontSelection) GetPreviewText() string {
	var this1 *C.GtkFontSelection
	if this0 != nil {
		this1 = this0.InheritedFromGtkFontSelection()
	}
	ret1 := C.gtk_font_selection_get_preview_text(this1)
	var ret2 string
	ret2 = C.GoString(ret1)
	return ret2
}
func (this0 *FontSelection) GetSize() int {
	var this1 *C.GtkFontSelection
	if this0 != nil {
		this1 = this0.InheritedFromGtkFontSelection()
	}
	ret1 := C.gtk_font_selection_get_size(this1)
	var ret2 int
	ret2 = int(ret1)
	return ret2
}
func (this0 *FontSelection) GetSizeEntry() *Widget {
	var this1 *C.GtkFontSelection
	if this0 != nil {
		this1 = this0.InheritedFromGtkFontSelection()
	}
	ret1 := C.gtk_font_selection_get_size_entry(this1)
	var ret2 *Widget
	ret2 = (*Widget)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
func (this0 *FontSelection) GetSizeList() *Widget {
	var this1 *C.GtkFontSelection
	if this0 != nil {
		this1 = this0.InheritedFromGtkFontSelection()
	}
	ret1 := C.gtk_font_selection_get_size_list(this1)
	var ret2 *Widget
	ret2 = (*Widget)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
func (this0 *FontSelection) SetFontName(fontname0 string) bool {
	var this1 *C.GtkFontSelection
	var fontname1 *C.char
	if this0 != nil {
		this1 = this0.InheritedFromGtkFontSelection()
	}
	fontname1 = _GoStringToGString(fontname0)
	defer C.free(unsafe.Pointer(fontname1))
	ret1 := C.gtk_font_selection_set_font_name(this1, fontname1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *FontSelection) SetPreviewText(text0 string) {
	var this1 *C.GtkFontSelection
	var text1 *C.char
	if this0 != nil {
		this1 = this0.InheritedFromGtkFontSelection()
	}
	text1 = _GoStringToGString(text0)
	defer C.free(unsafe.Pointer(text1))
	C.gtk_font_selection_set_preview_text(this1, text1)
}
type FontSelectionDialogLike interface {
	DialogLike
	InheritedFromGtkFontSelectionDialog() *C.GtkFontSelectionDialog
}

type FontSelectionDialog struct {
	Dialog
	atk.ImplementorIfaceImpl
	BuildableImpl
}

func ToFontSelectionDialog(objlike gobject.ObjectLike) *FontSelectionDialog {
	c := objlike.InheritedFromGObject()
	if c == nil {
		return nil
	}
	t := (*FontSelectionDialog)(nil).GetStaticType()
	obj := gobject.ObjectGrabIfType(unsafe.Pointer(c), t)
	if obj != nil {
		return (*FontSelectionDialog)(obj)
	}
	panic("cannot cast to FontSelectionDialog")
}

func (this0 *FontSelectionDialog) InheritedFromGtkFontSelectionDialog() *C.GtkFontSelectionDialog {
	if this0 == nil {
		return nil
	}
	return (*C.GtkFontSelectionDialog)(this0.C)
}

func (this0 *FontSelectionDialog) GetStaticType() gobject.Type {
	return gobject.Type(C.gtk_font_selection_dialog_get_type())
}

func FontSelectionDialogGetType() gobject.Type {
	return (*FontSelectionDialog)(nil).GetStaticType()
}
func NewFontSelectionDialog(title0 string) *FontSelectionDialog {
	var title1 *C.char
	title1 = _GoStringToGString(title0)
	defer C.free(unsafe.Pointer(title1))
	ret1 := C.gtk_font_selection_dialog_new(title1)
	var ret2 *FontSelectionDialog
	ret2 = (*FontSelectionDialog)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
func (this0 *FontSelectionDialog) GetCancelButton() *Widget {
	var this1 *C.GtkFontSelectionDialog
	if this0 != nil {
		this1 = this0.InheritedFromGtkFontSelectionDialog()
	}
	ret1 := C.gtk_font_selection_dialog_get_cancel_button(this1)
	var ret2 *Widget
	ret2 = (*Widget)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
func (this0 *FontSelectionDialog) GetFontName() string {
	var this1 *C.GtkFontSelectionDialog
	if this0 != nil {
		this1 = this0.InheritedFromGtkFontSelectionDialog()
	}
	ret1 := C.gtk_font_selection_dialog_get_font_name(this1)
	var ret2 string
	ret2 = C.GoString(ret1)
	C.g_free(unsafe.Pointer(ret1))
	return ret2
}
func (this0 *FontSelectionDialog) GetFontSelection() *Widget {
	var this1 *C.GtkFontSelectionDialog
	if this0 != nil {
		this1 = this0.InheritedFromGtkFontSelectionDialog()
	}
	ret1 := C.gtk_font_selection_dialog_get_font_selection(this1)
	var ret2 *Widget
	ret2 = (*Widget)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
func (this0 *FontSelectionDialog) GetOkButton() *Widget {
	var this1 *C.GtkFontSelectionDialog
	if this0 != nil {
		this1 = this0.InheritedFromGtkFontSelectionDialog()
	}
	ret1 := C.gtk_font_selection_dialog_get_ok_button(this1)
	var ret2 *Widget
	ret2 = (*Widget)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
func (this0 *FontSelectionDialog) GetPreviewText() string {
	var this1 *C.GtkFontSelectionDialog
	if this0 != nil {
		this1 = this0.InheritedFromGtkFontSelectionDialog()
	}
	ret1 := C.gtk_font_selection_dialog_get_preview_text(this1)
	var ret2 string
	ret2 = C.GoString(ret1)
	return ret2
}
func (this0 *FontSelectionDialog) SetFontName(fontname0 string) bool {
	var this1 *C.GtkFontSelectionDialog
	var fontname1 *C.char
	if this0 != nil {
		this1 = this0.InheritedFromGtkFontSelectionDialog()
	}
	fontname1 = _GoStringToGString(fontname0)
	defer C.free(unsafe.Pointer(fontname1))
	ret1 := C.gtk_font_selection_dialog_set_font_name(this1, fontname1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *FontSelectionDialog) SetPreviewText(text0 string) {
	var this1 *C.GtkFontSelectionDialog
	var text1 *C.char
	if this0 != nil {
		this1 = this0.InheritedFromGtkFontSelectionDialog()
	}
	text1 = _GoStringToGString(text0)
	defer C.free(unsafe.Pointer(text1))
	C.gtk_font_selection_dialog_set_preview_text(this1, text1)
}
type FrameLike interface {
	BinLike
	InheritedFromGtkFrame() *C.GtkFrame
}

type Frame struct {
	Bin
	atk.ImplementorIfaceImpl
	BuildableImpl
}

func ToFrame(objlike gobject.ObjectLike) *Frame {
	c := objlike.InheritedFromGObject()
	if c == nil {
		return nil
	}
	t := (*Frame)(nil).GetStaticType()
	obj := gobject.ObjectGrabIfType(unsafe.Pointer(c), t)
	if obj != nil {
		return (*Frame)(obj)
	}
	panic("cannot cast to Frame")
}

func (this0 *Frame) InheritedFromGtkFrame() *C.GtkFrame {
	if this0 == nil {
		return nil
	}
	return (*C.GtkFrame)(this0.C)
}

func (this0 *Frame) GetStaticType() gobject.Type {
	return gobject.Type(C.gtk_frame_get_type())
}

func FrameGetType() gobject.Type {
	return (*Frame)(nil).GetStaticType()
}
func NewFrame(label0 string) *Frame {
	var label1 *C.char
	label1 = _GoStringToGString(label0)
	defer C.free(unsafe.Pointer(label1))
	ret1 := C.gtk_frame_new(label1)
	var ret2 *Frame
	ret2 = (*Frame)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
func (this0 *Frame) GetLabel() string {
	var this1 *C.GtkFrame
	if this0 != nil {
		this1 = this0.InheritedFromGtkFrame()
	}
	ret1 := C.gtk_frame_get_label(this1)
	var ret2 string
	ret2 = C.GoString(ret1)
	return ret2
}
func (this0 *Frame) GetLabelAlign() (float64, float64) {
	var this1 *C.GtkFrame
	var xalign1 C.float
	var yalign1 C.float
	if this0 != nil {
		this1 = this0.InheritedFromGtkFrame()
	}
	C.gtk_frame_get_label_align(this1, &xalign1, &yalign1)
	var xalign2 float64
	var yalign2 float64
	xalign2 = float64(xalign1)
	yalign2 = float64(yalign1)
	return xalign2, yalign2
}
func (this0 *Frame) GetLabelWidget() *Widget {
	var this1 *C.GtkFrame
	if this0 != nil {
		this1 = this0.InheritedFromGtkFrame()
	}
	ret1 := C.gtk_frame_get_label_widget(this1)
	var ret2 *Widget
	ret2 = (*Widget)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
func (this0 *Frame) GetShadowType() ShadowType {
	var this1 *C.GtkFrame
	if this0 != nil {
		this1 = this0.InheritedFromGtkFrame()
	}
	ret1 := C.gtk_frame_get_shadow_type(this1)
	var ret2 ShadowType
	ret2 = ShadowType(ret1)
	return ret2
}
func (this0 *Frame) SetLabel(label0 string) {
	var this1 *C.GtkFrame
	var label1 *C.char
	if this0 != nil {
		this1 = this0.InheritedFromGtkFrame()
	}
	label1 = _GoStringToGString(label0)
	defer C.free(unsafe.Pointer(label1))
	C.gtk_frame_set_label(this1, label1)
}
func (this0 *Frame) SetLabelAlign(xalign0 float64, yalign0 float64) {
	var this1 *C.GtkFrame
	var xalign1 C.float
	var yalign1 C.float
	if this0 != nil {
		this1 = this0.InheritedFromGtkFrame()
	}
	xalign1 = C.float(xalign0)
	yalign1 = C.float(yalign0)
	C.gtk_frame_set_label_align(this1, xalign1, yalign1)
}
func (this0 *Frame) SetLabelWidget(label_widget0 WidgetLike) {
	var this1 *C.GtkFrame
	var label_widget1 *C.GtkWidget
	if this0 != nil {
		this1 = this0.InheritedFromGtkFrame()
	}
	if label_widget0 != nil {
		label_widget1 = label_widget0.InheritedFromGtkWidget()
	}
	C.gtk_frame_set_label_widget(this1, label_widget1)
}
func (this0 *Frame) SetShadowType(type0 ShadowType) {
	var this1 *C.GtkFrame
	var type1 C.GtkShadowType
	if this0 != nil {
		this1 = this0.InheritedFromGtkFrame()
	}
	type1 = C.GtkShadowType(type0)
	C.gtk_frame_set_shadow_type(this1, type1)
}
type Gradient struct {}
func NewGradientLinear(x00 float64, y00 float64, x10 float64, y10 float64) *Gradient {
	var x01 C.double
	var y01 C.double
	var x11 C.double
	var y11 C.double
	x01 = C.double(x00)
	y01 = C.double(y00)
	x11 = C.double(x10)
	y11 = C.double(y10)
	ret1 := C.gtk_gradient_new_linear(x01, y01, x11, y11)
	var ret2 *Gradient
	ret2 = (*Gradient)(unsafe.Pointer(ret1))
	return ret2
}
func NewGradientRadial(x00 float64, y00 float64, radius00 float64, x10 float64, y10 float64, radius10 float64) *Gradient {
	var x01 C.double
	var y01 C.double
	var radius01 C.double
	var x11 C.double
	var y11 C.double
	var radius11 C.double
	x01 = C.double(x00)
	y01 = C.double(y00)
	radius01 = C.double(radius00)
	x11 = C.double(x10)
	y11 = C.double(y10)
	radius11 = C.double(radius10)
	ret1 := C.gtk_gradient_new_radial(x01, y01, radius01, x11, y11, radius11)
	var ret2 *Gradient
	ret2 = (*Gradient)(unsafe.Pointer(ret1))
	return ret2
}
func (this0 *Gradient) AddColorStop(offset0 float64, color0 *SymbolicColor) {
	var this1 *C.GtkGradient
	var offset1 C.double
	var color1 *C.GtkSymbolicColor
	this1 = (*C.GtkGradient)(unsafe.Pointer(this0))
	offset1 = C.double(offset0)
	color1 = (*C.GtkSymbolicColor)(unsafe.Pointer(color0))
	C.gtk_gradient_add_color_stop(this1, offset1, color1)
}
func (this0 *Gradient) Resolve(props0 StylePropertiesLike) (*cairo.Pattern, bool) {
	var this1 *C.GtkGradient
	var props1 *C.GtkStyleProperties
	var resolved_gradient1 *C.cairoPattern
	this1 = (*C.GtkGradient)(unsafe.Pointer(this0))
	if props0 != nil {
		props1 = props0.InheritedFromGtkStyleProperties()
	}
	ret1 := C.gtk_gradient_resolve(this1, props1, &resolved_gradient1)
	var resolved_gradient2 *cairo.Pattern
	var ret2 bool
	resolved_gradient2 = (*cairo.Pattern)(cairo.PatternWrap(unsafe.Pointer(resolved_gradient1), false))
	ret2 = ret1 != 0
	return resolved_gradient2, ret2
}
func (this0 *Gradient) ToString() string {
	var this1 *C.GtkGradient
	this1 = (*C.GtkGradient)(unsafe.Pointer(this0))
	ret1 := C.gtk_gradient_to_string(this1)
	var ret2 string
	ret2 = C.GoString(ret1)
	C.g_free(unsafe.Pointer(ret1))
	return ret2
}
type GridLike interface {
	ContainerLike
	InheritedFromGtkGrid() *C.GtkGrid
}

type Grid struct {
	Container
	atk.ImplementorIfaceImpl
	BuildableImpl
	OrientableImpl
}

func ToGrid(objlike gobject.ObjectLike) *Grid {
	c := objlike.InheritedFromGObject()
	if c == nil {
		return nil
	}
	t := (*Grid)(nil).GetStaticType()
	obj := gobject.ObjectGrabIfType(unsafe.Pointer(c), t)
	if obj != nil {
		return (*Grid)(obj)
	}
	panic("cannot cast to Grid")
}

func (this0 *Grid) InheritedFromGtkGrid() *C.GtkGrid {
	if this0 == nil {
		return nil
	}
	return (*C.GtkGrid)(this0.C)
}

func (this0 *Grid) GetStaticType() gobject.Type {
	return gobject.Type(C.gtk_grid_get_type())
}

func GridGetType() gobject.Type {
	return (*Grid)(nil).GetStaticType()
}
func NewGrid() *Grid {
	ret1 := C.gtk_grid_new()
	var ret2 *Grid
	ret2 = (*Grid)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
func (this0 *Grid) Attach(child0 WidgetLike, left0 int, top0 int, width0 int, height0 int) {
	var this1 *C.GtkGrid
	var child1 *C.GtkWidget
	var left1 C.int32_t
	var top1 C.int32_t
	var width1 C.int32_t
	var height1 C.int32_t
	if this0 != nil {
		this1 = this0.InheritedFromGtkGrid()
	}
	if child0 != nil {
		child1 = child0.InheritedFromGtkWidget()
	}
	left1 = C.int32_t(left0)
	top1 = C.int32_t(top0)
	width1 = C.int32_t(width0)
	height1 = C.int32_t(height0)
	C.gtk_grid_attach(this1, child1, left1, top1, width1, height1)
}
func (this0 *Grid) AttachNextTo(child0 WidgetLike, sibling0 WidgetLike, side0 PositionType, width0 int, height0 int) {
	var this1 *C.GtkGrid
	var child1 *C.GtkWidget
	var sibling1 *C.GtkWidget
	var side1 C.GtkPositionType
	var width1 C.int32_t
	var height1 C.int32_t
	if this0 != nil {
		this1 = this0.InheritedFromGtkGrid()
	}
	if child0 != nil {
		child1 = child0.InheritedFromGtkWidget()
	}
	if sibling0 != nil {
		sibling1 = sibling0.InheritedFromGtkWidget()
	}
	side1 = C.GtkPositionType(side0)
	width1 = C.int32_t(width0)
	height1 = C.int32_t(height0)
	C.gtk_grid_attach_next_to(this1, child1, sibling1, side1, width1, height1)
}
func (this0 *Grid) GetColumnHomogeneous() bool {
	var this1 *C.GtkGrid
	if this0 != nil {
		this1 = this0.InheritedFromGtkGrid()
	}
	ret1 := C.gtk_grid_get_column_homogeneous(this1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *Grid) GetColumnSpacing() int {
	var this1 *C.GtkGrid
	if this0 != nil {
		this1 = this0.InheritedFromGtkGrid()
	}
	ret1 := C.gtk_grid_get_column_spacing(this1)
	var ret2 int
	ret2 = int(ret1)
	return ret2
}
func (this0 *Grid) GetRowHomogeneous() bool {
	var this1 *C.GtkGrid
	if this0 != nil {
		this1 = this0.InheritedFromGtkGrid()
	}
	ret1 := C.gtk_grid_get_row_homogeneous(this1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *Grid) GetRowSpacing() int {
	var this1 *C.GtkGrid
	if this0 != nil {
		this1 = this0.InheritedFromGtkGrid()
	}
	ret1 := C.gtk_grid_get_row_spacing(this1)
	var ret2 int
	ret2 = int(ret1)
	return ret2
}
func (this0 *Grid) InsertColumn(position0 int) {
	var this1 *C.GtkGrid
	var position1 C.int32_t
	if this0 != nil {
		this1 = this0.InheritedFromGtkGrid()
	}
	position1 = C.int32_t(position0)
	C.gtk_grid_insert_column(this1, position1)
}
func (this0 *Grid) InsertNextTo(sibling0 WidgetLike, side0 PositionType) {
	var this1 *C.GtkGrid
	var sibling1 *C.GtkWidget
	var side1 C.GtkPositionType
	if this0 != nil {
		this1 = this0.InheritedFromGtkGrid()
	}
	if sibling0 != nil {
		sibling1 = sibling0.InheritedFromGtkWidget()
	}
	side1 = C.GtkPositionType(side0)
	C.gtk_grid_insert_next_to(this1, sibling1, side1)
}
func (this0 *Grid) InsertRow(position0 int) {
	var this1 *C.GtkGrid
	var position1 C.int32_t
	if this0 != nil {
		this1 = this0.InheritedFromGtkGrid()
	}
	position1 = C.int32_t(position0)
	C.gtk_grid_insert_row(this1, position1)
}
func (this0 *Grid) SetColumnHomogeneous(homogeneous0 bool) {
	var this1 *C.GtkGrid
	var homogeneous1 C.int
	if this0 != nil {
		this1 = this0.InheritedFromGtkGrid()
	}
	homogeneous1 = _GoBoolToCBool(homogeneous0)
	C.gtk_grid_set_column_homogeneous(this1, homogeneous1)
}
func (this0 *Grid) SetColumnSpacing(spacing0 int) {
	var this1 *C.GtkGrid
	var spacing1 C.uint32_t
	if this0 != nil {
		this1 = this0.InheritedFromGtkGrid()
	}
	spacing1 = C.uint32_t(spacing0)
	C.gtk_grid_set_column_spacing(this1, spacing1)
}
func (this0 *Grid) SetRowHomogeneous(homogeneous0 bool) {
	var this1 *C.GtkGrid
	var homogeneous1 C.int
	if this0 != nil {
		this1 = this0.InheritedFromGtkGrid()
	}
	homogeneous1 = _GoBoolToCBool(homogeneous0)
	C.gtk_grid_set_row_homogeneous(this1, homogeneous1)
}
func (this0 *Grid) SetRowSpacing(spacing0 int) {
	var this1 *C.GtkGrid
	var spacing1 C.uint32_t
	if this0 != nil {
		this1 = this0.InheritedFromGtkGrid()
	}
	spacing1 = C.uint32_t(spacing0)
	C.gtk_grid_set_row_spacing(this1, spacing1)
}
type HBoxLike interface {
	BoxLike
	InheritedFromGtkHBox() *C.GtkHBox
}

type HBox struct {
	Box
	atk.ImplementorIfaceImpl
	BuildableImpl
	OrientableImpl
}

func ToHBox(objlike gobject.ObjectLike) *HBox {
	c := objlike.InheritedFromGObject()
	if c == nil {
		return nil
	}
	t := (*HBox)(nil).GetStaticType()
	obj := gobject.ObjectGrabIfType(unsafe.Pointer(c), t)
	if obj != nil {
		return (*HBox)(obj)
	}
	panic("cannot cast to HBox")
}

func (this0 *HBox) InheritedFromGtkHBox() *C.GtkHBox {
	if this0 == nil {
		return nil
	}
	return (*C.GtkHBox)(this0.C)
}

func (this0 *HBox) GetStaticType() gobject.Type {
	return gobject.Type(C.gtk_hbox_get_type())
}

func HBoxGetType() gobject.Type {
	return (*HBox)(nil).GetStaticType()
}
func NewHBox(homogeneous0 bool, spacing0 int) *HBox {
	var homogeneous1 C.int
	var spacing1 C.int32_t
	homogeneous1 = _GoBoolToCBool(homogeneous0)
	spacing1 = C.int32_t(spacing0)
	ret1 := C.gtk_hbox_new(homogeneous1, spacing1)
	var ret2 *HBox
	ret2 = (*HBox)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
type HButtonBoxLike interface {
	ButtonBoxLike
	InheritedFromGtkHButtonBox() *C.GtkHButtonBox
}

type HButtonBox struct {
	ButtonBox
	atk.ImplementorIfaceImpl
	BuildableImpl
	OrientableImpl
}

func ToHButtonBox(objlike gobject.ObjectLike) *HButtonBox {
	c := objlike.InheritedFromGObject()
	if c == nil {
		return nil
	}
	t := (*HButtonBox)(nil).GetStaticType()
	obj := gobject.ObjectGrabIfType(unsafe.Pointer(c), t)
	if obj != nil {
		return (*HButtonBox)(obj)
	}
	panic("cannot cast to HButtonBox")
}

func (this0 *HButtonBox) InheritedFromGtkHButtonBox() *C.GtkHButtonBox {
	if this0 == nil {
		return nil
	}
	return (*C.GtkHButtonBox)(this0.C)
}

func (this0 *HButtonBox) GetStaticType() gobject.Type {
	return gobject.Type(C.gtk_hbutton_box_get_type())
}

func HButtonBoxGetType() gobject.Type {
	return (*HButtonBox)(nil).GetStaticType()
}
func NewHButtonBox() *HButtonBox {
	ret1 := C.gtk_hbutton_box_new()
	var ret2 *HButtonBox
	ret2 = (*HButtonBox)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
type HPanedLike interface {
	PanedLike
	InheritedFromGtkHPaned() *C.GtkHPaned
}

type HPaned struct {
	Paned
	atk.ImplementorIfaceImpl
	BuildableImpl
	OrientableImpl
}

func ToHPaned(objlike gobject.ObjectLike) *HPaned {
	c := objlike.InheritedFromGObject()
	if c == nil {
		return nil
	}
	t := (*HPaned)(nil).GetStaticType()
	obj := gobject.ObjectGrabIfType(unsafe.Pointer(c), t)
	if obj != nil {
		return (*HPaned)(obj)
	}
	panic("cannot cast to HPaned")
}

func (this0 *HPaned) InheritedFromGtkHPaned() *C.GtkHPaned {
	if this0 == nil {
		return nil
	}
	return (*C.GtkHPaned)(this0.C)
}

func (this0 *HPaned) GetStaticType() gobject.Type {
	return gobject.Type(C.gtk_hpaned_get_type())
}

func HPanedGetType() gobject.Type {
	return (*HPaned)(nil).GetStaticType()
}
func NewHPaned() *HPaned {
	ret1 := C.gtk_hpaned_new()
	var ret2 *HPaned
	ret2 = (*HPaned)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
type HSVLike interface {
	WidgetLike
	InheritedFromGtkHSV() *C.GtkHSV
}

type HSV struct {
	Widget
	atk.ImplementorIfaceImpl
	BuildableImpl
}

func ToHSV(objlike gobject.ObjectLike) *HSV {
	c := objlike.InheritedFromGObject()
	if c == nil {
		return nil
	}
	t := (*HSV)(nil).GetStaticType()
	obj := gobject.ObjectGrabIfType(unsafe.Pointer(c), t)
	if obj != nil {
		return (*HSV)(obj)
	}
	panic("cannot cast to HSV")
}

func (this0 *HSV) InheritedFromGtkHSV() *C.GtkHSV {
	if this0 == nil {
		return nil
	}
	return (*C.GtkHSV)(this0.C)
}

func (this0 *HSV) GetStaticType() gobject.Type {
	return gobject.Type(C.gtk_hsv_get_type())
}

func HSVGetType() gobject.Type {
	return (*HSV)(nil).GetStaticType()
}
func NewHSV() *HSV {
	ret1 := C.gtk_hsv_new()
	var ret2 *HSV
	ret2 = (*HSV)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
func HSVToRGB(h0 float64, s0 float64, v0 float64) (float64, float64, float64) {
	var h1 C.double
	var s1 C.double
	var v1 C.double
	var r1 C.double
	var g1 C.double
	var b1 C.double
	h1 = C.double(h0)
	s1 = C.double(s0)
	v1 = C.double(v0)
	C.gtk_hsv_to_rgb(h1, s1, v1, &r1, &g1, &b1)
	var r2 float64
	var g2 float64
	var b2 float64
	r2 = float64(r1)
	g2 = float64(g1)
	b2 = float64(b1)
	return r2, g2, b2
}
func (this0 *HSV) GetColor() (float64, float64, float64) {
	var this1 *C.GtkHSV
	var h1 C.double
	var s1 C.double
	var v1 C.double
	if this0 != nil {
		this1 = this0.InheritedFromGtkHSV()
	}
	C.gtk_hsv_get_color(this1, &h1, &s1, &v1)
	var h2 float64
	var s2 float64
	var v2 float64
	h2 = float64(h1)
	s2 = float64(s1)
	v2 = float64(v1)
	return h2, s2, v2
}
func (this0 *HSV) GetMetrics() (int, int) {
	var this1 *C.GtkHSV
	var size1 C.int32_t
	var ring_width1 C.int32_t
	if this0 != nil {
		this1 = this0.InheritedFromGtkHSV()
	}
	C.gtk_hsv_get_metrics(this1, &size1, &ring_width1)
	var size2 int
	var ring_width2 int
	size2 = int(size1)
	ring_width2 = int(ring_width1)
	return size2, ring_width2
}
func (this0 *HSV) IsAdjusting() bool {
	var this1 *C.GtkHSV
	if this0 != nil {
		this1 = this0.InheritedFromGtkHSV()
	}
	ret1 := C.gtk_hsv_is_adjusting(this1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *HSV) SetColor(h0 float64, s0 float64, v0 float64) {
	var this1 *C.GtkHSV
	var h1 C.double
	var s1 C.double
	var v1 C.double
	if this0 != nil {
		this1 = this0.InheritedFromGtkHSV()
	}
	h1 = C.double(h0)
	s1 = C.double(s0)
	v1 = C.double(v0)
	C.gtk_hsv_set_color(this1, h1, s1, v1)
}
func (this0 *HSV) SetMetrics(size0 int, ring_width0 int) {
	var this1 *C.GtkHSV
	var size1 C.int32_t
	var ring_width1 C.int32_t
	if this0 != nil {
		this1 = this0.InheritedFromGtkHSV()
	}
	size1 = C.int32_t(size0)
	ring_width1 = C.int32_t(ring_width0)
	C.gtk_hsv_set_metrics(this1, size1, ring_width1)
}
type HScaleLike interface {
	ScaleLike
	InheritedFromGtkHScale() *C.GtkHScale
}

type HScale struct {
	Scale
	atk.ImplementorIfaceImpl
	BuildableImpl
	OrientableImpl
}

func ToHScale(objlike gobject.ObjectLike) *HScale {
	c := objlike.InheritedFromGObject()
	if c == nil {
		return nil
	}
	t := (*HScale)(nil).GetStaticType()
	obj := gobject.ObjectGrabIfType(unsafe.Pointer(c), t)
	if obj != nil {
		return (*HScale)(obj)
	}
	panic("cannot cast to HScale")
}

func (this0 *HScale) InheritedFromGtkHScale() *C.GtkHScale {
	if this0 == nil {
		return nil
	}
	return (*C.GtkHScale)(this0.C)
}

func (this0 *HScale) GetStaticType() gobject.Type {
	return gobject.Type(C.gtk_hscale_get_type())
}

func HScaleGetType() gobject.Type {
	return (*HScale)(nil).GetStaticType()
}
func NewHScale(adjustment0 AdjustmentLike) *HScale {
	var adjustment1 *C.GtkAdjustment
	if adjustment0 != nil {
		adjustment1 = adjustment0.InheritedFromGtkAdjustment()
	}
	ret1 := C.gtk_hscale_new(adjustment1)
	var ret2 *HScale
	ret2 = (*HScale)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
func NewHScaleWithRange(min0 float64, max0 float64, step0 float64) *HScale {
	var min1 C.double
	var max1 C.double
	var step1 C.double
	min1 = C.double(min0)
	max1 = C.double(max0)
	step1 = C.double(step0)
	ret1 := C.gtk_hscale_new_with_range(min1, max1, step1)
	var ret2 *HScale
	ret2 = (*HScale)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
type HScrollbarLike interface {
	ScrollbarLike
	InheritedFromGtkHScrollbar() *C.GtkHScrollbar
}

type HScrollbar struct {
	Scrollbar
	atk.ImplementorIfaceImpl
	BuildableImpl
	OrientableImpl
}

func ToHScrollbar(objlike gobject.ObjectLike) *HScrollbar {
	c := objlike.InheritedFromGObject()
	if c == nil {
		return nil
	}
	t := (*HScrollbar)(nil).GetStaticType()
	obj := gobject.ObjectGrabIfType(unsafe.Pointer(c), t)
	if obj != nil {
		return (*HScrollbar)(obj)
	}
	panic("cannot cast to HScrollbar")
}

func (this0 *HScrollbar) InheritedFromGtkHScrollbar() *C.GtkHScrollbar {
	if this0 == nil {
		return nil
	}
	return (*C.GtkHScrollbar)(this0.C)
}

func (this0 *HScrollbar) GetStaticType() gobject.Type {
	return gobject.Type(C.gtk_hscrollbar_get_type())
}

func HScrollbarGetType() gobject.Type {
	return (*HScrollbar)(nil).GetStaticType()
}
func NewHScrollbar(adjustment0 AdjustmentLike) *HScrollbar {
	var adjustment1 *C.GtkAdjustment
	if adjustment0 != nil {
		adjustment1 = adjustment0.InheritedFromGtkAdjustment()
	}
	ret1 := C.gtk_hscrollbar_new(adjustment1)
	var ret2 *HScrollbar
	ret2 = (*HScrollbar)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
type HSeparatorLike interface {
	SeparatorLike
	InheritedFromGtkHSeparator() *C.GtkHSeparator
}

type HSeparator struct {
	Separator
	atk.ImplementorIfaceImpl
	BuildableImpl
	OrientableImpl
}

func ToHSeparator(objlike gobject.ObjectLike) *HSeparator {
	c := objlike.InheritedFromGObject()
	if c == nil {
		return nil
	}
	t := (*HSeparator)(nil).GetStaticType()
	obj := gobject.ObjectGrabIfType(unsafe.Pointer(c), t)
	if obj != nil {
		return (*HSeparator)(obj)
	}
	panic("cannot cast to HSeparator")
}

func (this0 *HSeparator) InheritedFromGtkHSeparator() *C.GtkHSeparator {
	if this0 == nil {
		return nil
	}
	return (*C.GtkHSeparator)(this0.C)
}

func (this0 *HSeparator) GetStaticType() gobject.Type {
	return gobject.Type(C.gtk_hseparator_get_type())
}

func HSeparatorGetType() gobject.Type {
	return (*HSeparator)(nil).GetStaticType()
}
func NewHSeparator() *HSeparator {
	ret1 := C.gtk_hseparator_new()
	var ret2 *HSeparator
	ret2 = (*HSeparator)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
type HandleBoxLike interface {
	BinLike
	InheritedFromGtkHandleBox() *C.GtkHandleBox
}

type HandleBox struct {
	Bin
	atk.ImplementorIfaceImpl
	BuildableImpl
}

func ToHandleBox(objlike gobject.ObjectLike) *HandleBox {
	c := objlike.InheritedFromGObject()
	if c == nil {
		return nil
	}
	t := (*HandleBox)(nil).GetStaticType()
	obj := gobject.ObjectGrabIfType(unsafe.Pointer(c), t)
	if obj != nil {
		return (*HandleBox)(obj)
	}
	panic("cannot cast to HandleBox")
}

func (this0 *HandleBox) InheritedFromGtkHandleBox() *C.GtkHandleBox {
	if this0 == nil {
		return nil
	}
	return (*C.GtkHandleBox)(this0.C)
}

func (this0 *HandleBox) GetStaticType() gobject.Type {
	return gobject.Type(C.gtk_handle_box_get_type())
}

func HandleBoxGetType() gobject.Type {
	return (*HandleBox)(nil).GetStaticType()
}
func NewHandleBox() *HandleBox {
	ret1 := C.gtk_handle_box_new()
	var ret2 *HandleBox
	ret2 = (*HandleBox)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
func (this0 *HandleBox) GetChildDetached() bool {
	var this1 *C.GtkHandleBox
	if this0 != nil {
		this1 = this0.InheritedFromGtkHandleBox()
	}
	ret1 := C.gtk_handle_box_get_child_detached(this1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *HandleBox) GetHandlePosition() PositionType {
	var this1 *C.GtkHandleBox
	if this0 != nil {
		this1 = this0.InheritedFromGtkHandleBox()
	}
	ret1 := C.gtk_handle_box_get_handle_position(this1)
	var ret2 PositionType
	ret2 = PositionType(ret1)
	return ret2
}
func (this0 *HandleBox) GetShadowType() ShadowType {
	var this1 *C.GtkHandleBox
	if this0 != nil {
		this1 = this0.InheritedFromGtkHandleBox()
	}
	ret1 := C.gtk_handle_box_get_shadow_type(this1)
	var ret2 ShadowType
	ret2 = ShadowType(ret1)
	return ret2
}
func (this0 *HandleBox) GetSnapEdge() PositionType {
	var this1 *C.GtkHandleBox
	if this0 != nil {
		this1 = this0.InheritedFromGtkHandleBox()
	}
	ret1 := C.gtk_handle_box_get_snap_edge(this1)
	var ret2 PositionType
	ret2 = PositionType(ret1)
	return ret2
}
func (this0 *HandleBox) SetHandlePosition(position0 PositionType) {
	var this1 *C.GtkHandleBox
	var position1 C.GtkPositionType
	if this0 != nil {
		this1 = this0.InheritedFromGtkHandleBox()
	}
	position1 = C.GtkPositionType(position0)
	C.gtk_handle_box_set_handle_position(this1, position1)
}
func (this0 *HandleBox) SetShadowType(type0 ShadowType) {
	var this1 *C.GtkHandleBox
	var type1 C.GtkShadowType
	if this0 != nil {
		this1 = this0.InheritedFromGtkHandleBox()
	}
	type1 = C.GtkShadowType(type0)
	C.gtk_handle_box_set_shadow_type(this1, type1)
}
func (this0 *HandleBox) SetSnapEdge(edge0 PositionType) {
	var this1 *C.GtkHandleBox
	var edge1 C.GtkPositionType
	if this0 != nil {
		this1 = this0.InheritedFromGtkHandleBox()
	}
	edge1 = C.GtkPositionType(edge0)
	C.gtk_handle_box_set_snap_edge(this1, edge1)
}
type IMContextLike interface {
	gobject.ObjectLike
	InheritedFromGtkIMContext() *C.GtkIMContext
}

type IMContext struct {
	gobject.Object
	
}

func ToIMContext(objlike gobject.ObjectLike) *IMContext {
	c := objlike.InheritedFromGObject()
	if c == nil {
		return nil
	}
	t := (*IMContext)(nil).GetStaticType()
	obj := gobject.ObjectGrabIfType(unsafe.Pointer(c), t)
	if obj != nil {
		return (*IMContext)(obj)
	}
	panic("cannot cast to IMContext")
}

func (this0 *IMContext) InheritedFromGtkIMContext() *C.GtkIMContext {
	if this0 == nil {
		return nil
	}
	return (*C.GtkIMContext)(this0.C)
}

func (this0 *IMContext) GetStaticType() gobject.Type {
	return gobject.Type(C.gtk_im_context_get_type())
}

func IMContextGetType() gobject.Type {
	return (*IMContext)(nil).GetStaticType()
}
func (this0 *IMContext) DeleteSurrounding(offset0 int, n_chars0 int) bool {
	var this1 *C.GtkIMContext
	var offset1 C.int32_t
	var n_chars1 C.int32_t
	if this0 != nil {
		this1 = this0.InheritedFromGtkIMContext()
	}
	offset1 = C.int32_t(offset0)
	n_chars1 = C.int32_t(n_chars0)
	ret1 := C.gtk_im_context_delete_surrounding(this1, offset1, n_chars1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *IMContext) FilterKeypress(event0 *gdk.EventKey) bool {
	var this1 *C.GtkIMContext
	var event1 *C.GdkEventKey
	if this0 != nil {
		this1 = this0.InheritedFromGtkIMContext()
	}
	event1 = (*C.GdkEventKey)(unsafe.Pointer(event0))
	ret1 := C.gtk_im_context_filter_keypress(this1, event1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *IMContext) FocusIn() {
	var this1 *C.GtkIMContext
	if this0 != nil {
		this1 = this0.InheritedFromGtkIMContext()
	}
	C.gtk_im_context_focus_in(this1)
}
func (this0 *IMContext) FocusOut() {
	var this1 *C.GtkIMContext
	if this0 != nil {
		this1 = this0.InheritedFromGtkIMContext()
	}
	C.gtk_im_context_focus_out(this1)
}
func (this0 *IMContext) GetPreeditString() (string, *pango.AttrList, int) {
	var this1 *C.GtkIMContext
	var str1 *C.char
	var attrs1 *C.PangoAttrList
	var cursor_pos1 C.int32_t
	if this0 != nil {
		this1 = this0.InheritedFromGtkIMContext()
	}
	C.gtk_im_context_get_preedit_string(this1, &str1, &attrs1, &cursor_pos1)
	var str2 string
	var attrs2 *pango.AttrList
	var cursor_pos2 int
	str2 = C.GoString(str1)
	C.g_free(unsafe.Pointer(str1))
	attrs2 = (*pango.AttrList)(unsafe.Pointer(attrs1))
	cursor_pos2 = int(cursor_pos1)
	return str2, attrs2, cursor_pos2
}
func (this0 *IMContext) GetSurrounding(cursor_index0 *int) (string, bool) {
	var this1 *C.GtkIMContext
	var cursor_index1 *C.int32_t
	var text1 *C.char
	if this0 != nil {
		this1 = this0.InheritedFromGtkIMContext()
	}
	cursor_index1 = (*C.int32_t)(unsafe.Pointer(cursor_index0))
	ret1 := C.gtk_im_context_get_surrounding(this1, &text1, cursor_index1)
	var text2 string
	var ret2 bool
	text2 = C.GoString(text1)
	C.g_free(unsafe.Pointer(text1))
	ret2 = ret1 != 0
	return text2, ret2
}
func (this0 *IMContext) Reset() {
	var this1 *C.GtkIMContext
	if this0 != nil {
		this1 = this0.InheritedFromGtkIMContext()
	}
	C.gtk_im_context_reset(this1)
}
func (this0 *IMContext) SetClientWindow(window0 gdk.WindowLike) {
	var this1 *C.GtkIMContext
	var window1 *C.GdkWindow
	if this0 != nil {
		this1 = this0.InheritedFromGtkIMContext()
	}
	if window0 != nil {
		window1 = window0.InheritedFromGdkWindow()
	}
	C.gtk_im_context_set_client_window(this1, window1)
}
func (this0 *IMContext) SetCursorLocation(area0 *cairo.RectangleInt) {
	var this1 *C.GtkIMContext
	var area1 *C.cairoRectangleInt
	if this0 != nil {
		this1 = this0.InheritedFromGtkIMContext()
	}
	area1 = (*C.cairoRectangleInt)(unsafe.Pointer(area0))
	C.gtk_im_context_set_cursor_location(this1, area1)
}
func (this0 *IMContext) SetSurrounding(text0 string, len0 int, cursor_index0 int) {
	var this1 *C.GtkIMContext
	var text1 *C.char
	var len1 C.int32_t
	var cursor_index1 C.int32_t
	if this0 != nil {
		this1 = this0.InheritedFromGtkIMContext()
	}
	text1 = _GoStringToGString(text0)
	defer C.free(unsafe.Pointer(text1))
	len1 = C.int32_t(len0)
	cursor_index1 = C.int32_t(cursor_index0)
	C.gtk_im_context_set_surrounding(this1, text1, len1, cursor_index1)
}
func (this0 *IMContext) SetUsePreedit(use_preedit0 bool) {
	var this1 *C.GtkIMContext
	var use_preedit1 C.int
	if this0 != nil {
		this1 = this0.InheritedFromGtkIMContext()
	}
	use_preedit1 = _GoBoolToCBool(use_preedit0)
	C.gtk_im_context_set_use_preedit(this1, use_preedit1)
}
type IMContextInfo struct {
	context_id0 *C.char
	context_name0 *C.char
	domain0 *C.char
	domain_dirname0 *C.char
	default_locales0 *C.char
}
func (this0 *IMContextInfo) ContextID() string {
	var context_id1 string
	context_id1 = C.GoString(this0.context_id0)
	return context_id1
}
func (this0 *IMContextInfo) ContextName() string {
	var context_name1 string
	context_name1 = C.GoString(this0.context_name0)
	return context_name1
}
func (this0 *IMContextInfo) Domain() string {
	var domain1 string
	domain1 = C.GoString(this0.domain0)
	return domain1
}
func (this0 *IMContextInfo) DomainDirname() string {
	var domain_dirname1 string
	domain_dirname1 = C.GoString(this0.domain_dirname0)
	return domain_dirname1
}
func (this0 *IMContextInfo) DefaultLocales() string {
	var default_locales1 string
	default_locales1 = C.GoString(this0.default_locales0)
	return default_locales1
}
type IMContextSimpleLike interface {
	IMContextLike
	InheritedFromGtkIMContextSimple() *C.GtkIMContextSimple
}

type IMContextSimple struct {
	IMContext
	
}

func ToIMContextSimple(objlike gobject.ObjectLike) *IMContextSimple {
	c := objlike.InheritedFromGObject()
	if c == nil {
		return nil
	}
	t := (*IMContextSimple)(nil).GetStaticType()
	obj := gobject.ObjectGrabIfType(unsafe.Pointer(c), t)
	if obj != nil {
		return (*IMContextSimple)(obj)
	}
	panic("cannot cast to IMContextSimple")
}

func (this0 *IMContextSimple) InheritedFromGtkIMContextSimple() *C.GtkIMContextSimple {
	if this0 == nil {
		return nil
	}
	return (*C.GtkIMContextSimple)(this0.C)
}

func (this0 *IMContextSimple) GetStaticType() gobject.Type {
	return gobject.Type(C.gtk_im_context_simple_get_type())
}

func IMContextSimpleGetType() gobject.Type {
	return (*IMContextSimple)(nil).GetStaticType()
}
func NewIMContextSimple() *IMContextSimple {
	ret1 := C.gtk_im_context_simple_new()
	var ret2 *IMContextSimple
	ret2 = (*IMContextSimple)(gobject.ObjectWrap(unsafe.Pointer(ret1), false))
	return ret2
}
type IMMulticontextLike interface {
	IMContextLike
	InheritedFromGtkIMMulticontext() *C.GtkIMMulticontext
}

type IMMulticontext struct {
	IMContext
	
}

func ToIMMulticontext(objlike gobject.ObjectLike) *IMMulticontext {
	c := objlike.InheritedFromGObject()
	if c == nil {
		return nil
	}
	t := (*IMMulticontext)(nil).GetStaticType()
	obj := gobject.ObjectGrabIfType(unsafe.Pointer(c), t)
	if obj != nil {
		return (*IMMulticontext)(obj)
	}
	panic("cannot cast to IMMulticontext")
}

func (this0 *IMMulticontext) InheritedFromGtkIMMulticontext() *C.GtkIMMulticontext {
	if this0 == nil {
		return nil
	}
	return (*C.GtkIMMulticontext)(this0.C)
}

func (this0 *IMMulticontext) GetStaticType() gobject.Type {
	return gobject.Type(C.gtk_im_multicontext_get_type())
}

func IMMulticontextGetType() gobject.Type {
	return (*IMMulticontext)(nil).GetStaticType()
}
func NewIMMulticontext() *IMMulticontext {
	ret1 := C.gtk_im_multicontext_new()
	var ret2 *IMMulticontext
	ret2 = (*IMMulticontext)(gobject.ObjectWrap(unsafe.Pointer(ret1), false))
	return ret2
}
func (this0 *IMMulticontext) AppendMenuitems(menushell0 MenuShellLike) {
	var this1 *C.GtkIMMulticontext
	var menushell1 *C.GtkMenuShell
	if this0 != nil {
		this1 = this0.InheritedFromGtkIMMulticontext()
	}
	if menushell0 != nil {
		menushell1 = menushell0.InheritedFromGtkMenuShell()
	}
	C.gtk_im_multicontext_append_menuitems(this1, menushell1)
}
func (this0 *IMMulticontext) GetContextID() string {
	var this1 *C.GtkIMMulticontext
	if this0 != nil {
		this1 = this0.InheritedFromGtkIMMulticontext()
	}
	ret1 := C.gtk_im_multicontext_get_context_id(this1)
	var ret2 string
	ret2 = C.GoString(ret1)
	return ret2
}
func (this0 *IMMulticontext) SetContextID(context_id0 string) {
	var this1 *C.GtkIMMulticontext
	var context_id1 *C.char
	if this0 != nil {
		this1 = this0.InheritedFromGtkIMMulticontext()
	}
	context_id1 = _GoStringToGString(context_id0)
	defer C.free(unsafe.Pointer(context_id1))
	C.gtk_im_multicontext_set_context_id(this1, context_id1)
}
type IMPreeditStyle C.uint32_t
const (
	IMPreeditStyleNothing IMPreeditStyle = 0
	IMPreeditStyleCallback IMPreeditStyle = 1
	IMPreeditStyleNone IMPreeditStyle = 2
)
type IMStatusStyle C.uint32_t
const (
	IMStatusStyleNothing IMStatusStyle = 0
	IMStatusStyleCallback IMStatusStyle = 1
	IMStatusStyleNone IMStatusStyle = 2
)
const InputError = -1
const InterfaceAge = 3
type IconFactoryLike interface {
	gobject.ObjectLike
	InheritedFromGtkIconFactory() *C.GtkIconFactory
}

type IconFactory struct {
	gobject.Object
	BuildableImpl
}

func ToIconFactory(objlike gobject.ObjectLike) *IconFactory {
	c := objlike.InheritedFromGObject()
	if c == nil {
		return nil
	}
	t := (*IconFactory)(nil).GetStaticType()
	obj := gobject.ObjectGrabIfType(unsafe.Pointer(c), t)
	if obj != nil {
		return (*IconFactory)(obj)
	}
	panic("cannot cast to IconFactory")
}

func (this0 *IconFactory) InheritedFromGtkIconFactory() *C.GtkIconFactory {
	if this0 == nil {
		return nil
	}
	return (*C.GtkIconFactory)(this0.C)
}

func (this0 *IconFactory) GetStaticType() gobject.Type {
	return gobject.Type(C.gtk_icon_factory_get_type())
}

func IconFactoryGetType() gobject.Type {
	return (*IconFactory)(nil).GetStaticType()
}
func NewIconFactory() *IconFactory {
	ret1 := C.gtk_icon_factory_new()
	var ret2 *IconFactory
	ret2 = (*IconFactory)(gobject.ObjectWrap(unsafe.Pointer(ret1), false))
	return ret2
}
func IconFactoryLookupDefault(stock_id0 string) *IconSet {
	var stock_id1 *C.char
	stock_id1 = _GoStringToGString(stock_id0)
	defer C.free(unsafe.Pointer(stock_id1))
	ret1 := C.gtk_icon_factory_lookup_default(stock_id1)
	var ret2 *IconSet
	ret2 = (*IconSet)(unsafe.Pointer(ret1))
	return ret2
}
func (this0 *IconFactory) Add(stock_id0 string, icon_set0 *IconSet) {
	var this1 *C.GtkIconFactory
	var stock_id1 *C.char
	var icon_set1 *C.GtkIconSet
	if this0 != nil {
		this1 = this0.InheritedFromGtkIconFactory()
	}
	stock_id1 = _GoStringToGString(stock_id0)
	defer C.free(unsafe.Pointer(stock_id1))
	icon_set1 = (*C.GtkIconSet)(unsafe.Pointer(icon_set0))
	C.gtk_icon_factory_add(this1, stock_id1, icon_set1)
}
func (this0 *IconFactory) AddDefault() {
	var this1 *C.GtkIconFactory
	if this0 != nil {
		this1 = this0.InheritedFromGtkIconFactory()
	}
	C.gtk_icon_factory_add_default(this1)
}
func (this0 *IconFactory) Lookup(stock_id0 string) *IconSet {
	var this1 *C.GtkIconFactory
	var stock_id1 *C.char
	if this0 != nil {
		this1 = this0.InheritedFromGtkIconFactory()
	}
	stock_id1 = _GoStringToGString(stock_id0)
	defer C.free(unsafe.Pointer(stock_id1))
	ret1 := C.gtk_icon_factory_lookup(this1, stock_id1)
	var ret2 *IconSet
	ret2 = (*IconSet)(unsafe.Pointer(ret1))
	return ret2
}
func (this0 *IconFactory) RemoveDefault() {
	var this1 *C.GtkIconFactory
	if this0 != nil {
		this1 = this0.InheritedFromGtkIconFactory()
	}
	C.gtk_icon_factory_remove_default(this1)
}
type IconInfo struct {}
func NewIconInfoForPixbuf(icon_theme0 IconThemeLike, pixbuf0 gdkpixbuf.PixbufLike) *IconInfo {
	var icon_theme1 *C.GtkIconTheme
	var pixbuf1 *C.GdkPixbuf
	if icon_theme0 != nil {
		icon_theme1 = icon_theme0.InheritedFromGtkIconTheme()
	}
	if pixbuf0 != nil {
		pixbuf1 = pixbuf0.InheritedFromGdkPixbuf()
	}
	ret1 := C.gtk_icon_info_new_for_pixbuf(icon_theme1, pixbuf1)
	var ret2 *IconInfo
	ret2 = (*IconInfo)(unsafe.Pointer(ret1))
	return ret2
}
func (this0 *IconInfo) Copy() *IconInfo {
	var this1 *C.GtkIconInfo
	this1 = (*C.GtkIconInfo)(unsafe.Pointer(this0))
	ret1 := C.gtk_icon_info_copy(this1)
	var ret2 *IconInfo
	ret2 = (*IconInfo)(unsafe.Pointer(ret1))
	return ret2
}
func (this0 *IconInfo) Free() {
	var this1 *C.GtkIconInfo
	this1 = (*C.GtkIconInfo)(unsafe.Pointer(this0))
	C.gtk_icon_info_free(this1)
}
func (this0 *IconInfo) GetAttachPoints() ([]gdk.Point, bool) {
	var this1 *C.GtkIconInfo
	var points1 *C.GdkPoint
	var n_points1 C.int32_t
	this1 = (*C.GtkIconInfo)(unsafe.Pointer(this0))
	ret1 := C.gtk_icon_info_get_attach_points(this1, &points1, &n_points1)
	var points2 []gdk.Point
	var ret2 bool
	points2 = make([]gdk.Point, n_points1)
	for i := range points2 {
		points2[i] = *(*gdk.Point)(unsafe.Pointer(&(*(*[999999]C.GdkPoint)(unsafe.Pointer(points1)))[i]))
	}
	ret2 = ret1 != 0
	return points2, ret2
}
func (this0 *IconInfo) GetBaseSize() int {
	var this1 *C.GtkIconInfo
	this1 = (*C.GtkIconInfo)(unsafe.Pointer(this0))
	ret1 := C.gtk_icon_info_get_base_size(this1)
	var ret2 int
	ret2 = int(ret1)
	return ret2
}
func (this0 *IconInfo) GetBuiltinPixbuf() *gdkpixbuf.Pixbuf {
	var this1 *C.GtkIconInfo
	this1 = (*C.GtkIconInfo)(unsafe.Pointer(this0))
	ret1 := C.gtk_icon_info_get_builtin_pixbuf(this1)
	var ret2 *gdkpixbuf.Pixbuf
	ret2 = (*gdkpixbuf.Pixbuf)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
func (this0 *IconInfo) GetDisplayName() string {
	var this1 *C.GtkIconInfo
	this1 = (*C.GtkIconInfo)(unsafe.Pointer(this0))
	ret1 := C.gtk_icon_info_get_display_name(this1)
	var ret2 string
	ret2 = C.GoString(ret1)
	return ret2
}
func (this0 *IconInfo) GetEmbeddedRect() (cairo.RectangleInt, bool) {
	var this1 *C.GtkIconInfo
	var rectangle1 C.cairoRectangleInt
	this1 = (*C.GtkIconInfo)(unsafe.Pointer(this0))
	ret1 := C.gtk_icon_info_get_embedded_rect(this1, &rectangle1)
	var rectangle2 cairo.RectangleInt
	var ret2 bool
	rectangle2 = *(*cairo.RectangleInt)(unsafe.Pointer(&rectangle1))
	ret2 = ret1 != 0
	return rectangle2, ret2
}
func (this0 *IconInfo) GetFilename() string {
	var this1 *C.GtkIconInfo
	this1 = (*C.GtkIconInfo)(unsafe.Pointer(this0))
	ret1 := C.gtk_icon_info_get_filename(this1)
	var ret2 string
	ret2 = C.GoString(ret1)
	return ret2
}
func (this0 *IconInfo) LoadIcon() (*gdkpixbuf.Pixbuf, error) {
	var this1 *C.GtkIconInfo
	var err1 *C.GError
	this1 = (*C.GtkIconInfo)(unsafe.Pointer(this0))
	ret1 := C.gtk_icon_info_load_icon(this1, &err1)
	var ret2 *gdkpixbuf.Pixbuf
	var err2 error
	ret2 = (*gdkpixbuf.Pixbuf)(gobject.ObjectWrap(unsafe.Pointer(ret1), false))
	if err1 != nil {
		err2 = errors.New(C.GoString(((*_GError)(unsafe.Pointer(err1))).message))
		C.g_error_free(err1)
	}
	return ret2, err2
}
func (this0 *IconInfo) LoadSymbolic(fg0 *gdk.RGBA, success_color0 *gdk.RGBA, warning_color0 *gdk.RGBA, error_color0 *gdk.RGBA) (bool, *gdkpixbuf.Pixbuf, error) {
	var this1 *C.GtkIconInfo
	var fg1 *C.GdkRGBA
	var success_color1 *C.GdkRGBA
	var warning_color1 *C.GdkRGBA
	var error_color1 *C.GdkRGBA
	var was_symbolic1 C.int
	var err1 *C.GError
	this1 = (*C.GtkIconInfo)(unsafe.Pointer(this0))
	fg1 = (*C.GdkRGBA)(unsafe.Pointer(fg0))
	success_color1 = (*C.GdkRGBA)(unsafe.Pointer(success_color0))
	warning_color1 = (*C.GdkRGBA)(unsafe.Pointer(warning_color0))
	error_color1 = (*C.GdkRGBA)(unsafe.Pointer(error_color0))
	ret1 := C.gtk_icon_info_load_symbolic(this1, fg1, success_color1, warning_color1, error_color1, &was_symbolic1, &err1)
	var was_symbolic2 bool
	var ret2 *gdkpixbuf.Pixbuf
	var err2 error
	was_symbolic2 = was_symbolic1 != 0
	ret2 = (*gdkpixbuf.Pixbuf)(gobject.ObjectWrap(unsafe.Pointer(ret1), false))
	if err1 != nil {
		err2 = errors.New(C.GoString(((*_GError)(unsafe.Pointer(err1))).message))
		C.g_error_free(err1)
	}
	return was_symbolic2, ret2, err2
}
func (this0 *IconInfo) LoadSymbolicForContext(context0 StyleContextLike) (bool, *gdkpixbuf.Pixbuf, error) {
	var this1 *C.GtkIconInfo
	var context1 *C.GtkStyleContext
	var was_symbolic1 C.int
	var err1 *C.GError
	this1 = (*C.GtkIconInfo)(unsafe.Pointer(this0))
	if context0 != nil {
		context1 = context0.InheritedFromGtkStyleContext()
	}
	ret1 := C.gtk_icon_info_load_symbolic_for_context(this1, context1, &was_symbolic1, &err1)
	var was_symbolic2 bool
	var ret2 *gdkpixbuf.Pixbuf
	var err2 error
	was_symbolic2 = was_symbolic1 != 0
	ret2 = (*gdkpixbuf.Pixbuf)(gobject.ObjectWrap(unsafe.Pointer(ret1), false))
	if err1 != nil {
		err2 = errors.New(C.GoString(((*_GError)(unsafe.Pointer(err1))).message))
		C.g_error_free(err1)
	}
	return was_symbolic2, ret2, err2
}
func (this0 *IconInfo) LoadSymbolicForStyle(style0 StyleLike, state0 StateType) (bool, *gdkpixbuf.Pixbuf, error) {
	var this1 *C.GtkIconInfo
	var style1 *C.GtkStyle
	var state1 C.GtkStateType
	var was_symbolic1 C.int
	var err1 *C.GError
	this1 = (*C.GtkIconInfo)(unsafe.Pointer(this0))
	if style0 != nil {
		style1 = style0.InheritedFromGtkStyle()
	}
	state1 = C.GtkStateType(state0)
	ret1 := C.gtk_icon_info_load_symbolic_for_style(this1, style1, state1, &was_symbolic1, &err1)
	var was_symbolic2 bool
	var ret2 *gdkpixbuf.Pixbuf
	var err2 error
	was_symbolic2 = was_symbolic1 != 0
	ret2 = (*gdkpixbuf.Pixbuf)(gobject.ObjectWrap(unsafe.Pointer(ret1), false))
	if err1 != nil {
		err2 = errors.New(C.GoString(((*_GError)(unsafe.Pointer(err1))).message))
		C.g_error_free(err1)
	}
	return was_symbolic2, ret2, err2
}
func (this0 *IconInfo) SetRawCoordinates(raw_coordinates0 bool) {
	var this1 *C.GtkIconInfo
	var raw_coordinates1 C.int
	this1 = (*C.GtkIconInfo)(unsafe.Pointer(this0))
	raw_coordinates1 = _GoBoolToCBool(raw_coordinates0)
	C.gtk_icon_info_set_raw_coordinates(this1, raw_coordinates1)
}
type IconLookupFlags C.uint32_t
const (
	IconLookupFlagsNoSvg IconLookupFlags = 1
	IconLookupFlagsForceSvg IconLookupFlags = 2
	IconLookupFlagsUseBuiltin IconLookupFlags = 4
	IconLookupFlagsGenericFallback IconLookupFlags = 8
	IconLookupFlagsForceSize IconLookupFlags = 16
)
type IconSet struct {}
func NewIconSet() *IconSet {
	ret1 := C.gtk_icon_set_new()
	var ret2 *IconSet
	ret2 = (*IconSet)(unsafe.Pointer(ret1))
	return ret2
}
func NewIconSetFromPixbuf(pixbuf0 gdkpixbuf.PixbufLike) *IconSet {
	var pixbuf1 *C.GdkPixbuf
	if pixbuf0 != nil {
		pixbuf1 = pixbuf0.InheritedFromGdkPixbuf()
	}
	ret1 := C.gtk_icon_set_new_from_pixbuf(pixbuf1)
	var ret2 *IconSet
	ret2 = (*IconSet)(unsafe.Pointer(ret1))
	return ret2
}
func (this0 *IconSet) AddSource(source0 *IconSource) {
	var this1 *C.GtkIconSet
	var source1 *C.GtkIconSource
	this1 = (*C.GtkIconSet)(unsafe.Pointer(this0))
	source1 = (*C.GtkIconSource)(unsafe.Pointer(source0))
	C.gtk_icon_set_add_source(this1, source1)
}
func (this0 *IconSet) Copy() *IconSet {
	var this1 *C.GtkIconSet
	this1 = (*C.GtkIconSet)(unsafe.Pointer(this0))
	ret1 := C.gtk_icon_set_copy(this1)
	var ret2 *IconSet
	ret2 = (*IconSet)(unsafe.Pointer(ret1))
	return ret2
}
func (this0 *IconSet) GetSizes() []int {
	var this1 *C.GtkIconSet
	var sizes1 *C.int32_t
	var n_sizes1 C.int32_t
	this1 = (*C.GtkIconSet)(unsafe.Pointer(this0))
	C.gtk_icon_set_get_sizes(this1, &sizes1, &n_sizes1)
	var sizes2 []int
	sizes2 = make([]int, n_sizes1)
	for i := range sizes2 {
		sizes2[i] = int((*(*[999999]C.int32_t)(unsafe.Pointer(sizes1)))[i])
	}
	return sizes2
}
func (this0 *IconSet) RenderIcon(style0 StyleLike, direction0 TextDirection, state0 StateType, size0 int, widget0 WidgetLike, detail0 string) *gdkpixbuf.Pixbuf {
	var this1 *C.GtkIconSet
	var style1 *C.GtkStyle
	var direction1 C.GtkTextDirection
	var state1 C.GtkStateType
	var size1 C.int32_t
	var widget1 *C.GtkWidget
	var detail1 *C.char
	this1 = (*C.GtkIconSet)(unsafe.Pointer(this0))
	if style0 != nil {
		style1 = style0.InheritedFromGtkStyle()
	}
	direction1 = C.GtkTextDirection(direction0)
	state1 = C.GtkStateType(state0)
	size1 = C.int32_t(size0)
	if widget0 != nil {
		widget1 = widget0.InheritedFromGtkWidget()
	}
	detail1 = _GoStringToGString(detail0)
	defer C.free(unsafe.Pointer(detail1))
	ret1 := C.gtk_icon_set_render_icon(this1, style1, direction1, state1, size1, widget1, detail1)
	var ret2 *gdkpixbuf.Pixbuf
	ret2 = (*gdkpixbuf.Pixbuf)(gobject.ObjectWrap(unsafe.Pointer(ret1), false))
	return ret2
}
func (this0 *IconSet) RenderIconPixbuf(context0 StyleContextLike, size0 int) *gdkpixbuf.Pixbuf {
	var this1 *C.GtkIconSet
	var context1 *C.GtkStyleContext
	var size1 C.int32_t
	this1 = (*C.GtkIconSet)(unsafe.Pointer(this0))
	if context0 != nil {
		context1 = context0.InheritedFromGtkStyleContext()
	}
	size1 = C.int32_t(size0)
	ret1 := C.gtk_icon_set_render_icon_pixbuf(this1, context1, size1)
	var ret2 *gdkpixbuf.Pixbuf
	ret2 = (*gdkpixbuf.Pixbuf)(gobject.ObjectWrap(unsafe.Pointer(ret1), false))
	return ret2
}
type IconSize C.uint32_t
const (
	IconSizeInvalid IconSize = 0
	IconSizeMenu IconSize = 1
	IconSizeSmallToolbar IconSize = 2
	IconSizeLargeToolbar IconSize = 3
	IconSizeButton IconSize = 4
	IconSizeDnd IconSize = 5
	IconSizeDialog IconSize = 6
)
type IconSource struct {}
func NewIconSource() *IconSource {
	ret1 := C.gtk_icon_source_new()
	var ret2 *IconSource
	ret2 = (*IconSource)(unsafe.Pointer(ret1))
	return ret2
}
func (this0 *IconSource) Copy() *IconSource {
	var this1 *C.GtkIconSource
	this1 = (*C.GtkIconSource)(unsafe.Pointer(this0))
	ret1 := C.gtk_icon_source_copy(this1)
	var ret2 *IconSource
	ret2 = (*IconSource)(unsafe.Pointer(ret1))
	return ret2
}
func (this0 *IconSource) Free() {
	var this1 *C.GtkIconSource
	this1 = (*C.GtkIconSource)(unsafe.Pointer(this0))
	C.gtk_icon_source_free(this1)
}
func (this0 *IconSource) GetDirection() TextDirection {
	var this1 *C.GtkIconSource
	this1 = (*C.GtkIconSource)(unsafe.Pointer(this0))
	ret1 := C.gtk_icon_source_get_direction(this1)
	var ret2 TextDirection
	ret2 = TextDirection(ret1)
	return ret2
}
func (this0 *IconSource) GetDirectionWildcarded() bool {
	var this1 *C.GtkIconSource
	this1 = (*C.GtkIconSource)(unsafe.Pointer(this0))
	ret1 := C.gtk_icon_source_get_direction_wildcarded(this1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *IconSource) GetFilename() string {
	var this1 *C.GtkIconSource
	this1 = (*C.GtkIconSource)(unsafe.Pointer(this0))
	ret1 := C.gtk_icon_source_get_filename(this1)
	var ret2 string
	ret2 = C.GoString(ret1)
	return ret2
}
func (this0 *IconSource) GetIconName() string {
	var this1 *C.GtkIconSource
	this1 = (*C.GtkIconSource)(unsafe.Pointer(this0))
	ret1 := C.gtk_icon_source_get_icon_name(this1)
	var ret2 string
	ret2 = C.GoString(ret1)
	return ret2
}
func (this0 *IconSource) GetPixbuf() *gdkpixbuf.Pixbuf {
	var this1 *C.GtkIconSource
	this1 = (*C.GtkIconSource)(unsafe.Pointer(this0))
	ret1 := C.gtk_icon_source_get_pixbuf(this1)
	var ret2 *gdkpixbuf.Pixbuf
	ret2 = (*gdkpixbuf.Pixbuf)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
func (this0 *IconSource) GetSize() int {
	var this1 *C.GtkIconSource
	this1 = (*C.GtkIconSource)(unsafe.Pointer(this0))
	ret1 := C.gtk_icon_source_get_size(this1)
	var ret2 int
	ret2 = int(ret1)
	return ret2
}
func (this0 *IconSource) GetSizeWildcarded() bool {
	var this1 *C.GtkIconSource
	this1 = (*C.GtkIconSource)(unsafe.Pointer(this0))
	ret1 := C.gtk_icon_source_get_size_wildcarded(this1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *IconSource) GetState() StateType {
	var this1 *C.GtkIconSource
	this1 = (*C.GtkIconSource)(unsafe.Pointer(this0))
	ret1 := C.gtk_icon_source_get_state(this1)
	var ret2 StateType
	ret2 = StateType(ret1)
	return ret2
}
func (this0 *IconSource) GetStateWildcarded() bool {
	var this1 *C.GtkIconSource
	this1 = (*C.GtkIconSource)(unsafe.Pointer(this0))
	ret1 := C.gtk_icon_source_get_state_wildcarded(this1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *IconSource) SetDirection(direction0 TextDirection) {
	var this1 *C.GtkIconSource
	var direction1 C.GtkTextDirection
	this1 = (*C.GtkIconSource)(unsafe.Pointer(this0))
	direction1 = C.GtkTextDirection(direction0)
	C.gtk_icon_source_set_direction(this1, direction1)
}
func (this0 *IconSource) SetDirectionWildcarded(setting0 bool) {
	var this1 *C.GtkIconSource
	var setting1 C.int
	this1 = (*C.GtkIconSource)(unsafe.Pointer(this0))
	setting1 = _GoBoolToCBool(setting0)
	C.gtk_icon_source_set_direction_wildcarded(this1, setting1)
}
func (this0 *IconSource) SetFilename(filename0 string) {
	var this1 *C.GtkIconSource
	var filename1 *C.char
	this1 = (*C.GtkIconSource)(unsafe.Pointer(this0))
	filename1 = _GoStringToGString(filename0)
	defer C.free(unsafe.Pointer(filename1))
	C.gtk_icon_source_set_filename(this1, filename1)
}
func (this0 *IconSource) SetIconName(icon_name0 string) {
	var this1 *C.GtkIconSource
	var icon_name1 *C.char
	this1 = (*C.GtkIconSource)(unsafe.Pointer(this0))
	icon_name1 = _GoStringToGString(icon_name0)
	defer C.free(unsafe.Pointer(icon_name1))
	C.gtk_icon_source_set_icon_name(this1, icon_name1)
}
func (this0 *IconSource) SetPixbuf(pixbuf0 gdkpixbuf.PixbufLike) {
	var this1 *C.GtkIconSource
	var pixbuf1 *C.GdkPixbuf
	this1 = (*C.GtkIconSource)(unsafe.Pointer(this0))
	if pixbuf0 != nil {
		pixbuf1 = pixbuf0.InheritedFromGdkPixbuf()
	}
	C.gtk_icon_source_set_pixbuf(this1, pixbuf1)
}
func (this0 *IconSource) SetSize(size0 int) {
	var this1 *C.GtkIconSource
	var size1 C.int32_t
	this1 = (*C.GtkIconSource)(unsafe.Pointer(this0))
	size1 = C.int32_t(size0)
	C.gtk_icon_source_set_size(this1, size1)
}
func (this0 *IconSource) SetSizeWildcarded(setting0 bool) {
	var this1 *C.GtkIconSource
	var setting1 C.int
	this1 = (*C.GtkIconSource)(unsafe.Pointer(this0))
	setting1 = _GoBoolToCBool(setting0)
	C.gtk_icon_source_set_size_wildcarded(this1, setting1)
}
func (this0 *IconSource) SetState(state0 StateType) {
	var this1 *C.GtkIconSource
	var state1 C.GtkStateType
	this1 = (*C.GtkIconSource)(unsafe.Pointer(this0))
	state1 = C.GtkStateType(state0)
	C.gtk_icon_source_set_state(this1, state1)
}
func (this0 *IconSource) SetStateWildcarded(setting0 bool) {
	var this1 *C.GtkIconSource
	var setting1 C.int
	this1 = (*C.GtkIconSource)(unsafe.Pointer(this0))
	setting1 = _GoBoolToCBool(setting0)
	C.gtk_icon_source_set_state_wildcarded(this1, setting1)
}
type IconThemeLike interface {
	gobject.ObjectLike
	InheritedFromGtkIconTheme() *C.GtkIconTheme
}

type IconTheme struct {
	gobject.Object
	
}

func ToIconTheme(objlike gobject.ObjectLike) *IconTheme {
	c := objlike.InheritedFromGObject()
	if c == nil {
		return nil
	}
	t := (*IconTheme)(nil).GetStaticType()
	obj := gobject.ObjectGrabIfType(unsafe.Pointer(c), t)
	if obj != nil {
		return (*IconTheme)(obj)
	}
	panic("cannot cast to IconTheme")
}

func (this0 *IconTheme) InheritedFromGtkIconTheme() *C.GtkIconTheme {
	if this0 == nil {
		return nil
	}
	return (*C.GtkIconTheme)(this0.C)
}

func (this0 *IconTheme) GetStaticType() gobject.Type {
	return gobject.Type(C.gtk_icon_theme_get_type())
}

func IconThemeGetType() gobject.Type {
	return (*IconTheme)(nil).GetStaticType()
}
func NewIconTheme() *IconTheme {
	ret1 := C.gtk_icon_theme_new()
	var ret2 *IconTheme
	ret2 = (*IconTheme)(gobject.ObjectWrap(unsafe.Pointer(ret1), false))
	return ret2
}
func IconThemeAddBuiltinIcon(icon_name0 string, size0 int, pixbuf0 gdkpixbuf.PixbufLike) {
	var icon_name1 *C.char
	var size1 C.int32_t
	var pixbuf1 *C.GdkPixbuf
	icon_name1 = _GoStringToGString(icon_name0)
	defer C.free(unsafe.Pointer(icon_name1))
	size1 = C.int32_t(size0)
	if pixbuf0 != nil {
		pixbuf1 = pixbuf0.InheritedFromGdkPixbuf()
	}
	C.gtk_icon_theme_add_builtin_icon(icon_name1, size1, pixbuf1)
}
func IconThemeGetDefault() *IconTheme {
	ret1 := C.gtk_icon_theme_get_default()
	var ret2 *IconTheme
	ret2 = (*IconTheme)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
func IconThemeGetForScreen(screen0 gdk.ScreenLike) *IconTheme {
	var screen1 *C.GdkScreen
	if screen0 != nil {
		screen1 = screen0.InheritedFromGdkScreen()
	}
	ret1 := C.gtk_icon_theme_get_for_screen(screen1)
	var ret2 *IconTheme
	ret2 = (*IconTheme)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
func (this0 *IconTheme) AppendSearchPath(path0 string) {
	var this1 *C.GtkIconTheme
	var path1 *C.char
	if this0 != nil {
		this1 = this0.InheritedFromGtkIconTheme()
	}
	path1 = _GoStringToGString(path0)
	defer C.free(unsafe.Pointer(path1))
	C.gtk_icon_theme_append_search_path(this1, path1)
}
func (this0 *IconTheme) ChooseIcon(icon_names0 []string, size0 int, flags0 IconLookupFlags) *IconInfo {
	var this1 *C.GtkIconTheme
	var icon_names1 **C.char
	var size1 C.int32_t
	var flags1 C.GtkIconLookupFlags
	if this0 != nil {
		this1 = this0.InheritedFromGtkIconTheme()
	}
	icon_names1 = (**C.char)(C.malloc(C.size_t(int(unsafe.Sizeof(*icon_names1)) * (len(icon_names0) + 1))))
	defer C.free(unsafe.Pointer(icon_names1))
	for i, e := range icon_names0 {
		(*(*[999999]*C.char)(unsafe.Pointer(icon_names1)))[i] = _GoStringToGString(e)
		defer C.free(unsafe.Pointer((*(*[999999]*C.char)(unsafe.Pointer(icon_names1)))[i]))
	}
	(*(*[999999]*C.char)(unsafe.Pointer(icon_names1)))[len(icon_names0)] = nil
	size1 = C.int32_t(size0)
	flags1 = C.GtkIconLookupFlags(flags0)
	ret1 := C.gtk_icon_theme_choose_icon(this1, icon_names1, size1, flags1)
	var ret2 *IconInfo
	ret2 = (*IconInfo)(unsafe.Pointer(ret1))
	return ret2
}
func (this0 *IconTheme) GetExampleIconName() string {
	var this1 *C.GtkIconTheme
	if this0 != nil {
		this1 = this0.InheritedFromGtkIconTheme()
	}
	ret1 := C.gtk_icon_theme_get_example_icon_name(this1)
	var ret2 string
	ret2 = C.GoString(ret1)
	C.g_free(unsafe.Pointer(ret1))
	return ret2
}
func (this0 *IconTheme) GetIconSizes(icon_name0 string) []int {
	var this1 *C.GtkIconTheme
	var icon_name1 *C.char
	if this0 != nil {
		this1 = this0.InheritedFromGtkIconTheme()
	}
	icon_name1 = _GoStringToGString(icon_name0)
	defer C.free(unsafe.Pointer(icon_name1))
	ret1 := C.gtk_icon_theme_get_icon_sizes(this1, icon_name1)
	var ret2 []int
	for i := range ret2 {
		ret2[i] = int((*(*[999999]C.int32_t)(unsafe.Pointer(ret1)))[i])
	}
	return ret2
}
func (this0 *IconTheme) GetSearchPath() []string {
	var this1 *C.GtkIconTheme
	var path1 **C.char
	var n_elements1 C.int32_t
	if this0 != nil {
		this1 = this0.InheritedFromGtkIconTheme()
	}
	C.gtk_icon_theme_get_search_path(this1, &path1, &n_elements1)
	var path2 []string
	path2 = make([]string, n_elements1)
	for i := range path2 {
		path2[i] = C.GoString((*(*[999999]*C.char)(unsafe.Pointer(path1)))[i])
		C.g_free(unsafe.Pointer((*(*[999999]*C.char)(unsafe.Pointer(path1)))[i]))
	}
	return path2
}
func (this0 *IconTheme) HasIcon(icon_name0 string) bool {
	var this1 *C.GtkIconTheme
	var icon_name1 *C.char
	if this0 != nil {
		this1 = this0.InheritedFromGtkIconTheme()
	}
	icon_name1 = _GoStringToGString(icon_name0)
	defer C.free(unsafe.Pointer(icon_name1))
	ret1 := C.gtk_icon_theme_has_icon(this1, icon_name1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *IconTheme) ListContexts() []string {
	var this1 *C.GtkIconTheme
	if this0 != nil {
		this1 = this0.InheritedFromGtkIconTheme()
	}
	ret1 := C.gtk_icon_theme_list_contexts(this1)
	var ret2 []string
	for iter := (*_GList)(unsafe.Pointer(ret1)); iter != nil; iter = iter.next {
		var elt string
		elt = C.GoString((*C.char)(iter.data))
		C.g_free(unsafe.Pointer((*C.char)(iter.data)))
		ret2 = append(ret2, elt)
	}
	return ret2
}
func (this0 *IconTheme) ListIcons(context0 string) []string {
	var this1 *C.GtkIconTheme
	var context1 *C.char
	if this0 != nil {
		this1 = this0.InheritedFromGtkIconTheme()
	}
	context1 = _GoStringToGString(context0)
	defer C.free(unsafe.Pointer(context1))
	ret1 := C.gtk_icon_theme_list_icons(this1, context1)
	var ret2 []string
	for iter := (*_GList)(unsafe.Pointer(ret1)); iter != nil; iter = iter.next {
		var elt string
		elt = C.GoString((*C.char)(iter.data))
		C.g_free(unsafe.Pointer((*C.char)(iter.data)))
		ret2 = append(ret2, elt)
	}
	return ret2
}
func (this0 *IconTheme) LoadIcon(icon_name0 string, size0 int, flags0 IconLookupFlags) (*gdkpixbuf.Pixbuf, error) {
	var this1 *C.GtkIconTheme
	var icon_name1 *C.char
	var size1 C.int32_t
	var flags1 C.GtkIconLookupFlags
	var err1 *C.GError
	if this0 != nil {
		this1 = this0.InheritedFromGtkIconTheme()
	}
	icon_name1 = _GoStringToGString(icon_name0)
	defer C.free(unsafe.Pointer(icon_name1))
	size1 = C.int32_t(size0)
	flags1 = C.GtkIconLookupFlags(flags0)
	ret1 := C.gtk_icon_theme_load_icon(this1, icon_name1, size1, flags1, &err1)
	var ret2 *gdkpixbuf.Pixbuf
	var err2 error
	ret2 = (*gdkpixbuf.Pixbuf)(gobject.ObjectWrap(unsafe.Pointer(ret1), false))
	if err1 != nil {
		err2 = errors.New(C.GoString(((*_GError)(unsafe.Pointer(err1))).message))
		C.g_error_free(err1)
	}
	return ret2, err2
}
func (this0 *IconTheme) LookupByGIcon(icon0 gio.IconLike, size0 int, flags0 IconLookupFlags) *IconInfo {
	var this1 *C.GtkIconTheme
	var icon1 *C.GIcon
	var size1 C.int32_t
	var flags1 C.GtkIconLookupFlags
	if this0 != nil {
		this1 = this0.InheritedFromGtkIconTheme()
	}
	if icon0 != nil {
		icon1 = icon0.ImplementsGIcon()}
	size1 = C.int32_t(size0)
	flags1 = C.GtkIconLookupFlags(flags0)
	ret1 := C.gtk_icon_theme_lookup_by_gicon(this1, icon1, size1, flags1)
	var ret2 *IconInfo
	ret2 = (*IconInfo)(unsafe.Pointer(ret1))
	return ret2
}
func (this0 *IconTheme) LookupIcon(icon_name0 string, size0 int, flags0 IconLookupFlags) *IconInfo {
	var this1 *C.GtkIconTheme
	var icon_name1 *C.char
	var size1 C.int32_t
	var flags1 C.GtkIconLookupFlags
	if this0 != nil {
		this1 = this0.InheritedFromGtkIconTheme()
	}
	icon_name1 = _GoStringToGString(icon_name0)
	defer C.free(unsafe.Pointer(icon_name1))
	size1 = C.int32_t(size0)
	flags1 = C.GtkIconLookupFlags(flags0)
	ret1 := C.gtk_icon_theme_lookup_icon(this1, icon_name1, size1, flags1)
	var ret2 *IconInfo
	ret2 = (*IconInfo)(unsafe.Pointer(ret1))
	return ret2
}
func (this0 *IconTheme) PrependSearchPath(path0 string) {
	var this1 *C.GtkIconTheme
	var path1 *C.char
	if this0 != nil {
		this1 = this0.InheritedFromGtkIconTheme()
	}
	path1 = _GoStringToGString(path0)
	defer C.free(unsafe.Pointer(path1))
	C.gtk_icon_theme_prepend_search_path(this1, path1)
}
func (this0 *IconTheme) RescanIfNeeded() bool {
	var this1 *C.GtkIconTheme
	if this0 != nil {
		this1 = this0.InheritedFromGtkIconTheme()
	}
	ret1 := C.gtk_icon_theme_rescan_if_needed(this1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *IconTheme) SetCustomTheme(theme_name0 string) {
	var this1 *C.GtkIconTheme
	var theme_name1 *C.char
	if this0 != nil {
		this1 = this0.InheritedFromGtkIconTheme()
	}
	theme_name1 = _GoStringToGString(theme_name0)
	defer C.free(unsafe.Pointer(theme_name1))
	C.gtk_icon_theme_set_custom_theme(this1, theme_name1)
}
func (this0 *IconTheme) SetScreen(screen0 gdk.ScreenLike) {
	var this1 *C.GtkIconTheme
	var screen1 *C.GdkScreen
	if this0 != nil {
		this1 = this0.InheritedFromGtkIconTheme()
	}
	if screen0 != nil {
		screen1 = screen0.InheritedFromGdkScreen()
	}
	C.gtk_icon_theme_set_screen(this1, screen1)
}
func (this0 *IconTheme) SetSearchPath(path0 []string) {
	var this1 *C.GtkIconTheme
	var path1 **C.char
	var n_elements1 C.int32_t
	if this0 != nil {
		this1 = this0.InheritedFromGtkIconTheme()
	}
	path1 = (**C.char)(C.malloc(C.size_t(int(unsafe.Sizeof(*path1)) * len(path0))))
	defer C.free(unsafe.Pointer(path1))
	for i, e := range path0 {
		(*(*[999999]*C.char)(unsafe.Pointer(path1)))[i] = _GoStringToGString(e)
		defer C.free(unsafe.Pointer((*(*[999999]*C.char)(unsafe.Pointer(path1)))[i]))
	}
	n_elements1 = C.int32_t(len(path0))
	C.gtk_icon_theme_set_search_path(this1, path1, n_elements1)
}
type IconThemeError C.uint32_t
const (
	IconThemeErrorNotFound IconThemeError = 0
	IconThemeErrorFailed IconThemeError = 1
)
type IconViewLike interface {
	ContainerLike
	InheritedFromGtkIconView() *C.GtkIconView
}

type IconView struct {
	Container
	atk.ImplementorIfaceImpl
	BuildableImpl
	CellLayoutImpl
	ScrollableImpl
}

func ToIconView(objlike gobject.ObjectLike) *IconView {
	c := objlike.InheritedFromGObject()
	if c == nil {
		return nil
	}
	t := (*IconView)(nil).GetStaticType()
	obj := gobject.ObjectGrabIfType(unsafe.Pointer(c), t)
	if obj != nil {
		return (*IconView)(obj)
	}
	panic("cannot cast to IconView")
}

func (this0 *IconView) InheritedFromGtkIconView() *C.GtkIconView {
	if this0 == nil {
		return nil
	}
	return (*C.GtkIconView)(this0.C)
}

func (this0 *IconView) GetStaticType() gobject.Type {
	return gobject.Type(C.gtk_icon_view_get_type())
}

func IconViewGetType() gobject.Type {
	return (*IconView)(nil).GetStaticType()
}
func NewIconView() *IconView {
	ret1 := C.gtk_icon_view_new()
	var ret2 *IconView
	ret2 = (*IconView)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
func NewIconViewWithArea(area0 CellAreaLike) *IconView {
	var area1 *C.GtkCellArea
	if area0 != nil {
		area1 = area0.InheritedFromGtkCellArea()
	}
	ret1 := C.gtk_icon_view_new_with_area(area1)
	var ret2 *IconView
	ret2 = (*IconView)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
func NewIconViewWithModel(model0 TreeModelLike) *IconView {
	var model1 *C.GtkTreeModel
	if model0 != nil {
		model1 = model0.ImplementsGtkTreeModel()}
	ret1 := C.gtk_icon_view_new_with_model(model1)
	var ret2 *IconView
	ret2 = (*IconView)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
func (this0 *IconView) ConvertWidgetToBinWindowCoords(wx0 int, wy0 int) (int, int) {
	var this1 *C.GtkIconView
	var wx1 C.int32_t
	var wy1 C.int32_t
	var bx1 C.int32_t
	var by1 C.int32_t
	if this0 != nil {
		this1 = this0.InheritedFromGtkIconView()
	}
	wx1 = C.int32_t(wx0)
	wy1 = C.int32_t(wy0)
	C.gtk_icon_view_convert_widget_to_bin_window_coords(this1, wx1, wy1, &bx1, &by1)
	var bx2 int
	var by2 int
	bx2 = int(bx1)
	by2 = int(by1)
	return bx2, by2
}
func (this0 *IconView) CreateDragIcon(path0 *TreePath) *cairo.Surface {
	var this1 *C.GtkIconView
	var path1 *C.GtkTreePath
	if this0 != nil {
		this1 = this0.InheritedFromGtkIconView()
	}
	path1 = (*C.GtkTreePath)(unsafe.Pointer(path0))
	ret1 := C.gtk_icon_view_create_drag_icon(this1, path1)
	var ret2 *cairo.Surface
	ret2 = (*cairo.Surface)(cairo.SurfaceWrap(unsafe.Pointer(ret1), false))
	return ret2
}
func (this0 *IconView) EnableModelDragDest(targets0 []TargetEntry, actions0 gdk.DragAction) {
	var this1 *C.GtkIconView
	var targets1 *C.GtkTargetEntry
	var n_targets1 C.int32_t
	var actions1 C.GdkDragAction
	if this0 != nil {
		this1 = this0.InheritedFromGtkIconView()
	}
	targets1 = (*C.GtkTargetEntry)(C.malloc(C.size_t(int(unsafe.Sizeof(*targets1)) * len(targets0))))
	defer C.free(unsafe.Pointer(targets1))
	for i, e := range targets0 {
		(*(*[999999]C.GtkTargetEntry)(unsafe.Pointer(targets1)))[i] = *(*C.GtkTargetEntry)(unsafe.Pointer(&e))
	}
	n_targets1 = C.int32_t(len(targets0))
	actions1 = C.GdkDragAction(actions0)
	C.gtk_icon_view_enable_model_drag_dest(this1, targets1, n_targets1, actions1)
}
func (this0 *IconView) EnableModelDragSource(start_button_mask0 gdk.ModifierType, targets0 []TargetEntry, actions0 gdk.DragAction) {
	var this1 *C.GtkIconView
	var start_button_mask1 C.GdkModifierType
	var targets1 *C.GtkTargetEntry
	var n_targets1 C.int32_t
	var actions1 C.GdkDragAction
	if this0 != nil {
		this1 = this0.InheritedFromGtkIconView()
	}
	start_button_mask1 = C.GdkModifierType(start_button_mask0)
	targets1 = (*C.GtkTargetEntry)(C.malloc(C.size_t(int(unsafe.Sizeof(*targets1)) * len(targets0))))
	defer C.free(unsafe.Pointer(targets1))
	for i, e := range targets0 {
		(*(*[999999]C.GtkTargetEntry)(unsafe.Pointer(targets1)))[i] = *(*C.GtkTargetEntry)(unsafe.Pointer(&e))
	}
	n_targets1 = C.int32_t(len(targets0))
	actions1 = C.GdkDragAction(actions0)
	C.gtk_icon_view_enable_model_drag_source(this1, start_button_mask1, targets1, n_targets1, actions1)
}
func (this0 *IconView) GetColumnSpacing() int {
	var this1 *C.GtkIconView
	if this0 != nil {
		this1 = this0.InheritedFromGtkIconView()
	}
	ret1 := C.gtk_icon_view_get_column_spacing(this1)
	var ret2 int
	ret2 = int(ret1)
	return ret2
}
func (this0 *IconView) GetColumns() int {
	var this1 *C.GtkIconView
	if this0 != nil {
		this1 = this0.InheritedFromGtkIconView()
	}
	ret1 := C.gtk_icon_view_get_columns(this1)
	var ret2 int
	ret2 = int(ret1)
	return ret2
}
func (this0 *IconView) GetCursor() (*TreePath, *CellRenderer, bool) {
	var this1 *C.GtkIconView
	var path1 *C.GtkTreePath
	var cell1 *C.GtkCellRenderer
	if this0 != nil {
		this1 = this0.InheritedFromGtkIconView()
	}
	ret1 := C.gtk_icon_view_get_cursor(this1, &path1, &cell1)
	var path2 *TreePath
	var cell2 *CellRenderer
	var ret2 bool
	path2 = (*TreePath)(unsafe.Pointer(path1))
	cell2 = (*CellRenderer)(gobject.ObjectWrap(unsafe.Pointer(cell1), false))
	ret2 = ret1 != 0
	return path2, cell2, ret2
}
func (this0 *IconView) GetDestItemAtPos(drag_x0 int, drag_y0 int) (*TreePath, IconViewDropPosition, bool) {
	var this1 *C.GtkIconView
	var drag_x1 C.int32_t
	var drag_y1 C.int32_t
	var path1 *C.GtkTreePath
	var pos1 C.GtkIconViewDropPosition
	if this0 != nil {
		this1 = this0.InheritedFromGtkIconView()
	}
	drag_x1 = C.int32_t(drag_x0)
	drag_y1 = C.int32_t(drag_y0)
	ret1 := C.gtk_icon_view_get_dest_item_at_pos(this1, drag_x1, drag_y1, &path1, &pos1)
	var path2 *TreePath
	var pos2 IconViewDropPosition
	var ret2 bool
	path2 = (*TreePath)(unsafe.Pointer(path1))
	pos2 = IconViewDropPosition(pos1)
	ret2 = ret1 != 0
	return path2, pos2, ret2
}
func (this0 *IconView) GetDragDestItem() (*TreePath, IconViewDropPosition) {
	var this1 *C.GtkIconView
	var path1 *C.GtkTreePath
	var pos1 C.GtkIconViewDropPosition
	if this0 != nil {
		this1 = this0.InheritedFromGtkIconView()
	}
	C.gtk_icon_view_get_drag_dest_item(this1, &path1, &pos1)
	var path2 *TreePath
	var pos2 IconViewDropPosition
	path2 = (*TreePath)(unsafe.Pointer(path1))
	pos2 = IconViewDropPosition(pos1)
	return path2, pos2
}
func (this0 *IconView) GetItemAtPos(x0 int, y0 int) (*TreePath, *CellRenderer, bool) {
	var this1 *C.GtkIconView
	var x1 C.int32_t
	var y1 C.int32_t
	var path1 *C.GtkTreePath
	var cell1 *C.GtkCellRenderer
	if this0 != nil {
		this1 = this0.InheritedFromGtkIconView()
	}
	x1 = C.int32_t(x0)
	y1 = C.int32_t(y0)
	ret1 := C.gtk_icon_view_get_item_at_pos(this1, x1, y1, &path1, &cell1)
	var path2 *TreePath
	var cell2 *CellRenderer
	var ret2 bool
	path2 = (*TreePath)(unsafe.Pointer(path1))
	cell2 = (*CellRenderer)(gobject.ObjectWrap(unsafe.Pointer(cell1), false))
	ret2 = ret1 != 0
	return path2, cell2, ret2
}
func (this0 *IconView) GetItemColumn(path0 *TreePath) int {
	var this1 *C.GtkIconView
	var path1 *C.GtkTreePath
	if this0 != nil {
		this1 = this0.InheritedFromGtkIconView()
	}
	path1 = (*C.GtkTreePath)(unsafe.Pointer(path0))
	ret1 := C.gtk_icon_view_get_item_column(this1, path1)
	var ret2 int
	ret2 = int(ret1)
	return ret2
}
func (this0 *IconView) GetItemOrientation() Orientation {
	var this1 *C.GtkIconView
	if this0 != nil {
		this1 = this0.InheritedFromGtkIconView()
	}
	ret1 := C.gtk_icon_view_get_item_orientation(this1)
	var ret2 Orientation
	ret2 = Orientation(ret1)
	return ret2
}
func (this0 *IconView) GetItemPadding() int {
	var this1 *C.GtkIconView
	if this0 != nil {
		this1 = this0.InheritedFromGtkIconView()
	}
	ret1 := C.gtk_icon_view_get_item_padding(this1)
	var ret2 int
	ret2 = int(ret1)
	return ret2
}
func (this0 *IconView) GetItemRow(path0 *TreePath) int {
	var this1 *C.GtkIconView
	var path1 *C.GtkTreePath
	if this0 != nil {
		this1 = this0.InheritedFromGtkIconView()
	}
	path1 = (*C.GtkTreePath)(unsafe.Pointer(path0))
	ret1 := C.gtk_icon_view_get_item_row(this1, path1)
	var ret2 int
	ret2 = int(ret1)
	return ret2
}
func (this0 *IconView) GetItemWidth() int {
	var this1 *C.GtkIconView
	if this0 != nil {
		this1 = this0.InheritedFromGtkIconView()
	}
	ret1 := C.gtk_icon_view_get_item_width(this1)
	var ret2 int
	ret2 = int(ret1)
	return ret2
}
func (this0 *IconView) GetMargin() int {
	var this1 *C.GtkIconView
	if this0 != nil {
		this1 = this0.InheritedFromGtkIconView()
	}
	ret1 := C.gtk_icon_view_get_margin(this1)
	var ret2 int
	ret2 = int(ret1)
	return ret2
}
func (this0 *IconView) GetMarkupColumn() int {
	var this1 *C.GtkIconView
	if this0 != nil {
		this1 = this0.InheritedFromGtkIconView()
	}
	ret1 := C.gtk_icon_view_get_markup_column(this1)
	var ret2 int
	ret2 = int(ret1)
	return ret2
}
func (this0 *IconView) GetModel() *TreeModel {
	var this1 *C.GtkIconView
	if this0 != nil {
		this1 = this0.InheritedFromGtkIconView()
	}
	ret1 := C.gtk_icon_view_get_model(this1)
	var ret2 *TreeModel
	ret2 = (*TreeModel)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
func (this0 *IconView) GetPathAtPos(x0 int, y0 int) *TreePath {
	var this1 *C.GtkIconView
	var x1 C.int32_t
	var y1 C.int32_t
	if this0 != nil {
		this1 = this0.InheritedFromGtkIconView()
	}
	x1 = C.int32_t(x0)
	y1 = C.int32_t(y0)
	ret1 := C.gtk_icon_view_get_path_at_pos(this1, x1, y1)
	var ret2 *TreePath
	ret2 = (*TreePath)(unsafe.Pointer(ret1))
	return ret2
}
func (this0 *IconView) GetPixbufColumn() int {
	var this1 *C.GtkIconView
	if this0 != nil {
		this1 = this0.InheritedFromGtkIconView()
	}
	ret1 := C.gtk_icon_view_get_pixbuf_column(this1)
	var ret2 int
	ret2 = int(ret1)
	return ret2
}
func (this0 *IconView) GetReorderable() bool {
	var this1 *C.GtkIconView
	if this0 != nil {
		this1 = this0.InheritedFromGtkIconView()
	}
	ret1 := C.gtk_icon_view_get_reorderable(this1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *IconView) GetRowSpacing() int {
	var this1 *C.GtkIconView
	if this0 != nil {
		this1 = this0.InheritedFromGtkIconView()
	}
	ret1 := C.gtk_icon_view_get_row_spacing(this1)
	var ret2 int
	ret2 = int(ret1)
	return ret2
}
func (this0 *IconView) GetSelectedItems() []TreePath {
	var this1 *C.GtkIconView
	if this0 != nil {
		this1 = this0.InheritedFromGtkIconView()
	}
	ret1 := C.gtk_icon_view_get_selected_items(this1)
	var ret2 []TreePath
	for iter := (*_GList)(unsafe.Pointer(ret1)); iter != nil; iter = iter.next {
		var elt TreePath
		elt = *(*TreePath)(unsafe.Pointer((*C.GtkTreePath)(iter.data)))
		ret2 = append(ret2, elt)
	}
	return ret2
}
func (this0 *IconView) GetSelectionMode() SelectionMode {
	var this1 *C.GtkIconView
	if this0 != nil {
		this1 = this0.InheritedFromGtkIconView()
	}
	ret1 := C.gtk_icon_view_get_selection_mode(this1)
	var ret2 SelectionMode
	ret2 = SelectionMode(ret1)
	return ret2
}
func (this0 *IconView) GetSpacing() int {
	var this1 *C.GtkIconView
	if this0 != nil {
		this1 = this0.InheritedFromGtkIconView()
	}
	ret1 := C.gtk_icon_view_get_spacing(this1)
	var ret2 int
	ret2 = int(ret1)
	return ret2
}
func (this0 *IconView) GetTextColumn() int {
	var this1 *C.GtkIconView
	if this0 != nil {
		this1 = this0.InheritedFromGtkIconView()
	}
	ret1 := C.gtk_icon_view_get_text_column(this1)
	var ret2 int
	ret2 = int(ret1)
	return ret2
}
func (this0 *IconView) GetTooltipColumn() int {
	var this1 *C.GtkIconView
	if this0 != nil {
		this1 = this0.InheritedFromGtkIconView()
	}
	ret1 := C.gtk_icon_view_get_tooltip_column(this1)
	var ret2 int
	ret2 = int(ret1)
	return ret2
}
func (this0 *IconView) GetTooltipContext(x0 int, y0 int, keyboard_tip0 bool) (int, int, *TreeModel, *TreePath, TreeIter, bool) {
	var this1 *C.GtkIconView
	var x1 C.int32_t
	var y1 C.int32_t
	var keyboard_tip1 C.int
	var model1 *C.GtkTreeModel
	var path1 *C.GtkTreePath
	var iter1 C.GtkTreeIter
	if this0 != nil {
		this1 = this0.InheritedFromGtkIconView()
	}
	x1 = C.int32_t(x0)
	y1 = C.int32_t(y0)
	keyboard_tip1 = _GoBoolToCBool(keyboard_tip0)
	ret1 := C.gtk_icon_view_get_tooltip_context(this1, &x1, &y1, keyboard_tip1, &model1, &path1, &iter1)
	var x2 int
	var y2 int
	var model2 *TreeModel
	var path2 *TreePath
	var iter2 TreeIter
	var ret2 bool
	x2 = int(x1)
	y2 = int(y1)
	model2 = (*TreeModel)(gobject.ObjectWrap(unsafe.Pointer(model1), false))
	path2 = (*TreePath)(unsafe.Pointer(path1))
	iter2 = *(*TreeIter)(unsafe.Pointer(&iter1))
	ret2 = ret1 != 0
	return x2, y2, model2, path2, iter2, ret2
}
func (this0 *IconView) GetVisibleRange() (*TreePath, *TreePath, bool) {
	var this1 *C.GtkIconView
	var start_path1 *C.GtkTreePath
	var end_path1 *C.GtkTreePath
	if this0 != nil {
		this1 = this0.InheritedFromGtkIconView()
	}
	ret1 := C.gtk_icon_view_get_visible_range(this1, &start_path1, &end_path1)
	var start_path2 *TreePath
	var end_path2 *TreePath
	var ret2 bool
	start_path2 = (*TreePath)(unsafe.Pointer(start_path1))
	end_path2 = (*TreePath)(unsafe.Pointer(end_path1))
	ret2 = ret1 != 0
	return start_path2, end_path2, ret2
}
func (this0 *IconView) ItemActivated(path0 *TreePath) {
	var this1 *C.GtkIconView
	var path1 *C.GtkTreePath
	if this0 != nil {
		this1 = this0.InheritedFromGtkIconView()
	}
	path1 = (*C.GtkTreePath)(unsafe.Pointer(path0))
	C.gtk_icon_view_item_activated(this1, path1)
}
func (this0 *IconView) PathIsSelected(path0 *TreePath) bool {
	var this1 *C.GtkIconView
	var path1 *C.GtkTreePath
	if this0 != nil {
		this1 = this0.InheritedFromGtkIconView()
	}
	path1 = (*C.GtkTreePath)(unsafe.Pointer(path0))
	ret1 := C.gtk_icon_view_path_is_selected(this1, path1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *IconView) ScrollToPath(path0 *TreePath, use_align0 bool, row_align0 float64, col_align0 float64) {
	var this1 *C.GtkIconView
	var path1 *C.GtkTreePath
	var use_align1 C.int
	var row_align1 C.float
	var col_align1 C.float
	if this0 != nil {
		this1 = this0.InheritedFromGtkIconView()
	}
	path1 = (*C.GtkTreePath)(unsafe.Pointer(path0))
	use_align1 = _GoBoolToCBool(use_align0)
	row_align1 = C.float(row_align0)
	col_align1 = C.float(col_align0)
	C.gtk_icon_view_scroll_to_path(this1, path1, use_align1, row_align1, col_align1)
}
func (this0 *IconView) SelectAll() {
	var this1 *C.GtkIconView
	if this0 != nil {
		this1 = this0.InheritedFromGtkIconView()
	}
	C.gtk_icon_view_select_all(this1)
}
func (this0 *IconView) SelectPath(path0 *TreePath) {
	var this1 *C.GtkIconView
	var path1 *C.GtkTreePath
	if this0 != nil {
		this1 = this0.InheritedFromGtkIconView()
	}
	path1 = (*C.GtkTreePath)(unsafe.Pointer(path0))
	C.gtk_icon_view_select_path(this1, path1)
}
func (this0 *IconView) SelectedForeach(func0 IconViewForeachFunc) {
	var this1 *C.GtkIconView
	var func1 unsafe.Pointer
	if this0 != nil {
		this1 = this0.InheritedFromGtkIconView()
	}
	if func0 != nil {
		func1 = unsafe.Pointer(&func0)}
	C._gtk_icon_view_selected_foreach(this1, func1)
}
func (this0 *IconView) SetColumnSpacing(column_spacing0 int) {
	var this1 *C.GtkIconView
	var column_spacing1 C.int32_t
	if this0 != nil {
		this1 = this0.InheritedFromGtkIconView()
	}
	column_spacing1 = C.int32_t(column_spacing0)
	C.gtk_icon_view_set_column_spacing(this1, column_spacing1)
}
func (this0 *IconView) SetColumns(columns0 int) {
	var this1 *C.GtkIconView
	var columns1 C.int32_t
	if this0 != nil {
		this1 = this0.InheritedFromGtkIconView()
	}
	columns1 = C.int32_t(columns0)
	C.gtk_icon_view_set_columns(this1, columns1)
}
func (this0 *IconView) SetCursor(path0 *TreePath, cell0 CellRendererLike, start_editing0 bool) {
	var this1 *C.GtkIconView
	var path1 *C.GtkTreePath
	var cell1 *C.GtkCellRenderer
	var start_editing1 C.int
	if this0 != nil {
		this1 = this0.InheritedFromGtkIconView()
	}
	path1 = (*C.GtkTreePath)(unsafe.Pointer(path0))
	if cell0 != nil {
		cell1 = cell0.InheritedFromGtkCellRenderer()
	}
	start_editing1 = _GoBoolToCBool(start_editing0)
	C.gtk_icon_view_set_cursor(this1, path1, cell1, start_editing1)
}
func (this0 *IconView) SetDragDestItem(path0 *TreePath, pos0 IconViewDropPosition) {
	var this1 *C.GtkIconView
	var path1 *C.GtkTreePath
	var pos1 C.GtkIconViewDropPosition
	if this0 != nil {
		this1 = this0.InheritedFromGtkIconView()
	}
	path1 = (*C.GtkTreePath)(unsafe.Pointer(path0))
	pos1 = C.GtkIconViewDropPosition(pos0)
	C.gtk_icon_view_set_drag_dest_item(this1, path1, pos1)
}
func (this0 *IconView) SetItemOrientation(orientation0 Orientation) {
	var this1 *C.GtkIconView
	var orientation1 C.GtkOrientation
	if this0 != nil {
		this1 = this0.InheritedFromGtkIconView()
	}
	orientation1 = C.GtkOrientation(orientation0)
	C.gtk_icon_view_set_item_orientation(this1, orientation1)
}
func (this0 *IconView) SetItemPadding(item_padding0 int) {
	var this1 *C.GtkIconView
	var item_padding1 C.int32_t
	if this0 != nil {
		this1 = this0.InheritedFromGtkIconView()
	}
	item_padding1 = C.int32_t(item_padding0)
	C.gtk_icon_view_set_item_padding(this1, item_padding1)
}
func (this0 *IconView) SetItemWidth(item_width0 int) {
	var this1 *C.GtkIconView
	var item_width1 C.int32_t
	if this0 != nil {
		this1 = this0.InheritedFromGtkIconView()
	}
	item_width1 = C.int32_t(item_width0)
	C.gtk_icon_view_set_item_width(this1, item_width1)
}
func (this0 *IconView) SetMargin(margin0 int) {
	var this1 *C.GtkIconView
	var margin1 C.int32_t
	if this0 != nil {
		this1 = this0.InheritedFromGtkIconView()
	}
	margin1 = C.int32_t(margin0)
	C.gtk_icon_view_set_margin(this1, margin1)
}
func (this0 *IconView) SetMarkupColumn(column0 int) {
	var this1 *C.GtkIconView
	var column1 C.int32_t
	if this0 != nil {
		this1 = this0.InheritedFromGtkIconView()
	}
	column1 = C.int32_t(column0)
	C.gtk_icon_view_set_markup_column(this1, column1)
}
func (this0 *IconView) SetModel(model0 TreeModelLike) {
	var this1 *C.GtkIconView
	var model1 *C.GtkTreeModel
	if this0 != nil {
		this1 = this0.InheritedFromGtkIconView()
	}
	if model0 != nil {
		model1 = model0.ImplementsGtkTreeModel()}
	C.gtk_icon_view_set_model(this1, model1)
}
func (this0 *IconView) SetPixbufColumn(column0 int) {
	var this1 *C.GtkIconView
	var column1 C.int32_t
	if this0 != nil {
		this1 = this0.InheritedFromGtkIconView()
	}
	column1 = C.int32_t(column0)
	C.gtk_icon_view_set_pixbuf_column(this1, column1)
}
func (this0 *IconView) SetReorderable(reorderable0 bool) {
	var this1 *C.GtkIconView
	var reorderable1 C.int
	if this0 != nil {
		this1 = this0.InheritedFromGtkIconView()
	}
	reorderable1 = _GoBoolToCBool(reorderable0)
	C.gtk_icon_view_set_reorderable(this1, reorderable1)
}
func (this0 *IconView) SetRowSpacing(row_spacing0 int) {
	var this1 *C.GtkIconView
	var row_spacing1 C.int32_t
	if this0 != nil {
		this1 = this0.InheritedFromGtkIconView()
	}
	row_spacing1 = C.int32_t(row_spacing0)
	C.gtk_icon_view_set_row_spacing(this1, row_spacing1)
}
func (this0 *IconView) SetSelectionMode(mode0 SelectionMode) {
	var this1 *C.GtkIconView
	var mode1 C.GtkSelectionMode
	if this0 != nil {
		this1 = this0.InheritedFromGtkIconView()
	}
	mode1 = C.GtkSelectionMode(mode0)
	C.gtk_icon_view_set_selection_mode(this1, mode1)
}
func (this0 *IconView) SetSpacing(spacing0 int) {
	var this1 *C.GtkIconView
	var spacing1 C.int32_t
	if this0 != nil {
		this1 = this0.InheritedFromGtkIconView()
	}
	spacing1 = C.int32_t(spacing0)
	C.gtk_icon_view_set_spacing(this1, spacing1)
}
func (this0 *IconView) SetTextColumn(column0 int) {
	var this1 *C.GtkIconView
	var column1 C.int32_t
	if this0 != nil {
		this1 = this0.InheritedFromGtkIconView()
	}
	column1 = C.int32_t(column0)
	C.gtk_icon_view_set_text_column(this1, column1)
}
func (this0 *IconView) SetTooltipCell(tooltip0 TooltipLike, path0 *TreePath, cell0 CellRendererLike) {
	var this1 *C.GtkIconView
	var tooltip1 *C.GtkTooltip
	var path1 *C.GtkTreePath
	var cell1 *C.GtkCellRenderer
	if this0 != nil {
		this1 = this0.InheritedFromGtkIconView()
	}
	if tooltip0 != nil {
		tooltip1 = tooltip0.InheritedFromGtkTooltip()
	}
	path1 = (*C.GtkTreePath)(unsafe.Pointer(path0))
	if cell0 != nil {
		cell1 = cell0.InheritedFromGtkCellRenderer()
	}
	C.gtk_icon_view_set_tooltip_cell(this1, tooltip1, path1, cell1)
}
func (this0 *IconView) SetTooltipColumn(column0 int) {
	var this1 *C.GtkIconView
	var column1 C.int32_t
	if this0 != nil {
		this1 = this0.InheritedFromGtkIconView()
	}
	column1 = C.int32_t(column0)
	C.gtk_icon_view_set_tooltip_column(this1, column1)
}
func (this0 *IconView) SetTooltipItem(tooltip0 TooltipLike, path0 *TreePath) {
	var this1 *C.GtkIconView
	var tooltip1 *C.GtkTooltip
	var path1 *C.GtkTreePath
	if this0 != nil {
		this1 = this0.InheritedFromGtkIconView()
	}
	if tooltip0 != nil {
		tooltip1 = tooltip0.InheritedFromGtkTooltip()
	}
	path1 = (*C.GtkTreePath)(unsafe.Pointer(path0))
	C.gtk_icon_view_set_tooltip_item(this1, tooltip1, path1)
}
func (this0 *IconView) UnselectAll() {
	var this1 *C.GtkIconView
	if this0 != nil {
		this1 = this0.InheritedFromGtkIconView()
	}
	C.gtk_icon_view_unselect_all(this1)
}
func (this0 *IconView) UnselectPath(path0 *TreePath) {
	var this1 *C.GtkIconView
	var path1 *C.GtkTreePath
	if this0 != nil {
		this1 = this0.InheritedFromGtkIconView()
	}
	path1 = (*C.GtkTreePath)(unsafe.Pointer(path0))
	C.gtk_icon_view_unselect_path(this1, path1)
}
func (this0 *IconView) UnsetModelDragDest() {
	var this1 *C.GtkIconView
	if this0 != nil {
		this1 = this0.InheritedFromGtkIconView()
	}
	C.gtk_icon_view_unset_model_drag_dest(this1)
}
func (this0 *IconView) UnsetModelDragSource() {
	var this1 *C.GtkIconView
	if this0 != nil {
		this1 = this0.InheritedFromGtkIconView()
	}
	C.gtk_icon_view_unset_model_drag_source(this1)
}
type IconViewDropPosition C.uint32_t
const (
	IconViewDropPositionNoDrop IconViewDropPosition = 0
	IconViewDropPositionDropInto IconViewDropPosition = 1
	IconViewDropPositionDropLeft IconViewDropPosition = 2
	IconViewDropPositionDropRight IconViewDropPosition = 3
	IconViewDropPositionDropAbove IconViewDropPosition = 4
	IconViewDropPositionDropBelow IconViewDropPosition = 5
)
type IconViewForeachFunc func(icon_view *IconView, path *TreePath)
//export _GtkIconViewForeachFunc_c_wrapper
func _GtkIconViewForeachFunc_c_wrapper(icon_view0 unsafe.Pointer, path0 unsafe.Pointer, data0 unsafe.Pointer) {
	var icon_view1 *IconView
	var path1 *TreePath
	var data1 IconViewForeachFunc
	icon_view1 = (*IconView)(gobject.ObjectWrap(unsafe.Pointer((*C.GtkIconView)(icon_view0)), true))
	path1 = (*TreePath)(unsafe.Pointer((*C.GtkTreePath)(path0)))
	data1 = *(*IconViewForeachFunc)(data0)
	data1(icon_view1, path1)
}
//export _GtkIconViewForeachFunc_c_wrapper_once
func _GtkIconViewForeachFunc_c_wrapper_once(icon_view0 unsafe.Pointer, path0 unsafe.Pointer, data0 unsafe.Pointer) {
	_GtkIconViewForeachFunc_c_wrapper(icon_view0, path0, data0)
	gobject.Holder.Release(data0)
}
type ImageLike interface {
	MiscLike
	InheritedFromGtkImage() *C.GtkImage
}

type Image struct {
	Misc
	atk.ImplementorIfaceImpl
	BuildableImpl
}

func ToImage(objlike gobject.ObjectLike) *Image {
	c := objlike.InheritedFromGObject()
	if c == nil {
		return nil
	}
	t := (*Image)(nil).GetStaticType()
	obj := gobject.ObjectGrabIfType(unsafe.Pointer(c), t)
	if obj != nil {
		return (*Image)(obj)
	}
	panic("cannot cast to Image")
}

func (this0 *Image) InheritedFromGtkImage() *C.GtkImage {
	if this0 == nil {
		return nil
	}
	return (*C.GtkImage)(this0.C)
}

func (this0 *Image) GetStaticType() gobject.Type {
	return gobject.Type(C.gtk_image_get_type())
}

func ImageGetType() gobject.Type {
	return (*Image)(nil).GetStaticType()
}
func NewImage() *Image {
	ret1 := C.gtk_image_new()
	var ret2 *Image
	ret2 = (*Image)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
func NewImageFromAnimation(animation0 gdkpixbuf.PixbufAnimationLike) *Image {
	var animation1 *C.GdkPixbufAnimation
	if animation0 != nil {
		animation1 = animation0.InheritedFromGdkPixbufAnimation()
	}
	ret1 := C.gtk_image_new_from_animation(animation1)
	var ret2 *Image
	ret2 = (*Image)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
func NewImageFromFile(filename0 string) *Image {
	var filename1 *C.char
	filename1 = _GoStringToGString(filename0)
	defer C.free(unsafe.Pointer(filename1))
	ret1 := C.gtk_image_new_from_file(filename1)
	var ret2 *Image
	ret2 = (*Image)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
func NewImageFromGIcon(icon0 gio.IconLike, size0 int) *Image {
	var icon1 *C.GIcon
	var size1 C.int32_t
	if icon0 != nil {
		icon1 = icon0.ImplementsGIcon()}
	size1 = C.int32_t(size0)
	ret1 := C.gtk_image_new_from_gicon(icon1, size1)
	var ret2 *Image
	ret2 = (*Image)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
func NewImageFromIconName(icon_name0 string, size0 int) *Image {
	var icon_name1 *C.char
	var size1 C.int32_t
	icon_name1 = _GoStringToGString(icon_name0)
	defer C.free(unsafe.Pointer(icon_name1))
	size1 = C.int32_t(size0)
	ret1 := C.gtk_image_new_from_icon_name(icon_name1, size1)
	var ret2 *Image
	ret2 = (*Image)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
func NewImageFromIconSet(icon_set0 *IconSet, size0 int) *Image {
	var icon_set1 *C.GtkIconSet
	var size1 C.int32_t
	icon_set1 = (*C.GtkIconSet)(unsafe.Pointer(icon_set0))
	size1 = C.int32_t(size0)
	ret1 := C.gtk_image_new_from_icon_set(icon_set1, size1)
	var ret2 *Image
	ret2 = (*Image)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
func NewImageFromPixbuf(pixbuf0 gdkpixbuf.PixbufLike) *Image {
	var pixbuf1 *C.GdkPixbuf
	if pixbuf0 != nil {
		pixbuf1 = pixbuf0.InheritedFromGdkPixbuf()
	}
	ret1 := C.gtk_image_new_from_pixbuf(pixbuf1)
	var ret2 *Image
	ret2 = (*Image)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
func NewImageFromStock(stock_id0 string, size0 int) *Image {
	var stock_id1 *C.char
	var size1 C.int32_t
	stock_id1 = _GoStringToGString(stock_id0)
	defer C.free(unsafe.Pointer(stock_id1))
	size1 = C.int32_t(size0)
	ret1 := C.gtk_image_new_from_stock(stock_id1, size1)
	var ret2 *Image
	ret2 = (*Image)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
func (this0 *Image) Clear() {
	var this1 *C.GtkImage
	if this0 != nil {
		this1 = this0.InheritedFromGtkImage()
	}
	C.gtk_image_clear(this1)
}
func (this0 *Image) GetAnimation() *gdkpixbuf.PixbufAnimation {
	var this1 *C.GtkImage
	if this0 != nil {
		this1 = this0.InheritedFromGtkImage()
	}
	ret1 := C.gtk_image_get_animation(this1)
	var ret2 *gdkpixbuf.PixbufAnimation
	ret2 = (*gdkpixbuf.PixbufAnimation)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
func (this0 *Image) GetGIcon() (*gio.Icon, int) {
	var this1 *C.GtkImage
	var gicon1 *C.GIcon
	var size1 C.int32_t
	if this0 != nil {
		this1 = this0.InheritedFromGtkImage()
	}
	C.gtk_image_get_gicon(this1, &gicon1, &size1)
	var gicon2 *gio.Icon
	var size2 int
	gicon2 = (*gio.Icon)(gobject.ObjectWrap(unsafe.Pointer(gicon1), true))
	size2 = int(size1)
	return gicon2, size2
}
func (this0 *Image) GetIconName() (string, int) {
	var this1 *C.GtkImage
	var icon_name1 *C.char
	var size1 C.int32_t
	if this0 != nil {
		this1 = this0.InheritedFromGtkImage()
	}
	C.gtk_image_get_icon_name(this1, &icon_name1, &size1)
	var icon_name2 string
	var size2 int
	icon_name2 = C.GoString(icon_name1)
	size2 = int(size1)
	return icon_name2, size2
}
func (this0 *Image) GetIconSet() (*IconSet, int) {
	var this1 *C.GtkImage
	var icon_set1 *C.GtkIconSet
	var size1 C.int32_t
	if this0 != nil {
		this1 = this0.InheritedFromGtkImage()
	}
	C.gtk_image_get_icon_set(this1, &icon_set1, &size1)
	var icon_set2 *IconSet
	var size2 int
	icon_set2 = (*IconSet)(unsafe.Pointer(icon_set1))
	size2 = int(size1)
	return icon_set2, size2
}
func (this0 *Image) GetPixbuf() *gdkpixbuf.Pixbuf {
	var this1 *C.GtkImage
	if this0 != nil {
		this1 = this0.InheritedFromGtkImage()
	}
	ret1 := C.gtk_image_get_pixbuf(this1)
	var ret2 *gdkpixbuf.Pixbuf
	ret2 = (*gdkpixbuf.Pixbuf)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
func (this0 *Image) GetPixelSize() int {
	var this1 *C.GtkImage
	if this0 != nil {
		this1 = this0.InheritedFromGtkImage()
	}
	ret1 := C.gtk_image_get_pixel_size(this1)
	var ret2 int
	ret2 = int(ret1)
	return ret2
}
func (this0 *Image) GetStock() (string, int) {
	var this1 *C.GtkImage
	var stock_id1 *C.char
	var size1 C.int32_t
	if this0 != nil {
		this1 = this0.InheritedFromGtkImage()
	}
	C.gtk_image_get_stock(this1, &stock_id1, &size1)
	var stock_id2 string
	var size2 int
	stock_id2 = C.GoString(stock_id1)
	size2 = int(size1)
	return stock_id2, size2
}
func (this0 *Image) GetStorageType() ImageType {
	var this1 *C.GtkImage
	if this0 != nil {
		this1 = this0.InheritedFromGtkImage()
	}
	ret1 := C.gtk_image_get_storage_type(this1)
	var ret2 ImageType
	ret2 = ImageType(ret1)
	return ret2
}
func (this0 *Image) SetFromAnimation(animation0 gdkpixbuf.PixbufAnimationLike) {
	var this1 *C.GtkImage
	var animation1 *C.GdkPixbufAnimation
	if this0 != nil {
		this1 = this0.InheritedFromGtkImage()
	}
	if animation0 != nil {
		animation1 = animation0.InheritedFromGdkPixbufAnimation()
	}
	C.gtk_image_set_from_animation(this1, animation1)
}
func (this0 *Image) SetFromFile(filename0 string) {
	var this1 *C.GtkImage
	var filename1 *C.char
	if this0 != nil {
		this1 = this0.InheritedFromGtkImage()
	}
	filename1 = _GoStringToGString(filename0)
	defer C.free(unsafe.Pointer(filename1))
	C.gtk_image_set_from_file(this1, filename1)
}
func (this0 *Image) SetFromGIcon(icon0 gio.IconLike, size0 int) {
	var this1 *C.GtkImage
	var icon1 *C.GIcon
	var size1 C.int32_t
	if this0 != nil {
		this1 = this0.InheritedFromGtkImage()
	}
	if icon0 != nil {
		icon1 = icon0.ImplementsGIcon()}
	size1 = C.int32_t(size0)
	C.gtk_image_set_from_gicon(this1, icon1, size1)
}
func (this0 *Image) SetFromIconName(icon_name0 string, size0 int) {
	var this1 *C.GtkImage
	var icon_name1 *C.char
	var size1 C.int32_t
	if this0 != nil {
		this1 = this0.InheritedFromGtkImage()
	}
	icon_name1 = _GoStringToGString(icon_name0)
	defer C.free(unsafe.Pointer(icon_name1))
	size1 = C.int32_t(size0)
	C.gtk_image_set_from_icon_name(this1, icon_name1, size1)
}
func (this0 *Image) SetFromIconSet(icon_set0 *IconSet, size0 int) {
	var this1 *C.GtkImage
	var icon_set1 *C.GtkIconSet
	var size1 C.int32_t
	if this0 != nil {
		this1 = this0.InheritedFromGtkImage()
	}
	icon_set1 = (*C.GtkIconSet)(unsafe.Pointer(icon_set0))
	size1 = C.int32_t(size0)
	C.gtk_image_set_from_icon_set(this1, icon_set1, size1)
}
func (this0 *Image) SetFromPixbuf(pixbuf0 gdkpixbuf.PixbufLike) {
	var this1 *C.GtkImage
	var pixbuf1 *C.GdkPixbuf
	if this0 != nil {
		this1 = this0.InheritedFromGtkImage()
	}
	if pixbuf0 != nil {
		pixbuf1 = pixbuf0.InheritedFromGdkPixbuf()
	}
	C.gtk_image_set_from_pixbuf(this1, pixbuf1)
}
func (this0 *Image) SetFromStock(stock_id0 string, size0 int) {
	var this1 *C.GtkImage
	var stock_id1 *C.char
	var size1 C.int32_t
	if this0 != nil {
		this1 = this0.InheritedFromGtkImage()
	}
	stock_id1 = _GoStringToGString(stock_id0)
	defer C.free(unsafe.Pointer(stock_id1))
	size1 = C.int32_t(size0)
	C.gtk_image_set_from_stock(this1, stock_id1, size1)
}
func (this0 *Image) SetPixelSize(pixel_size0 int) {
	var this1 *C.GtkImage
	var pixel_size1 C.int32_t
	if this0 != nil {
		this1 = this0.InheritedFromGtkImage()
	}
	pixel_size1 = C.int32_t(pixel_size0)
	C.gtk_image_set_pixel_size(this1, pixel_size1)
}
type ImageMenuItemLike interface {
	MenuItemLike
	InheritedFromGtkImageMenuItem() *C.GtkImageMenuItem
}

type ImageMenuItem struct {
	MenuItem
	atk.ImplementorIfaceImpl
	ActivatableImpl
	BuildableImpl
}

func ToImageMenuItem(objlike gobject.ObjectLike) *ImageMenuItem {
	c := objlike.InheritedFromGObject()
	if c == nil {
		return nil
	}
	t := (*ImageMenuItem)(nil).GetStaticType()
	obj := gobject.ObjectGrabIfType(unsafe.Pointer(c), t)
	if obj != nil {
		return (*ImageMenuItem)(obj)
	}
	panic("cannot cast to ImageMenuItem")
}

func (this0 *ImageMenuItem) InheritedFromGtkImageMenuItem() *C.GtkImageMenuItem {
	if this0 == nil {
		return nil
	}
	return (*C.GtkImageMenuItem)(this0.C)
}

func (this0 *ImageMenuItem) GetStaticType() gobject.Type {
	return gobject.Type(C.gtk_image_menu_item_get_type())
}

func ImageMenuItemGetType() gobject.Type {
	return (*ImageMenuItem)(nil).GetStaticType()
}
func NewImageMenuItem() *ImageMenuItem {
	ret1 := C.gtk_image_menu_item_new()
	var ret2 *ImageMenuItem
	ret2 = (*ImageMenuItem)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
func NewImageMenuItemFromStock(stock_id0 string, accel_group0 AccelGroupLike) *ImageMenuItem {
	var stock_id1 *C.char
	var accel_group1 *C.GtkAccelGroup
	stock_id1 = _GoStringToGString(stock_id0)
	defer C.free(unsafe.Pointer(stock_id1))
	if accel_group0 != nil {
		accel_group1 = accel_group0.InheritedFromGtkAccelGroup()
	}
	ret1 := C.gtk_image_menu_item_new_from_stock(stock_id1, accel_group1)
	var ret2 *ImageMenuItem
	ret2 = (*ImageMenuItem)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
func NewImageMenuItemWithLabel(label0 string) *ImageMenuItem {
	var label1 *C.char
	label1 = _GoStringToGString(label0)
	defer C.free(unsafe.Pointer(label1))
	ret1 := C.gtk_image_menu_item_new_with_label(label1)
	var ret2 *ImageMenuItem
	ret2 = (*ImageMenuItem)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
func NewImageMenuItemWithMnemonic(label0 string) *ImageMenuItem {
	var label1 *C.char
	label1 = _GoStringToGString(label0)
	defer C.free(unsafe.Pointer(label1))
	ret1 := C.gtk_image_menu_item_new_with_mnemonic(label1)
	var ret2 *ImageMenuItem
	ret2 = (*ImageMenuItem)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
func (this0 *ImageMenuItem) GetAlwaysShowImage() bool {
	var this1 *C.GtkImageMenuItem
	if this0 != nil {
		this1 = this0.InheritedFromGtkImageMenuItem()
	}
	ret1 := C.gtk_image_menu_item_get_always_show_image(this1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *ImageMenuItem) GetImage() *Widget {
	var this1 *C.GtkImageMenuItem
	if this0 != nil {
		this1 = this0.InheritedFromGtkImageMenuItem()
	}
	ret1 := C.gtk_image_menu_item_get_image(this1)
	var ret2 *Widget
	ret2 = (*Widget)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
func (this0 *ImageMenuItem) GetUseStock() bool {
	var this1 *C.GtkImageMenuItem
	if this0 != nil {
		this1 = this0.InheritedFromGtkImageMenuItem()
	}
	ret1 := C.gtk_image_menu_item_get_use_stock(this1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *ImageMenuItem) SetAccelGroup(accel_group0 AccelGroupLike) {
	var this1 *C.GtkImageMenuItem
	var accel_group1 *C.GtkAccelGroup
	if this0 != nil {
		this1 = this0.InheritedFromGtkImageMenuItem()
	}
	if accel_group0 != nil {
		accel_group1 = accel_group0.InheritedFromGtkAccelGroup()
	}
	C.gtk_image_menu_item_set_accel_group(this1, accel_group1)
}
func (this0 *ImageMenuItem) SetAlwaysShowImage(always_show0 bool) {
	var this1 *C.GtkImageMenuItem
	var always_show1 C.int
	if this0 != nil {
		this1 = this0.InheritedFromGtkImageMenuItem()
	}
	always_show1 = _GoBoolToCBool(always_show0)
	C.gtk_image_menu_item_set_always_show_image(this1, always_show1)
}
func (this0 *ImageMenuItem) SetImage(image0 WidgetLike) {
	var this1 *C.GtkImageMenuItem
	var image1 *C.GtkWidget
	if this0 != nil {
		this1 = this0.InheritedFromGtkImageMenuItem()
	}
	if image0 != nil {
		image1 = image0.InheritedFromGtkWidget()
	}
	C.gtk_image_menu_item_set_image(this1, image1)
}
func (this0 *ImageMenuItem) SetUseStock(use_stock0 bool) {
	var this1 *C.GtkImageMenuItem
	var use_stock1 C.int
	if this0 != nil {
		this1 = this0.InheritedFromGtkImageMenuItem()
	}
	use_stock1 = _GoBoolToCBool(use_stock0)
	C.gtk_image_menu_item_set_use_stock(this1, use_stock1)
}
type ImageType C.uint32_t
const (
	ImageTypeEmpty ImageType = 0
	ImageTypePixbuf ImageType = 1
	ImageTypeStock ImageType = 2
	ImageTypeIconSet ImageType = 3
	ImageTypeAnimation ImageType = 4
	ImageTypeIconName ImageType = 5
	ImageTypeGIcon ImageType = 6
)
type InfoBarLike interface {
	BoxLike
	InheritedFromGtkInfoBar() *C.GtkInfoBar
}

type InfoBar struct {
	Box
	atk.ImplementorIfaceImpl
	BuildableImpl
	OrientableImpl
}

func ToInfoBar(objlike gobject.ObjectLike) *InfoBar {
	c := objlike.InheritedFromGObject()
	if c == nil {
		return nil
	}
	t := (*InfoBar)(nil).GetStaticType()
	obj := gobject.ObjectGrabIfType(unsafe.Pointer(c), t)
	if obj != nil {
		return (*InfoBar)(obj)
	}
	panic("cannot cast to InfoBar")
}

func (this0 *InfoBar) InheritedFromGtkInfoBar() *C.GtkInfoBar {
	if this0 == nil {
		return nil
	}
	return (*C.GtkInfoBar)(this0.C)
}

func (this0 *InfoBar) GetStaticType() gobject.Type {
	return gobject.Type(C.gtk_info_bar_get_type())
}

func InfoBarGetType() gobject.Type {
	return (*InfoBar)(nil).GetStaticType()
}
func NewInfoBar() *InfoBar {
	ret1 := C.gtk_info_bar_new()
	var ret2 *InfoBar
	ret2 = (*InfoBar)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
func (this0 *InfoBar) AddActionWidget(child0 WidgetLike, response_id0 int) {
	var this1 *C.GtkInfoBar
	var child1 *C.GtkWidget
	var response_id1 C.int32_t
	if this0 != nil {
		this1 = this0.InheritedFromGtkInfoBar()
	}
	if child0 != nil {
		child1 = child0.InheritedFromGtkWidget()
	}
	response_id1 = C.int32_t(response_id0)
	C.gtk_info_bar_add_action_widget(this1, child1, response_id1)
}
func (this0 *InfoBar) _AddButton(button_text0 string, response_id0 int) *Widget {
	var this1 *C.GtkInfoBar
	var button_text1 *C.char
	var response_id1 C.int32_t
	if this0 != nil {
		this1 = this0.InheritedFromGtkInfoBar()
	}
	button_text1 = _GoStringToGString(button_text0)
	defer C.free(unsafe.Pointer(button_text1))
	response_id1 = C.int32_t(response_id0)
	ret1 := C.gtk_info_bar_add_button(this1, button_text1, response_id1)
	var ret2 *Widget
	ret2 = (*Widget)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
func (this0 *InfoBar) GetActionArea() *Widget {
	var this1 *C.GtkInfoBar
	if this0 != nil {
		this1 = this0.InheritedFromGtkInfoBar()
	}
	ret1 := C.gtk_info_bar_get_action_area(this1)
	var ret2 *Widget
	ret2 = (*Widget)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
func (this0 *InfoBar) GetContentArea() *Widget {
	var this1 *C.GtkInfoBar
	if this0 != nil {
		this1 = this0.InheritedFromGtkInfoBar()
	}
	ret1 := C.gtk_info_bar_get_content_area(this1)
	var ret2 *Widget
	ret2 = (*Widget)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
func (this0 *InfoBar) GetMessageType() MessageType {
	var this1 *C.GtkInfoBar
	if this0 != nil {
		this1 = this0.InheritedFromGtkInfoBar()
	}
	ret1 := C.gtk_info_bar_get_message_type(this1)
	var ret2 MessageType
	ret2 = MessageType(ret1)
	return ret2
}
func (this0 *InfoBar) Response(response_id0 int) {
	var this1 *C.GtkInfoBar
	var response_id1 C.int32_t
	if this0 != nil {
		this1 = this0.InheritedFromGtkInfoBar()
	}
	response_id1 = C.int32_t(response_id0)
	C.gtk_info_bar_response(this1, response_id1)
}
func (this0 *InfoBar) SetDefaultResponse(response_id0 int) {
	var this1 *C.GtkInfoBar
	var response_id1 C.int32_t
	if this0 != nil {
		this1 = this0.InheritedFromGtkInfoBar()
	}
	response_id1 = C.int32_t(response_id0)
	C.gtk_info_bar_set_default_response(this1, response_id1)
}
func (this0 *InfoBar) SetMessageType(message_type0 MessageType) {
	var this1 *C.GtkInfoBar
	var message_type1 C.GtkMessageType
	if this0 != nil {
		this1 = this0.InheritedFromGtkInfoBar()
	}
	message_type1 = C.GtkMessageType(message_type0)
	C.gtk_info_bar_set_message_type(this1, message_type1)
}
func (this0 *InfoBar) SetResponseSensitive(response_id0 int, setting0 bool) {
	var this1 *C.GtkInfoBar
	var response_id1 C.int32_t
	var setting1 C.int
	if this0 != nil {
		this1 = this0.InheritedFromGtkInfoBar()
	}
	response_id1 = C.int32_t(response_id0)
	setting1 = _GoBoolToCBool(setting0)
	C.gtk_info_bar_set_response_sensitive(this1, response_id1, setting1)
}
type InvisibleLike interface {
	WidgetLike
	InheritedFromGtkInvisible() *C.GtkInvisible
}

type Invisible struct {
	Widget
	atk.ImplementorIfaceImpl
	BuildableImpl
}

func ToInvisible(objlike gobject.ObjectLike) *Invisible {
	c := objlike.InheritedFromGObject()
	if c == nil {
		return nil
	}
	t := (*Invisible)(nil).GetStaticType()
	obj := gobject.ObjectGrabIfType(unsafe.Pointer(c), t)
	if obj != nil {
		return (*Invisible)(obj)
	}
	panic("cannot cast to Invisible")
}

func (this0 *Invisible) InheritedFromGtkInvisible() *C.GtkInvisible {
	if this0 == nil {
		return nil
	}
	return (*C.GtkInvisible)(this0.C)
}

func (this0 *Invisible) GetStaticType() gobject.Type {
	return gobject.Type(C.gtk_invisible_get_type())
}

func InvisibleGetType() gobject.Type {
	return (*Invisible)(nil).GetStaticType()
}
func NewInvisible() *Invisible {
	ret1 := C.gtk_invisible_new()
	var ret2 *Invisible
	ret2 = (*Invisible)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
func NewInvisibleForScreen(screen0 gdk.ScreenLike) *Invisible {
	var screen1 *C.GdkScreen
	if screen0 != nil {
		screen1 = screen0.InheritedFromGdkScreen()
	}
	ret1 := C.gtk_invisible_new_for_screen(screen1)
	var ret2 *Invisible
	ret2 = (*Invisible)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
func (this0 *Invisible) GetScreen() *gdk.Screen {
	var this1 *C.GtkInvisible
	if this0 != nil {
		this1 = this0.InheritedFromGtkInvisible()
	}
	ret1 := C.gtk_invisible_get_screen(this1)
	var ret2 *gdk.Screen
	ret2 = (*gdk.Screen)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
func (this0 *Invisible) SetScreen(screen0 gdk.ScreenLike) {
	var this1 *C.GtkInvisible
	var screen1 *C.GdkScreen
	if this0 != nil {
		this1 = this0.InheritedFromGtkInvisible()
	}
	if screen0 != nil {
		screen1 = screen0.InheritedFromGdkScreen()
	}
	C.gtk_invisible_set_screen(this1, screen1)
}
type JunctionSides C.uint32_t
const (
	JunctionSidesNone JunctionSides = 0
	JunctionSidesCornerTopleft JunctionSides = 1
	JunctionSidesCornerTopright JunctionSides = 2
	JunctionSidesCornerBottomleft JunctionSides = 4
	JunctionSidesCornerBottomright JunctionSides = 8
	JunctionSidesTop JunctionSides = 3
	JunctionSidesBottom JunctionSides = 12
	JunctionSidesLeft JunctionSides = 5
	JunctionSidesRight JunctionSides = 10
)
type Justification C.uint32_t
const (
	JustificationLeft Justification = 0
	JustificationRight Justification = 1
	JustificationCenter Justification = 2
	JustificationFill Justification = 3
)
type KeySnoopFunc func(grab_widget *Widget, event *gdk.EventKey) int
//export _GtkKeySnoopFunc_c_wrapper
func _GtkKeySnoopFunc_c_wrapper(grab_widget0 unsafe.Pointer, event0 unsafe.Pointer, func_data0 unsafe.Pointer) int32 {
	var grab_widget1 *Widget
	var event1 *gdk.EventKey
	var func_data1 KeySnoopFunc
	grab_widget1 = (*Widget)(gobject.ObjectWrap(unsafe.Pointer((*C.GtkWidget)(grab_widget0)), true))
	event1 = (*gdk.EventKey)(unsafe.Pointer((*C.GdkEventKey)(event0)))
	func_data1 = *(*KeySnoopFunc)(func_data0)
	ret1 := func_data1(grab_widget1, event1)
	var ret2 C.int32_t
	ret2 = C.int32_t(ret1)
	return (int32)(ret2)
}
//export _GtkKeySnoopFunc_c_wrapper_once
func _GtkKeySnoopFunc_c_wrapper_once(grab_widget0 unsafe.Pointer, event0 unsafe.Pointer, func_data0 unsafe.Pointer) int32 {
	ret := _GtkKeySnoopFunc_c_wrapper(grab_widget0, event0, func_data0)
	gobject.Holder.Release(func_data0)
	return ret
}
type LabelLike interface {
	MiscLike
	InheritedFromGtkLabel() *C.GtkLabel
}

type Label struct {
	Misc
	atk.ImplementorIfaceImpl
	BuildableImpl
}

func ToLabel(objlike gobject.ObjectLike) *Label {
	c := objlike.InheritedFromGObject()
	if c == nil {
		return nil
	}
	t := (*Label)(nil).GetStaticType()
	obj := gobject.ObjectGrabIfType(unsafe.Pointer(c), t)
	if obj != nil {
		return (*Label)(obj)
	}
	panic("cannot cast to Label")
}

func (this0 *Label) InheritedFromGtkLabel() *C.GtkLabel {
	if this0 == nil {
		return nil
	}
	return (*C.GtkLabel)(this0.C)
}

func (this0 *Label) GetStaticType() gobject.Type {
	return gobject.Type(C.gtk_label_get_type())
}

func LabelGetType() gobject.Type {
	return (*Label)(nil).GetStaticType()
}
func NewLabel(str0 string) *Label {
	var str1 *C.char
	str1 = _GoStringToGString(str0)
	defer C.free(unsafe.Pointer(str1))
	ret1 := C.gtk_label_new(str1)
	var ret2 *Label
	ret2 = (*Label)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
func NewLabelWithMnemonic(str0 string) *Label {
	var str1 *C.char
	str1 = _GoStringToGString(str0)
	defer C.free(unsafe.Pointer(str1))
	ret1 := C.gtk_label_new_with_mnemonic(str1)
	var ret2 *Label
	ret2 = (*Label)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
func (this0 *Label) GetAngle() float64 {
	var this1 *C.GtkLabel
	if this0 != nil {
		this1 = this0.InheritedFromGtkLabel()
	}
	ret1 := C.gtk_label_get_angle(this1)
	var ret2 float64
	ret2 = float64(ret1)
	return ret2
}
func (this0 *Label) GetAttributes() *pango.AttrList {
	var this1 *C.GtkLabel
	if this0 != nil {
		this1 = this0.InheritedFromGtkLabel()
	}
	ret1 := C.gtk_label_get_attributes(this1)
	var ret2 *pango.AttrList
	ret2 = (*pango.AttrList)(unsafe.Pointer(ret1))
	return ret2
}
func (this0 *Label) GetCurrentURI() string {
	var this1 *C.GtkLabel
	if this0 != nil {
		this1 = this0.InheritedFromGtkLabel()
	}
	ret1 := C.gtk_label_get_current_uri(this1)
	var ret2 string
	ret2 = C.GoString(ret1)
	return ret2
}
func (this0 *Label) GetEllipsize() pango.EllipsizeMode {
	var this1 *C.GtkLabel
	if this0 != nil {
		this1 = this0.InheritedFromGtkLabel()
	}
	ret1 := C.gtk_label_get_ellipsize(this1)
	var ret2 pango.EllipsizeMode
	ret2 = pango.EllipsizeMode(ret1)
	return ret2
}
func (this0 *Label) GetJustify() Justification {
	var this1 *C.GtkLabel
	if this0 != nil {
		this1 = this0.InheritedFromGtkLabel()
	}
	ret1 := C.gtk_label_get_justify(this1)
	var ret2 Justification
	ret2 = Justification(ret1)
	return ret2
}
func (this0 *Label) GetLabel() string {
	var this1 *C.GtkLabel
	if this0 != nil {
		this1 = this0.InheritedFromGtkLabel()
	}
	ret1 := C.gtk_label_get_label(this1)
	var ret2 string
	ret2 = C.GoString(ret1)
	return ret2
}
func (this0 *Label) GetLayout() *pango.Layout {
	var this1 *C.GtkLabel
	if this0 != nil {
		this1 = this0.InheritedFromGtkLabel()
	}
	ret1 := C.gtk_label_get_layout(this1)
	var ret2 *pango.Layout
	ret2 = (*pango.Layout)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
func (this0 *Label) GetLayoutOffsets() (int, int) {
	var this1 *C.GtkLabel
	var x1 C.int32_t
	var y1 C.int32_t
	if this0 != nil {
		this1 = this0.InheritedFromGtkLabel()
	}
	C.gtk_label_get_layout_offsets(this1, &x1, &y1)
	var x2 int
	var y2 int
	x2 = int(x1)
	y2 = int(y1)
	return x2, y2
}
func (this0 *Label) GetLineWrap() bool {
	var this1 *C.GtkLabel
	if this0 != nil {
		this1 = this0.InheritedFromGtkLabel()
	}
	ret1 := C.gtk_label_get_line_wrap(this1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *Label) GetLineWrapMode() pango.WrapMode {
	var this1 *C.GtkLabel
	if this0 != nil {
		this1 = this0.InheritedFromGtkLabel()
	}
	ret1 := C.gtk_label_get_line_wrap_mode(this1)
	var ret2 pango.WrapMode
	ret2 = pango.WrapMode(ret1)
	return ret2
}
func (this0 *Label) GetMaxWidthChars() int {
	var this1 *C.GtkLabel
	if this0 != nil {
		this1 = this0.InheritedFromGtkLabel()
	}
	ret1 := C.gtk_label_get_max_width_chars(this1)
	var ret2 int
	ret2 = int(ret1)
	return ret2
}
func (this0 *Label) GetMnemonicKeyval() int {
	var this1 *C.GtkLabel
	if this0 != nil {
		this1 = this0.InheritedFromGtkLabel()
	}
	ret1 := C.gtk_label_get_mnemonic_keyval(this1)
	var ret2 int
	ret2 = int(ret1)
	return ret2
}
func (this0 *Label) GetMnemonicWidget() *Widget {
	var this1 *C.GtkLabel
	if this0 != nil {
		this1 = this0.InheritedFromGtkLabel()
	}
	ret1 := C.gtk_label_get_mnemonic_widget(this1)
	var ret2 *Widget
	ret2 = (*Widget)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
func (this0 *Label) GetSelectable() bool {
	var this1 *C.GtkLabel
	if this0 != nil {
		this1 = this0.InheritedFromGtkLabel()
	}
	ret1 := C.gtk_label_get_selectable(this1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *Label) GetSelectionBounds() (int, int, bool) {
	var this1 *C.GtkLabel
	var start1 C.int32_t
	var end1 C.int32_t
	if this0 != nil {
		this1 = this0.InheritedFromGtkLabel()
	}
	ret1 := C.gtk_label_get_selection_bounds(this1, &start1, &end1)
	var start2 int
	var end2 int
	var ret2 bool
	start2 = int(start1)
	end2 = int(end1)
	ret2 = ret1 != 0
	return start2, end2, ret2
}
func (this0 *Label) GetSingleLineMode() bool {
	var this1 *C.GtkLabel
	if this0 != nil {
		this1 = this0.InheritedFromGtkLabel()
	}
	ret1 := C.gtk_label_get_single_line_mode(this1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *Label) GetText() string {
	var this1 *C.GtkLabel
	if this0 != nil {
		this1 = this0.InheritedFromGtkLabel()
	}
	ret1 := C.gtk_label_get_text(this1)
	var ret2 string
	ret2 = C.GoString(ret1)
	return ret2
}
func (this0 *Label) GetTrackVisitedLinks() bool {
	var this1 *C.GtkLabel
	if this0 != nil {
		this1 = this0.InheritedFromGtkLabel()
	}
	ret1 := C.gtk_label_get_track_visited_links(this1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *Label) GetUseMarkup() bool {
	var this1 *C.GtkLabel
	if this0 != nil {
		this1 = this0.InheritedFromGtkLabel()
	}
	ret1 := C.gtk_label_get_use_markup(this1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *Label) GetUseUnderline() bool {
	var this1 *C.GtkLabel
	if this0 != nil {
		this1 = this0.InheritedFromGtkLabel()
	}
	ret1 := C.gtk_label_get_use_underline(this1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *Label) GetWidthChars() int {
	var this1 *C.GtkLabel
	if this0 != nil {
		this1 = this0.InheritedFromGtkLabel()
	}
	ret1 := C.gtk_label_get_width_chars(this1)
	var ret2 int
	ret2 = int(ret1)
	return ret2
}
func (this0 *Label) SelectRegion(start_offset0 int, end_offset0 int) {
	var this1 *C.GtkLabel
	var start_offset1 C.int32_t
	var end_offset1 C.int32_t
	if this0 != nil {
		this1 = this0.InheritedFromGtkLabel()
	}
	start_offset1 = C.int32_t(start_offset0)
	end_offset1 = C.int32_t(end_offset0)
	C.gtk_label_select_region(this1, start_offset1, end_offset1)
}
func (this0 *Label) SetAngle(angle0 float64) {
	var this1 *C.GtkLabel
	var angle1 C.double
	if this0 != nil {
		this1 = this0.InheritedFromGtkLabel()
	}
	angle1 = C.double(angle0)
	C.gtk_label_set_angle(this1, angle1)
}
func (this0 *Label) SetAttributes(attrs0 *pango.AttrList) {
	var this1 *C.GtkLabel
	var attrs1 *C.PangoAttrList
	if this0 != nil {
		this1 = this0.InheritedFromGtkLabel()
	}
	attrs1 = (*C.PangoAttrList)(unsafe.Pointer(attrs0))
	C.gtk_label_set_attributes(this1, attrs1)
}
func (this0 *Label) SetEllipsize(mode0 pango.EllipsizeMode) {
	var this1 *C.GtkLabel
	var mode1 C.PangoEllipsizeMode
	if this0 != nil {
		this1 = this0.InheritedFromGtkLabel()
	}
	mode1 = C.PangoEllipsizeMode(mode0)
	C.gtk_label_set_ellipsize(this1, mode1)
}
func (this0 *Label) SetJustify(jtype0 Justification) {
	var this1 *C.GtkLabel
	var jtype1 C.GtkJustification
	if this0 != nil {
		this1 = this0.InheritedFromGtkLabel()
	}
	jtype1 = C.GtkJustification(jtype0)
	C.gtk_label_set_justify(this1, jtype1)
}
func (this0 *Label) SetLabel(str0 string) {
	var this1 *C.GtkLabel
	var str1 *C.char
	if this0 != nil {
		this1 = this0.InheritedFromGtkLabel()
	}
	str1 = _GoStringToGString(str0)
	defer C.free(unsafe.Pointer(str1))
	C.gtk_label_set_label(this1, str1)
}
func (this0 *Label) SetLineWrap(wrap0 bool) {
	var this1 *C.GtkLabel
	var wrap1 C.int
	if this0 != nil {
		this1 = this0.InheritedFromGtkLabel()
	}
	wrap1 = _GoBoolToCBool(wrap0)
	C.gtk_label_set_line_wrap(this1, wrap1)
}
func (this0 *Label) SetLineWrapMode(wrap_mode0 pango.WrapMode) {
	var this1 *C.GtkLabel
	var wrap_mode1 C.PangoWrapMode
	if this0 != nil {
		this1 = this0.InheritedFromGtkLabel()
	}
	wrap_mode1 = C.PangoWrapMode(wrap_mode0)
	C.gtk_label_set_line_wrap_mode(this1, wrap_mode1)
}
func (this0 *Label) SetMarkup(str0 string) {
	var this1 *C.GtkLabel
	var str1 *C.char
	if this0 != nil {
		this1 = this0.InheritedFromGtkLabel()
	}
	str1 = _GoStringToGString(str0)
	defer C.free(unsafe.Pointer(str1))
	C.gtk_label_set_markup(this1, str1)
}
func (this0 *Label) SetMarkupWithMnemonic(str0 string) {
	var this1 *C.GtkLabel
	var str1 *C.char
	if this0 != nil {
		this1 = this0.InheritedFromGtkLabel()
	}
	str1 = _GoStringToGString(str0)
	defer C.free(unsafe.Pointer(str1))
	C.gtk_label_set_markup_with_mnemonic(this1, str1)
}
func (this0 *Label) SetMaxWidthChars(n_chars0 int) {
	var this1 *C.GtkLabel
	var n_chars1 C.int32_t
	if this0 != nil {
		this1 = this0.InheritedFromGtkLabel()
	}
	n_chars1 = C.int32_t(n_chars0)
	C.gtk_label_set_max_width_chars(this1, n_chars1)
}
func (this0 *Label) SetMnemonicWidget(widget0 WidgetLike) {
	var this1 *C.GtkLabel
	var widget1 *C.GtkWidget
	if this0 != nil {
		this1 = this0.InheritedFromGtkLabel()
	}
	if widget0 != nil {
		widget1 = widget0.InheritedFromGtkWidget()
	}
	C.gtk_label_set_mnemonic_widget(this1, widget1)
}
func (this0 *Label) SetPattern(pattern0 string) {
	var this1 *C.GtkLabel
	var pattern1 *C.char
	if this0 != nil {
		this1 = this0.InheritedFromGtkLabel()
	}
	pattern1 = _GoStringToGString(pattern0)
	defer C.free(unsafe.Pointer(pattern1))
	C.gtk_label_set_pattern(this1, pattern1)
}
func (this0 *Label) SetSelectable(setting0 bool) {
	var this1 *C.GtkLabel
	var setting1 C.int
	if this0 != nil {
		this1 = this0.InheritedFromGtkLabel()
	}
	setting1 = _GoBoolToCBool(setting0)
	C.gtk_label_set_selectable(this1, setting1)
}
func (this0 *Label) SetSingleLineMode(single_line_mode0 bool) {
	var this1 *C.GtkLabel
	var single_line_mode1 C.int
	if this0 != nil {
		this1 = this0.InheritedFromGtkLabel()
	}
	single_line_mode1 = _GoBoolToCBool(single_line_mode0)
	C.gtk_label_set_single_line_mode(this1, single_line_mode1)
}
func (this0 *Label) SetText(str0 string) {
	var this1 *C.GtkLabel
	var str1 *C.char
	if this0 != nil {
		this1 = this0.InheritedFromGtkLabel()
	}
	str1 = _GoStringToGString(str0)
	defer C.free(unsafe.Pointer(str1))
	C.gtk_label_set_text(this1, str1)
}
func (this0 *Label) SetTextWithMnemonic(str0 string) {
	var this1 *C.GtkLabel
	var str1 *C.char
	if this0 != nil {
		this1 = this0.InheritedFromGtkLabel()
	}
	str1 = _GoStringToGString(str0)
	defer C.free(unsafe.Pointer(str1))
	C.gtk_label_set_text_with_mnemonic(this1, str1)
}
func (this0 *Label) SetTrackVisitedLinks(track_links0 bool) {
	var this1 *C.GtkLabel
	var track_links1 C.int
	if this0 != nil {
		this1 = this0.InheritedFromGtkLabel()
	}
	track_links1 = _GoBoolToCBool(track_links0)
	C.gtk_label_set_track_visited_links(this1, track_links1)
}
func (this0 *Label) SetUseMarkup(setting0 bool) {
	var this1 *C.GtkLabel
	var setting1 C.int
	if this0 != nil {
		this1 = this0.InheritedFromGtkLabel()
	}
	setting1 = _GoBoolToCBool(setting0)
	C.gtk_label_set_use_markup(this1, setting1)
}
func (this0 *Label) SetUseUnderline(setting0 bool) {
	var this1 *C.GtkLabel
	var setting1 C.int
	if this0 != nil {
		this1 = this0.InheritedFromGtkLabel()
	}
	setting1 = _GoBoolToCBool(setting0)
	C.gtk_label_set_use_underline(this1, setting1)
}
func (this0 *Label) SetWidthChars(n_chars0 int) {
	var this1 *C.GtkLabel
	var n_chars1 C.int32_t
	if this0 != nil {
		this1 = this0.InheritedFromGtkLabel()
	}
	n_chars1 = C.int32_t(n_chars0)
	C.gtk_label_set_width_chars(this1, n_chars1)
}
type LabelSelectionInfo struct {}
type LayoutLike interface {
	ContainerLike
	InheritedFromGtkLayout() *C.GtkLayout
}

type Layout struct {
	Container
	atk.ImplementorIfaceImpl
	BuildableImpl
	ScrollableImpl
}

func ToLayout(objlike gobject.ObjectLike) *Layout {
	c := objlike.InheritedFromGObject()
	if c == nil {
		return nil
	}
	t := (*Layout)(nil).GetStaticType()
	obj := gobject.ObjectGrabIfType(unsafe.Pointer(c), t)
	if obj != nil {
		return (*Layout)(obj)
	}
	panic("cannot cast to Layout")
}

func (this0 *Layout) InheritedFromGtkLayout() *C.GtkLayout {
	if this0 == nil {
		return nil
	}
	return (*C.GtkLayout)(this0.C)
}

func (this0 *Layout) GetStaticType() gobject.Type {
	return gobject.Type(C.gtk_layout_get_type())
}

func LayoutGetType() gobject.Type {
	return (*Layout)(nil).GetStaticType()
}
func NewLayout(hadjustment0 AdjustmentLike, vadjustment0 AdjustmentLike) *Layout {
	var hadjustment1 *C.GtkAdjustment
	var vadjustment1 *C.GtkAdjustment
	if hadjustment0 != nil {
		hadjustment1 = hadjustment0.InheritedFromGtkAdjustment()
	}
	if vadjustment0 != nil {
		vadjustment1 = vadjustment0.InheritedFromGtkAdjustment()
	}
	ret1 := C.gtk_layout_new(hadjustment1, vadjustment1)
	var ret2 *Layout
	ret2 = (*Layout)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
func (this0 *Layout) GetBinWindow() *gdk.Window {
	var this1 *C.GtkLayout
	if this0 != nil {
		this1 = this0.InheritedFromGtkLayout()
	}
	ret1 := C.gtk_layout_get_bin_window(this1)
	var ret2 *gdk.Window
	ret2 = (*gdk.Window)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
func (this0 *Layout) GetHAdjustment() *Adjustment {
	var this1 *C.GtkLayout
	if this0 != nil {
		this1 = this0.InheritedFromGtkLayout()
	}
	ret1 := C.gtk_layout_get_hadjustment(this1)
	var ret2 *Adjustment
	ret2 = (*Adjustment)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
func (this0 *Layout) GetSize() (int, int) {
	var this1 *C.GtkLayout
	var width1 C.uint32_t
	var height1 C.uint32_t
	if this0 != nil {
		this1 = this0.InheritedFromGtkLayout()
	}
	C.gtk_layout_get_size(this1, &width1, &height1)
	var width2 int
	var height2 int
	width2 = int(width1)
	height2 = int(height1)
	return width2, height2
}
func (this0 *Layout) GetVAdjustment() *Adjustment {
	var this1 *C.GtkLayout
	if this0 != nil {
		this1 = this0.InheritedFromGtkLayout()
	}
	ret1 := C.gtk_layout_get_vadjustment(this1)
	var ret2 *Adjustment
	ret2 = (*Adjustment)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
func (this0 *Layout) Move(child_widget0 WidgetLike, x0 int, y0 int) {
	var this1 *C.GtkLayout
	var child_widget1 *C.GtkWidget
	var x1 C.int32_t
	var y1 C.int32_t
	if this0 != nil {
		this1 = this0.InheritedFromGtkLayout()
	}
	if child_widget0 != nil {
		child_widget1 = child_widget0.InheritedFromGtkWidget()
	}
	x1 = C.int32_t(x0)
	y1 = C.int32_t(y0)
	C.gtk_layout_move(this1, child_widget1, x1, y1)
}
func (this0 *Layout) Put(child_widget0 WidgetLike, x0 int, y0 int) {
	var this1 *C.GtkLayout
	var child_widget1 *C.GtkWidget
	var x1 C.int32_t
	var y1 C.int32_t
	if this0 != nil {
		this1 = this0.InheritedFromGtkLayout()
	}
	if child_widget0 != nil {
		child_widget1 = child_widget0.InheritedFromGtkWidget()
	}
	x1 = C.int32_t(x0)
	y1 = C.int32_t(y0)
	C.gtk_layout_put(this1, child_widget1, x1, y1)
}
func (this0 *Layout) SetHAdjustment(adjustment0 AdjustmentLike) {
	var this1 *C.GtkLayout
	var adjustment1 *C.GtkAdjustment
	if this0 != nil {
		this1 = this0.InheritedFromGtkLayout()
	}
	if adjustment0 != nil {
		adjustment1 = adjustment0.InheritedFromGtkAdjustment()
	}
	C.gtk_layout_set_hadjustment(this1, adjustment1)
}
func (this0 *Layout) SetSize(width0 int, height0 int) {
	var this1 *C.GtkLayout
	var width1 C.uint32_t
	var height1 C.uint32_t
	if this0 != nil {
		this1 = this0.InheritedFromGtkLayout()
	}
	width1 = C.uint32_t(width0)
	height1 = C.uint32_t(height0)
	C.gtk_layout_set_size(this1, width1, height1)
}
func (this0 *Layout) SetVAdjustment(adjustment0 AdjustmentLike) {
	var this1 *C.GtkLayout
	var adjustment1 *C.GtkAdjustment
	if this0 != nil {
		this1 = this0.InheritedFromGtkLayout()
	}
	if adjustment0 != nil {
		adjustment1 = adjustment0.InheritedFromGtkAdjustment()
	}
	C.gtk_layout_set_vadjustment(this1, adjustment1)
}
type License C.uint32_t
const (
	LicenseUnknown License = 0
	LicenseCustom License = 1
	LicenseGpl20 License = 2
	LicenseGpl30 License = 3
	LicenseLgpl21 License = 4
	LicenseLgpl30 License = 5
	LicenseBsd License = 6
	LicenseMitX11 License = 7
	LicenseArtistic License = 8
)
type LinkButtonLike interface {
	ButtonLike
	InheritedFromGtkLinkButton() *C.GtkLinkButton
}

type LinkButton struct {
	Button
	atk.ImplementorIfaceImpl
	ActivatableImpl
	BuildableImpl
}

func ToLinkButton(objlike gobject.ObjectLike) *LinkButton {
	c := objlike.InheritedFromGObject()
	if c == nil {
		return nil
	}
	t := (*LinkButton)(nil).GetStaticType()
	obj := gobject.ObjectGrabIfType(unsafe.Pointer(c), t)
	if obj != nil {
		return (*LinkButton)(obj)
	}
	panic("cannot cast to LinkButton")
}

func (this0 *LinkButton) InheritedFromGtkLinkButton() *C.GtkLinkButton {
	if this0 == nil {
		return nil
	}
	return (*C.GtkLinkButton)(this0.C)
}

func (this0 *LinkButton) GetStaticType() gobject.Type {
	return gobject.Type(C.gtk_link_button_get_type())
}

func LinkButtonGetType() gobject.Type {
	return (*LinkButton)(nil).GetStaticType()
}
func NewLinkButton(uri0 string) *LinkButton {
	var uri1 *C.char
	uri1 = _GoStringToGString(uri0)
	defer C.free(unsafe.Pointer(uri1))
	ret1 := C.gtk_link_button_new(uri1)
	var ret2 *LinkButton
	ret2 = (*LinkButton)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
func NewLinkButtonWithLabel(uri0 string, label0 string) *LinkButton {
	var uri1 *C.char
	var label1 *C.char
	uri1 = _GoStringToGString(uri0)
	defer C.free(unsafe.Pointer(uri1))
	label1 = _GoStringToGString(label0)
	defer C.free(unsafe.Pointer(label1))
	ret1 := C.gtk_link_button_new_with_label(uri1, label1)
	var ret2 *LinkButton
	ret2 = (*LinkButton)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
func (this0 *LinkButton) GetURI() string {
	var this1 *C.GtkLinkButton
	if this0 != nil {
		this1 = this0.InheritedFromGtkLinkButton()
	}
	ret1 := C.gtk_link_button_get_uri(this1)
	var ret2 string
	ret2 = C.GoString(ret1)
	return ret2
}
func (this0 *LinkButton) GetVisited() bool {
	var this1 *C.GtkLinkButton
	if this0 != nil {
		this1 = this0.InheritedFromGtkLinkButton()
	}
	ret1 := C.gtk_link_button_get_visited(this1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *LinkButton) SetURI(uri0 string) {
	var this1 *C.GtkLinkButton
	var uri1 *C.char
	if this0 != nil {
		this1 = this0.InheritedFromGtkLinkButton()
	}
	uri1 = _GoStringToGString(uri0)
	defer C.free(unsafe.Pointer(uri1))
	C.gtk_link_button_set_uri(this1, uri1)
}
func (this0 *LinkButton) SetVisited(visited0 bool) {
	var this1 *C.GtkLinkButton
	var visited1 C.int
	if this0 != nil {
		this1 = this0.InheritedFromGtkLinkButton()
	}
	visited1 = _GoBoolToCBool(visited0)
	C.gtk_link_button_set_visited(this1, visited1)
}
type ListStoreLike interface {
	gobject.ObjectLike
	InheritedFromGtkListStore() *C.GtkListStore
}

type ListStore struct {
	gobject.Object
	BuildableImpl
	TreeDragDestImpl
	TreeDragSourceImpl
	TreeModelImpl
	TreeSortableImpl
}

func ToListStore(objlike gobject.ObjectLike) *ListStore {
	c := objlike.InheritedFromGObject()
	if c == nil {
		return nil
	}
	t := (*ListStore)(nil).GetStaticType()
	obj := gobject.ObjectGrabIfType(unsafe.Pointer(c), t)
	if obj != nil {
		return (*ListStore)(obj)
	}
	panic("cannot cast to ListStore")
}

func (this0 *ListStore) InheritedFromGtkListStore() *C.GtkListStore {
	if this0 == nil {
		return nil
	}
	return (*C.GtkListStore)(this0.C)
}

func (this0 *ListStore) GetStaticType() gobject.Type {
	return gobject.Type(C.gtk_list_store_get_type())
}

func ListStoreGetType() gobject.Type {
	return (*ListStore)(nil).GetStaticType()
}
func _NewListStore(types0 []gobject.Type) *ListStore {
	var types1 *C.GType
	var n_columns1 C.int32_t
	types1 = (*C.GType)(C.malloc(C.size_t(int(unsafe.Sizeof(*types1)) * len(types0))))
	defer C.free(unsafe.Pointer(types1))
	for i, e := range types0 {
		(*(*[999999]C.GType)(unsafe.Pointer(types1)))[i] = C.GType(e)
	}
	n_columns1 = C.int32_t(len(types0))
	ret1 := C.gtk_list_store_newv(n_columns1, types1)
	var ret2 *ListStore
	ret2 = (*ListStore)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
func (this0 *ListStore) _Append() TreeIter {
	var this1 *C.GtkListStore
	var iter1 C.GtkTreeIter
	if this0 != nil {
		this1 = this0.InheritedFromGtkListStore()
	}
	C.gtk_list_store_append(this1, &iter1)
	var iter2 TreeIter
	iter2 = *(*TreeIter)(unsafe.Pointer(&iter1))
	return iter2
}
func (this0 *ListStore) Clear() {
	var this1 *C.GtkListStore
	if this0 != nil {
		this1 = this0.InheritedFromGtkListStore()
	}
	C.gtk_list_store_clear(this1)
}
func (this0 *ListStore) Insert(position0 int) TreeIter {
	var this1 *C.GtkListStore
	var position1 C.int32_t
	var iter1 C.GtkTreeIter
	if this0 != nil {
		this1 = this0.InheritedFromGtkListStore()
	}
	position1 = C.int32_t(position0)
	C.gtk_list_store_insert(this1, &iter1, position1)
	var iter2 TreeIter
	iter2 = *(*TreeIter)(unsafe.Pointer(&iter1))
	return iter2
}
func (this0 *ListStore) InsertAfter(sibling0 *TreeIter) TreeIter {
	var this1 *C.GtkListStore
	var sibling1 *C.GtkTreeIter
	var iter1 C.GtkTreeIter
	if this0 != nil {
		this1 = this0.InheritedFromGtkListStore()
	}
	sibling1 = (*C.GtkTreeIter)(unsafe.Pointer(sibling0))
	C.gtk_list_store_insert_after(this1, &iter1, sibling1)
	var iter2 TreeIter
	iter2 = *(*TreeIter)(unsafe.Pointer(&iter1))
	return iter2
}
func (this0 *ListStore) InsertBefore(sibling0 *TreeIter) TreeIter {
	var this1 *C.GtkListStore
	var sibling1 *C.GtkTreeIter
	var iter1 C.GtkTreeIter
	if this0 != nil {
		this1 = this0.InheritedFromGtkListStore()
	}
	sibling1 = (*C.GtkTreeIter)(unsafe.Pointer(sibling0))
	C.gtk_list_store_insert_before(this1, &iter1, sibling1)
	var iter2 TreeIter
	iter2 = *(*TreeIter)(unsafe.Pointer(&iter1))
	return iter2
}
// blacklisted: ListStore.insert_with_valuesv (method)
func (this0 *ListStore) IterIsValid(iter0 *TreeIter) bool {
	var this1 *C.GtkListStore
	var iter1 *C.GtkTreeIter
	if this0 != nil {
		this1 = this0.InheritedFromGtkListStore()
	}
	iter1 = (*C.GtkTreeIter)(unsafe.Pointer(iter0))
	ret1 := C.gtk_list_store_iter_is_valid(this1, iter1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *ListStore) MoveAfter(iter0 *TreeIter, position0 *TreeIter) {
	var this1 *C.GtkListStore
	var iter1 *C.GtkTreeIter
	var position1 *C.GtkTreeIter
	if this0 != nil {
		this1 = this0.InheritedFromGtkListStore()
	}
	iter1 = (*C.GtkTreeIter)(unsafe.Pointer(iter0))
	position1 = (*C.GtkTreeIter)(unsafe.Pointer(position0))
	C.gtk_list_store_move_after(this1, iter1, position1)
}
func (this0 *ListStore) MoveBefore(iter0 *TreeIter, position0 *TreeIter) {
	var this1 *C.GtkListStore
	var iter1 *C.GtkTreeIter
	var position1 *C.GtkTreeIter
	if this0 != nil {
		this1 = this0.InheritedFromGtkListStore()
	}
	iter1 = (*C.GtkTreeIter)(unsafe.Pointer(iter0))
	position1 = (*C.GtkTreeIter)(unsafe.Pointer(position0))
	C.gtk_list_store_move_before(this1, iter1, position1)
}
func (this0 *ListStore) Prepend() TreeIter {
	var this1 *C.GtkListStore
	var iter1 C.GtkTreeIter
	if this0 != nil {
		this1 = this0.InheritedFromGtkListStore()
	}
	C.gtk_list_store_prepend(this1, &iter1)
	var iter2 TreeIter
	iter2 = *(*TreeIter)(unsafe.Pointer(&iter1))
	return iter2
}
func (this0 *ListStore) Remove(iter0 *TreeIter) bool {
	var this1 *C.GtkListStore
	var iter1 *C.GtkTreeIter
	if this0 != nil {
		this1 = this0.InheritedFromGtkListStore()
	}
	iter1 = (*C.GtkTreeIter)(unsafe.Pointer(iter0))
	ret1 := C.gtk_list_store_remove(this1, iter1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *ListStore) SetColumnTypes(types0 []gobject.Type) {
	var this1 *C.GtkListStore
	var types1 *C.GType
	var n_columns1 C.int32_t
	if this0 != nil {
		this1 = this0.InheritedFromGtkListStore()
	}
	types1 = (*C.GType)(C.malloc(C.size_t(int(unsafe.Sizeof(*types1)) * len(types0))))
	defer C.free(unsafe.Pointer(types1))
	for i, e := range types0 {
		(*(*[999999]C.GType)(unsafe.Pointer(types1)))[i] = C.GType(e)
	}
	n_columns1 = C.int32_t(len(types0))
	C.gtk_list_store_set_column_types(this1, n_columns1, types1)
}
func (this0 *ListStore) SetValue(iter0 *TreeIter, column0 int, value0 *gobject.Value) {
	var this1 *C.GtkListStore
	var iter1 *C.GtkTreeIter
	var column1 C.int32_t
	var value1 *C.GValue
	if this0 != nil {
		this1 = this0.InheritedFromGtkListStore()
	}
	iter1 = (*C.GtkTreeIter)(unsafe.Pointer(iter0))
	column1 = C.int32_t(column0)
	value1 = (*C.GValue)(unsafe.Pointer(value0))
	C.gtk_list_store_set_value(this1, iter1, column1, value1)
}
// blacklisted: ListStore.set (method)
func (this0 *ListStore) Swap(a0 *TreeIter, b0 *TreeIter) {
	var this1 *C.GtkListStore
	var a1 *C.GtkTreeIter
	var b1 *C.GtkTreeIter
	if this0 != nil {
		this1 = this0.InheritedFromGtkListStore()
	}
	a1 = (*C.GtkTreeIter)(unsafe.Pointer(a0))
	b1 = (*C.GtkTreeIter)(unsafe.Pointer(b0))
	C.gtk_list_store_swap(this1, a1, b1)
}
type LockButtonLike interface {
	ButtonLike
	InheritedFromGtkLockButton() *C.GtkLockButton
}

type LockButton struct {
	Button
	atk.ImplementorIfaceImpl
	ActivatableImpl
	BuildableImpl
}

func ToLockButton(objlike gobject.ObjectLike) *LockButton {
	c := objlike.InheritedFromGObject()
	if c == nil {
		return nil
	}
	t := (*LockButton)(nil).GetStaticType()
	obj := gobject.ObjectGrabIfType(unsafe.Pointer(c), t)
	if obj != nil {
		return (*LockButton)(obj)
	}
	panic("cannot cast to LockButton")
}

func (this0 *LockButton) InheritedFromGtkLockButton() *C.GtkLockButton {
	if this0 == nil {
		return nil
	}
	return (*C.GtkLockButton)(this0.C)
}

func (this0 *LockButton) GetStaticType() gobject.Type {
	return gobject.Type(C.gtk_lock_button_get_type())
}

func LockButtonGetType() gobject.Type {
	return (*LockButton)(nil).GetStaticType()
}
func NewLockButton(permission0 gio.PermissionLike) *LockButton {
	var permission1 *C.GPermission
	if permission0 != nil {
		permission1 = permission0.InheritedFromGPermission()
	}
	ret1 := C.gtk_lock_button_new(permission1)
	var ret2 *LockButton
	ret2 = (*LockButton)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
func (this0 *LockButton) SetPermission(permission0 gio.PermissionLike) {
	var this1 *C.GtkLockButton
	var permission1 *C.GPermission
	if this0 != nil {
		this1 = this0.InheritedFromGtkLockButton()
	}
	if permission0 != nil {
		permission1 = permission0.InheritedFromGPermission()
	}
	C.gtk_lock_button_set_permission(this1, permission1)
}
const MajorVersion = 3
const MaxComposeLen = 7
const MicroVersion = 3
const MinorVersion = 2
type MenuLike interface {
	MenuShellLike
	InheritedFromGtkMenu() *C.GtkMenu
}

type Menu struct {
	MenuShell
	atk.ImplementorIfaceImpl
	BuildableImpl
}

func ToMenu(objlike gobject.ObjectLike) *Menu {
	c := objlike.InheritedFromGObject()
	if c == nil {
		return nil
	}
	t := (*Menu)(nil).GetStaticType()
	obj := gobject.ObjectGrabIfType(unsafe.Pointer(c), t)
	if obj != nil {
		return (*Menu)(obj)
	}
	panic("cannot cast to Menu")
}

func (this0 *Menu) InheritedFromGtkMenu() *C.GtkMenu {
	if this0 == nil {
		return nil
	}
	return (*C.GtkMenu)(this0.C)
}

func (this0 *Menu) GetStaticType() gobject.Type {
	return gobject.Type(C.gtk_menu_get_type())
}

func MenuGetType() gobject.Type {
	return (*Menu)(nil).GetStaticType()
}
func NewMenu() *Menu {
	ret1 := C.gtk_menu_new()
	var ret2 *Menu
	ret2 = (*Menu)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
func MenuGetForAttachWidget(widget0 WidgetLike) []*Widget {
	var widget1 *C.GtkWidget
	if widget0 != nil {
		widget1 = widget0.InheritedFromGtkWidget()
	}
	ret1 := C.gtk_menu_get_for_attach_widget(widget1)
	var ret2 []*Widget
	for iter := (*_GList)(unsafe.Pointer(ret1)); iter != nil; iter = iter.next {
		var elt *Widget
		elt = (*Widget)(gobject.ObjectWrap(unsafe.Pointer((*C.GtkWidget)(iter.data)), true))
		ret2 = append(ret2, elt)
	}
	return ret2
}
func (this0 *Menu) Attach(child0 WidgetLike, left_attach0 int, right_attach0 int, top_attach0 int, bottom_attach0 int) {
	var this1 *C.GtkMenu
	var child1 *C.GtkWidget
	var left_attach1 C.uint32_t
	var right_attach1 C.uint32_t
	var top_attach1 C.uint32_t
	var bottom_attach1 C.uint32_t
	if this0 != nil {
		this1 = this0.InheritedFromGtkMenu()
	}
	if child0 != nil {
		child1 = child0.InheritedFromGtkWidget()
	}
	left_attach1 = C.uint32_t(left_attach0)
	right_attach1 = C.uint32_t(right_attach0)
	top_attach1 = C.uint32_t(top_attach0)
	bottom_attach1 = C.uint32_t(bottom_attach0)
	C.gtk_menu_attach(this1, child1, left_attach1, right_attach1, top_attach1, bottom_attach1)
}
// blacklisted: Menu.attach_to_widget (method)
func (this0 *Menu) Detach() {
	var this1 *C.GtkMenu
	if this0 != nil {
		this1 = this0.InheritedFromGtkMenu()
	}
	C.gtk_menu_detach(this1)
}
func (this0 *Menu) GetAccelGroup() *AccelGroup {
	var this1 *C.GtkMenu
	if this0 != nil {
		this1 = this0.InheritedFromGtkMenu()
	}
	ret1 := C.gtk_menu_get_accel_group(this1)
	var ret2 *AccelGroup
	ret2 = (*AccelGroup)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
func (this0 *Menu) GetAccelPath() string {
	var this1 *C.GtkMenu
	if this0 != nil {
		this1 = this0.InheritedFromGtkMenu()
	}
	ret1 := C.gtk_menu_get_accel_path(this1)
	var ret2 string
	ret2 = C.GoString(ret1)
	return ret2
}
func (this0 *Menu) GetActive() *Widget {
	var this1 *C.GtkMenu
	if this0 != nil {
		this1 = this0.InheritedFromGtkMenu()
	}
	ret1 := C.gtk_menu_get_active(this1)
	var ret2 *Widget
	ret2 = (*Widget)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
func (this0 *Menu) GetAttachWidget() *Widget {
	var this1 *C.GtkMenu
	if this0 != nil {
		this1 = this0.InheritedFromGtkMenu()
	}
	ret1 := C.gtk_menu_get_attach_widget(this1)
	var ret2 *Widget
	ret2 = (*Widget)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
func (this0 *Menu) GetMonitor() int {
	var this1 *C.GtkMenu
	if this0 != nil {
		this1 = this0.InheritedFromGtkMenu()
	}
	ret1 := C.gtk_menu_get_monitor(this1)
	var ret2 int
	ret2 = int(ret1)
	return ret2
}
func (this0 *Menu) GetReserveToggleSize() bool {
	var this1 *C.GtkMenu
	if this0 != nil {
		this1 = this0.InheritedFromGtkMenu()
	}
	ret1 := C.gtk_menu_get_reserve_toggle_size(this1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *Menu) GetTearoffState() bool {
	var this1 *C.GtkMenu
	if this0 != nil {
		this1 = this0.InheritedFromGtkMenu()
	}
	ret1 := C.gtk_menu_get_tearoff_state(this1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *Menu) GetTitle() string {
	var this1 *C.GtkMenu
	if this0 != nil {
		this1 = this0.InheritedFromGtkMenu()
	}
	ret1 := C.gtk_menu_get_title(this1)
	var ret2 string
	ret2 = C.GoString(ret1)
	return ret2
}
func (this0 *Menu) Popdown() {
	var this1 *C.GtkMenu
	if this0 != nil {
		this1 = this0.InheritedFromGtkMenu()
	}
	C.gtk_menu_popdown(this1)
}
func (this0 *Menu) PopupForDevice(device0 gdk.DeviceLike, parent_menu_shell0 WidgetLike, parent_menu_item0 WidgetLike, func0 MenuPositionFunc, button0 int, activate_time0 int) {
	var this1 *C.GtkMenu
	var device1 *C.GdkDevice
	var parent_menu_shell1 *C.GtkWidget
	var parent_menu_item1 *C.GtkWidget
	var func1 unsafe.Pointer
	var button1 C.uint32_t
	var activate_time1 C.uint32_t
	if this0 != nil {
		this1 = this0.InheritedFromGtkMenu()
	}
	if device0 != nil {
		device1 = device0.InheritedFromGdkDevice()
	}
	if parent_menu_shell0 != nil {
		parent_menu_shell1 = parent_menu_shell0.InheritedFromGtkWidget()
	}
	if parent_menu_item0 != nil {
		parent_menu_item1 = parent_menu_item0.InheritedFromGtkWidget()
	}
	if func0 != nil {
		func1 = unsafe.Pointer(&func0)}
	gobject.Holder.Grab(func1)
	button1 = C.uint32_t(button0)
	activate_time1 = C.uint32_t(activate_time0)
	C._gtk_menu_popup_for_device(this1, device1, parent_menu_shell1, parent_menu_item1, func1, button1, activate_time1)
}
func (this0 *Menu) ReorderChild(child0 WidgetLike, position0 int) {
	var this1 *C.GtkMenu
	var child1 *C.GtkWidget
	var position1 C.int32_t
	if this0 != nil {
		this1 = this0.InheritedFromGtkMenu()
	}
	if child0 != nil {
		child1 = child0.InheritedFromGtkWidget()
	}
	position1 = C.int32_t(position0)
	C.gtk_menu_reorder_child(this1, child1, position1)
}
func (this0 *Menu) Reposition() {
	var this1 *C.GtkMenu
	if this0 != nil {
		this1 = this0.InheritedFromGtkMenu()
	}
	C.gtk_menu_reposition(this1)
}
func (this0 *Menu) SetAccelGroup(accel_group0 AccelGroupLike) {
	var this1 *C.GtkMenu
	var accel_group1 *C.GtkAccelGroup
	if this0 != nil {
		this1 = this0.InheritedFromGtkMenu()
	}
	if accel_group0 != nil {
		accel_group1 = accel_group0.InheritedFromGtkAccelGroup()
	}
	C.gtk_menu_set_accel_group(this1, accel_group1)
}
func (this0 *Menu) SetAccelPath(accel_path0 string) {
	var this1 *C.GtkMenu
	var accel_path1 *C.char
	if this0 != nil {
		this1 = this0.InheritedFromGtkMenu()
	}
	accel_path1 = _GoStringToGString(accel_path0)
	defer C.free(unsafe.Pointer(accel_path1))
	C.gtk_menu_set_accel_path(this1, accel_path1)
}
func (this0 *Menu) SetActive(index0 int) {
	var this1 *C.GtkMenu
	var index1 C.uint32_t
	if this0 != nil {
		this1 = this0.InheritedFromGtkMenu()
	}
	index1 = C.uint32_t(index0)
	C.gtk_menu_set_active(this1, index1)
}
func (this0 *Menu) SetMonitor(monitor_num0 int) {
	var this1 *C.GtkMenu
	var monitor_num1 C.int32_t
	if this0 != nil {
		this1 = this0.InheritedFromGtkMenu()
	}
	monitor_num1 = C.int32_t(monitor_num0)
	C.gtk_menu_set_monitor(this1, monitor_num1)
}
func (this0 *Menu) SetReserveToggleSize(reserve_toggle_size0 bool) {
	var this1 *C.GtkMenu
	var reserve_toggle_size1 C.int
	if this0 != nil {
		this1 = this0.InheritedFromGtkMenu()
	}
	reserve_toggle_size1 = _GoBoolToCBool(reserve_toggle_size0)
	C.gtk_menu_set_reserve_toggle_size(this1, reserve_toggle_size1)
}
func (this0 *Menu) SetScreen(screen0 gdk.ScreenLike) {
	var this1 *C.GtkMenu
	var screen1 *C.GdkScreen
	if this0 != nil {
		this1 = this0.InheritedFromGtkMenu()
	}
	if screen0 != nil {
		screen1 = screen0.InheritedFromGdkScreen()
	}
	C.gtk_menu_set_screen(this1, screen1)
}
func (this0 *Menu) SetTearoffState(torn_off0 bool) {
	var this1 *C.GtkMenu
	var torn_off1 C.int
	if this0 != nil {
		this1 = this0.InheritedFromGtkMenu()
	}
	torn_off1 = _GoBoolToCBool(torn_off0)
	C.gtk_menu_set_tearoff_state(this1, torn_off1)
}
func (this0 *Menu) SetTitle(title0 string) {
	var this1 *C.GtkMenu
	var title1 *C.char
	if this0 != nil {
		this1 = this0.InheritedFromGtkMenu()
	}
	title1 = _GoStringToGString(title0)
	defer C.free(unsafe.Pointer(title1))
	C.gtk_menu_set_title(this1, title1)
}
type MenuBarLike interface {
	MenuShellLike
	InheritedFromGtkMenuBar() *C.GtkMenuBar
}

type MenuBar struct {
	MenuShell
	atk.ImplementorIfaceImpl
	BuildableImpl
}

func ToMenuBar(objlike gobject.ObjectLike) *MenuBar {
	c := objlike.InheritedFromGObject()
	if c == nil {
		return nil
	}
	t := (*MenuBar)(nil).GetStaticType()
	obj := gobject.ObjectGrabIfType(unsafe.Pointer(c), t)
	if obj != nil {
		return (*MenuBar)(obj)
	}
	panic("cannot cast to MenuBar")
}

func (this0 *MenuBar) InheritedFromGtkMenuBar() *C.GtkMenuBar {
	if this0 == nil {
		return nil
	}
	return (*C.GtkMenuBar)(this0.C)
}

func (this0 *MenuBar) GetStaticType() gobject.Type {
	return gobject.Type(C.gtk_menu_bar_get_type())
}

func MenuBarGetType() gobject.Type {
	return (*MenuBar)(nil).GetStaticType()
}
func NewMenuBar() *MenuBar {
	ret1 := C.gtk_menu_bar_new()
	var ret2 *MenuBar
	ret2 = (*MenuBar)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
func (this0 *MenuBar) GetChildPackDirection() PackDirection {
	var this1 *C.GtkMenuBar
	if this0 != nil {
		this1 = this0.InheritedFromGtkMenuBar()
	}
	ret1 := C.gtk_menu_bar_get_child_pack_direction(this1)
	var ret2 PackDirection
	ret2 = PackDirection(ret1)
	return ret2
}
func (this0 *MenuBar) GetPackDirection() PackDirection {
	var this1 *C.GtkMenuBar
	if this0 != nil {
		this1 = this0.InheritedFromGtkMenuBar()
	}
	ret1 := C.gtk_menu_bar_get_pack_direction(this1)
	var ret2 PackDirection
	ret2 = PackDirection(ret1)
	return ret2
}
func (this0 *MenuBar) SetChildPackDirection(child_pack_dir0 PackDirection) {
	var this1 *C.GtkMenuBar
	var child_pack_dir1 C.GtkPackDirection
	if this0 != nil {
		this1 = this0.InheritedFromGtkMenuBar()
	}
	child_pack_dir1 = C.GtkPackDirection(child_pack_dir0)
	C.gtk_menu_bar_set_child_pack_direction(this1, child_pack_dir1)
}
func (this0 *MenuBar) SetPackDirection(pack_dir0 PackDirection) {
	var this1 *C.GtkMenuBar
	var pack_dir1 C.GtkPackDirection
	if this0 != nil {
		this1 = this0.InheritedFromGtkMenuBar()
	}
	pack_dir1 = C.GtkPackDirection(pack_dir0)
	C.gtk_menu_bar_set_pack_direction(this1, pack_dir1)
}
// blacklisted (no userdata): type MenuDetachFunc func(attach_widget *Widget, menu *Menu)
type MenuDirectionType C.uint32_t
const (
	MenuDirectionTypeParent MenuDirectionType = 0
	MenuDirectionTypeChild MenuDirectionType = 1
	MenuDirectionTypeNext MenuDirectionType = 2
	MenuDirectionTypePrev MenuDirectionType = 3
)
type MenuItemLike interface {
	BinLike
	InheritedFromGtkMenuItem() *C.GtkMenuItem
}

type MenuItem struct {
	Bin
	atk.ImplementorIfaceImpl
	ActivatableImpl
	BuildableImpl
}

func ToMenuItem(objlike gobject.ObjectLike) *MenuItem {
	c := objlike.InheritedFromGObject()
	if c == nil {
		return nil
	}
	t := (*MenuItem)(nil).GetStaticType()
	obj := gobject.ObjectGrabIfType(unsafe.Pointer(c), t)
	if obj != nil {
		return (*MenuItem)(obj)
	}
	panic("cannot cast to MenuItem")
}

func (this0 *MenuItem) InheritedFromGtkMenuItem() *C.GtkMenuItem {
	if this0 == nil {
		return nil
	}
	return (*C.GtkMenuItem)(this0.C)
}

func (this0 *MenuItem) GetStaticType() gobject.Type {
	return gobject.Type(C.gtk_menu_item_get_type())
}

func MenuItemGetType() gobject.Type {
	return (*MenuItem)(nil).GetStaticType()
}
func NewMenuItem() *MenuItem {
	ret1 := C.gtk_menu_item_new()
	var ret2 *MenuItem
	ret2 = (*MenuItem)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
func NewMenuItemWithLabel(label0 string) *MenuItem {
	var label1 *C.char
	label1 = _GoStringToGString(label0)
	defer C.free(unsafe.Pointer(label1))
	ret1 := C.gtk_menu_item_new_with_label(label1)
	var ret2 *MenuItem
	ret2 = (*MenuItem)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
func NewMenuItemWithMnemonic(label0 string) *MenuItem {
	var label1 *C.char
	label1 = _GoStringToGString(label0)
	defer C.free(unsafe.Pointer(label1))
	ret1 := C.gtk_menu_item_new_with_mnemonic(label1)
	var ret2 *MenuItem
	ret2 = (*MenuItem)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
func (this0 *MenuItem) Activate() {
	var this1 *C.GtkMenuItem
	if this0 != nil {
		this1 = this0.InheritedFromGtkMenuItem()
	}
	C.gtk_menu_item_activate(this1)
}
func (this0 *MenuItem) Deselect() {
	var this1 *C.GtkMenuItem
	if this0 != nil {
		this1 = this0.InheritedFromGtkMenuItem()
	}
	C.gtk_menu_item_deselect(this1)
}
func (this0 *MenuItem) GetAccelPath() string {
	var this1 *C.GtkMenuItem
	if this0 != nil {
		this1 = this0.InheritedFromGtkMenuItem()
	}
	ret1 := C.gtk_menu_item_get_accel_path(this1)
	var ret2 string
	ret2 = C.GoString(ret1)
	return ret2
}
func (this0 *MenuItem) GetLabel() string {
	var this1 *C.GtkMenuItem
	if this0 != nil {
		this1 = this0.InheritedFromGtkMenuItem()
	}
	ret1 := C.gtk_menu_item_get_label(this1)
	var ret2 string
	ret2 = C.GoString(ret1)
	return ret2
}
func (this0 *MenuItem) GetReserveIndicator() bool {
	var this1 *C.GtkMenuItem
	if this0 != nil {
		this1 = this0.InheritedFromGtkMenuItem()
	}
	ret1 := C.gtk_menu_item_get_reserve_indicator(this1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *MenuItem) GetRightJustified() bool {
	var this1 *C.GtkMenuItem
	if this0 != nil {
		this1 = this0.InheritedFromGtkMenuItem()
	}
	ret1 := C.gtk_menu_item_get_right_justified(this1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *MenuItem) GetSubmenu() *Widget {
	var this1 *C.GtkMenuItem
	if this0 != nil {
		this1 = this0.InheritedFromGtkMenuItem()
	}
	ret1 := C.gtk_menu_item_get_submenu(this1)
	var ret2 *Widget
	ret2 = (*Widget)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
func (this0 *MenuItem) GetUseUnderline() bool {
	var this1 *C.GtkMenuItem
	if this0 != nil {
		this1 = this0.InheritedFromGtkMenuItem()
	}
	ret1 := C.gtk_menu_item_get_use_underline(this1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *MenuItem) Select() {
	var this1 *C.GtkMenuItem
	if this0 != nil {
		this1 = this0.InheritedFromGtkMenuItem()
	}
	C.gtk_menu_item_select(this1)
}
func (this0 *MenuItem) SetAccelPath(accel_path0 string) {
	var this1 *C.GtkMenuItem
	var accel_path1 *C.char
	if this0 != nil {
		this1 = this0.InheritedFromGtkMenuItem()
	}
	accel_path1 = _GoStringToGString(accel_path0)
	defer C.free(unsafe.Pointer(accel_path1))
	C.gtk_menu_item_set_accel_path(this1, accel_path1)
}
func (this0 *MenuItem) SetLabel(label0 string) {
	var this1 *C.GtkMenuItem
	var label1 *C.char
	if this0 != nil {
		this1 = this0.InheritedFromGtkMenuItem()
	}
	label1 = _GoStringToGString(label0)
	defer C.free(unsafe.Pointer(label1))
	C.gtk_menu_item_set_label(this1, label1)
}
func (this0 *MenuItem) SetReserveIndicator(reserve0 bool) {
	var this1 *C.GtkMenuItem
	var reserve1 C.int
	if this0 != nil {
		this1 = this0.InheritedFromGtkMenuItem()
	}
	reserve1 = _GoBoolToCBool(reserve0)
	C.gtk_menu_item_set_reserve_indicator(this1, reserve1)
}
func (this0 *MenuItem) SetRightJustified(right_justified0 bool) {
	var this1 *C.GtkMenuItem
	var right_justified1 C.int
	if this0 != nil {
		this1 = this0.InheritedFromGtkMenuItem()
	}
	right_justified1 = _GoBoolToCBool(right_justified0)
	C.gtk_menu_item_set_right_justified(this1, right_justified1)
}
func (this0 *MenuItem) SetSubmenu(submenu0 WidgetLike) {
	var this1 *C.GtkMenuItem
	var submenu1 *C.GtkWidget
	if this0 != nil {
		this1 = this0.InheritedFromGtkMenuItem()
	}
	if submenu0 != nil {
		submenu1 = submenu0.InheritedFromGtkWidget()
	}
	C.gtk_menu_item_set_submenu(this1, submenu1)
}
func (this0 *MenuItem) SetUseUnderline(setting0 bool) {
	var this1 *C.GtkMenuItem
	var setting1 C.int
	if this0 != nil {
		this1 = this0.InheritedFromGtkMenuItem()
	}
	setting1 = _GoBoolToCBool(setting0)
	C.gtk_menu_item_set_use_underline(this1, setting1)
}
func (this0 *MenuItem) ToggleSizeAllocate(allocation0 int) {
	var this1 *C.GtkMenuItem
	var allocation1 C.int32_t
	if this0 != nil {
		this1 = this0.InheritedFromGtkMenuItem()
	}
	allocation1 = C.int32_t(allocation0)
	C.gtk_menu_item_toggle_size_allocate(this1, allocation1)
}
// blacklisted: MenuItem.toggle_size_request (method)
type MenuPositionFunc func(menu *Menu, x int, y int, push_in bool)
//export _GtkMenuPositionFunc_c_wrapper
func _GtkMenuPositionFunc_c_wrapper(menu0 unsafe.Pointer, x0 int32, y0 int32, push_in0 int32, user_data0 unsafe.Pointer) {
	var menu1 *Menu
	var x1 int
	var y1 int
	var push_in1 bool
	var user_data1 MenuPositionFunc
	menu1 = (*Menu)(gobject.ObjectWrap(unsafe.Pointer((*C.GtkMenu)(menu0)), true))
	x1 = int((C.int32_t)(x0))
	y1 = int((C.int32_t)(y0))
	push_in1 = (C.int)(push_in0) != 0
	user_data1 = *(*MenuPositionFunc)(user_data0)
	user_data1(menu1, x1, y1, push_in1)
}
//export _GtkMenuPositionFunc_c_wrapper_once
func _GtkMenuPositionFunc_c_wrapper_once(menu0 unsafe.Pointer, x0 int32, y0 int32, push_in0 int32, user_data0 unsafe.Pointer) {
	_GtkMenuPositionFunc_c_wrapper(menu0, x0, y0, push_in0, user_data0)
	gobject.Holder.Release(user_data0)
}
type MenuShellLike interface {
	ContainerLike
	InheritedFromGtkMenuShell() *C.GtkMenuShell
}

type MenuShell struct {
	Container
	atk.ImplementorIfaceImpl
	BuildableImpl
}

func ToMenuShell(objlike gobject.ObjectLike) *MenuShell {
	c := objlike.InheritedFromGObject()
	if c == nil {
		return nil
	}
	t := (*MenuShell)(nil).GetStaticType()
	obj := gobject.ObjectGrabIfType(unsafe.Pointer(c), t)
	if obj != nil {
		return (*MenuShell)(obj)
	}
	panic("cannot cast to MenuShell")
}

func (this0 *MenuShell) InheritedFromGtkMenuShell() *C.GtkMenuShell {
	if this0 == nil {
		return nil
	}
	return (*C.GtkMenuShell)(this0.C)
}

func (this0 *MenuShell) GetStaticType() gobject.Type {
	return gobject.Type(C.gtk_menu_shell_get_type())
}

func MenuShellGetType() gobject.Type {
	return (*MenuShell)(nil).GetStaticType()
}
func (this0 *MenuShell) ActivateItem(menu_item0 WidgetLike, force_deactivate0 bool) {
	var this1 *C.GtkMenuShell
	var menu_item1 *C.GtkWidget
	var force_deactivate1 C.int
	if this0 != nil {
		this1 = this0.InheritedFromGtkMenuShell()
	}
	if menu_item0 != nil {
		menu_item1 = menu_item0.InheritedFromGtkWidget()
	}
	force_deactivate1 = _GoBoolToCBool(force_deactivate0)
	C.gtk_menu_shell_activate_item(this1, menu_item1, force_deactivate1)
}
func (this0 *MenuShell) Append(child0 WidgetLike) {
	var this1 *C.GtkMenuShell
	var child1 *C.GtkWidget
	if this0 != nil {
		this1 = this0.InheritedFromGtkMenuShell()
	}
	if child0 != nil {
		child1 = child0.InheritedFromGtkWidget()
	}
	C.gtk_menu_shell_append(this1, child1)
}
func (this0 *MenuShell) Cancel() {
	var this1 *C.GtkMenuShell
	if this0 != nil {
		this1 = this0.InheritedFromGtkMenuShell()
	}
	C.gtk_menu_shell_cancel(this1)
}
func (this0 *MenuShell) Deactivate() {
	var this1 *C.GtkMenuShell
	if this0 != nil {
		this1 = this0.InheritedFromGtkMenuShell()
	}
	C.gtk_menu_shell_deactivate(this1)
}
func (this0 *MenuShell) Deselect() {
	var this1 *C.GtkMenuShell
	if this0 != nil {
		this1 = this0.InheritedFromGtkMenuShell()
	}
	C.gtk_menu_shell_deselect(this1)
}
func (this0 *MenuShell) GetParentShell() *Widget {
	var this1 *C.GtkMenuShell
	if this0 != nil {
		this1 = this0.InheritedFromGtkMenuShell()
	}
	ret1 := C.gtk_menu_shell_get_parent_shell(this1)
	var ret2 *Widget
	ret2 = (*Widget)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
func (this0 *MenuShell) GetSelectedItem() *Widget {
	var this1 *C.GtkMenuShell
	if this0 != nil {
		this1 = this0.InheritedFromGtkMenuShell()
	}
	ret1 := C.gtk_menu_shell_get_selected_item(this1)
	var ret2 *Widget
	ret2 = (*Widget)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
func (this0 *MenuShell) GetTakeFocus() bool {
	var this1 *C.GtkMenuShell
	if this0 != nil {
		this1 = this0.InheritedFromGtkMenuShell()
	}
	ret1 := C.gtk_menu_shell_get_take_focus(this1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *MenuShell) Insert(child0 WidgetLike, position0 int) {
	var this1 *C.GtkMenuShell
	var child1 *C.GtkWidget
	var position1 C.int32_t
	if this0 != nil {
		this1 = this0.InheritedFromGtkMenuShell()
	}
	if child0 != nil {
		child1 = child0.InheritedFromGtkWidget()
	}
	position1 = C.int32_t(position0)
	C.gtk_menu_shell_insert(this1, child1, position1)
}
func (this0 *MenuShell) Prepend(child0 WidgetLike) {
	var this1 *C.GtkMenuShell
	var child1 *C.GtkWidget
	if this0 != nil {
		this1 = this0.InheritedFromGtkMenuShell()
	}
	if child0 != nil {
		child1 = child0.InheritedFromGtkWidget()
	}
	C.gtk_menu_shell_prepend(this1, child1)
}
func (this0 *MenuShell) SelectFirst(search_sensitive0 bool) {
	var this1 *C.GtkMenuShell
	var search_sensitive1 C.int
	if this0 != nil {
		this1 = this0.InheritedFromGtkMenuShell()
	}
	search_sensitive1 = _GoBoolToCBool(search_sensitive0)
	C.gtk_menu_shell_select_first(this1, search_sensitive1)
}
func (this0 *MenuShell) SelectItem(menu_item0 WidgetLike) {
	var this1 *C.GtkMenuShell
	var menu_item1 *C.GtkWidget
	if this0 != nil {
		this1 = this0.InheritedFromGtkMenuShell()
	}
	if menu_item0 != nil {
		menu_item1 = menu_item0.InheritedFromGtkWidget()
	}
	C.gtk_menu_shell_select_item(this1, menu_item1)
}
func (this0 *MenuShell) SetTakeFocus(take_focus0 bool) {
	var this1 *C.GtkMenuShell
	var take_focus1 C.int
	if this0 != nil {
		this1 = this0.InheritedFromGtkMenuShell()
	}
	take_focus1 = _GoBoolToCBool(take_focus0)
	C.gtk_menu_shell_set_take_focus(this1, take_focus1)
}
type MenuToolButtonLike interface {
	ToolButtonLike
	InheritedFromGtkMenuToolButton() *C.GtkMenuToolButton
}

type MenuToolButton struct {
	ToolButton
	atk.ImplementorIfaceImpl
	ActivatableImpl
	BuildableImpl
}

func ToMenuToolButton(objlike gobject.ObjectLike) *MenuToolButton {
	c := objlike.InheritedFromGObject()
	if c == nil {
		return nil
	}
	t := (*MenuToolButton)(nil).GetStaticType()
	obj := gobject.ObjectGrabIfType(unsafe.Pointer(c), t)
	if obj != nil {
		return (*MenuToolButton)(obj)
	}
	panic("cannot cast to MenuToolButton")
}

func (this0 *MenuToolButton) InheritedFromGtkMenuToolButton() *C.GtkMenuToolButton {
	if this0 == nil {
		return nil
	}
	return (*C.GtkMenuToolButton)(this0.C)
}

func (this0 *MenuToolButton) GetStaticType() gobject.Type {
	return gobject.Type(C.gtk_menu_tool_button_get_type())
}

func MenuToolButtonGetType() gobject.Type {
	return (*MenuToolButton)(nil).GetStaticType()
}
func NewMenuToolButton(icon_widget0 WidgetLike, label0 string) *MenuToolButton {
	var icon_widget1 *C.GtkWidget
	var label1 *C.char
	if icon_widget0 != nil {
		icon_widget1 = icon_widget0.InheritedFromGtkWidget()
	}
	label1 = _GoStringToGString(label0)
	defer C.free(unsafe.Pointer(label1))
	ret1 := C.gtk_menu_tool_button_new(icon_widget1, label1)
	var ret2 *MenuToolButton
	ret2 = (*MenuToolButton)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
func NewMenuToolButtonFromStock(stock_id0 string) *MenuToolButton {
	var stock_id1 *C.char
	stock_id1 = _GoStringToGString(stock_id0)
	defer C.free(unsafe.Pointer(stock_id1))
	ret1 := C.gtk_menu_tool_button_new_from_stock(stock_id1)
	var ret2 *MenuToolButton
	ret2 = (*MenuToolButton)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
func (this0 *MenuToolButton) GetMenu() *Widget {
	var this1 *C.GtkMenuToolButton
	if this0 != nil {
		this1 = this0.InheritedFromGtkMenuToolButton()
	}
	ret1 := C.gtk_menu_tool_button_get_menu(this1)
	var ret2 *Widget
	ret2 = (*Widget)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
func (this0 *MenuToolButton) SetArrowTooltipMarkup(markup0 string) {
	var this1 *C.GtkMenuToolButton
	var markup1 *C.char
	if this0 != nil {
		this1 = this0.InheritedFromGtkMenuToolButton()
	}
	markup1 = _GoStringToGString(markup0)
	defer C.free(unsafe.Pointer(markup1))
	C.gtk_menu_tool_button_set_arrow_tooltip_markup(this1, markup1)
}
func (this0 *MenuToolButton) SetArrowTooltipText(text0 string) {
	var this1 *C.GtkMenuToolButton
	var text1 *C.char
	if this0 != nil {
		this1 = this0.InheritedFromGtkMenuToolButton()
	}
	text1 = _GoStringToGString(text0)
	defer C.free(unsafe.Pointer(text1))
	C.gtk_menu_tool_button_set_arrow_tooltip_text(this1, text1)
}
func (this0 *MenuToolButton) SetMenu(menu0 WidgetLike) {
	var this1 *C.GtkMenuToolButton
	var menu1 *C.GtkWidget
	if this0 != nil {
		this1 = this0.InheritedFromGtkMenuToolButton()
	}
	if menu0 != nil {
		menu1 = menu0.InheritedFromGtkWidget()
	}
	C.gtk_menu_tool_button_set_menu(this1, menu1)
}
type MessageDialogLike interface {
	DialogLike
	InheritedFromGtkMessageDialog() *C.GtkMessageDialog
}

type MessageDialog struct {
	Dialog
	atk.ImplementorIfaceImpl
	BuildableImpl
}

func ToMessageDialog(objlike gobject.ObjectLike) *MessageDialog {
	c := objlike.InheritedFromGObject()
	if c == nil {
		return nil
	}
	t := (*MessageDialog)(nil).GetStaticType()
	obj := gobject.ObjectGrabIfType(unsafe.Pointer(c), t)
	if obj != nil {
		return (*MessageDialog)(obj)
	}
	panic("cannot cast to MessageDialog")
}

func (this0 *MessageDialog) InheritedFromGtkMessageDialog() *C.GtkMessageDialog {
	if this0 == nil {
		return nil
	}
	return (*C.GtkMessageDialog)(this0.C)
}

func (this0 *MessageDialog) GetStaticType() gobject.Type {
	return gobject.Type(C.gtk_message_dialog_get_type())
}

func MessageDialogGetType() gobject.Type {
	return (*MessageDialog)(nil).GetStaticType()
}
func (this0 *MessageDialog) GetImage() *Widget {
	var this1 *C.GtkMessageDialog
	if this0 != nil {
		this1 = this0.InheritedFromGtkMessageDialog()
	}
	ret1 := C.gtk_message_dialog_get_image(this1)
	var ret2 *Widget
	ret2 = (*Widget)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
func (this0 *MessageDialog) GetMessageArea() *Widget {
	var this1 *C.GtkMessageDialog
	if this0 != nil {
		this1 = this0.InheritedFromGtkMessageDialog()
	}
	ret1 := C.gtk_message_dialog_get_message_area(this1)
	var ret2 *Widget
	ret2 = (*Widget)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
func (this0 *MessageDialog) SetImage(image0 WidgetLike) {
	var this1 *C.GtkMessageDialog
	var image1 *C.GtkWidget
	if this0 != nil {
		this1 = this0.InheritedFromGtkMessageDialog()
	}
	if image0 != nil {
		image1 = image0.InheritedFromGtkWidget()
	}
	C.gtk_message_dialog_set_image(this1, image1)
}
func (this0 *MessageDialog) SetMarkup(str0 string) {
	var this1 *C.GtkMessageDialog
	var str1 *C.char
	if this0 != nil {
		this1 = this0.InheritedFromGtkMessageDialog()
	}
	str1 = _GoStringToGString(str0)
	defer C.free(unsafe.Pointer(str1))
	C.gtk_message_dialog_set_markup(this1, str1)
}
type MessageType C.uint32_t
const (
	MessageTypeInfo MessageType = 0
	MessageTypeWarning MessageType = 1
	MessageTypeQuestion MessageType = 2
	MessageTypeError MessageType = 3
	MessageTypeOther MessageType = 4
)
type MiscLike interface {
	WidgetLike
	InheritedFromGtkMisc() *C.GtkMisc
}

type Misc struct {
	Widget
	atk.ImplementorIfaceImpl
	BuildableImpl
}

func ToMisc(objlike gobject.ObjectLike) *Misc {
	c := objlike.InheritedFromGObject()
	if c == nil {
		return nil
	}
	t := (*Misc)(nil).GetStaticType()
	obj := gobject.ObjectGrabIfType(unsafe.Pointer(c), t)
	if obj != nil {
		return (*Misc)(obj)
	}
	panic("cannot cast to Misc")
}

func (this0 *Misc) InheritedFromGtkMisc() *C.GtkMisc {
	if this0 == nil {
		return nil
	}
	return (*C.GtkMisc)(this0.C)
}

func (this0 *Misc) GetStaticType() gobject.Type {
	return gobject.Type(C.gtk_misc_get_type())
}

func MiscGetType() gobject.Type {
	return (*Misc)(nil).GetStaticType()
}
func (this0 *Misc) GetAlignment() (float64, float64) {
	var this1 *C.GtkMisc
	var xalign1 C.float
	var yalign1 C.float
	if this0 != nil {
		this1 = this0.InheritedFromGtkMisc()
	}
	C.gtk_misc_get_alignment(this1, &xalign1, &yalign1)
	var xalign2 float64
	var yalign2 float64
	xalign2 = float64(xalign1)
	yalign2 = float64(yalign1)
	return xalign2, yalign2
}
func (this0 *Misc) GetPadding() (int, int) {
	var this1 *C.GtkMisc
	var xpad1 C.int32_t
	var ypad1 C.int32_t
	if this0 != nil {
		this1 = this0.InheritedFromGtkMisc()
	}
	C.gtk_misc_get_padding(this1, &xpad1, &ypad1)
	var xpad2 int
	var ypad2 int
	xpad2 = int(xpad1)
	ypad2 = int(ypad1)
	return xpad2, ypad2
}
func (this0 *Misc) SetAlignment(xalign0 float64, yalign0 float64) {
	var this1 *C.GtkMisc
	var xalign1 C.float
	var yalign1 C.float
	if this0 != nil {
		this1 = this0.InheritedFromGtkMisc()
	}
	xalign1 = C.float(xalign0)
	yalign1 = C.float(yalign0)
	C.gtk_misc_set_alignment(this1, xalign1, yalign1)
}
func (this0 *Misc) SetPadding(xpad0 int, ypad0 int) {
	var this1 *C.GtkMisc
	var xpad1 C.int32_t
	var ypad1 C.int32_t
	if this0 != nil {
		this1 = this0.InheritedFromGtkMisc()
	}
	xpad1 = C.int32_t(xpad0)
	ypad1 = C.int32_t(ypad0)
	C.gtk_misc_set_padding(this1, xpad1, ypad1)
}
// blacklisted (no userdata): type ModuleDisplayInitFunc func(display *gdk.Display)
// blacklisted (no userdata): type ModuleInitFunc func(argc *int, argv []string)
type MountOperationLike interface {
	gio.MountOperationLike
	InheritedFromGtkMountOperation() *C.GtkMountOperation
}

type MountOperation struct {
	gio.MountOperation
	
}

func ToMountOperation(objlike gobject.ObjectLike) *MountOperation {
	c := objlike.InheritedFromGObject()
	if c == nil {
		return nil
	}
	t := (*MountOperation)(nil).GetStaticType()
	obj := gobject.ObjectGrabIfType(unsafe.Pointer(c), t)
	if obj != nil {
		return (*MountOperation)(obj)
	}
	panic("cannot cast to MountOperation")
}

func (this0 *MountOperation) InheritedFromGtkMountOperation() *C.GtkMountOperation {
	if this0 == nil {
		return nil
	}
	return (*C.GtkMountOperation)(this0.C)
}

func (this0 *MountOperation) GetStaticType() gobject.Type {
	return gobject.Type(C.gtk_mount_operation_get_type())
}

func MountOperationGetType() gobject.Type {
	return (*MountOperation)(nil).GetStaticType()
}
func NewMountOperation(parent0 WindowLike) *MountOperation {
	var parent1 *C.GtkWindow
	if parent0 != nil {
		parent1 = parent0.InheritedFromGtkWindow()
	}
	ret1 := C.gtk_mount_operation_new(parent1)
	var ret2 *MountOperation
	ret2 = (*MountOperation)(gobject.ObjectWrap(unsafe.Pointer(ret1), false))
	return ret2
}
func (this0 *MountOperation) GetParent() *Window {
	var this1 *C.GtkMountOperation
	if this0 != nil {
		this1 = this0.InheritedFromGtkMountOperation()
	}
	ret1 := C.gtk_mount_operation_get_parent(this1)
	var ret2 *Window
	ret2 = (*Window)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
func (this0 *MountOperation) GetScreen() *gdk.Screen {
	var this1 *C.GtkMountOperation
	if this0 != nil {
		this1 = this0.InheritedFromGtkMountOperation()
	}
	ret1 := C.gtk_mount_operation_get_screen(this1)
	var ret2 *gdk.Screen
	ret2 = (*gdk.Screen)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
func (this0 *MountOperation) IsShowing() bool {
	var this1 *C.GtkMountOperation
	if this0 != nil {
		this1 = this0.InheritedFromGtkMountOperation()
	}
	ret1 := C.gtk_mount_operation_is_showing(this1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *MountOperation) SetParent(parent0 WindowLike) {
	var this1 *C.GtkMountOperation
	var parent1 *C.GtkWindow
	if this0 != nil {
		this1 = this0.InheritedFromGtkMountOperation()
	}
	if parent0 != nil {
		parent1 = parent0.InheritedFromGtkWindow()
	}
	C.gtk_mount_operation_set_parent(this1, parent1)
}
func (this0 *MountOperation) SetScreen(screen0 gdk.ScreenLike) {
	var this1 *C.GtkMountOperation
	var screen1 *C.GdkScreen
	if this0 != nil {
		this1 = this0.InheritedFromGtkMountOperation()
	}
	if screen0 != nil {
		screen1 = screen0.InheritedFromGdkScreen()
	}
	C.gtk_mount_operation_set_screen(this1, screen1)
}
type MovementStep C.uint32_t
const (
	MovementStepLogicalPositions MovementStep = 0
	MovementStepVisualPositions MovementStep = 1
	MovementStepWords MovementStep = 2
	MovementStepDisplayLines MovementStep = 3
	MovementStepDisplayLineEnds MovementStep = 4
	MovementStepParagraphs MovementStep = 5
	MovementStepParagraphEnds MovementStep = 6
	MovementStepPages MovementStep = 7
	MovementStepBufferEnds MovementStep = 8
	MovementStepHorizontalPages MovementStep = 9
)
type NotebookLike interface {
	ContainerLike
	InheritedFromGtkNotebook() *C.GtkNotebook
}

type Notebook struct {
	Container
	atk.ImplementorIfaceImpl
	BuildableImpl
}

func ToNotebook(objlike gobject.ObjectLike) *Notebook {
	c := objlike.InheritedFromGObject()
	if c == nil {
		return nil
	}
	t := (*Notebook)(nil).GetStaticType()
	obj := gobject.ObjectGrabIfType(unsafe.Pointer(c), t)
	if obj != nil {
		return (*Notebook)(obj)
	}
	panic("cannot cast to Notebook")
}

func (this0 *Notebook) InheritedFromGtkNotebook() *C.GtkNotebook {
	if this0 == nil {
		return nil
	}
	return (*C.GtkNotebook)(this0.C)
}

func (this0 *Notebook) GetStaticType() gobject.Type {
	return gobject.Type(C.gtk_notebook_get_type())
}

func NotebookGetType() gobject.Type {
	return (*Notebook)(nil).GetStaticType()
}
func NewNotebook() *Notebook {
	ret1 := C.gtk_notebook_new()
	var ret2 *Notebook
	ret2 = (*Notebook)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
func (this0 *Notebook) AppendPage(child0 WidgetLike, tab_label0 WidgetLike) int {
	var this1 *C.GtkNotebook
	var child1 *C.GtkWidget
	var tab_label1 *C.GtkWidget
	if this0 != nil {
		this1 = this0.InheritedFromGtkNotebook()
	}
	if child0 != nil {
		child1 = child0.InheritedFromGtkWidget()
	}
	if tab_label0 != nil {
		tab_label1 = tab_label0.InheritedFromGtkWidget()
	}
	ret1 := C.gtk_notebook_append_page(this1, child1, tab_label1)
	var ret2 int
	ret2 = int(ret1)
	return ret2
}
func (this0 *Notebook) AppendPageMenu(child0 WidgetLike, tab_label0 WidgetLike, menu_label0 WidgetLike) int {
	var this1 *C.GtkNotebook
	var child1 *C.GtkWidget
	var tab_label1 *C.GtkWidget
	var menu_label1 *C.GtkWidget
	if this0 != nil {
		this1 = this0.InheritedFromGtkNotebook()
	}
	if child0 != nil {
		child1 = child0.InheritedFromGtkWidget()
	}
	if tab_label0 != nil {
		tab_label1 = tab_label0.InheritedFromGtkWidget()
	}
	if menu_label0 != nil {
		menu_label1 = menu_label0.InheritedFromGtkWidget()
	}
	ret1 := C.gtk_notebook_append_page_menu(this1, child1, tab_label1, menu_label1)
	var ret2 int
	ret2 = int(ret1)
	return ret2
}
func (this0 *Notebook) GetActionWidget(pack_type0 PackType) *Widget {
	var this1 *C.GtkNotebook
	var pack_type1 C.GtkPackType
	if this0 != nil {
		this1 = this0.InheritedFromGtkNotebook()
	}
	pack_type1 = C.GtkPackType(pack_type0)
	ret1 := C.gtk_notebook_get_action_widget(this1, pack_type1)
	var ret2 *Widget
	ret2 = (*Widget)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
func (this0 *Notebook) GetCurrentPage() int {
	var this1 *C.GtkNotebook
	if this0 != nil {
		this1 = this0.InheritedFromGtkNotebook()
	}
	ret1 := C.gtk_notebook_get_current_page(this1)
	var ret2 int
	ret2 = int(ret1)
	return ret2
}
func (this0 *Notebook) GetGroupName() string {
	var this1 *C.GtkNotebook
	if this0 != nil {
		this1 = this0.InheritedFromGtkNotebook()
	}
	ret1 := C.gtk_notebook_get_group_name(this1)
	var ret2 string
	ret2 = C.GoString(ret1)
	return ret2
}
func (this0 *Notebook) GetMenuLabel(child0 WidgetLike) *Widget {
	var this1 *C.GtkNotebook
	var child1 *C.GtkWidget
	if this0 != nil {
		this1 = this0.InheritedFromGtkNotebook()
	}
	if child0 != nil {
		child1 = child0.InheritedFromGtkWidget()
	}
	ret1 := C.gtk_notebook_get_menu_label(this1, child1)
	var ret2 *Widget
	ret2 = (*Widget)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
func (this0 *Notebook) GetMenuLabelText(child0 WidgetLike) string {
	var this1 *C.GtkNotebook
	var child1 *C.GtkWidget
	if this0 != nil {
		this1 = this0.InheritedFromGtkNotebook()
	}
	if child0 != nil {
		child1 = child0.InheritedFromGtkWidget()
	}
	ret1 := C.gtk_notebook_get_menu_label_text(this1, child1)
	var ret2 string
	ret2 = C.GoString(ret1)
	return ret2
}
func (this0 *Notebook) GetNPages() int {
	var this1 *C.GtkNotebook
	if this0 != nil {
		this1 = this0.InheritedFromGtkNotebook()
	}
	ret1 := C.gtk_notebook_get_n_pages(this1)
	var ret2 int
	ret2 = int(ret1)
	return ret2
}
func (this0 *Notebook) GetNthPage(page_num0 int) *Widget {
	var this1 *C.GtkNotebook
	var page_num1 C.int32_t
	if this0 != nil {
		this1 = this0.InheritedFromGtkNotebook()
	}
	page_num1 = C.int32_t(page_num0)
	ret1 := C.gtk_notebook_get_nth_page(this1, page_num1)
	var ret2 *Widget
	ret2 = (*Widget)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
func (this0 *Notebook) GetScrollable() bool {
	var this1 *C.GtkNotebook
	if this0 != nil {
		this1 = this0.InheritedFromGtkNotebook()
	}
	ret1 := C.gtk_notebook_get_scrollable(this1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *Notebook) GetShowBorder() bool {
	var this1 *C.GtkNotebook
	if this0 != nil {
		this1 = this0.InheritedFromGtkNotebook()
	}
	ret1 := C.gtk_notebook_get_show_border(this1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *Notebook) GetShowTabs() bool {
	var this1 *C.GtkNotebook
	if this0 != nil {
		this1 = this0.InheritedFromGtkNotebook()
	}
	ret1 := C.gtk_notebook_get_show_tabs(this1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *Notebook) GetTabDetachable(child0 WidgetLike) bool {
	var this1 *C.GtkNotebook
	var child1 *C.GtkWidget
	if this0 != nil {
		this1 = this0.InheritedFromGtkNotebook()
	}
	if child0 != nil {
		child1 = child0.InheritedFromGtkWidget()
	}
	ret1 := C.gtk_notebook_get_tab_detachable(this1, child1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *Notebook) GetTabHBorder() int {
	var this1 *C.GtkNotebook
	if this0 != nil {
		this1 = this0.InheritedFromGtkNotebook()
	}
	ret1 := C.gtk_notebook_get_tab_hborder(this1)
	var ret2 int
	ret2 = int(ret1)
	return ret2
}
func (this0 *Notebook) GetTabLabel(child0 WidgetLike) *Widget {
	var this1 *C.GtkNotebook
	var child1 *C.GtkWidget
	if this0 != nil {
		this1 = this0.InheritedFromGtkNotebook()
	}
	if child0 != nil {
		child1 = child0.InheritedFromGtkWidget()
	}
	ret1 := C.gtk_notebook_get_tab_label(this1, child1)
	var ret2 *Widget
	ret2 = (*Widget)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
func (this0 *Notebook) GetTabLabelText(child0 WidgetLike) string {
	var this1 *C.GtkNotebook
	var child1 *C.GtkWidget
	if this0 != nil {
		this1 = this0.InheritedFromGtkNotebook()
	}
	if child0 != nil {
		child1 = child0.InheritedFromGtkWidget()
	}
	ret1 := C.gtk_notebook_get_tab_label_text(this1, child1)
	var ret2 string
	ret2 = C.GoString(ret1)
	return ret2
}
func (this0 *Notebook) GetTabPos() PositionType {
	var this1 *C.GtkNotebook
	if this0 != nil {
		this1 = this0.InheritedFromGtkNotebook()
	}
	ret1 := C.gtk_notebook_get_tab_pos(this1)
	var ret2 PositionType
	ret2 = PositionType(ret1)
	return ret2
}
func (this0 *Notebook) GetTabReorderable(child0 WidgetLike) bool {
	var this1 *C.GtkNotebook
	var child1 *C.GtkWidget
	if this0 != nil {
		this1 = this0.InheritedFromGtkNotebook()
	}
	if child0 != nil {
		child1 = child0.InheritedFromGtkWidget()
	}
	ret1 := C.gtk_notebook_get_tab_reorderable(this1, child1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *Notebook) GetTabVBorder() int {
	var this1 *C.GtkNotebook
	if this0 != nil {
		this1 = this0.InheritedFromGtkNotebook()
	}
	ret1 := C.gtk_notebook_get_tab_vborder(this1)
	var ret2 int
	ret2 = int(ret1)
	return ret2
}
func (this0 *Notebook) InsertPage(child0 WidgetLike, tab_label0 WidgetLike, position0 int) int {
	var this1 *C.GtkNotebook
	var child1 *C.GtkWidget
	var tab_label1 *C.GtkWidget
	var position1 C.int32_t
	if this0 != nil {
		this1 = this0.InheritedFromGtkNotebook()
	}
	if child0 != nil {
		child1 = child0.InheritedFromGtkWidget()
	}
	if tab_label0 != nil {
		tab_label1 = tab_label0.InheritedFromGtkWidget()
	}
	position1 = C.int32_t(position0)
	ret1 := C.gtk_notebook_insert_page(this1, child1, tab_label1, position1)
	var ret2 int
	ret2 = int(ret1)
	return ret2
}
func (this0 *Notebook) InsertPageMenu(child0 WidgetLike, tab_label0 WidgetLike, menu_label0 WidgetLike, position0 int) int {
	var this1 *C.GtkNotebook
	var child1 *C.GtkWidget
	var tab_label1 *C.GtkWidget
	var menu_label1 *C.GtkWidget
	var position1 C.int32_t
	if this0 != nil {
		this1 = this0.InheritedFromGtkNotebook()
	}
	if child0 != nil {
		child1 = child0.InheritedFromGtkWidget()
	}
	if tab_label0 != nil {
		tab_label1 = tab_label0.InheritedFromGtkWidget()
	}
	if menu_label0 != nil {
		menu_label1 = menu_label0.InheritedFromGtkWidget()
	}
	position1 = C.int32_t(position0)
	ret1 := C.gtk_notebook_insert_page_menu(this1, child1, tab_label1, menu_label1, position1)
	var ret2 int
	ret2 = int(ret1)
	return ret2
}
func (this0 *Notebook) NextPage() {
	var this1 *C.GtkNotebook
	if this0 != nil {
		this1 = this0.InheritedFromGtkNotebook()
	}
	C.gtk_notebook_next_page(this1)
}
func (this0 *Notebook) PageNum(child0 WidgetLike) int {
	var this1 *C.GtkNotebook
	var child1 *C.GtkWidget
	if this0 != nil {
		this1 = this0.InheritedFromGtkNotebook()
	}
	if child0 != nil {
		child1 = child0.InheritedFromGtkWidget()
	}
	ret1 := C.gtk_notebook_page_num(this1, child1)
	var ret2 int
	ret2 = int(ret1)
	return ret2
}
func (this0 *Notebook) PopupDisable() {
	var this1 *C.GtkNotebook
	if this0 != nil {
		this1 = this0.InheritedFromGtkNotebook()
	}
	C.gtk_notebook_popup_disable(this1)
}
func (this0 *Notebook) PopupEnable() {
	var this1 *C.GtkNotebook
	if this0 != nil {
		this1 = this0.InheritedFromGtkNotebook()
	}
	C.gtk_notebook_popup_enable(this1)
}
func (this0 *Notebook) PrependPage(child0 WidgetLike, tab_label0 WidgetLike) int {
	var this1 *C.GtkNotebook
	var child1 *C.GtkWidget
	var tab_label1 *C.GtkWidget
	if this0 != nil {
		this1 = this0.InheritedFromGtkNotebook()
	}
	if child0 != nil {
		child1 = child0.InheritedFromGtkWidget()
	}
	if tab_label0 != nil {
		tab_label1 = tab_label0.InheritedFromGtkWidget()
	}
	ret1 := C.gtk_notebook_prepend_page(this1, child1, tab_label1)
	var ret2 int
	ret2 = int(ret1)
	return ret2
}
func (this0 *Notebook) PrependPageMenu(child0 WidgetLike, tab_label0 WidgetLike, menu_label0 WidgetLike) int {
	var this1 *C.GtkNotebook
	var child1 *C.GtkWidget
	var tab_label1 *C.GtkWidget
	var menu_label1 *C.GtkWidget
	if this0 != nil {
		this1 = this0.InheritedFromGtkNotebook()
	}
	if child0 != nil {
		child1 = child0.InheritedFromGtkWidget()
	}
	if tab_label0 != nil {
		tab_label1 = tab_label0.InheritedFromGtkWidget()
	}
	if menu_label0 != nil {
		menu_label1 = menu_label0.InheritedFromGtkWidget()
	}
	ret1 := C.gtk_notebook_prepend_page_menu(this1, child1, tab_label1, menu_label1)
	var ret2 int
	ret2 = int(ret1)
	return ret2
}
func (this0 *Notebook) PrevPage() {
	var this1 *C.GtkNotebook
	if this0 != nil {
		this1 = this0.InheritedFromGtkNotebook()
	}
	C.gtk_notebook_prev_page(this1)
}
func (this0 *Notebook) RemovePage(page_num0 int) {
	var this1 *C.GtkNotebook
	var page_num1 C.int32_t
	if this0 != nil {
		this1 = this0.InheritedFromGtkNotebook()
	}
	page_num1 = C.int32_t(page_num0)
	C.gtk_notebook_remove_page(this1, page_num1)
}
func (this0 *Notebook) ReorderChild(child0 WidgetLike, position0 int) {
	var this1 *C.GtkNotebook
	var child1 *C.GtkWidget
	var position1 C.int32_t
	if this0 != nil {
		this1 = this0.InheritedFromGtkNotebook()
	}
	if child0 != nil {
		child1 = child0.InheritedFromGtkWidget()
	}
	position1 = C.int32_t(position0)
	C.gtk_notebook_reorder_child(this1, child1, position1)
}
func (this0 *Notebook) SetActionWidget(widget0 WidgetLike, pack_type0 PackType) {
	var this1 *C.GtkNotebook
	var widget1 *C.GtkWidget
	var pack_type1 C.GtkPackType
	if this0 != nil {
		this1 = this0.InheritedFromGtkNotebook()
	}
	if widget0 != nil {
		widget1 = widget0.InheritedFromGtkWidget()
	}
	pack_type1 = C.GtkPackType(pack_type0)
	C.gtk_notebook_set_action_widget(this1, widget1, pack_type1)
}
func (this0 *Notebook) SetCurrentPage(page_num0 int) {
	var this1 *C.GtkNotebook
	var page_num1 C.int32_t
	if this0 != nil {
		this1 = this0.InheritedFromGtkNotebook()
	}
	page_num1 = C.int32_t(page_num0)
	C.gtk_notebook_set_current_page(this1, page_num1)
}
func (this0 *Notebook) SetGroupName(group_name0 string) {
	var this1 *C.GtkNotebook
	var group_name1 *C.char
	if this0 != nil {
		this1 = this0.InheritedFromGtkNotebook()
	}
	group_name1 = _GoStringToGString(group_name0)
	defer C.free(unsafe.Pointer(group_name1))
	C.gtk_notebook_set_group_name(this1, group_name1)
}
func (this0 *Notebook) SetMenuLabel(child0 WidgetLike, menu_label0 WidgetLike) {
	var this1 *C.GtkNotebook
	var child1 *C.GtkWidget
	var menu_label1 *C.GtkWidget
	if this0 != nil {
		this1 = this0.InheritedFromGtkNotebook()
	}
	if child0 != nil {
		child1 = child0.InheritedFromGtkWidget()
	}
	if menu_label0 != nil {
		menu_label1 = menu_label0.InheritedFromGtkWidget()
	}
	C.gtk_notebook_set_menu_label(this1, child1, menu_label1)
}
func (this0 *Notebook) SetMenuLabelText(child0 WidgetLike, menu_text0 string) {
	var this1 *C.GtkNotebook
	var child1 *C.GtkWidget
	var menu_text1 *C.char
	if this0 != nil {
		this1 = this0.InheritedFromGtkNotebook()
	}
	if child0 != nil {
		child1 = child0.InheritedFromGtkWidget()
	}
	menu_text1 = _GoStringToGString(menu_text0)
	defer C.free(unsafe.Pointer(menu_text1))
	C.gtk_notebook_set_menu_label_text(this1, child1, menu_text1)
}
func (this0 *Notebook) SetScrollable(scrollable0 bool) {
	var this1 *C.GtkNotebook
	var scrollable1 C.int
	if this0 != nil {
		this1 = this0.InheritedFromGtkNotebook()
	}
	scrollable1 = _GoBoolToCBool(scrollable0)
	C.gtk_notebook_set_scrollable(this1, scrollable1)
}
func (this0 *Notebook) SetShowBorder(show_border0 bool) {
	var this1 *C.GtkNotebook
	var show_border1 C.int
	if this0 != nil {
		this1 = this0.InheritedFromGtkNotebook()
	}
	show_border1 = _GoBoolToCBool(show_border0)
	C.gtk_notebook_set_show_border(this1, show_border1)
}
func (this0 *Notebook) SetShowTabs(show_tabs0 bool) {
	var this1 *C.GtkNotebook
	var show_tabs1 C.int
	if this0 != nil {
		this1 = this0.InheritedFromGtkNotebook()
	}
	show_tabs1 = _GoBoolToCBool(show_tabs0)
	C.gtk_notebook_set_show_tabs(this1, show_tabs1)
}
func (this0 *Notebook) SetTabDetachable(child0 WidgetLike, detachable0 bool) {
	var this1 *C.GtkNotebook
	var child1 *C.GtkWidget
	var detachable1 C.int
	if this0 != nil {
		this1 = this0.InheritedFromGtkNotebook()
	}
	if child0 != nil {
		child1 = child0.InheritedFromGtkWidget()
	}
	detachable1 = _GoBoolToCBool(detachable0)
	C.gtk_notebook_set_tab_detachable(this1, child1, detachable1)
}
func (this0 *Notebook) SetTabLabel(child0 WidgetLike, tab_label0 WidgetLike) {
	var this1 *C.GtkNotebook
	var child1 *C.GtkWidget
	var tab_label1 *C.GtkWidget
	if this0 != nil {
		this1 = this0.InheritedFromGtkNotebook()
	}
	if child0 != nil {
		child1 = child0.InheritedFromGtkWidget()
	}
	if tab_label0 != nil {
		tab_label1 = tab_label0.InheritedFromGtkWidget()
	}
	C.gtk_notebook_set_tab_label(this1, child1, tab_label1)
}
func (this0 *Notebook) SetTabLabelText(child0 WidgetLike, tab_text0 string) {
	var this1 *C.GtkNotebook
	var child1 *C.GtkWidget
	var tab_text1 *C.char
	if this0 != nil {
		this1 = this0.InheritedFromGtkNotebook()
	}
	if child0 != nil {
		child1 = child0.InheritedFromGtkWidget()
	}
	tab_text1 = _GoStringToGString(tab_text0)
	defer C.free(unsafe.Pointer(tab_text1))
	C.gtk_notebook_set_tab_label_text(this1, child1, tab_text1)
}
func (this0 *Notebook) SetTabPos(pos0 PositionType) {
	var this1 *C.GtkNotebook
	var pos1 C.GtkPositionType
	if this0 != nil {
		this1 = this0.InheritedFromGtkNotebook()
	}
	pos1 = C.GtkPositionType(pos0)
	C.gtk_notebook_set_tab_pos(this1, pos1)
}
func (this0 *Notebook) SetTabReorderable(child0 WidgetLike, reorderable0 bool) {
	var this1 *C.GtkNotebook
	var child1 *C.GtkWidget
	var reorderable1 C.int
	if this0 != nil {
		this1 = this0.InheritedFromGtkNotebook()
	}
	if child0 != nil {
		child1 = child0.InheritedFromGtkWidget()
	}
	reorderable1 = _GoBoolToCBool(reorderable0)
	C.gtk_notebook_set_tab_reorderable(this1, child1, reorderable1)
}
type NotebookTab C.uint32_t
const (
	NotebookTabFirst NotebookTab = 0
	NotebookTabLast NotebookTab = 1
)
type NumberUpLayout C.uint32_t
const (
	NumberUpLayoutLrtb NumberUpLayout = 0
	NumberUpLayoutLrbt NumberUpLayout = 1
	NumberUpLayoutRltb NumberUpLayout = 2
	NumberUpLayoutRlbt NumberUpLayout = 3
	NumberUpLayoutTblr NumberUpLayout = 4
	NumberUpLayoutTbrl NumberUpLayout = 5
	NumberUpLayoutBtlr NumberUpLayout = 6
	NumberUpLayoutBtrl NumberUpLayout = 7
)
type NumerableIconLike interface {
	gio.EmblemedIconLike
	InheritedFromGtkNumerableIcon() *C.GtkNumerableIcon
}

type NumerableIcon struct {
	gio.EmblemedIcon
	gio.IconImpl
}

func ToNumerableIcon(objlike gobject.ObjectLike) *NumerableIcon {
	c := objlike.InheritedFromGObject()
	if c == nil {
		return nil
	}
	t := (*NumerableIcon)(nil).GetStaticType()
	obj := gobject.ObjectGrabIfType(unsafe.Pointer(c), t)
	if obj != nil {
		return (*NumerableIcon)(obj)
	}
	panic("cannot cast to NumerableIcon")
}

func (this0 *NumerableIcon) InheritedFromGtkNumerableIcon() *C.GtkNumerableIcon {
	if this0 == nil {
		return nil
	}
	return (*C.GtkNumerableIcon)(this0.C)
}

func (this0 *NumerableIcon) GetStaticType() gobject.Type {
	return gobject.Type(C.gtk_numerable_icon_get_type())
}

func NumerableIconGetType() gobject.Type {
	return (*NumerableIcon)(nil).GetStaticType()
}
func NumerableIconNew(base_icon0 gio.IconLike) *gio.Icon {
	var base_icon1 *C.GIcon
	if base_icon0 != nil {
		base_icon1 = base_icon0.ImplementsGIcon()}
	ret1 := C.gtk_numerable_icon_new(base_icon1)
	var ret2 *gio.Icon
	ret2 = (*gio.Icon)(gobject.ObjectWrap(unsafe.Pointer(ret1), false))
	return ret2
}
func NumerableIconNewWithStyleContext(base_icon0 gio.IconLike, context0 StyleContextLike) *gio.Icon {
	var base_icon1 *C.GIcon
	var context1 *C.GtkStyleContext
	if base_icon0 != nil {
		base_icon1 = base_icon0.ImplementsGIcon()}
	if context0 != nil {
		context1 = context0.InheritedFromGtkStyleContext()
	}
	ret1 := C.gtk_numerable_icon_new_with_style_context(base_icon1, context1)
	var ret2 *gio.Icon
	ret2 = (*gio.Icon)(gobject.ObjectWrap(unsafe.Pointer(ret1), false))
	return ret2
}
func (this0 *NumerableIcon) GetBackgroundGIcon() *gio.Icon {
	var this1 *C.GtkNumerableIcon
	if this0 != nil {
		this1 = this0.InheritedFromGtkNumerableIcon()
	}
	ret1 := C.gtk_numerable_icon_get_background_gicon(this1)
	var ret2 *gio.Icon
	ret2 = (*gio.Icon)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
func (this0 *NumerableIcon) GetBackgroundIconName() string {
	var this1 *C.GtkNumerableIcon
	if this0 != nil {
		this1 = this0.InheritedFromGtkNumerableIcon()
	}
	ret1 := C.gtk_numerable_icon_get_background_icon_name(this1)
	var ret2 string
	ret2 = C.GoString(ret1)
	return ret2
}
func (this0 *NumerableIcon) GetCount() int {
	var this1 *C.GtkNumerableIcon
	if this0 != nil {
		this1 = this0.InheritedFromGtkNumerableIcon()
	}
	ret1 := C.gtk_numerable_icon_get_count(this1)
	var ret2 int
	ret2 = int(ret1)
	return ret2
}
func (this0 *NumerableIcon) GetLabel() string {
	var this1 *C.GtkNumerableIcon
	if this0 != nil {
		this1 = this0.InheritedFromGtkNumerableIcon()
	}
	ret1 := C.gtk_numerable_icon_get_label(this1)
	var ret2 string
	ret2 = C.GoString(ret1)
	return ret2
}
func (this0 *NumerableIcon) GetStyleContext() *StyleContext {
	var this1 *C.GtkNumerableIcon
	if this0 != nil {
		this1 = this0.InheritedFromGtkNumerableIcon()
	}
	ret1 := C.gtk_numerable_icon_get_style_context(this1)
	var ret2 *StyleContext
	ret2 = (*StyleContext)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
func (this0 *NumerableIcon) SetBackgroundGIcon(icon0 gio.IconLike) {
	var this1 *C.GtkNumerableIcon
	var icon1 *C.GIcon
	if this0 != nil {
		this1 = this0.InheritedFromGtkNumerableIcon()
	}
	if icon0 != nil {
		icon1 = icon0.ImplementsGIcon()}
	C.gtk_numerable_icon_set_background_gicon(this1, icon1)
}
func (this0 *NumerableIcon) SetBackgroundIconName(icon_name0 string) {
	var this1 *C.GtkNumerableIcon
	var icon_name1 *C.char
	if this0 != nil {
		this1 = this0.InheritedFromGtkNumerableIcon()
	}
	icon_name1 = _GoStringToGString(icon_name0)
	defer C.free(unsafe.Pointer(icon_name1))
	C.gtk_numerable_icon_set_background_icon_name(this1, icon_name1)
}
func (this0 *NumerableIcon) SetCount(count0 int) {
	var this1 *C.GtkNumerableIcon
	var count1 C.int32_t
	if this0 != nil {
		this1 = this0.InheritedFromGtkNumerableIcon()
	}
	count1 = C.int32_t(count0)
	C.gtk_numerable_icon_set_count(this1, count1)
}
func (this0 *NumerableIcon) SetLabel(label0 string) {
	var this1 *C.GtkNumerableIcon
	var label1 *C.char
	if this0 != nil {
		this1 = this0.InheritedFromGtkNumerableIcon()
	}
	label1 = _GoStringToGString(label0)
	defer C.free(unsafe.Pointer(label1))
	C.gtk_numerable_icon_set_label(this1, label1)
}
func (this0 *NumerableIcon) SetStyleContext(style0 StyleContextLike) {
	var this1 *C.GtkNumerableIcon
	var style1 *C.GtkStyleContext
	if this0 != nil {
		this1 = this0.InheritedFromGtkNumerableIcon()
	}
	if style0 != nil {
		style1 = style0.InheritedFromGtkStyleContext()
	}
	C.gtk_numerable_icon_set_style_context(this1, style1)
}
type OffscreenWindowLike interface {
	WindowLike
	InheritedFromGtkOffscreenWindow() *C.GtkOffscreenWindow
}

type OffscreenWindow struct {
	Window
	atk.ImplementorIfaceImpl
	BuildableImpl
}

func ToOffscreenWindow(objlike gobject.ObjectLike) *OffscreenWindow {
	c := objlike.InheritedFromGObject()
	if c == nil {
		return nil
	}
	t := (*OffscreenWindow)(nil).GetStaticType()
	obj := gobject.ObjectGrabIfType(unsafe.Pointer(c), t)
	if obj != nil {
		return (*OffscreenWindow)(obj)
	}
	panic("cannot cast to OffscreenWindow")
}

func (this0 *OffscreenWindow) InheritedFromGtkOffscreenWindow() *C.GtkOffscreenWindow {
	if this0 == nil {
		return nil
	}
	return (*C.GtkOffscreenWindow)(this0.C)
}

func (this0 *OffscreenWindow) GetStaticType() gobject.Type {
	return gobject.Type(C.gtk_offscreen_window_get_type())
}

func OffscreenWindowGetType() gobject.Type {
	return (*OffscreenWindow)(nil).GetStaticType()
}
func NewOffscreenWindow() *OffscreenWindow {
	ret1 := C.gtk_offscreen_window_new()
	var ret2 *OffscreenWindow
	ret2 = (*OffscreenWindow)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
func (this0 *OffscreenWindow) GetPixbuf() *gdkpixbuf.Pixbuf {
	var this1 *C.GtkOffscreenWindow
	if this0 != nil {
		this1 = this0.InheritedFromGtkOffscreenWindow()
	}
	ret1 := C.gtk_offscreen_window_get_pixbuf(this1)
	var ret2 *gdkpixbuf.Pixbuf
	ret2 = (*gdkpixbuf.Pixbuf)(gobject.ObjectWrap(unsafe.Pointer(ret1), false))
	return ret2
}
func (this0 *OffscreenWindow) GetSurface() *cairo.Surface {
	var this1 *C.GtkOffscreenWindow
	if this0 != nil {
		this1 = this0.InheritedFromGtkOffscreenWindow()
	}
	ret1 := C.gtk_offscreen_window_get_surface(this1)
	var ret2 *cairo.Surface
	ret2 = (*cairo.Surface)(cairo.SurfaceWrap(unsafe.Pointer(ret1), true))
	return ret2
}
type OrientableLike interface {
	ImplementsGtkOrientable() *C.GtkOrientable
}

type Orientable struct {
	gobject.Object
	OrientableImpl
}

type OrientableImpl struct {}

func ToOrientable(objlike gobject.ObjectLike) *Orientable {
	t := (*OrientableImpl)(nil).GetStaticType()
	c := objlike.InheritedFromGObject()
	obj := gobject.ObjectGrabIfType(unsafe.Pointer(c), t)
	if obj != nil {
		return (*Orientable)(obj)
	}
	panic("cannot cast to Orientable")
}

func (this0 *OrientableImpl) ImplementsGtkOrientable() *C.GtkOrientable {
	obj := uintptr(unsafe.Pointer(this0)) - unsafe.Sizeof(uintptr(0))
	return (*C.GtkOrientable)((*gobject.Object)(unsafe.Pointer(obj)).C)
}

func (this0 *OrientableImpl) GetStaticType() gobject.Type {
	return gobject.Type(C.gtk_orientable_get_type())
}

func OrientableGetType() gobject.Type {
	return (*OrientableImpl)(nil).GetStaticType()
}
func (this0 *OrientableImpl) GetOrientation() Orientation {
	var this1 *C.GtkOrientable
	if this0 != nil {
		this1 = this0.ImplementsGtkOrientable()}
	ret1 := C.gtk_orientable_get_orientation(this1)
	var ret2 Orientation
	ret2 = Orientation(ret1)
	return ret2
}
func (this0 *OrientableImpl) SetOrientation(orientation0 Orientation) {
	var this1 *C.GtkOrientable
	var orientation1 C.GtkOrientation
	if this0 != nil {
		this1 = this0.ImplementsGtkOrientable()}
	orientation1 = C.GtkOrientation(orientation0)
	C.gtk_orientable_set_orientation(this1, orientation1)
}
type Orientation C.uint32_t
const (
	OrientationHorizontal Orientation = 0
	OrientationVertical Orientation = 1
)
type OverlayLike interface {
	BinLike
	InheritedFromGtkOverlay() *C.GtkOverlay
}

type Overlay struct {
	Bin
	atk.ImplementorIfaceImpl
	BuildableImpl
}

func ToOverlay(objlike gobject.ObjectLike) *Overlay {
	c := objlike.InheritedFromGObject()
	if c == nil {
		return nil
	}
	t := (*Overlay)(nil).GetStaticType()
	obj := gobject.ObjectGrabIfType(unsafe.Pointer(c), t)
	if obj != nil {
		return (*Overlay)(obj)
	}
	panic("cannot cast to Overlay")
}

func (this0 *Overlay) InheritedFromGtkOverlay() *C.GtkOverlay {
	if this0 == nil {
		return nil
	}
	return (*C.GtkOverlay)(this0.C)
}

func (this0 *Overlay) GetStaticType() gobject.Type {
	return gobject.Type(C.gtk_overlay_get_type())
}

func OverlayGetType() gobject.Type {
	return (*Overlay)(nil).GetStaticType()
}
func NewOverlay() *Overlay {
	ret1 := C.gtk_overlay_new()
	var ret2 *Overlay
	ret2 = (*Overlay)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
func (this0 *Overlay) AddOverlay(widget0 WidgetLike) {
	var this1 *C.GtkOverlay
	var widget1 *C.GtkWidget
	if this0 != nil {
		this1 = this0.InheritedFromGtkOverlay()
	}
	if widget0 != nil {
		widget1 = widget0.InheritedFromGtkWidget()
	}
	C.gtk_overlay_add_overlay(this1, widget1)
}
const PaperNameA3 = "iso_a3"
const PaperNameA4 = "iso_a4"
const PaperNameA5 = "iso_a5"
const PaperNameB5 = "iso_b5"
const PaperNameExecutive = "na_executive"
const PaperNameLegal = "na_legal"
const PaperNameLetter = "na_letter"
const PathPrioMask = 15
const PrintSettingsCollate = "collate"
const PrintSettingsDefaultSource = "default-source"
const PrintSettingsDither = "dither"
const PrintSettingsDuplex = "duplex"
const PrintSettingsFinishings = "finishings"
const PrintSettingsMediaType = "media-type"
const PrintSettingsNumberUp = "number-up"
const PrintSettingsNumberUpLayout = "number-up-layout"
const PrintSettingsNCopies = "n-copies"
const PrintSettingsOrientation = "orientation"
const PrintSettingsOutputBin = "output-bin"
const PrintSettingsOutputFileFormat = "output-file-format"
const PrintSettingsOutputURI = "output-uri"
const PrintSettingsPageRanges = "page-ranges"
const PrintSettingsPageSet = "page-set"
const PrintSettingsPaperFormat = "paper-format"
const PrintSettingsPaperHeight = "paper-height"
const PrintSettingsPaperWidth = "paper-width"
const PrintSettingsPrinter = "printer"
const PrintSettingsPrinterLPI = "printer-lpi"
const PrintSettingsPrintPages = "print-pages"
const PrintSettingsQuality = "quality"
const PrintSettingsResolution = "resolution"
const PrintSettingsResolutionX = "resolution-x"
const PrintSettingsResolutionY = "resolution-y"
const PrintSettingsReverse = "reverse"
const PrintSettingsScale = "scale"
const PrintSettingsUseColor = "use-color"
const PrintSettingsWin32DriverExtra = "win32-driver-extra"
const PrintSettingsWin32DriverVersion = "win32-driver-version"
const PriorityResize = 10
type PackDirection C.uint32_t
const (
	PackDirectionLtr PackDirection = 0
	PackDirectionRtl PackDirection = 1
	PackDirectionTtb PackDirection = 2
	PackDirectionBtt PackDirection = 3
)
type PackType C.uint32_t
const (
	PackTypeStart PackType = 0
	PackTypeEnd PackType = 1
)
type PageOrientation C.uint32_t
const (
	PageOrientationPortrait PageOrientation = 0
	PageOrientationLandscape PageOrientation = 1
	PageOrientationReversePortrait PageOrientation = 2
	PageOrientationReverseLandscape PageOrientation = 3
)
type PageRange struct {
	Start int32
	End int32
}
type PageSet C.uint32_t
const (
	PageSetAll PageSet = 0
	PageSetEven PageSet = 1
	PageSetOdd PageSet = 2
)
type PageSetupLike interface {
	gobject.ObjectLike
	InheritedFromGtkPageSetup() *C.GtkPageSetup
}

type PageSetup struct {
	gobject.Object
	
}

func ToPageSetup(objlike gobject.ObjectLike) *PageSetup {
	c := objlike.InheritedFromGObject()
	if c == nil {
		return nil
	}
	t := (*PageSetup)(nil).GetStaticType()
	obj := gobject.ObjectGrabIfType(unsafe.Pointer(c), t)
	if obj != nil {
		return (*PageSetup)(obj)
	}
	panic("cannot cast to PageSetup")
}

func (this0 *PageSetup) InheritedFromGtkPageSetup() *C.GtkPageSetup {
	if this0 == nil {
		return nil
	}
	return (*C.GtkPageSetup)(this0.C)
}

func (this0 *PageSetup) GetStaticType() gobject.Type {
	return gobject.Type(C.gtk_page_setup_get_type())
}

func PageSetupGetType() gobject.Type {
	return (*PageSetup)(nil).GetStaticType()
}
func NewPageSetup() *PageSetup {
	ret1 := C.gtk_page_setup_new()
	var ret2 *PageSetup
	ret2 = (*PageSetup)(gobject.ObjectWrap(unsafe.Pointer(ret1), false))
	return ret2
}
func NewPageSetupFromFile(file_name0 string) (*PageSetup, error) {
	var file_name1 *C.char
	var err1 *C.GError
	file_name1 = _GoStringToGString(file_name0)
	defer C.free(unsafe.Pointer(file_name1))
	ret1 := C.gtk_page_setup_new_from_file(file_name1, &err1)
	var ret2 *PageSetup
	var err2 error
	ret2 = (*PageSetup)(gobject.ObjectWrap(unsafe.Pointer(ret1), false))
	if err1 != nil {
		err2 = errors.New(C.GoString(((*_GError)(unsafe.Pointer(err1))).message))
		C.g_error_free(err1)
	}
	return ret2, err2
}
func NewPageSetupFromKeyFile(key_file0 *glib.KeyFile, group_name0 string) (*PageSetup, error) {
	var key_file1 *C.GKeyFile
	var group_name1 *C.char
	var err1 *C.GError
	key_file1 = (*C.GKeyFile)(unsafe.Pointer(key_file0))
	group_name1 = _GoStringToGString(group_name0)
	defer C.free(unsafe.Pointer(group_name1))
	ret1 := C.gtk_page_setup_new_from_key_file(key_file1, group_name1, &err1)
	var ret2 *PageSetup
	var err2 error
	ret2 = (*PageSetup)(gobject.ObjectWrap(unsafe.Pointer(ret1), false))
	if err1 != nil {
		err2 = errors.New(C.GoString(((*_GError)(unsafe.Pointer(err1))).message))
		C.g_error_free(err1)
	}
	return ret2, err2
}
func (this0 *PageSetup) Copy() *PageSetup {
	var this1 *C.GtkPageSetup
	if this0 != nil {
		this1 = this0.InheritedFromGtkPageSetup()
	}
	ret1 := C.gtk_page_setup_copy(this1)
	var ret2 *PageSetup
	ret2 = (*PageSetup)(gobject.ObjectWrap(unsafe.Pointer(ret1), false))
	return ret2
}
func (this0 *PageSetup) GetBottomMargin(unit0 Unit) float64 {
	var this1 *C.GtkPageSetup
	var unit1 C.GtkUnit
	if this0 != nil {
		this1 = this0.InheritedFromGtkPageSetup()
	}
	unit1 = C.GtkUnit(unit0)
	ret1 := C.gtk_page_setup_get_bottom_margin(this1, unit1)
	var ret2 float64
	ret2 = float64(ret1)
	return ret2
}
func (this0 *PageSetup) GetLeftMargin(unit0 Unit) float64 {
	var this1 *C.GtkPageSetup
	var unit1 C.GtkUnit
	if this0 != nil {
		this1 = this0.InheritedFromGtkPageSetup()
	}
	unit1 = C.GtkUnit(unit0)
	ret1 := C.gtk_page_setup_get_left_margin(this1, unit1)
	var ret2 float64
	ret2 = float64(ret1)
	return ret2
}
func (this0 *PageSetup) GetOrientation() PageOrientation {
	var this1 *C.GtkPageSetup
	if this0 != nil {
		this1 = this0.InheritedFromGtkPageSetup()
	}
	ret1 := C.gtk_page_setup_get_orientation(this1)
	var ret2 PageOrientation
	ret2 = PageOrientation(ret1)
	return ret2
}
func (this0 *PageSetup) GetPageHeight(unit0 Unit) float64 {
	var this1 *C.GtkPageSetup
	var unit1 C.GtkUnit
	if this0 != nil {
		this1 = this0.InheritedFromGtkPageSetup()
	}
	unit1 = C.GtkUnit(unit0)
	ret1 := C.gtk_page_setup_get_page_height(this1, unit1)
	var ret2 float64
	ret2 = float64(ret1)
	return ret2
}
func (this0 *PageSetup) GetPageWidth(unit0 Unit) float64 {
	var this1 *C.GtkPageSetup
	var unit1 C.GtkUnit
	if this0 != nil {
		this1 = this0.InheritedFromGtkPageSetup()
	}
	unit1 = C.GtkUnit(unit0)
	ret1 := C.gtk_page_setup_get_page_width(this1, unit1)
	var ret2 float64
	ret2 = float64(ret1)
	return ret2
}
func (this0 *PageSetup) GetPaperHeight(unit0 Unit) float64 {
	var this1 *C.GtkPageSetup
	var unit1 C.GtkUnit
	if this0 != nil {
		this1 = this0.InheritedFromGtkPageSetup()
	}
	unit1 = C.GtkUnit(unit0)
	ret1 := C.gtk_page_setup_get_paper_height(this1, unit1)
	var ret2 float64
	ret2 = float64(ret1)
	return ret2
}
func (this0 *PageSetup) GetPaperSize() *PaperSize {
	var this1 *C.GtkPageSetup
	if this0 != nil {
		this1 = this0.InheritedFromGtkPageSetup()
	}
	ret1 := C.gtk_page_setup_get_paper_size(this1)
	var ret2 *PaperSize
	ret2 = (*PaperSize)(unsafe.Pointer(ret1))
	return ret2
}
func (this0 *PageSetup) GetPaperWidth(unit0 Unit) float64 {
	var this1 *C.GtkPageSetup
	var unit1 C.GtkUnit
	if this0 != nil {
		this1 = this0.InheritedFromGtkPageSetup()
	}
	unit1 = C.GtkUnit(unit0)
	ret1 := C.gtk_page_setup_get_paper_width(this1, unit1)
	var ret2 float64
	ret2 = float64(ret1)
	return ret2
}
func (this0 *PageSetup) GetRightMargin(unit0 Unit) float64 {
	var this1 *C.GtkPageSetup
	var unit1 C.GtkUnit
	if this0 != nil {
		this1 = this0.InheritedFromGtkPageSetup()
	}
	unit1 = C.GtkUnit(unit0)
	ret1 := C.gtk_page_setup_get_right_margin(this1, unit1)
	var ret2 float64
	ret2 = float64(ret1)
	return ret2
}
func (this0 *PageSetup) GetTopMargin(unit0 Unit) float64 {
	var this1 *C.GtkPageSetup
	var unit1 C.GtkUnit
	if this0 != nil {
		this1 = this0.InheritedFromGtkPageSetup()
	}
	unit1 = C.GtkUnit(unit0)
	ret1 := C.gtk_page_setup_get_top_margin(this1, unit1)
	var ret2 float64
	ret2 = float64(ret1)
	return ret2
}
func (this0 *PageSetup) LoadFile(file_name0 string) (bool, error) {
	var this1 *C.GtkPageSetup
	var file_name1 *C.char
	var err1 *C.GError
	if this0 != nil {
		this1 = this0.InheritedFromGtkPageSetup()
	}
	file_name1 = _GoStringToGString(file_name0)
	defer C.free(unsafe.Pointer(file_name1))
	ret1 := C.gtk_page_setup_load_file(this1, file_name1, &err1)
	var ret2 bool
	var err2 error
	ret2 = ret1 != 0
	if err1 != nil {
		err2 = errors.New(C.GoString(((*_GError)(unsafe.Pointer(err1))).message))
		C.g_error_free(err1)
	}
	return ret2, err2
}
func (this0 *PageSetup) LoadKeyFile(key_file0 *glib.KeyFile, group_name0 string) (bool, error) {
	var this1 *C.GtkPageSetup
	var key_file1 *C.GKeyFile
	var group_name1 *C.char
	var err1 *C.GError
	if this0 != nil {
		this1 = this0.InheritedFromGtkPageSetup()
	}
	key_file1 = (*C.GKeyFile)(unsafe.Pointer(key_file0))
	group_name1 = _GoStringToGString(group_name0)
	defer C.free(unsafe.Pointer(group_name1))
	ret1 := C.gtk_page_setup_load_key_file(this1, key_file1, group_name1, &err1)
	var ret2 bool
	var err2 error
	ret2 = ret1 != 0
	if err1 != nil {
		err2 = errors.New(C.GoString(((*_GError)(unsafe.Pointer(err1))).message))
		C.g_error_free(err1)
	}
	return ret2, err2
}
func (this0 *PageSetup) SetBottomMargin(margin0 float64, unit0 Unit) {
	var this1 *C.GtkPageSetup
	var margin1 C.double
	var unit1 C.GtkUnit
	if this0 != nil {
		this1 = this0.InheritedFromGtkPageSetup()
	}
	margin1 = C.double(margin0)
	unit1 = C.GtkUnit(unit0)
	C.gtk_page_setup_set_bottom_margin(this1, margin1, unit1)
}
func (this0 *PageSetup) SetLeftMargin(margin0 float64, unit0 Unit) {
	var this1 *C.GtkPageSetup
	var margin1 C.double
	var unit1 C.GtkUnit
	if this0 != nil {
		this1 = this0.InheritedFromGtkPageSetup()
	}
	margin1 = C.double(margin0)
	unit1 = C.GtkUnit(unit0)
	C.gtk_page_setup_set_left_margin(this1, margin1, unit1)
}
func (this0 *PageSetup) SetOrientation(orientation0 PageOrientation) {
	var this1 *C.GtkPageSetup
	var orientation1 C.GtkPageOrientation
	if this0 != nil {
		this1 = this0.InheritedFromGtkPageSetup()
	}
	orientation1 = C.GtkPageOrientation(orientation0)
	C.gtk_page_setup_set_orientation(this1, orientation1)
}
func (this0 *PageSetup) SetPaperSize(size0 *PaperSize) {
	var this1 *C.GtkPageSetup
	var size1 *C.GtkPaperSize
	if this0 != nil {
		this1 = this0.InheritedFromGtkPageSetup()
	}
	size1 = (*C.GtkPaperSize)(unsafe.Pointer(size0))
	C.gtk_page_setup_set_paper_size(this1, size1)
}
func (this0 *PageSetup) SetPaperSizeAndDefaultMargins(size0 *PaperSize) {
	var this1 *C.GtkPageSetup
	var size1 *C.GtkPaperSize
	if this0 != nil {
		this1 = this0.InheritedFromGtkPageSetup()
	}
	size1 = (*C.GtkPaperSize)(unsafe.Pointer(size0))
	C.gtk_page_setup_set_paper_size_and_default_margins(this1, size1)
}
func (this0 *PageSetup) SetRightMargin(margin0 float64, unit0 Unit) {
	var this1 *C.GtkPageSetup
	var margin1 C.double
	var unit1 C.GtkUnit
	if this0 != nil {
		this1 = this0.InheritedFromGtkPageSetup()
	}
	margin1 = C.double(margin0)
	unit1 = C.GtkUnit(unit0)
	C.gtk_page_setup_set_right_margin(this1, margin1, unit1)
}
func (this0 *PageSetup) SetTopMargin(margin0 float64, unit0 Unit) {
	var this1 *C.GtkPageSetup
	var margin1 C.double
	var unit1 C.GtkUnit
	if this0 != nil {
		this1 = this0.InheritedFromGtkPageSetup()
	}
	margin1 = C.double(margin0)
	unit1 = C.GtkUnit(unit0)
	C.gtk_page_setup_set_top_margin(this1, margin1, unit1)
}
func (this0 *PageSetup) ToFile(file_name0 string) (bool, error) {
	var this1 *C.GtkPageSetup
	var file_name1 *C.char
	var err1 *C.GError
	if this0 != nil {
		this1 = this0.InheritedFromGtkPageSetup()
	}
	file_name1 = _GoStringToGString(file_name0)
	defer C.free(unsafe.Pointer(file_name1))
	ret1 := C.gtk_page_setup_to_file(this1, file_name1, &err1)
	var ret2 bool
	var err2 error
	ret2 = ret1 != 0
	if err1 != nil {
		err2 = errors.New(C.GoString(((*_GError)(unsafe.Pointer(err1))).message))
		C.g_error_free(err1)
	}
	return ret2, err2
}
func (this0 *PageSetup) ToKeyFile(key_file0 *glib.KeyFile, group_name0 string) {
	var this1 *C.GtkPageSetup
	var key_file1 *C.GKeyFile
	var group_name1 *C.char
	if this0 != nil {
		this1 = this0.InheritedFromGtkPageSetup()
	}
	key_file1 = (*C.GKeyFile)(unsafe.Pointer(key_file0))
	group_name1 = _GoStringToGString(group_name0)
	defer C.free(unsafe.Pointer(group_name1))
	C.gtk_page_setup_to_key_file(this1, key_file1, group_name1)
}
type PageSetupDoneFunc func(page_setup *PageSetup)
//export _GtkPageSetupDoneFunc_c_wrapper
func _GtkPageSetupDoneFunc_c_wrapper(page_setup0 unsafe.Pointer, data0 unsafe.Pointer) {
	var page_setup1 *PageSetup
	var data1 PageSetupDoneFunc
	page_setup1 = (*PageSetup)(gobject.ObjectWrap(unsafe.Pointer((*C.GtkPageSetup)(page_setup0)), true))
	data1 = *(*PageSetupDoneFunc)(data0)
	data1(page_setup1)
}
//export _GtkPageSetupDoneFunc_c_wrapper_once
func _GtkPageSetupDoneFunc_c_wrapper_once(page_setup0 unsafe.Pointer, data0 unsafe.Pointer) {
	_GtkPageSetupDoneFunc_c_wrapper(page_setup0, data0)
	gobject.Holder.Release(data0)
}
type PanedLike interface {
	ContainerLike
	InheritedFromGtkPaned() *C.GtkPaned
}

type Paned struct {
	Container
	atk.ImplementorIfaceImpl
	BuildableImpl
	OrientableImpl
}

func ToPaned(objlike gobject.ObjectLike) *Paned {
	c := objlike.InheritedFromGObject()
	if c == nil {
		return nil
	}
	t := (*Paned)(nil).GetStaticType()
	obj := gobject.ObjectGrabIfType(unsafe.Pointer(c), t)
	if obj != nil {
		return (*Paned)(obj)
	}
	panic("cannot cast to Paned")
}

func (this0 *Paned) InheritedFromGtkPaned() *C.GtkPaned {
	if this0 == nil {
		return nil
	}
	return (*C.GtkPaned)(this0.C)
}

func (this0 *Paned) GetStaticType() gobject.Type {
	return gobject.Type(C.gtk_paned_get_type())
}

func PanedGetType() gobject.Type {
	return (*Paned)(nil).GetStaticType()
}
func NewPaned(orientation0 Orientation) *Paned {
	var orientation1 C.GtkOrientation
	orientation1 = C.GtkOrientation(orientation0)
	ret1 := C.gtk_paned_new(orientation1)
	var ret2 *Paned
	ret2 = (*Paned)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
func (this0 *Paned) Add1(child0 WidgetLike) {
	var this1 *C.GtkPaned
	var child1 *C.GtkWidget
	if this0 != nil {
		this1 = this0.InheritedFromGtkPaned()
	}
	if child0 != nil {
		child1 = child0.InheritedFromGtkWidget()
	}
	C.gtk_paned_add1(this1, child1)
}
func (this0 *Paned) Add2(child0 WidgetLike) {
	var this1 *C.GtkPaned
	var child1 *C.GtkWidget
	if this0 != nil {
		this1 = this0.InheritedFromGtkPaned()
	}
	if child0 != nil {
		child1 = child0.InheritedFromGtkWidget()
	}
	C.gtk_paned_add2(this1, child1)
}
func (this0 *Paned) GetChild1() *Widget {
	var this1 *C.GtkPaned
	if this0 != nil {
		this1 = this0.InheritedFromGtkPaned()
	}
	ret1 := C.gtk_paned_get_child1(this1)
	var ret2 *Widget
	ret2 = (*Widget)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
func (this0 *Paned) GetChild2() *Widget {
	var this1 *C.GtkPaned
	if this0 != nil {
		this1 = this0.InheritedFromGtkPaned()
	}
	ret1 := C.gtk_paned_get_child2(this1)
	var ret2 *Widget
	ret2 = (*Widget)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
func (this0 *Paned) GetHandleWindow() *gdk.Window {
	var this1 *C.GtkPaned
	if this0 != nil {
		this1 = this0.InheritedFromGtkPaned()
	}
	ret1 := C.gtk_paned_get_handle_window(this1)
	var ret2 *gdk.Window
	ret2 = (*gdk.Window)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
func (this0 *Paned) GetPosition() int {
	var this1 *C.GtkPaned
	if this0 != nil {
		this1 = this0.InheritedFromGtkPaned()
	}
	ret1 := C.gtk_paned_get_position(this1)
	var ret2 int
	ret2 = int(ret1)
	return ret2
}
func (this0 *Paned) Pack1(child0 WidgetLike, resize0 bool, shrink0 bool) {
	var this1 *C.GtkPaned
	var child1 *C.GtkWidget
	var resize1 C.int
	var shrink1 C.int
	if this0 != nil {
		this1 = this0.InheritedFromGtkPaned()
	}
	if child0 != nil {
		child1 = child0.InheritedFromGtkWidget()
	}
	resize1 = _GoBoolToCBool(resize0)
	shrink1 = _GoBoolToCBool(shrink0)
	C.gtk_paned_pack1(this1, child1, resize1, shrink1)
}
func (this0 *Paned) Pack2(child0 WidgetLike, resize0 bool, shrink0 bool) {
	var this1 *C.GtkPaned
	var child1 *C.GtkWidget
	var resize1 C.int
	var shrink1 C.int
	if this0 != nil {
		this1 = this0.InheritedFromGtkPaned()
	}
	if child0 != nil {
		child1 = child0.InheritedFromGtkWidget()
	}
	resize1 = _GoBoolToCBool(resize0)
	shrink1 = _GoBoolToCBool(shrink0)
	C.gtk_paned_pack2(this1, child1, resize1, shrink1)
}
func (this0 *Paned) SetPosition(position0 int) {
	var this1 *C.GtkPaned
	var position1 C.int32_t
	if this0 != nil {
		this1 = this0.InheritedFromGtkPaned()
	}
	position1 = C.int32_t(position0)
	C.gtk_paned_set_position(this1, position1)
}
type PaperSize struct {}
func NewPaperSize(name0 string) *PaperSize {
	var name1 *C.char
	name1 = _GoStringToGString(name0)
	defer C.free(unsafe.Pointer(name1))
	ret1 := C.gtk_paper_size_new(name1)
	var ret2 *PaperSize
	ret2 = (*PaperSize)(unsafe.Pointer(ret1))
	return ret2
}
func NewPaperSizeCustom(name0 string, display_name0 string, width0 float64, height0 float64, unit0 Unit) *PaperSize {
	var name1 *C.char
	var display_name1 *C.char
	var width1 C.double
	var height1 C.double
	var unit1 C.GtkUnit
	name1 = _GoStringToGString(name0)
	defer C.free(unsafe.Pointer(name1))
	display_name1 = _GoStringToGString(display_name0)
	defer C.free(unsafe.Pointer(display_name1))
	width1 = C.double(width0)
	height1 = C.double(height0)
	unit1 = C.GtkUnit(unit0)
	ret1 := C.gtk_paper_size_new_custom(name1, display_name1, width1, height1, unit1)
	var ret2 *PaperSize
	ret2 = (*PaperSize)(unsafe.Pointer(ret1))
	return ret2
}
func NewPaperSizeFromKeyFile(key_file0 *glib.KeyFile, group_name0 string) (*PaperSize, error) {
	var key_file1 *C.GKeyFile
	var group_name1 *C.char
	var err1 *C.GError
	key_file1 = (*C.GKeyFile)(unsafe.Pointer(key_file0))
	group_name1 = _GoStringToGString(group_name0)
	defer C.free(unsafe.Pointer(group_name1))
	ret1 := C.gtk_paper_size_new_from_key_file(key_file1, group_name1, &err1)
	var ret2 *PaperSize
	var err2 error
	ret2 = (*PaperSize)(unsafe.Pointer(ret1))
	if err1 != nil {
		err2 = errors.New(C.GoString(((*_GError)(unsafe.Pointer(err1))).message))
		C.g_error_free(err1)
	}
	return ret2, err2
}
func NewPaperSizeFromPPD(ppd_name0 string, ppd_display_name0 string, width0 float64, height0 float64) *PaperSize {
	var ppd_name1 *C.char
	var ppd_display_name1 *C.char
	var width1 C.double
	var height1 C.double
	ppd_name1 = _GoStringToGString(ppd_name0)
	defer C.free(unsafe.Pointer(ppd_name1))
	ppd_display_name1 = _GoStringToGString(ppd_display_name0)
	defer C.free(unsafe.Pointer(ppd_display_name1))
	width1 = C.double(width0)
	height1 = C.double(height0)
	ret1 := C.gtk_paper_size_new_from_ppd(ppd_name1, ppd_display_name1, width1, height1)
	var ret2 *PaperSize
	ret2 = (*PaperSize)(unsafe.Pointer(ret1))
	return ret2
}
func (this0 *PaperSize) Copy() *PaperSize {
	var this1 *C.GtkPaperSize
	this1 = (*C.GtkPaperSize)(unsafe.Pointer(this0))
	ret1 := C.gtk_paper_size_copy(this1)
	var ret2 *PaperSize
	ret2 = (*PaperSize)(unsafe.Pointer(ret1))
	return ret2
}
func (this0 *PaperSize) Free() {
	var this1 *C.GtkPaperSize
	this1 = (*C.GtkPaperSize)(unsafe.Pointer(this0))
	C.gtk_paper_size_free(this1)
}
func (this0 *PaperSize) GetDefaultBottomMargin(unit0 Unit) float64 {
	var this1 *C.GtkPaperSize
	var unit1 C.GtkUnit
	this1 = (*C.GtkPaperSize)(unsafe.Pointer(this0))
	unit1 = C.GtkUnit(unit0)
	ret1 := C.gtk_paper_size_get_default_bottom_margin(this1, unit1)
	var ret2 float64
	ret2 = float64(ret1)
	return ret2
}
func (this0 *PaperSize) GetDefaultLeftMargin(unit0 Unit) float64 {
	var this1 *C.GtkPaperSize
	var unit1 C.GtkUnit
	this1 = (*C.GtkPaperSize)(unsafe.Pointer(this0))
	unit1 = C.GtkUnit(unit0)
	ret1 := C.gtk_paper_size_get_default_left_margin(this1, unit1)
	var ret2 float64
	ret2 = float64(ret1)
	return ret2
}
func (this0 *PaperSize) GetDefaultRightMargin(unit0 Unit) float64 {
	var this1 *C.GtkPaperSize
	var unit1 C.GtkUnit
	this1 = (*C.GtkPaperSize)(unsafe.Pointer(this0))
	unit1 = C.GtkUnit(unit0)
	ret1 := C.gtk_paper_size_get_default_right_margin(this1, unit1)
	var ret2 float64
	ret2 = float64(ret1)
	return ret2
}
func (this0 *PaperSize) GetDefaultTopMargin(unit0 Unit) float64 {
	var this1 *C.GtkPaperSize
	var unit1 C.GtkUnit
	this1 = (*C.GtkPaperSize)(unsafe.Pointer(this0))
	unit1 = C.GtkUnit(unit0)
	ret1 := C.gtk_paper_size_get_default_top_margin(this1, unit1)
	var ret2 float64
	ret2 = float64(ret1)
	return ret2
}
func (this0 *PaperSize) GetDisplayName() string {
	var this1 *C.GtkPaperSize
	this1 = (*C.GtkPaperSize)(unsafe.Pointer(this0))
	ret1 := C.gtk_paper_size_get_display_name(this1)
	var ret2 string
	ret2 = C.GoString(ret1)
	return ret2
}
func (this0 *PaperSize) GetHeight(unit0 Unit) float64 {
	var this1 *C.GtkPaperSize
	var unit1 C.GtkUnit
	this1 = (*C.GtkPaperSize)(unsafe.Pointer(this0))
	unit1 = C.GtkUnit(unit0)
	ret1 := C.gtk_paper_size_get_height(this1, unit1)
	var ret2 float64
	ret2 = float64(ret1)
	return ret2
}
func (this0 *PaperSize) GetName() string {
	var this1 *C.GtkPaperSize
	this1 = (*C.GtkPaperSize)(unsafe.Pointer(this0))
	ret1 := C.gtk_paper_size_get_name(this1)
	var ret2 string
	ret2 = C.GoString(ret1)
	return ret2
}
func (this0 *PaperSize) GetPPDName() string {
	var this1 *C.GtkPaperSize
	this1 = (*C.GtkPaperSize)(unsafe.Pointer(this0))
	ret1 := C.gtk_paper_size_get_ppd_name(this1)
	var ret2 string
	ret2 = C.GoString(ret1)
	return ret2
}
func (this0 *PaperSize) GetWidth(unit0 Unit) float64 {
	var this1 *C.GtkPaperSize
	var unit1 C.GtkUnit
	this1 = (*C.GtkPaperSize)(unsafe.Pointer(this0))
	unit1 = C.GtkUnit(unit0)
	ret1 := C.gtk_paper_size_get_width(this1, unit1)
	var ret2 float64
	ret2 = float64(ret1)
	return ret2
}
func (this0 *PaperSize) IsCustom() bool {
	var this1 *C.GtkPaperSize
	this1 = (*C.GtkPaperSize)(unsafe.Pointer(this0))
	ret1 := C.gtk_paper_size_is_custom(this1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *PaperSize) IsEqual(size20 *PaperSize) bool {
	var this1 *C.GtkPaperSize
	var size21 *C.GtkPaperSize
	this1 = (*C.GtkPaperSize)(unsafe.Pointer(this0))
	size21 = (*C.GtkPaperSize)(unsafe.Pointer(size20))
	ret1 := C.gtk_paper_size_is_equal(this1, size21)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *PaperSize) SetSize(width0 float64, height0 float64, unit0 Unit) {
	var this1 *C.GtkPaperSize
	var width1 C.double
	var height1 C.double
	var unit1 C.GtkUnit
	this1 = (*C.GtkPaperSize)(unsafe.Pointer(this0))
	width1 = C.double(width0)
	height1 = C.double(height0)
	unit1 = C.GtkUnit(unit0)
	C.gtk_paper_size_set_size(this1, width1, height1, unit1)
}
func (this0 *PaperSize) ToKeyFile(key_file0 *glib.KeyFile, group_name0 string) {
	var this1 *C.GtkPaperSize
	var key_file1 *C.GKeyFile
	var group_name1 *C.char
	this1 = (*C.GtkPaperSize)(unsafe.Pointer(this0))
	key_file1 = (*C.GKeyFile)(unsafe.Pointer(key_file0))
	group_name1 = _GoStringToGString(group_name0)
	defer C.free(unsafe.Pointer(group_name1))
	C.gtk_paper_size_to_key_file(this1, key_file1, group_name1)
}
func PaperSizeGetDefault() string {
	ret1 := C.gtk_paper_size_get_default()
	var ret2 string
	ret2 = C.GoString(ret1)
	return ret2
}
func PaperSizeGetPaperSizes(include_custom0 bool) []PaperSize {
	var include_custom1 C.int
	include_custom1 = _GoBoolToCBool(include_custom0)
	ret1 := C.gtk_paper_size_get_paper_sizes(include_custom1)
	var ret2 []PaperSize
	for iter := (*_GList)(unsafe.Pointer(ret1)); iter != nil; iter = iter.next {
		var elt PaperSize
		elt = *(*PaperSize)(unsafe.Pointer((*C.GtkPaperSize)(iter.data)))
		ret2 = append(ret2, elt)
	}
	return ret2
}
type PathPriorityType C.uint32_t
const (
	PathPriorityTypeLowest PathPriorityType = 0
	PathPriorityTypeGtk PathPriorityType = 4
	PathPriorityTypeApplication PathPriorityType = 8
	PathPriorityTypeTheme PathPriorityType = 10
	PathPriorityTypeRc PathPriorityType = 12
	PathPriorityTypeHighest PathPriorityType = 15
)
type PathType C.uint32_t
const (
	PathTypeWidget PathType = 0
	PathTypeWidgetClass PathType = 1
	PathTypeClass PathType = 2
)
type PlugLike interface {
	WindowLike
	InheritedFromGtkPlug() *C.GtkPlug
}

type Plug struct {
	Window
	atk.ImplementorIfaceImpl
	BuildableImpl
}

func ToPlug(objlike gobject.ObjectLike) *Plug {
	c := objlike.InheritedFromGObject()
	if c == nil {
		return nil
	}
	t := (*Plug)(nil).GetStaticType()
	obj := gobject.ObjectGrabIfType(unsafe.Pointer(c), t)
	if obj != nil {
		return (*Plug)(obj)
	}
	panic("cannot cast to Plug")
}

func (this0 *Plug) InheritedFromGtkPlug() *C.GtkPlug {
	if this0 == nil {
		return nil
	}
	return (*C.GtkPlug)(this0.C)
}

func (this0 *Plug) GetStaticType() gobject.Type {
	return gobject.Type(C.gtk_plug_get_type())
}

func PlugGetType() gobject.Type {
	return (*Plug)(nil).GetStaticType()
}
func NewPlug(socket_id0 uint64) *Plug {
	var socket_id1 C.uint64_t
	socket_id1 = C.uint64_t(socket_id0)
	ret1 := C.gtk_plug_new(socket_id1)
	var ret2 *Plug
	ret2 = (*Plug)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
func NewPlugForDisplay(display0 gdk.DisplayLike, socket_id0 uint64) *Plug {
	var display1 *C.GdkDisplay
	var socket_id1 C.uint64_t
	if display0 != nil {
		display1 = display0.InheritedFromGdkDisplay()
	}
	socket_id1 = C.uint64_t(socket_id0)
	ret1 := C.gtk_plug_new_for_display(display1, socket_id1)
	var ret2 *Plug
	ret2 = (*Plug)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
func (this0 *Plug) Construct(socket_id0 uint64) {
	var this1 *C.GtkPlug
	var socket_id1 C.uint64_t
	if this0 != nil {
		this1 = this0.InheritedFromGtkPlug()
	}
	socket_id1 = C.uint64_t(socket_id0)
	C.gtk_plug_construct(this1, socket_id1)
}
func (this0 *Plug) ConstructForDisplay(display0 gdk.DisplayLike, socket_id0 uint64) {
	var this1 *C.GtkPlug
	var display1 *C.GdkDisplay
	var socket_id1 C.uint64_t
	if this0 != nil {
		this1 = this0.InheritedFromGtkPlug()
	}
	if display0 != nil {
		display1 = display0.InheritedFromGdkDisplay()
	}
	socket_id1 = C.uint64_t(socket_id0)
	C.gtk_plug_construct_for_display(this1, display1, socket_id1)
}
func (this0 *Plug) GetEmbedded() bool {
	var this1 *C.GtkPlug
	if this0 != nil {
		this1 = this0.InheritedFromGtkPlug()
	}
	ret1 := C.gtk_plug_get_embedded(this1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *Plug) GetID() uint64 {
	var this1 *C.GtkPlug
	if this0 != nil {
		this1 = this0.InheritedFromGtkPlug()
	}
	ret1 := C.gtk_plug_get_id(this1)
	var ret2 uint64
	ret2 = uint64(ret1)
	return ret2
}
func (this0 *Plug) GetSocketWindow() *gdk.Window {
	var this1 *C.GtkPlug
	if this0 != nil {
		this1 = this0.InheritedFromGtkPlug()
	}
	ret1 := C.gtk_plug_get_socket_window(this1)
	var ret2 *gdk.Window
	ret2 = (*gdk.Window)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
type PolicyType C.uint32_t
const (
	PolicyTypeAlways PolicyType = 0
	PolicyTypeAutomatic PolicyType = 1
	PolicyTypeNever PolicyType = 2
)
type PositionType C.uint32_t
const (
	PositionTypeLeft PositionType = 0
	PositionTypeRight PositionType = 1
	PositionTypeTop PositionType = 2
	PositionTypeBottom PositionType = 3
)
type PrintContextLike interface {
	gobject.ObjectLike
	InheritedFromGtkPrintContext() *C.GtkPrintContext
}

type PrintContext struct {
	gobject.Object
	
}

func ToPrintContext(objlike gobject.ObjectLike) *PrintContext {
	c := objlike.InheritedFromGObject()
	if c == nil {
		return nil
	}
	t := (*PrintContext)(nil).GetStaticType()
	obj := gobject.ObjectGrabIfType(unsafe.Pointer(c), t)
	if obj != nil {
		return (*PrintContext)(obj)
	}
	panic("cannot cast to PrintContext")
}

func (this0 *PrintContext) InheritedFromGtkPrintContext() *C.GtkPrintContext {
	if this0 == nil {
		return nil
	}
	return (*C.GtkPrintContext)(this0.C)
}

func (this0 *PrintContext) GetStaticType() gobject.Type {
	return gobject.Type(C.gtk_print_context_get_type())
}

func PrintContextGetType() gobject.Type {
	return (*PrintContext)(nil).GetStaticType()
}
func (this0 *PrintContext) CreatePangoContext() *pango.Context {
	var this1 *C.GtkPrintContext
	if this0 != nil {
		this1 = this0.InheritedFromGtkPrintContext()
	}
	ret1 := C.gtk_print_context_create_pango_context(this1)
	var ret2 *pango.Context
	ret2 = (*pango.Context)(gobject.ObjectWrap(unsafe.Pointer(ret1), false))
	return ret2
}
func (this0 *PrintContext) CreatePangoLayout() *pango.Layout {
	var this1 *C.GtkPrintContext
	if this0 != nil {
		this1 = this0.InheritedFromGtkPrintContext()
	}
	ret1 := C.gtk_print_context_create_pango_layout(this1)
	var ret2 *pango.Layout
	ret2 = (*pango.Layout)(gobject.ObjectWrap(unsafe.Pointer(ret1), false))
	return ret2
}
func (this0 *PrintContext) GetCairoContext() *cairo.Context {
	var this1 *C.GtkPrintContext
	if this0 != nil {
		this1 = this0.InheritedFromGtkPrintContext()
	}
	ret1 := C.gtk_print_context_get_cairo_context(this1)
	var ret2 *cairo.Context
	ret2 = (*cairo.Context)(cairo.ContextWrap(unsafe.Pointer(ret1), true))
	return ret2
}
func (this0 *PrintContext) GetDPIX() float64 {
	var this1 *C.GtkPrintContext
	if this0 != nil {
		this1 = this0.InheritedFromGtkPrintContext()
	}
	ret1 := C.gtk_print_context_get_dpi_x(this1)
	var ret2 float64
	ret2 = float64(ret1)
	return ret2
}
func (this0 *PrintContext) GetDPIY() float64 {
	var this1 *C.GtkPrintContext
	if this0 != nil {
		this1 = this0.InheritedFromGtkPrintContext()
	}
	ret1 := C.gtk_print_context_get_dpi_y(this1)
	var ret2 float64
	ret2 = float64(ret1)
	return ret2
}
func (this0 *PrintContext) GetHardMargins() (float64, float64, float64, float64, bool) {
	var this1 *C.GtkPrintContext
	var top1 C.double
	var bottom1 C.double
	var left1 C.double
	var right1 C.double
	if this0 != nil {
		this1 = this0.InheritedFromGtkPrintContext()
	}
	ret1 := C.gtk_print_context_get_hard_margins(this1, &top1, &bottom1, &left1, &right1)
	var top2 float64
	var bottom2 float64
	var left2 float64
	var right2 float64
	var ret2 bool
	top2 = float64(top1)
	bottom2 = float64(bottom1)
	left2 = float64(left1)
	right2 = float64(right1)
	ret2 = ret1 != 0
	return top2, bottom2, left2, right2, ret2
}
func (this0 *PrintContext) GetHeight() float64 {
	var this1 *C.GtkPrintContext
	if this0 != nil {
		this1 = this0.InheritedFromGtkPrintContext()
	}
	ret1 := C.gtk_print_context_get_height(this1)
	var ret2 float64
	ret2 = float64(ret1)
	return ret2
}
func (this0 *PrintContext) GetPageSetup() *PageSetup {
	var this1 *C.GtkPrintContext
	if this0 != nil {
		this1 = this0.InheritedFromGtkPrintContext()
	}
	ret1 := C.gtk_print_context_get_page_setup(this1)
	var ret2 *PageSetup
	ret2 = (*PageSetup)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
func (this0 *PrintContext) GetPangoFontmap() *pango.FontMap {
	var this1 *C.GtkPrintContext
	if this0 != nil {
		this1 = this0.InheritedFromGtkPrintContext()
	}
	ret1 := C.gtk_print_context_get_pango_fontmap(this1)
	var ret2 *pango.FontMap
	ret2 = (*pango.FontMap)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
func (this0 *PrintContext) GetWidth() float64 {
	var this1 *C.GtkPrintContext
	if this0 != nil {
		this1 = this0.InheritedFromGtkPrintContext()
	}
	ret1 := C.gtk_print_context_get_width(this1)
	var ret2 float64
	ret2 = float64(ret1)
	return ret2
}
func (this0 *PrintContext) SetCairoContext(cr0 *cairo.Context, dpi_x0 float64, dpi_y0 float64) {
	var this1 *C.GtkPrintContext
	var cr1 *C.cairoContext
	var dpi_x1 C.double
	var dpi_y1 C.double
	if this0 != nil {
		this1 = this0.InheritedFromGtkPrintContext()
	}
	if cr0 != nil {
		cr1 = (*C.cairoContext)(cr0.C)
	}
	dpi_x1 = C.double(dpi_x0)
	dpi_y1 = C.double(dpi_y0)
	C.gtk_print_context_set_cairo_context(this1, cr1, dpi_x1, dpi_y1)
}
type PrintDuplex C.uint32_t
const (
	PrintDuplexSimplex PrintDuplex = 0
	PrintDuplexHorizontal PrintDuplex = 1
	PrintDuplexVertical PrintDuplex = 2
)
type PrintError C.uint32_t
const (
	PrintErrorGeneral PrintError = 0
	PrintErrorInternalError PrintError = 1
	PrintErrorNomem PrintError = 2
	PrintErrorInvalidFile PrintError = 3
)
type PrintOperationLike interface {
	gobject.ObjectLike
	InheritedFromGtkPrintOperation() *C.GtkPrintOperation
}

type PrintOperation struct {
	gobject.Object
	PrintOperationPreviewImpl
}

func ToPrintOperation(objlike gobject.ObjectLike) *PrintOperation {
	c := objlike.InheritedFromGObject()
	if c == nil {
		return nil
	}
	t := (*PrintOperation)(nil).GetStaticType()
	obj := gobject.ObjectGrabIfType(unsafe.Pointer(c), t)
	if obj != nil {
		return (*PrintOperation)(obj)
	}
	panic("cannot cast to PrintOperation")
}

func (this0 *PrintOperation) InheritedFromGtkPrintOperation() *C.GtkPrintOperation {
	if this0 == nil {
		return nil
	}
	return (*C.GtkPrintOperation)(this0.C)
}

func (this0 *PrintOperation) GetStaticType() gobject.Type {
	return gobject.Type(C.gtk_print_operation_get_type())
}

func PrintOperationGetType() gobject.Type {
	return (*PrintOperation)(nil).GetStaticType()
}
func NewPrintOperation() *PrintOperation {
	ret1 := C.gtk_print_operation_new()
	var ret2 *PrintOperation
	ret2 = (*PrintOperation)(gobject.ObjectWrap(unsafe.Pointer(ret1), false))
	return ret2
}
func (this0 *PrintOperation) Cancel() {
	var this1 *C.GtkPrintOperation
	if this0 != nil {
		this1 = this0.InheritedFromGtkPrintOperation()
	}
	C.gtk_print_operation_cancel(this1)
}
func (this0 *PrintOperation) DrawPageFinish() {
	var this1 *C.GtkPrintOperation
	if this0 != nil {
		this1 = this0.InheritedFromGtkPrintOperation()
	}
	C.gtk_print_operation_draw_page_finish(this1)
}
func (this0 *PrintOperation) GetDefaultPageSetup() *PageSetup {
	var this1 *C.GtkPrintOperation
	if this0 != nil {
		this1 = this0.InheritedFromGtkPrintOperation()
	}
	ret1 := C.gtk_print_operation_get_default_page_setup(this1)
	var ret2 *PageSetup
	ret2 = (*PageSetup)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
func (this0 *PrintOperation) GetEmbedPageSetup() bool {
	var this1 *C.GtkPrintOperation
	if this0 != nil {
		this1 = this0.InheritedFromGtkPrintOperation()
	}
	ret1 := C.gtk_print_operation_get_embed_page_setup(this1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *PrintOperation) GetError() error {
	var this1 *C.GtkPrintOperation
	var err1 *C.GError
	if this0 != nil {
		this1 = this0.InheritedFromGtkPrintOperation()
	}
	C.gtk_print_operation_get_error(this1, &err1)
	var err2 error
	if err1 != nil {
		err2 = errors.New(C.GoString(((*_GError)(unsafe.Pointer(err1))).message))
		C.g_error_free(err1)
	}
	return err2
}
func (this0 *PrintOperation) GetHasSelection() bool {
	var this1 *C.GtkPrintOperation
	if this0 != nil {
		this1 = this0.InheritedFromGtkPrintOperation()
	}
	ret1 := C.gtk_print_operation_get_has_selection(this1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *PrintOperation) GetNPagesToPrint() int {
	var this1 *C.GtkPrintOperation
	if this0 != nil {
		this1 = this0.InheritedFromGtkPrintOperation()
	}
	ret1 := C.gtk_print_operation_get_n_pages_to_print(this1)
	var ret2 int
	ret2 = int(ret1)
	return ret2
}
func (this0 *PrintOperation) GetPrintSettings() *PrintSettings {
	var this1 *C.GtkPrintOperation
	if this0 != nil {
		this1 = this0.InheritedFromGtkPrintOperation()
	}
	ret1 := C.gtk_print_operation_get_print_settings(this1)
	var ret2 *PrintSettings
	ret2 = (*PrintSettings)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
func (this0 *PrintOperation) GetStatus() PrintStatus {
	var this1 *C.GtkPrintOperation
	if this0 != nil {
		this1 = this0.InheritedFromGtkPrintOperation()
	}
	ret1 := C.gtk_print_operation_get_status(this1)
	var ret2 PrintStatus
	ret2 = PrintStatus(ret1)
	return ret2
}
func (this0 *PrintOperation) GetStatusString() string {
	var this1 *C.GtkPrintOperation
	if this0 != nil {
		this1 = this0.InheritedFromGtkPrintOperation()
	}
	ret1 := C.gtk_print_operation_get_status_string(this1)
	var ret2 string
	ret2 = C.GoString(ret1)
	return ret2
}
func (this0 *PrintOperation) GetSupportSelection() bool {
	var this1 *C.GtkPrintOperation
	if this0 != nil {
		this1 = this0.InheritedFromGtkPrintOperation()
	}
	ret1 := C.gtk_print_operation_get_support_selection(this1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *PrintOperation) IsFinished() bool {
	var this1 *C.GtkPrintOperation
	if this0 != nil {
		this1 = this0.InheritedFromGtkPrintOperation()
	}
	ret1 := C.gtk_print_operation_is_finished(this1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *PrintOperation) Run(action0 PrintOperationAction, parent0 WindowLike) (PrintOperationResult, error) {
	var this1 *C.GtkPrintOperation
	var action1 C.GtkPrintOperationAction
	var parent1 *C.GtkWindow
	var err1 *C.GError
	if this0 != nil {
		this1 = this0.InheritedFromGtkPrintOperation()
	}
	action1 = C.GtkPrintOperationAction(action0)
	if parent0 != nil {
		parent1 = parent0.InheritedFromGtkWindow()
	}
	ret1 := C.gtk_print_operation_run(this1, action1, parent1, &err1)
	var ret2 PrintOperationResult
	var err2 error
	ret2 = PrintOperationResult(ret1)
	if err1 != nil {
		err2 = errors.New(C.GoString(((*_GError)(unsafe.Pointer(err1))).message))
		C.g_error_free(err1)
	}
	return ret2, err2
}
func (this0 *PrintOperation) SetAllowAsync(allow_async0 bool) {
	var this1 *C.GtkPrintOperation
	var allow_async1 C.int
	if this0 != nil {
		this1 = this0.InheritedFromGtkPrintOperation()
	}
	allow_async1 = _GoBoolToCBool(allow_async0)
	C.gtk_print_operation_set_allow_async(this1, allow_async1)
}
func (this0 *PrintOperation) SetCurrentPage(current_page0 int) {
	var this1 *C.GtkPrintOperation
	var current_page1 C.int32_t
	if this0 != nil {
		this1 = this0.InheritedFromGtkPrintOperation()
	}
	current_page1 = C.int32_t(current_page0)
	C.gtk_print_operation_set_current_page(this1, current_page1)
}
func (this0 *PrintOperation) SetCustomTabLabel(label0 string) {
	var this1 *C.GtkPrintOperation
	var label1 *C.char
	if this0 != nil {
		this1 = this0.InheritedFromGtkPrintOperation()
	}
	label1 = _GoStringToGString(label0)
	defer C.free(unsafe.Pointer(label1))
	C.gtk_print_operation_set_custom_tab_label(this1, label1)
}
func (this0 *PrintOperation) SetDefaultPageSetup(default_page_setup0 PageSetupLike) {
	var this1 *C.GtkPrintOperation
	var default_page_setup1 *C.GtkPageSetup
	if this0 != nil {
		this1 = this0.InheritedFromGtkPrintOperation()
	}
	if default_page_setup0 != nil {
		default_page_setup1 = default_page_setup0.InheritedFromGtkPageSetup()
	}
	C.gtk_print_operation_set_default_page_setup(this1, default_page_setup1)
}
func (this0 *PrintOperation) SetDeferDrawing() {
	var this1 *C.GtkPrintOperation
	if this0 != nil {
		this1 = this0.InheritedFromGtkPrintOperation()
	}
	C.gtk_print_operation_set_defer_drawing(this1)
}
func (this0 *PrintOperation) SetEmbedPageSetup(embed0 bool) {
	var this1 *C.GtkPrintOperation
	var embed1 C.int
	if this0 != nil {
		this1 = this0.InheritedFromGtkPrintOperation()
	}
	embed1 = _GoBoolToCBool(embed0)
	C.gtk_print_operation_set_embed_page_setup(this1, embed1)
}
func (this0 *PrintOperation) SetExportFilename(filename0 string) {
	var this1 *C.GtkPrintOperation
	var filename1 *C.char
	if this0 != nil {
		this1 = this0.InheritedFromGtkPrintOperation()
	}
	filename1 = _GoStringToGString(filename0)
	defer C.free(unsafe.Pointer(filename1))
	C.gtk_print_operation_set_export_filename(this1, filename1)
}
func (this0 *PrintOperation) SetHasSelection(has_selection0 bool) {
	var this1 *C.GtkPrintOperation
	var has_selection1 C.int
	if this0 != nil {
		this1 = this0.InheritedFromGtkPrintOperation()
	}
	has_selection1 = _GoBoolToCBool(has_selection0)
	C.gtk_print_operation_set_has_selection(this1, has_selection1)
}
func (this0 *PrintOperation) SetJobName(job_name0 string) {
	var this1 *C.GtkPrintOperation
	var job_name1 *C.char
	if this0 != nil {
		this1 = this0.InheritedFromGtkPrintOperation()
	}
	job_name1 = _GoStringToGString(job_name0)
	defer C.free(unsafe.Pointer(job_name1))
	C.gtk_print_operation_set_job_name(this1, job_name1)
}
func (this0 *PrintOperation) SetNPages(n_pages0 int) {
	var this1 *C.GtkPrintOperation
	var n_pages1 C.int32_t
	if this0 != nil {
		this1 = this0.InheritedFromGtkPrintOperation()
	}
	n_pages1 = C.int32_t(n_pages0)
	C.gtk_print_operation_set_n_pages(this1, n_pages1)
}
func (this0 *PrintOperation) SetPrintSettings(print_settings0 PrintSettingsLike) {
	var this1 *C.GtkPrintOperation
	var print_settings1 *C.GtkPrintSettings
	if this0 != nil {
		this1 = this0.InheritedFromGtkPrintOperation()
	}
	if print_settings0 != nil {
		print_settings1 = print_settings0.InheritedFromGtkPrintSettings()
	}
	C.gtk_print_operation_set_print_settings(this1, print_settings1)
}
func (this0 *PrintOperation) SetShowProgress(show_progress0 bool) {
	var this1 *C.GtkPrintOperation
	var show_progress1 C.int
	if this0 != nil {
		this1 = this0.InheritedFromGtkPrintOperation()
	}
	show_progress1 = _GoBoolToCBool(show_progress0)
	C.gtk_print_operation_set_show_progress(this1, show_progress1)
}
func (this0 *PrintOperation) SetSupportSelection(support_selection0 bool) {
	var this1 *C.GtkPrintOperation
	var support_selection1 C.int
	if this0 != nil {
		this1 = this0.InheritedFromGtkPrintOperation()
	}
	support_selection1 = _GoBoolToCBool(support_selection0)
	C.gtk_print_operation_set_support_selection(this1, support_selection1)
}
func (this0 *PrintOperation) SetTrackPrintStatus(track_status0 bool) {
	var this1 *C.GtkPrintOperation
	var track_status1 C.int
	if this0 != nil {
		this1 = this0.InheritedFromGtkPrintOperation()
	}
	track_status1 = _GoBoolToCBool(track_status0)
	C.gtk_print_operation_set_track_print_status(this1, track_status1)
}
func (this0 *PrintOperation) SetUnit(unit0 Unit) {
	var this1 *C.GtkPrintOperation
	var unit1 C.GtkUnit
	if this0 != nil {
		this1 = this0.InheritedFromGtkPrintOperation()
	}
	unit1 = C.GtkUnit(unit0)
	C.gtk_print_operation_set_unit(this1, unit1)
}
func (this0 *PrintOperation) SetUseFullPage(full_page0 bool) {
	var this1 *C.GtkPrintOperation
	var full_page1 C.int
	if this0 != nil {
		this1 = this0.InheritedFromGtkPrintOperation()
	}
	full_page1 = _GoBoolToCBool(full_page0)
	C.gtk_print_operation_set_use_full_page(this1, full_page1)
}
type PrintOperationAction C.uint32_t
const (
	PrintOperationActionPrintDialog PrintOperationAction = 0
	PrintOperationActionPrint PrintOperationAction = 1
	PrintOperationActionPreview PrintOperationAction = 2
	PrintOperationActionExport PrintOperationAction = 3
)
type PrintOperationPreviewLike interface {
	ImplementsGtkPrintOperationPreview() *C.GtkPrintOperationPreview
}

type PrintOperationPreview struct {
	gobject.Object
	PrintOperationPreviewImpl
}

type PrintOperationPreviewImpl struct {}

func ToPrintOperationPreview(objlike gobject.ObjectLike) *PrintOperationPreview {
	t := (*PrintOperationPreviewImpl)(nil).GetStaticType()
	c := objlike.InheritedFromGObject()
	obj := gobject.ObjectGrabIfType(unsafe.Pointer(c), t)
	if obj != nil {
		return (*PrintOperationPreview)(obj)
	}
	panic("cannot cast to PrintOperationPreview")
}

func (this0 *PrintOperationPreviewImpl) ImplementsGtkPrintOperationPreview() *C.GtkPrintOperationPreview {
	obj := uintptr(unsafe.Pointer(this0)) - unsafe.Sizeof(uintptr(0))
	return (*C.GtkPrintOperationPreview)((*gobject.Object)(unsafe.Pointer(obj)).C)
}

func (this0 *PrintOperationPreviewImpl) GetStaticType() gobject.Type {
	return gobject.Type(C.gtk_print_operation_preview_get_type())
}

func PrintOperationPreviewGetType() gobject.Type {
	return (*PrintOperationPreviewImpl)(nil).GetStaticType()
}
func (this0 *PrintOperationPreviewImpl) EndPreview() {
	var this1 *C.GtkPrintOperationPreview
	if this0 != nil {
		this1 = this0.ImplementsGtkPrintOperationPreview()}
	C.gtk_print_operation_preview_end_preview(this1)
}
func (this0 *PrintOperationPreviewImpl) IsSelected(page_nr0 int) bool {
	var this1 *C.GtkPrintOperationPreview
	var page_nr1 C.int32_t
	if this0 != nil {
		this1 = this0.ImplementsGtkPrintOperationPreview()}
	page_nr1 = C.int32_t(page_nr0)
	ret1 := C.gtk_print_operation_preview_is_selected(this1, page_nr1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *PrintOperationPreviewImpl) RenderPage(page_nr0 int) {
	var this1 *C.GtkPrintOperationPreview
	var page_nr1 C.int32_t
	if this0 != nil {
		this1 = this0.ImplementsGtkPrintOperationPreview()}
	page_nr1 = C.int32_t(page_nr0)
	C.gtk_print_operation_preview_render_page(this1, page_nr1)
}
type PrintOperationResult C.uint32_t
const (
	PrintOperationResultError PrintOperationResult = 0
	PrintOperationResultApply PrintOperationResult = 1
	PrintOperationResultCancel PrintOperationResult = 2
	PrintOperationResultInProgress PrintOperationResult = 3
)
type PrintPages C.uint32_t
const (
	PrintPagesAll PrintPages = 0
	PrintPagesCurrent PrintPages = 1
	PrintPagesRanges PrintPages = 2
	PrintPagesSelection PrintPages = 3
)
type PrintQuality C.uint32_t
const (
	PrintQualityLow PrintQuality = 0
	PrintQualityNormal PrintQuality = 1
	PrintQualityHigh PrintQuality = 2
	PrintQualityDraft PrintQuality = 3
)
type PrintSettingsLike interface {
	gobject.ObjectLike
	InheritedFromGtkPrintSettings() *C.GtkPrintSettings
}

type PrintSettings struct {
	gobject.Object
	
}

func ToPrintSettings(objlike gobject.ObjectLike) *PrintSettings {
	c := objlike.InheritedFromGObject()
	if c == nil {
		return nil
	}
	t := (*PrintSettings)(nil).GetStaticType()
	obj := gobject.ObjectGrabIfType(unsafe.Pointer(c), t)
	if obj != nil {
		return (*PrintSettings)(obj)
	}
	panic("cannot cast to PrintSettings")
}

func (this0 *PrintSettings) InheritedFromGtkPrintSettings() *C.GtkPrintSettings {
	if this0 == nil {
		return nil
	}
	return (*C.GtkPrintSettings)(this0.C)
}

func (this0 *PrintSettings) GetStaticType() gobject.Type {
	return gobject.Type(C.gtk_print_settings_get_type())
}

func PrintSettingsGetType() gobject.Type {
	return (*PrintSettings)(nil).GetStaticType()
}
func NewPrintSettings() *PrintSettings {
	ret1 := C.gtk_print_settings_new()
	var ret2 *PrintSettings
	ret2 = (*PrintSettings)(gobject.ObjectWrap(unsafe.Pointer(ret1), false))
	return ret2
}
func NewPrintSettingsFromFile(file_name0 string) (*PrintSettings, error) {
	var file_name1 *C.char
	var err1 *C.GError
	file_name1 = _GoStringToGString(file_name0)
	defer C.free(unsafe.Pointer(file_name1))
	ret1 := C.gtk_print_settings_new_from_file(file_name1, &err1)
	var ret2 *PrintSettings
	var err2 error
	ret2 = (*PrintSettings)(gobject.ObjectWrap(unsafe.Pointer(ret1), false))
	if err1 != nil {
		err2 = errors.New(C.GoString(((*_GError)(unsafe.Pointer(err1))).message))
		C.g_error_free(err1)
	}
	return ret2, err2
}
func NewPrintSettingsFromKeyFile(key_file0 *glib.KeyFile, group_name0 string) (*PrintSettings, error) {
	var key_file1 *C.GKeyFile
	var group_name1 *C.char
	var err1 *C.GError
	key_file1 = (*C.GKeyFile)(unsafe.Pointer(key_file0))
	group_name1 = _GoStringToGString(group_name0)
	defer C.free(unsafe.Pointer(group_name1))
	ret1 := C.gtk_print_settings_new_from_key_file(key_file1, group_name1, &err1)
	var ret2 *PrintSettings
	var err2 error
	ret2 = (*PrintSettings)(gobject.ObjectWrap(unsafe.Pointer(ret1), false))
	if err1 != nil {
		err2 = errors.New(C.GoString(((*_GError)(unsafe.Pointer(err1))).message))
		C.g_error_free(err1)
	}
	return ret2, err2
}
func (this0 *PrintSettings) Copy() *PrintSettings {
	var this1 *C.GtkPrintSettings
	if this0 != nil {
		this1 = this0.InheritedFromGtkPrintSettings()
	}
	ret1 := C.gtk_print_settings_copy(this1)
	var ret2 *PrintSettings
	ret2 = (*PrintSettings)(gobject.ObjectWrap(unsafe.Pointer(ret1), false))
	return ret2
}
func (this0 *PrintSettings) Foreach(func0 PrintSettingsFunc) {
	var this1 *C.GtkPrintSettings
	var func1 unsafe.Pointer
	if this0 != nil {
		this1 = this0.InheritedFromGtkPrintSettings()
	}
	if func0 != nil {
		func1 = unsafe.Pointer(&func0)}
	C._gtk_print_settings_foreach(this1, func1)
}
func (this0 *PrintSettings) Get(key0 string) string {
	var this1 *C.GtkPrintSettings
	var key1 *C.char
	if this0 != nil {
		this1 = this0.InheritedFromGtkPrintSettings()
	}
	key1 = _GoStringToGString(key0)
	defer C.free(unsafe.Pointer(key1))
	ret1 := C.gtk_print_settings_get(this1, key1)
	var ret2 string
	ret2 = C.GoString(ret1)
	return ret2
}
func (this0 *PrintSettings) GetBool(key0 string) bool {
	var this1 *C.GtkPrintSettings
	var key1 *C.char
	if this0 != nil {
		this1 = this0.InheritedFromGtkPrintSettings()
	}
	key1 = _GoStringToGString(key0)
	defer C.free(unsafe.Pointer(key1))
	ret1 := C.gtk_print_settings_get_bool(this1, key1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *PrintSettings) GetCollate() bool {
	var this1 *C.GtkPrintSettings
	if this0 != nil {
		this1 = this0.InheritedFromGtkPrintSettings()
	}
	ret1 := C.gtk_print_settings_get_collate(this1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *PrintSettings) GetDefaultSource() string {
	var this1 *C.GtkPrintSettings
	if this0 != nil {
		this1 = this0.InheritedFromGtkPrintSettings()
	}
	ret1 := C.gtk_print_settings_get_default_source(this1)
	var ret2 string
	ret2 = C.GoString(ret1)
	return ret2
}
func (this0 *PrintSettings) GetDither() string {
	var this1 *C.GtkPrintSettings
	if this0 != nil {
		this1 = this0.InheritedFromGtkPrintSettings()
	}
	ret1 := C.gtk_print_settings_get_dither(this1)
	var ret2 string
	ret2 = C.GoString(ret1)
	return ret2
}
func (this0 *PrintSettings) GetDouble(key0 string) float64 {
	var this1 *C.GtkPrintSettings
	var key1 *C.char
	if this0 != nil {
		this1 = this0.InheritedFromGtkPrintSettings()
	}
	key1 = _GoStringToGString(key0)
	defer C.free(unsafe.Pointer(key1))
	ret1 := C.gtk_print_settings_get_double(this1, key1)
	var ret2 float64
	ret2 = float64(ret1)
	return ret2
}
func (this0 *PrintSettings) GetDoubleWithDefault(key0 string, def0 float64) float64 {
	var this1 *C.GtkPrintSettings
	var key1 *C.char
	var def1 C.double
	if this0 != nil {
		this1 = this0.InheritedFromGtkPrintSettings()
	}
	key1 = _GoStringToGString(key0)
	defer C.free(unsafe.Pointer(key1))
	def1 = C.double(def0)
	ret1 := C.gtk_print_settings_get_double_with_default(this1, key1, def1)
	var ret2 float64
	ret2 = float64(ret1)
	return ret2
}
func (this0 *PrintSettings) GetDuplex() PrintDuplex {
	var this1 *C.GtkPrintSettings
	if this0 != nil {
		this1 = this0.InheritedFromGtkPrintSettings()
	}
	ret1 := C.gtk_print_settings_get_duplex(this1)
	var ret2 PrintDuplex
	ret2 = PrintDuplex(ret1)
	return ret2
}
func (this0 *PrintSettings) GetFinishings() string {
	var this1 *C.GtkPrintSettings
	if this0 != nil {
		this1 = this0.InheritedFromGtkPrintSettings()
	}
	ret1 := C.gtk_print_settings_get_finishings(this1)
	var ret2 string
	ret2 = C.GoString(ret1)
	return ret2
}
func (this0 *PrintSettings) GetInt(key0 string) int {
	var this1 *C.GtkPrintSettings
	var key1 *C.char
	if this0 != nil {
		this1 = this0.InheritedFromGtkPrintSettings()
	}
	key1 = _GoStringToGString(key0)
	defer C.free(unsafe.Pointer(key1))
	ret1 := C.gtk_print_settings_get_int(this1, key1)
	var ret2 int
	ret2 = int(ret1)
	return ret2
}
func (this0 *PrintSettings) GetIntWithDefault(key0 string, def0 int) int {
	var this1 *C.GtkPrintSettings
	var key1 *C.char
	var def1 C.int32_t
	if this0 != nil {
		this1 = this0.InheritedFromGtkPrintSettings()
	}
	key1 = _GoStringToGString(key0)
	defer C.free(unsafe.Pointer(key1))
	def1 = C.int32_t(def0)
	ret1 := C.gtk_print_settings_get_int_with_default(this1, key1, def1)
	var ret2 int
	ret2 = int(ret1)
	return ret2
}
func (this0 *PrintSettings) GetLength(key0 string, unit0 Unit) float64 {
	var this1 *C.GtkPrintSettings
	var key1 *C.char
	var unit1 C.GtkUnit
	if this0 != nil {
		this1 = this0.InheritedFromGtkPrintSettings()
	}
	key1 = _GoStringToGString(key0)
	defer C.free(unsafe.Pointer(key1))
	unit1 = C.GtkUnit(unit0)
	ret1 := C.gtk_print_settings_get_length(this1, key1, unit1)
	var ret2 float64
	ret2 = float64(ret1)
	return ret2
}
func (this0 *PrintSettings) GetMediaType() string {
	var this1 *C.GtkPrintSettings
	if this0 != nil {
		this1 = this0.InheritedFromGtkPrintSettings()
	}
	ret1 := C.gtk_print_settings_get_media_type(this1)
	var ret2 string
	ret2 = C.GoString(ret1)
	return ret2
}
func (this0 *PrintSettings) GetNCopies() int {
	var this1 *C.GtkPrintSettings
	if this0 != nil {
		this1 = this0.InheritedFromGtkPrintSettings()
	}
	ret1 := C.gtk_print_settings_get_n_copies(this1)
	var ret2 int
	ret2 = int(ret1)
	return ret2
}
func (this0 *PrintSettings) GetNumberUp() int {
	var this1 *C.GtkPrintSettings
	if this0 != nil {
		this1 = this0.InheritedFromGtkPrintSettings()
	}
	ret1 := C.gtk_print_settings_get_number_up(this1)
	var ret2 int
	ret2 = int(ret1)
	return ret2
}
func (this0 *PrintSettings) GetNumberUpLayout() NumberUpLayout {
	var this1 *C.GtkPrintSettings
	if this0 != nil {
		this1 = this0.InheritedFromGtkPrintSettings()
	}
	ret1 := C.gtk_print_settings_get_number_up_layout(this1)
	var ret2 NumberUpLayout
	ret2 = NumberUpLayout(ret1)
	return ret2
}
func (this0 *PrintSettings) GetOrientation() PageOrientation {
	var this1 *C.GtkPrintSettings
	if this0 != nil {
		this1 = this0.InheritedFromGtkPrintSettings()
	}
	ret1 := C.gtk_print_settings_get_orientation(this1)
	var ret2 PageOrientation
	ret2 = PageOrientation(ret1)
	return ret2
}
func (this0 *PrintSettings) GetOutputBin() string {
	var this1 *C.GtkPrintSettings
	if this0 != nil {
		this1 = this0.InheritedFromGtkPrintSettings()
	}
	ret1 := C.gtk_print_settings_get_output_bin(this1)
	var ret2 string
	ret2 = C.GoString(ret1)
	return ret2
}
func (this0 *PrintSettings) GetPageRanges() (int, []PageRange) {
	var this1 *C.GtkPrintSettings
	var num_ranges1 C.int32_t
	if this0 != nil {
		this1 = this0.InheritedFromGtkPrintSettings()
	}
	ret1 := C.gtk_print_settings_get_page_ranges(this1, &num_ranges1)
	var num_ranges2 int
	var ret2 []PageRange
	num_ranges2 = int(num_ranges1)
	ret2 = make([]PageRange, num_ranges1)
	for i := range ret2 {
		ret2[i] = *(*PageRange)(unsafe.Pointer(&(*(*[999999]C.GtkPageRange)(unsafe.Pointer(ret1)))[i]))
	}
	return num_ranges2, ret2
}
func (this0 *PrintSettings) GetPageSet() PageSet {
	var this1 *C.GtkPrintSettings
	if this0 != nil {
		this1 = this0.InheritedFromGtkPrintSettings()
	}
	ret1 := C.gtk_print_settings_get_page_set(this1)
	var ret2 PageSet
	ret2 = PageSet(ret1)
	return ret2
}
func (this0 *PrintSettings) GetPaperHeight(unit0 Unit) float64 {
	var this1 *C.GtkPrintSettings
	var unit1 C.GtkUnit
	if this0 != nil {
		this1 = this0.InheritedFromGtkPrintSettings()
	}
	unit1 = C.GtkUnit(unit0)
	ret1 := C.gtk_print_settings_get_paper_height(this1, unit1)
	var ret2 float64
	ret2 = float64(ret1)
	return ret2
}
func (this0 *PrintSettings) GetPaperSize() *PaperSize {
	var this1 *C.GtkPrintSettings
	if this0 != nil {
		this1 = this0.InheritedFromGtkPrintSettings()
	}
	ret1 := C.gtk_print_settings_get_paper_size(this1)
	var ret2 *PaperSize
	ret2 = (*PaperSize)(unsafe.Pointer(ret1))
	return ret2
}
func (this0 *PrintSettings) GetPaperWidth(unit0 Unit) float64 {
	var this1 *C.GtkPrintSettings
	var unit1 C.GtkUnit
	if this0 != nil {
		this1 = this0.InheritedFromGtkPrintSettings()
	}
	unit1 = C.GtkUnit(unit0)
	ret1 := C.gtk_print_settings_get_paper_width(this1, unit1)
	var ret2 float64
	ret2 = float64(ret1)
	return ret2
}
func (this0 *PrintSettings) GetPrintPages() PrintPages {
	var this1 *C.GtkPrintSettings
	if this0 != nil {
		this1 = this0.InheritedFromGtkPrintSettings()
	}
	ret1 := C.gtk_print_settings_get_print_pages(this1)
	var ret2 PrintPages
	ret2 = PrintPages(ret1)
	return ret2
}
func (this0 *PrintSettings) GetPrinter() string {
	var this1 *C.GtkPrintSettings
	if this0 != nil {
		this1 = this0.InheritedFromGtkPrintSettings()
	}
	ret1 := C.gtk_print_settings_get_printer(this1)
	var ret2 string
	ret2 = C.GoString(ret1)
	return ret2
}
func (this0 *PrintSettings) GetPrinterLPI() float64 {
	var this1 *C.GtkPrintSettings
	if this0 != nil {
		this1 = this0.InheritedFromGtkPrintSettings()
	}
	ret1 := C.gtk_print_settings_get_printer_lpi(this1)
	var ret2 float64
	ret2 = float64(ret1)
	return ret2
}
func (this0 *PrintSettings) GetQuality() PrintQuality {
	var this1 *C.GtkPrintSettings
	if this0 != nil {
		this1 = this0.InheritedFromGtkPrintSettings()
	}
	ret1 := C.gtk_print_settings_get_quality(this1)
	var ret2 PrintQuality
	ret2 = PrintQuality(ret1)
	return ret2
}
func (this0 *PrintSettings) GetResolution() int {
	var this1 *C.GtkPrintSettings
	if this0 != nil {
		this1 = this0.InheritedFromGtkPrintSettings()
	}
	ret1 := C.gtk_print_settings_get_resolution(this1)
	var ret2 int
	ret2 = int(ret1)
	return ret2
}
func (this0 *PrintSettings) GetResolutionX() int {
	var this1 *C.GtkPrintSettings
	if this0 != nil {
		this1 = this0.InheritedFromGtkPrintSettings()
	}
	ret1 := C.gtk_print_settings_get_resolution_x(this1)
	var ret2 int
	ret2 = int(ret1)
	return ret2
}
func (this0 *PrintSettings) GetResolutionY() int {
	var this1 *C.GtkPrintSettings
	if this0 != nil {
		this1 = this0.InheritedFromGtkPrintSettings()
	}
	ret1 := C.gtk_print_settings_get_resolution_y(this1)
	var ret2 int
	ret2 = int(ret1)
	return ret2
}
func (this0 *PrintSettings) GetReverse() bool {
	var this1 *C.GtkPrintSettings
	if this0 != nil {
		this1 = this0.InheritedFromGtkPrintSettings()
	}
	ret1 := C.gtk_print_settings_get_reverse(this1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *PrintSettings) GetScale() float64 {
	var this1 *C.GtkPrintSettings
	if this0 != nil {
		this1 = this0.InheritedFromGtkPrintSettings()
	}
	ret1 := C.gtk_print_settings_get_scale(this1)
	var ret2 float64
	ret2 = float64(ret1)
	return ret2
}
func (this0 *PrintSettings) GetUseColor() bool {
	var this1 *C.GtkPrintSettings
	if this0 != nil {
		this1 = this0.InheritedFromGtkPrintSettings()
	}
	ret1 := C.gtk_print_settings_get_use_color(this1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *PrintSettings) HasKey(key0 string) bool {
	var this1 *C.GtkPrintSettings
	var key1 *C.char
	if this0 != nil {
		this1 = this0.InheritedFromGtkPrintSettings()
	}
	key1 = _GoStringToGString(key0)
	defer C.free(unsafe.Pointer(key1))
	ret1 := C.gtk_print_settings_has_key(this1, key1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *PrintSettings) LoadFile(file_name0 string) (bool, error) {
	var this1 *C.GtkPrintSettings
	var file_name1 *C.char
	var err1 *C.GError
	if this0 != nil {
		this1 = this0.InheritedFromGtkPrintSettings()
	}
	file_name1 = _GoStringToGString(file_name0)
	defer C.free(unsafe.Pointer(file_name1))
	ret1 := C.gtk_print_settings_load_file(this1, file_name1, &err1)
	var ret2 bool
	var err2 error
	ret2 = ret1 != 0
	if err1 != nil {
		err2 = errors.New(C.GoString(((*_GError)(unsafe.Pointer(err1))).message))
		C.g_error_free(err1)
	}
	return ret2, err2
}
func (this0 *PrintSettings) LoadKeyFile(key_file0 *glib.KeyFile, group_name0 string) (bool, error) {
	var this1 *C.GtkPrintSettings
	var key_file1 *C.GKeyFile
	var group_name1 *C.char
	var err1 *C.GError
	if this0 != nil {
		this1 = this0.InheritedFromGtkPrintSettings()
	}
	key_file1 = (*C.GKeyFile)(unsafe.Pointer(key_file0))
	group_name1 = _GoStringToGString(group_name0)
	defer C.free(unsafe.Pointer(group_name1))
	ret1 := C.gtk_print_settings_load_key_file(this1, key_file1, group_name1, &err1)
	var ret2 bool
	var err2 error
	ret2 = ret1 != 0
	if err1 != nil {
		err2 = errors.New(C.GoString(((*_GError)(unsafe.Pointer(err1))).message))
		C.g_error_free(err1)
	}
	return ret2, err2
}
func (this0 *PrintSettings) Set(key0 string, value0 string) {
	var this1 *C.GtkPrintSettings
	var key1 *C.char
	var value1 *C.char
	if this0 != nil {
		this1 = this0.InheritedFromGtkPrintSettings()
	}
	key1 = _GoStringToGString(key0)
	defer C.free(unsafe.Pointer(key1))
	value1 = _GoStringToGString(value0)
	defer C.free(unsafe.Pointer(value1))
	C.gtk_print_settings_set(this1, key1, value1)
}
func (this0 *PrintSettings) SetBool(key0 string, value0 bool) {
	var this1 *C.GtkPrintSettings
	var key1 *C.char
	var value1 C.int
	if this0 != nil {
		this1 = this0.InheritedFromGtkPrintSettings()
	}
	key1 = _GoStringToGString(key0)
	defer C.free(unsafe.Pointer(key1))
	value1 = _GoBoolToCBool(value0)
	C.gtk_print_settings_set_bool(this1, key1, value1)
}
func (this0 *PrintSettings) SetCollate(collate0 bool) {
	var this1 *C.GtkPrintSettings
	var collate1 C.int
	if this0 != nil {
		this1 = this0.InheritedFromGtkPrintSettings()
	}
	collate1 = _GoBoolToCBool(collate0)
	C.gtk_print_settings_set_collate(this1, collate1)
}
func (this0 *PrintSettings) SetDefaultSource(default_source0 string) {
	var this1 *C.GtkPrintSettings
	var default_source1 *C.char
	if this0 != nil {
		this1 = this0.InheritedFromGtkPrintSettings()
	}
	default_source1 = _GoStringToGString(default_source0)
	defer C.free(unsafe.Pointer(default_source1))
	C.gtk_print_settings_set_default_source(this1, default_source1)
}
func (this0 *PrintSettings) SetDither(dither0 string) {
	var this1 *C.GtkPrintSettings
	var dither1 *C.char
	if this0 != nil {
		this1 = this0.InheritedFromGtkPrintSettings()
	}
	dither1 = _GoStringToGString(dither0)
	defer C.free(unsafe.Pointer(dither1))
	C.gtk_print_settings_set_dither(this1, dither1)
}
func (this0 *PrintSettings) SetDouble(key0 string, value0 float64) {
	var this1 *C.GtkPrintSettings
	var key1 *C.char
	var value1 C.double
	if this0 != nil {
		this1 = this0.InheritedFromGtkPrintSettings()
	}
	key1 = _GoStringToGString(key0)
	defer C.free(unsafe.Pointer(key1))
	value1 = C.double(value0)
	C.gtk_print_settings_set_double(this1, key1, value1)
}
func (this0 *PrintSettings) SetDuplex(duplex0 PrintDuplex) {
	var this1 *C.GtkPrintSettings
	var duplex1 C.GtkPrintDuplex
	if this0 != nil {
		this1 = this0.InheritedFromGtkPrintSettings()
	}
	duplex1 = C.GtkPrintDuplex(duplex0)
	C.gtk_print_settings_set_duplex(this1, duplex1)
}
func (this0 *PrintSettings) SetFinishings(finishings0 string) {
	var this1 *C.GtkPrintSettings
	var finishings1 *C.char
	if this0 != nil {
		this1 = this0.InheritedFromGtkPrintSettings()
	}
	finishings1 = _GoStringToGString(finishings0)
	defer C.free(unsafe.Pointer(finishings1))
	C.gtk_print_settings_set_finishings(this1, finishings1)
}
func (this0 *PrintSettings) SetInt(key0 string, value0 int) {
	var this1 *C.GtkPrintSettings
	var key1 *C.char
	var value1 C.int32_t
	if this0 != nil {
		this1 = this0.InheritedFromGtkPrintSettings()
	}
	key1 = _GoStringToGString(key0)
	defer C.free(unsafe.Pointer(key1))
	value1 = C.int32_t(value0)
	C.gtk_print_settings_set_int(this1, key1, value1)
}
func (this0 *PrintSettings) SetLength(key0 string, value0 float64, unit0 Unit) {
	var this1 *C.GtkPrintSettings
	var key1 *C.char
	var value1 C.double
	var unit1 C.GtkUnit
	if this0 != nil {
		this1 = this0.InheritedFromGtkPrintSettings()
	}
	key1 = _GoStringToGString(key0)
	defer C.free(unsafe.Pointer(key1))
	value1 = C.double(value0)
	unit1 = C.GtkUnit(unit0)
	C.gtk_print_settings_set_length(this1, key1, value1, unit1)
}
func (this0 *PrintSettings) SetMediaType(media_type0 string) {
	var this1 *C.GtkPrintSettings
	var media_type1 *C.char
	if this0 != nil {
		this1 = this0.InheritedFromGtkPrintSettings()
	}
	media_type1 = _GoStringToGString(media_type0)
	defer C.free(unsafe.Pointer(media_type1))
	C.gtk_print_settings_set_media_type(this1, media_type1)
}
func (this0 *PrintSettings) SetNCopies(num_copies0 int) {
	var this1 *C.GtkPrintSettings
	var num_copies1 C.int32_t
	if this0 != nil {
		this1 = this0.InheritedFromGtkPrintSettings()
	}
	num_copies1 = C.int32_t(num_copies0)
	C.gtk_print_settings_set_n_copies(this1, num_copies1)
}
func (this0 *PrintSettings) SetNumberUp(number_up0 int) {
	var this1 *C.GtkPrintSettings
	var number_up1 C.int32_t
	if this0 != nil {
		this1 = this0.InheritedFromGtkPrintSettings()
	}
	number_up1 = C.int32_t(number_up0)
	C.gtk_print_settings_set_number_up(this1, number_up1)
}
func (this0 *PrintSettings) SetNumberUpLayout(number_up_layout0 NumberUpLayout) {
	var this1 *C.GtkPrintSettings
	var number_up_layout1 C.GtkNumberUpLayout
	if this0 != nil {
		this1 = this0.InheritedFromGtkPrintSettings()
	}
	number_up_layout1 = C.GtkNumberUpLayout(number_up_layout0)
	C.gtk_print_settings_set_number_up_layout(this1, number_up_layout1)
}
func (this0 *PrintSettings) SetOrientation(orientation0 PageOrientation) {
	var this1 *C.GtkPrintSettings
	var orientation1 C.GtkPageOrientation
	if this0 != nil {
		this1 = this0.InheritedFromGtkPrintSettings()
	}
	orientation1 = C.GtkPageOrientation(orientation0)
	C.gtk_print_settings_set_orientation(this1, orientation1)
}
func (this0 *PrintSettings) SetOutputBin(output_bin0 string) {
	var this1 *C.GtkPrintSettings
	var output_bin1 *C.char
	if this0 != nil {
		this1 = this0.InheritedFromGtkPrintSettings()
	}
	output_bin1 = _GoStringToGString(output_bin0)
	defer C.free(unsafe.Pointer(output_bin1))
	C.gtk_print_settings_set_output_bin(this1, output_bin1)
}
func (this0 *PrintSettings) SetPageRanges(page_ranges0 []PageRange) {
	var this1 *C.GtkPrintSettings
	var page_ranges1 *C.GtkPageRange
	var num_ranges1 C.int32_t
	if this0 != nil {
		this1 = this0.InheritedFromGtkPrintSettings()
	}
	page_ranges1 = (*C.GtkPageRange)(C.malloc(C.size_t(int(unsafe.Sizeof(*page_ranges1)) * len(page_ranges0))))
	defer C.free(unsafe.Pointer(page_ranges1))
	for i, e := range page_ranges0 {
		(*(*[999999]C.GtkPageRange)(unsafe.Pointer(page_ranges1)))[i] = *(*C.GtkPageRange)(unsafe.Pointer(&e))
	}
	num_ranges1 = C.int32_t(len(page_ranges0))
	C.gtk_print_settings_set_page_ranges(this1, page_ranges1, num_ranges1)
}
func (this0 *PrintSettings) SetPageSet(page_set0 PageSet) {
	var this1 *C.GtkPrintSettings
	var page_set1 C.GtkPageSet
	if this0 != nil {
		this1 = this0.InheritedFromGtkPrintSettings()
	}
	page_set1 = C.GtkPageSet(page_set0)
	C.gtk_print_settings_set_page_set(this1, page_set1)
}
func (this0 *PrintSettings) SetPaperHeight(height0 float64, unit0 Unit) {
	var this1 *C.GtkPrintSettings
	var height1 C.double
	var unit1 C.GtkUnit
	if this0 != nil {
		this1 = this0.InheritedFromGtkPrintSettings()
	}
	height1 = C.double(height0)
	unit1 = C.GtkUnit(unit0)
	C.gtk_print_settings_set_paper_height(this1, height1, unit1)
}
func (this0 *PrintSettings) SetPaperSize(paper_size0 *PaperSize) {
	var this1 *C.GtkPrintSettings
	var paper_size1 *C.GtkPaperSize
	if this0 != nil {
		this1 = this0.InheritedFromGtkPrintSettings()
	}
	paper_size1 = (*C.GtkPaperSize)(unsafe.Pointer(paper_size0))
	C.gtk_print_settings_set_paper_size(this1, paper_size1)
}
func (this0 *PrintSettings) SetPaperWidth(width0 float64, unit0 Unit) {
	var this1 *C.GtkPrintSettings
	var width1 C.double
	var unit1 C.GtkUnit
	if this0 != nil {
		this1 = this0.InheritedFromGtkPrintSettings()
	}
	width1 = C.double(width0)
	unit1 = C.GtkUnit(unit0)
	C.gtk_print_settings_set_paper_width(this1, width1, unit1)
}
func (this0 *PrintSettings) SetPrintPages(pages0 PrintPages) {
	var this1 *C.GtkPrintSettings
	var pages1 C.GtkPrintPages
	if this0 != nil {
		this1 = this0.InheritedFromGtkPrintSettings()
	}
	pages1 = C.GtkPrintPages(pages0)
	C.gtk_print_settings_set_print_pages(this1, pages1)
}
func (this0 *PrintSettings) SetPrinter(printer0 string) {
	var this1 *C.GtkPrintSettings
	var printer1 *C.char
	if this0 != nil {
		this1 = this0.InheritedFromGtkPrintSettings()
	}
	printer1 = _GoStringToGString(printer0)
	defer C.free(unsafe.Pointer(printer1))
	C.gtk_print_settings_set_printer(this1, printer1)
}
func (this0 *PrintSettings) SetPrinterLPI(lpi0 float64) {
	var this1 *C.GtkPrintSettings
	var lpi1 C.double
	if this0 != nil {
		this1 = this0.InheritedFromGtkPrintSettings()
	}
	lpi1 = C.double(lpi0)
	C.gtk_print_settings_set_printer_lpi(this1, lpi1)
}
func (this0 *PrintSettings) SetQuality(quality0 PrintQuality) {
	var this1 *C.GtkPrintSettings
	var quality1 C.GtkPrintQuality
	if this0 != nil {
		this1 = this0.InheritedFromGtkPrintSettings()
	}
	quality1 = C.GtkPrintQuality(quality0)
	C.gtk_print_settings_set_quality(this1, quality1)
}
func (this0 *PrintSettings) SetResolution(resolution0 int) {
	var this1 *C.GtkPrintSettings
	var resolution1 C.int32_t
	if this0 != nil {
		this1 = this0.InheritedFromGtkPrintSettings()
	}
	resolution1 = C.int32_t(resolution0)
	C.gtk_print_settings_set_resolution(this1, resolution1)
}
func (this0 *PrintSettings) SetResolutionXY(resolution_x0 int, resolution_y0 int) {
	var this1 *C.GtkPrintSettings
	var resolution_x1 C.int32_t
	var resolution_y1 C.int32_t
	if this0 != nil {
		this1 = this0.InheritedFromGtkPrintSettings()
	}
	resolution_x1 = C.int32_t(resolution_x0)
	resolution_y1 = C.int32_t(resolution_y0)
	C.gtk_print_settings_set_resolution_xy(this1, resolution_x1, resolution_y1)
}
func (this0 *PrintSettings) SetReverse(reverse0 bool) {
	var this1 *C.GtkPrintSettings
	var reverse1 C.int
	if this0 != nil {
		this1 = this0.InheritedFromGtkPrintSettings()
	}
	reverse1 = _GoBoolToCBool(reverse0)
	C.gtk_print_settings_set_reverse(this1, reverse1)
}
func (this0 *PrintSettings) SetScale(scale0 float64) {
	var this1 *C.GtkPrintSettings
	var scale1 C.double
	if this0 != nil {
		this1 = this0.InheritedFromGtkPrintSettings()
	}
	scale1 = C.double(scale0)
	C.gtk_print_settings_set_scale(this1, scale1)
}
func (this0 *PrintSettings) SetUseColor(use_color0 bool) {
	var this1 *C.GtkPrintSettings
	var use_color1 C.int
	if this0 != nil {
		this1 = this0.InheritedFromGtkPrintSettings()
	}
	use_color1 = _GoBoolToCBool(use_color0)
	C.gtk_print_settings_set_use_color(this1, use_color1)
}
func (this0 *PrintSettings) ToFile(file_name0 string) (bool, error) {
	var this1 *C.GtkPrintSettings
	var file_name1 *C.char
	var err1 *C.GError
	if this0 != nil {
		this1 = this0.InheritedFromGtkPrintSettings()
	}
	file_name1 = _GoStringToGString(file_name0)
	defer C.free(unsafe.Pointer(file_name1))
	ret1 := C.gtk_print_settings_to_file(this1, file_name1, &err1)
	var ret2 bool
	var err2 error
	ret2 = ret1 != 0
	if err1 != nil {
		err2 = errors.New(C.GoString(((*_GError)(unsafe.Pointer(err1))).message))
		C.g_error_free(err1)
	}
	return ret2, err2
}
func (this0 *PrintSettings) ToKeyFile(key_file0 *glib.KeyFile, group_name0 string) {
	var this1 *C.GtkPrintSettings
	var key_file1 *C.GKeyFile
	var group_name1 *C.char
	if this0 != nil {
		this1 = this0.InheritedFromGtkPrintSettings()
	}
	key_file1 = (*C.GKeyFile)(unsafe.Pointer(key_file0))
	group_name1 = _GoStringToGString(group_name0)
	defer C.free(unsafe.Pointer(group_name1))
	C.gtk_print_settings_to_key_file(this1, key_file1, group_name1)
}
func (this0 *PrintSettings) Unset(key0 string) {
	var this1 *C.GtkPrintSettings
	var key1 *C.char
	if this0 != nil {
		this1 = this0.InheritedFromGtkPrintSettings()
	}
	key1 = _GoStringToGString(key0)
	defer C.free(unsafe.Pointer(key1))
	C.gtk_print_settings_unset(this1, key1)
}
type PrintSettingsFunc func(key string, value string)
//export _GtkPrintSettingsFunc_c_wrapper
func _GtkPrintSettingsFunc_c_wrapper(key0 unsafe.Pointer, value0 unsafe.Pointer, user_data0 unsafe.Pointer) {
	var key1 string
	var value1 string
	var user_data1 PrintSettingsFunc
	key1 = C.GoString((*C.char)(key0))
	value1 = C.GoString((*C.char)(value0))
	user_data1 = *(*PrintSettingsFunc)(user_data0)
	user_data1(key1, value1)
}
//export _GtkPrintSettingsFunc_c_wrapper_once
func _GtkPrintSettingsFunc_c_wrapper_once(key0 unsafe.Pointer, value0 unsafe.Pointer, user_data0 unsafe.Pointer) {
	_GtkPrintSettingsFunc_c_wrapper(key0, value0, user_data0)
	gobject.Holder.Release(user_data0)
}
type PrintStatus C.uint32_t
const (
	PrintStatusInitial PrintStatus = 0
	PrintStatusPreparing PrintStatus = 1
	PrintStatusGeneratingData PrintStatus = 2
	PrintStatusSendingData PrintStatus = 3
	PrintStatusPending PrintStatus = 4
	PrintStatusPendingIssue PrintStatus = 5
	PrintStatusPrinting PrintStatus = 6
	PrintStatusFinished PrintStatus = 7
	PrintStatusFinishedAborted PrintStatus = 8
)
type ProgressBarLike interface {
	WidgetLike
	InheritedFromGtkProgressBar() *C.GtkProgressBar
}

type ProgressBar struct {
	Widget
	atk.ImplementorIfaceImpl
	BuildableImpl
	OrientableImpl
}

func ToProgressBar(objlike gobject.ObjectLike) *ProgressBar {
	c := objlike.InheritedFromGObject()
	if c == nil {
		return nil
	}
	t := (*ProgressBar)(nil).GetStaticType()
	obj := gobject.ObjectGrabIfType(unsafe.Pointer(c), t)
	if obj != nil {
		return (*ProgressBar)(obj)
	}
	panic("cannot cast to ProgressBar")
}

func (this0 *ProgressBar) InheritedFromGtkProgressBar() *C.GtkProgressBar {
	if this0 == nil {
		return nil
	}
	return (*C.GtkProgressBar)(this0.C)
}

func (this0 *ProgressBar) GetStaticType() gobject.Type {
	return gobject.Type(C.gtk_progress_bar_get_type())
}

func ProgressBarGetType() gobject.Type {
	return (*ProgressBar)(nil).GetStaticType()
}
func NewProgressBar() *ProgressBar {
	ret1 := C.gtk_progress_bar_new()
	var ret2 *ProgressBar
	ret2 = (*ProgressBar)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
func (this0 *ProgressBar) GetEllipsize() pango.EllipsizeMode {
	var this1 *C.GtkProgressBar
	if this0 != nil {
		this1 = this0.InheritedFromGtkProgressBar()
	}
	ret1 := C.gtk_progress_bar_get_ellipsize(this1)
	var ret2 pango.EllipsizeMode
	ret2 = pango.EllipsizeMode(ret1)
	return ret2
}
func (this0 *ProgressBar) GetFraction() float64 {
	var this1 *C.GtkProgressBar
	if this0 != nil {
		this1 = this0.InheritedFromGtkProgressBar()
	}
	ret1 := C.gtk_progress_bar_get_fraction(this1)
	var ret2 float64
	ret2 = float64(ret1)
	return ret2
}
func (this0 *ProgressBar) GetInverted() bool {
	var this1 *C.GtkProgressBar
	if this0 != nil {
		this1 = this0.InheritedFromGtkProgressBar()
	}
	ret1 := C.gtk_progress_bar_get_inverted(this1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *ProgressBar) GetPulseStep() float64 {
	var this1 *C.GtkProgressBar
	if this0 != nil {
		this1 = this0.InheritedFromGtkProgressBar()
	}
	ret1 := C.gtk_progress_bar_get_pulse_step(this1)
	var ret2 float64
	ret2 = float64(ret1)
	return ret2
}
func (this0 *ProgressBar) GetShowText() bool {
	var this1 *C.GtkProgressBar
	if this0 != nil {
		this1 = this0.InheritedFromGtkProgressBar()
	}
	ret1 := C.gtk_progress_bar_get_show_text(this1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *ProgressBar) GetText() string {
	var this1 *C.GtkProgressBar
	if this0 != nil {
		this1 = this0.InheritedFromGtkProgressBar()
	}
	ret1 := C.gtk_progress_bar_get_text(this1)
	var ret2 string
	ret2 = C.GoString(ret1)
	return ret2
}
func (this0 *ProgressBar) Pulse() {
	var this1 *C.GtkProgressBar
	if this0 != nil {
		this1 = this0.InheritedFromGtkProgressBar()
	}
	C.gtk_progress_bar_pulse(this1)
}
func (this0 *ProgressBar) SetEllipsize(mode0 pango.EllipsizeMode) {
	var this1 *C.GtkProgressBar
	var mode1 C.PangoEllipsizeMode
	if this0 != nil {
		this1 = this0.InheritedFromGtkProgressBar()
	}
	mode1 = C.PangoEllipsizeMode(mode0)
	C.gtk_progress_bar_set_ellipsize(this1, mode1)
}
func (this0 *ProgressBar) SetFraction(fraction0 float64) {
	var this1 *C.GtkProgressBar
	var fraction1 C.double
	if this0 != nil {
		this1 = this0.InheritedFromGtkProgressBar()
	}
	fraction1 = C.double(fraction0)
	C.gtk_progress_bar_set_fraction(this1, fraction1)
}
func (this0 *ProgressBar) SetInverted(inverted0 bool) {
	var this1 *C.GtkProgressBar
	var inverted1 C.int
	if this0 != nil {
		this1 = this0.InheritedFromGtkProgressBar()
	}
	inverted1 = _GoBoolToCBool(inverted0)
	C.gtk_progress_bar_set_inverted(this1, inverted1)
}
func (this0 *ProgressBar) SetPulseStep(fraction0 float64) {
	var this1 *C.GtkProgressBar
	var fraction1 C.double
	if this0 != nil {
		this1 = this0.InheritedFromGtkProgressBar()
	}
	fraction1 = C.double(fraction0)
	C.gtk_progress_bar_set_pulse_step(this1, fraction1)
}
func (this0 *ProgressBar) SetShowText(show_text0 bool) {
	var this1 *C.GtkProgressBar
	var show_text1 C.int
	if this0 != nil {
		this1 = this0.InheritedFromGtkProgressBar()
	}
	show_text1 = _GoBoolToCBool(show_text0)
	C.gtk_progress_bar_set_show_text(this1, show_text1)
}
func (this0 *ProgressBar) SetText(text0 string) {
	var this1 *C.GtkProgressBar
	var text1 *C.char
	if this0 != nil {
		this1 = this0.InheritedFromGtkProgressBar()
	}
	text1 = _GoStringToGString(text0)
	defer C.free(unsafe.Pointer(text1))
	C.gtk_progress_bar_set_text(this1, text1)
}
type RadioActionLike interface {
	ToggleActionLike
	InheritedFromGtkRadioAction() *C.GtkRadioAction
}

type RadioAction struct {
	ToggleAction
	BuildableImpl
}

func ToRadioAction(objlike gobject.ObjectLike) *RadioAction {
	c := objlike.InheritedFromGObject()
	if c == nil {
		return nil
	}
	t := (*RadioAction)(nil).GetStaticType()
	obj := gobject.ObjectGrabIfType(unsafe.Pointer(c), t)
	if obj != nil {
		return (*RadioAction)(obj)
	}
	panic("cannot cast to RadioAction")
}

func (this0 *RadioAction) InheritedFromGtkRadioAction() *C.GtkRadioAction {
	if this0 == nil {
		return nil
	}
	return (*C.GtkRadioAction)(this0.C)
}

func (this0 *RadioAction) GetStaticType() gobject.Type {
	return gobject.Type(C.gtk_radio_action_get_type())
}

func RadioActionGetType() gobject.Type {
	return (*RadioAction)(nil).GetStaticType()
}
func NewRadioAction(name0 string, label0 string, tooltip0 string, stock_id0 string, value0 int) *RadioAction {
	var name1 *C.char
	var label1 *C.char
	var tooltip1 *C.char
	var stock_id1 *C.char
	var value1 C.int32_t
	name1 = _GoStringToGString(name0)
	defer C.free(unsafe.Pointer(name1))
	label1 = _GoStringToGString(label0)
	defer C.free(unsafe.Pointer(label1))
	tooltip1 = _GoStringToGString(tooltip0)
	defer C.free(unsafe.Pointer(tooltip1))
	stock_id1 = _GoStringToGString(stock_id0)
	defer C.free(unsafe.Pointer(stock_id1))
	value1 = C.int32_t(value0)
	ret1 := C.gtk_radio_action_new(name1, label1, tooltip1, stock_id1, value1)
	var ret2 *RadioAction
	ret2 = (*RadioAction)(gobject.ObjectWrap(unsafe.Pointer(ret1), false))
	return ret2
}
func (this0 *RadioAction) GetCurrentValue() int {
	var this1 *C.GtkRadioAction
	if this0 != nil {
		this1 = this0.InheritedFromGtkRadioAction()
	}
	ret1 := C.gtk_radio_action_get_current_value(this1)
	var ret2 int
	ret2 = int(ret1)
	return ret2
}
func (this0 *RadioAction) GetGroup() []*RadioAction {
	var this1 *C.GtkRadioAction
	if this0 != nil {
		this1 = this0.InheritedFromGtkRadioAction()
	}
	ret1 := C.gtk_radio_action_get_group(this1)
	var ret2 []*RadioAction
	for iter := (*_GSList)(unsafe.Pointer(ret1)); iter != nil; iter = iter.next {
		var elt *RadioAction
		elt = (*RadioAction)(gobject.ObjectWrap(unsafe.Pointer((*C.GtkRadioAction)(iter.data)), true))
		ret2 = append(ret2, elt)
	}
	return ret2
}
func (this0 *RadioAction) JoinGroup(group_source0 RadioActionLike) {
	var this1 *C.GtkRadioAction
	var group_source1 *C.GtkRadioAction
	if this0 != nil {
		this1 = this0.InheritedFromGtkRadioAction()
	}
	if group_source0 != nil {
		group_source1 = group_source0.InheritedFromGtkRadioAction()
	}
	C.gtk_radio_action_join_group(this1, group_source1)
}
func (this0 *RadioAction) SetCurrentValue(current_value0 int) {
	var this1 *C.GtkRadioAction
	var current_value1 C.int32_t
	if this0 != nil {
		this1 = this0.InheritedFromGtkRadioAction()
	}
	current_value1 = C.int32_t(current_value0)
	C.gtk_radio_action_set_current_value(this1, current_value1)
}
func (this0 *RadioAction) SetGroup(group0 []*RadioAction) {
	var this1 *C.GtkRadioAction
	var group1 *C.GSList
	if this0 != nil {
		this1 = this0.InheritedFromGtkRadioAction()
	}
	C.gtk_radio_action_set_group(this1, group1)
}
type RadioButtonLike interface {
	CheckButtonLike
	InheritedFromGtkRadioButton() *C.GtkRadioButton
}

type RadioButton struct {
	CheckButton
	atk.ImplementorIfaceImpl
	ActivatableImpl
	BuildableImpl
}

func ToRadioButton(objlike gobject.ObjectLike) *RadioButton {
	c := objlike.InheritedFromGObject()
	if c == nil {
		return nil
	}
	t := (*RadioButton)(nil).GetStaticType()
	obj := gobject.ObjectGrabIfType(unsafe.Pointer(c), t)
	if obj != nil {
		return (*RadioButton)(obj)
	}
	panic("cannot cast to RadioButton")
}

func (this0 *RadioButton) InheritedFromGtkRadioButton() *C.GtkRadioButton {
	if this0 == nil {
		return nil
	}
	return (*C.GtkRadioButton)(this0.C)
}

func (this0 *RadioButton) GetStaticType() gobject.Type {
	return gobject.Type(C.gtk_radio_button_get_type())
}

func RadioButtonGetType() gobject.Type {
	return (*RadioButton)(nil).GetStaticType()
}
func NewRadioButton(group0 []*RadioButton) *RadioButton {
	var group1 *C.GSList
	ret1 := C.gtk_radio_button_new(group1)
	var ret2 *RadioButton
	ret2 = (*RadioButton)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
func NewRadioButtonFromWidget(radio_group_member0 RadioButtonLike) *RadioButton {
	var radio_group_member1 *C.GtkRadioButton
	if radio_group_member0 != nil {
		radio_group_member1 = radio_group_member0.InheritedFromGtkRadioButton()
	}
	ret1 := C.gtk_radio_button_new_from_widget(radio_group_member1)
	var ret2 *RadioButton
	ret2 = (*RadioButton)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
func NewRadioButtonWithLabel(group0 []*RadioButton, label0 string) *RadioButton {
	var group1 *C.GSList
	var label1 *C.char
	label1 = _GoStringToGString(label0)
	defer C.free(unsafe.Pointer(label1))
	ret1 := C.gtk_radio_button_new_with_label(group1, label1)
	var ret2 *RadioButton
	ret2 = (*RadioButton)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
func NewRadioButtonWithLabelFromWidget(radio_group_member0 RadioButtonLike, label0 string) *RadioButton {
	var radio_group_member1 *C.GtkRadioButton
	var label1 *C.char
	if radio_group_member0 != nil {
		radio_group_member1 = radio_group_member0.InheritedFromGtkRadioButton()
	}
	label1 = _GoStringToGString(label0)
	defer C.free(unsafe.Pointer(label1))
	ret1 := C.gtk_radio_button_new_with_label_from_widget(radio_group_member1, label1)
	var ret2 *RadioButton
	ret2 = (*RadioButton)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
func NewRadioButtonWithMnemonic(group0 []*RadioButton, label0 string) *RadioButton {
	var group1 *C.GSList
	var label1 *C.char
	label1 = _GoStringToGString(label0)
	defer C.free(unsafe.Pointer(label1))
	ret1 := C.gtk_radio_button_new_with_mnemonic(group1, label1)
	var ret2 *RadioButton
	ret2 = (*RadioButton)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
func NewRadioButtonWithMnemonicFromWidget(radio_group_member0 RadioButtonLike, label0 string) *RadioButton {
	var radio_group_member1 *C.GtkRadioButton
	var label1 *C.char
	if radio_group_member0 != nil {
		radio_group_member1 = radio_group_member0.InheritedFromGtkRadioButton()
	}
	label1 = _GoStringToGString(label0)
	defer C.free(unsafe.Pointer(label1))
	ret1 := C.gtk_radio_button_new_with_mnemonic_from_widget(radio_group_member1, label1)
	var ret2 *RadioButton
	ret2 = (*RadioButton)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
func (this0 *RadioButton) GetGroup() []*RadioButton {
	var this1 *C.GtkRadioButton
	if this0 != nil {
		this1 = this0.InheritedFromGtkRadioButton()
	}
	ret1 := C.gtk_radio_button_get_group(this1)
	var ret2 []*RadioButton
	for iter := (*_GSList)(unsafe.Pointer(ret1)); iter != nil; iter = iter.next {
		var elt *RadioButton
		elt = (*RadioButton)(gobject.ObjectWrap(unsafe.Pointer((*C.GtkRadioButton)(iter.data)), true))
		ret2 = append(ret2, elt)
	}
	return ret2
}
func (this0 *RadioButton) JoinGroup(group_source0 RadioButtonLike) {
	var this1 *C.GtkRadioButton
	var group_source1 *C.GtkRadioButton
	if this0 != nil {
		this1 = this0.InheritedFromGtkRadioButton()
	}
	if group_source0 != nil {
		group_source1 = group_source0.InheritedFromGtkRadioButton()
	}
	C.gtk_radio_button_join_group(this1, group_source1)
}
func (this0 *RadioButton) SetGroup(group0 []*RadioButton) {
	var this1 *C.GtkRadioButton
	var group1 *C.GSList
	if this0 != nil {
		this1 = this0.InheritedFromGtkRadioButton()
	}
	C.gtk_radio_button_set_group(this1, group1)
}
type RadioMenuItemLike interface {
	CheckMenuItemLike
	InheritedFromGtkRadioMenuItem() *C.GtkRadioMenuItem
}

type RadioMenuItem struct {
	CheckMenuItem
	atk.ImplementorIfaceImpl
	ActivatableImpl
	BuildableImpl
}

func ToRadioMenuItem(objlike gobject.ObjectLike) *RadioMenuItem {
	c := objlike.InheritedFromGObject()
	if c == nil {
		return nil
	}
	t := (*RadioMenuItem)(nil).GetStaticType()
	obj := gobject.ObjectGrabIfType(unsafe.Pointer(c), t)
	if obj != nil {
		return (*RadioMenuItem)(obj)
	}
	panic("cannot cast to RadioMenuItem")
}

func (this0 *RadioMenuItem) InheritedFromGtkRadioMenuItem() *C.GtkRadioMenuItem {
	if this0 == nil {
		return nil
	}
	return (*C.GtkRadioMenuItem)(this0.C)
}

func (this0 *RadioMenuItem) GetStaticType() gobject.Type {
	return gobject.Type(C.gtk_radio_menu_item_get_type())
}

func RadioMenuItemGetType() gobject.Type {
	return (*RadioMenuItem)(nil).GetStaticType()
}
func NewRadioMenuItemFromWidget(group0 RadioMenuItemLike) *RadioMenuItem {
	var group1 *C.GtkRadioMenuItem
	if group0 != nil {
		group1 = group0.InheritedFromGtkRadioMenuItem()
	}
	ret1 := C.gtk_radio_menu_item_new_from_widget(group1)
	var ret2 *RadioMenuItem
	ret2 = (*RadioMenuItem)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
func NewRadioMenuItemWithLabel(group0 []*RadioMenuItem, label0 string) *RadioMenuItem {
	var group1 *C.GSList
	var label1 *C.char
	label1 = _GoStringToGString(label0)
	defer C.free(unsafe.Pointer(label1))
	ret1 := C.gtk_radio_menu_item_new_with_label(group1, label1)
	var ret2 *RadioMenuItem
	ret2 = (*RadioMenuItem)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
func NewRadioMenuItemWithLabelFromWidget(group0 RadioMenuItemLike, label0 string) *RadioMenuItem {
	var group1 *C.GtkRadioMenuItem
	var label1 *C.char
	if group0 != nil {
		group1 = group0.InheritedFromGtkRadioMenuItem()
	}
	label1 = _GoStringToGString(label0)
	defer C.free(unsafe.Pointer(label1))
	ret1 := C.gtk_radio_menu_item_new_with_label_from_widget(group1, label1)
	var ret2 *RadioMenuItem
	ret2 = (*RadioMenuItem)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
func NewRadioMenuItemWithMnemonicFromWidget(group0 RadioMenuItemLike, label0 string) *RadioMenuItem {
	var group1 *C.GtkRadioMenuItem
	var label1 *C.char
	if group0 != nil {
		group1 = group0.InheritedFromGtkRadioMenuItem()
	}
	label1 = _GoStringToGString(label0)
	defer C.free(unsafe.Pointer(label1))
	ret1 := C.gtk_radio_menu_item_new_with_mnemonic_from_widget(group1, label1)
	var ret2 *RadioMenuItem
	ret2 = (*RadioMenuItem)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
func (this0 *RadioMenuItem) GetGroup() []*RadioMenuItem {
	var this1 *C.GtkRadioMenuItem
	if this0 != nil {
		this1 = this0.InheritedFromGtkRadioMenuItem()
	}
	ret1 := C.gtk_radio_menu_item_get_group(this1)
	var ret2 []*RadioMenuItem
	for iter := (*_GSList)(unsafe.Pointer(ret1)); iter != nil; iter = iter.next {
		var elt *RadioMenuItem
		elt = (*RadioMenuItem)(gobject.ObjectWrap(unsafe.Pointer((*C.GtkRadioMenuItem)(iter.data)), true))
		ret2 = append(ret2, elt)
	}
	return ret2
}
type RadioToolButtonLike interface {
	ToggleToolButtonLike
	InheritedFromGtkRadioToolButton() *C.GtkRadioToolButton
}

type RadioToolButton struct {
	ToggleToolButton
	atk.ImplementorIfaceImpl
	ActivatableImpl
	BuildableImpl
}

func ToRadioToolButton(objlike gobject.ObjectLike) *RadioToolButton {
	c := objlike.InheritedFromGObject()
	if c == nil {
		return nil
	}
	t := (*RadioToolButton)(nil).GetStaticType()
	obj := gobject.ObjectGrabIfType(unsafe.Pointer(c), t)
	if obj != nil {
		return (*RadioToolButton)(obj)
	}
	panic("cannot cast to RadioToolButton")
}

func (this0 *RadioToolButton) InheritedFromGtkRadioToolButton() *C.GtkRadioToolButton {
	if this0 == nil {
		return nil
	}
	return (*C.GtkRadioToolButton)(this0.C)
}

func (this0 *RadioToolButton) GetStaticType() gobject.Type {
	return gobject.Type(C.gtk_radio_tool_button_get_type())
}

func RadioToolButtonGetType() gobject.Type {
	return (*RadioToolButton)(nil).GetStaticType()
}
func NewRadioToolButton(group0 []*RadioButton) *RadioToolButton {
	var group1 *C.GSList
	ret1 := C.gtk_radio_tool_button_new(group1)
	var ret2 *RadioToolButton
	ret2 = (*RadioToolButton)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
func NewRadioToolButtonFromWidget(group0 RadioToolButtonLike) *RadioToolButton {
	var group1 *C.GtkRadioToolButton
	if group0 != nil {
		group1 = group0.InheritedFromGtkRadioToolButton()
	}
	ret1 := C.gtk_radio_tool_button_new_from_widget(group1)
	var ret2 *RadioToolButton
	ret2 = (*RadioToolButton)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
func NewRadioToolButtonWithStockFromWidget(group0 RadioToolButtonLike, stock_id0 string) *RadioToolButton {
	var group1 *C.GtkRadioToolButton
	var stock_id1 *C.char
	if group0 != nil {
		group1 = group0.InheritedFromGtkRadioToolButton()
	}
	stock_id1 = _GoStringToGString(stock_id0)
	defer C.free(unsafe.Pointer(stock_id1))
	ret1 := C.gtk_radio_tool_button_new_with_stock_from_widget(group1, stock_id1)
	var ret2 *RadioToolButton
	ret2 = (*RadioToolButton)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
func (this0 *RadioToolButton) GetGroup() []*RadioButton {
	var this1 *C.GtkRadioToolButton
	if this0 != nil {
		this1 = this0.InheritedFromGtkRadioToolButton()
	}
	ret1 := C.gtk_radio_tool_button_get_group(this1)
	var ret2 []*RadioButton
	for iter := (*_GSList)(unsafe.Pointer(ret1)); iter != nil; iter = iter.next {
		var elt *RadioButton
		elt = (*RadioButton)(gobject.ObjectWrap(unsafe.Pointer((*C.GtkRadioButton)(iter.data)), true))
		ret2 = append(ret2, elt)
	}
	return ret2
}
func (this0 *RadioToolButton) SetGroup(group0 []*RadioButton) {
	var this1 *C.GtkRadioToolButton
	var group1 *C.GSList
	if this0 != nil {
		this1 = this0.InheritedFromGtkRadioToolButton()
	}
	C.gtk_radio_tool_button_set_group(this1, group1)
}
type RangeLike interface {
	WidgetLike
	InheritedFromGtkRange() *C.GtkRange
}

type Range struct {
	Widget
	atk.ImplementorIfaceImpl
	BuildableImpl
	OrientableImpl
}

func ToRange(objlike gobject.ObjectLike) *Range {
	c := objlike.InheritedFromGObject()
	if c == nil {
		return nil
	}
	t := (*Range)(nil).GetStaticType()
	obj := gobject.ObjectGrabIfType(unsafe.Pointer(c), t)
	if obj != nil {
		return (*Range)(obj)
	}
	panic("cannot cast to Range")
}

func (this0 *Range) InheritedFromGtkRange() *C.GtkRange {
	if this0 == nil {
		return nil
	}
	return (*C.GtkRange)(this0.C)
}

func (this0 *Range) GetStaticType() gobject.Type {
	return gobject.Type(C.gtk_range_get_type())
}

func RangeGetType() gobject.Type {
	return (*Range)(nil).GetStaticType()
}
func (this0 *Range) GetAdjustment() *Adjustment {
	var this1 *C.GtkRange
	if this0 != nil {
		this1 = this0.InheritedFromGtkRange()
	}
	ret1 := C.gtk_range_get_adjustment(this1)
	var ret2 *Adjustment
	ret2 = (*Adjustment)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
func (this0 *Range) GetFillLevel() float64 {
	var this1 *C.GtkRange
	if this0 != nil {
		this1 = this0.InheritedFromGtkRange()
	}
	ret1 := C.gtk_range_get_fill_level(this1)
	var ret2 float64
	ret2 = float64(ret1)
	return ret2
}
func (this0 *Range) GetFlippable() bool {
	var this1 *C.GtkRange
	if this0 != nil {
		this1 = this0.InheritedFromGtkRange()
	}
	ret1 := C.gtk_range_get_flippable(this1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *Range) GetInverted() bool {
	var this1 *C.GtkRange
	if this0 != nil {
		this1 = this0.InheritedFromGtkRange()
	}
	ret1 := C.gtk_range_get_inverted(this1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *Range) GetLowerStepperSensitivity() SensitivityType {
	var this1 *C.GtkRange
	if this0 != nil {
		this1 = this0.InheritedFromGtkRange()
	}
	ret1 := C.gtk_range_get_lower_stepper_sensitivity(this1)
	var ret2 SensitivityType
	ret2 = SensitivityType(ret1)
	return ret2
}
func (this0 *Range) GetMinSliderSize() int {
	var this1 *C.GtkRange
	if this0 != nil {
		this1 = this0.InheritedFromGtkRange()
	}
	ret1 := C.gtk_range_get_min_slider_size(this1)
	var ret2 int
	ret2 = int(ret1)
	return ret2
}
func (this0 *Range) GetRangeRect() cairo.RectangleInt {
	var this1 *C.GtkRange
	var range_rect1 C.cairoRectangleInt
	if this0 != nil {
		this1 = this0.InheritedFromGtkRange()
	}
	C.gtk_range_get_range_rect(this1, &range_rect1)
	var range_rect2 cairo.RectangleInt
	range_rect2 = *(*cairo.RectangleInt)(unsafe.Pointer(&range_rect1))
	return range_rect2
}
func (this0 *Range) GetRestrictToFillLevel() bool {
	var this1 *C.GtkRange
	if this0 != nil {
		this1 = this0.InheritedFromGtkRange()
	}
	ret1 := C.gtk_range_get_restrict_to_fill_level(this1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *Range) GetRoundDigits() int {
	var this1 *C.GtkRange
	if this0 != nil {
		this1 = this0.InheritedFromGtkRange()
	}
	ret1 := C.gtk_range_get_round_digits(this1)
	var ret2 int
	ret2 = int(ret1)
	return ret2
}
func (this0 *Range) GetShowFillLevel() bool {
	var this1 *C.GtkRange
	if this0 != nil {
		this1 = this0.InheritedFromGtkRange()
	}
	ret1 := C.gtk_range_get_show_fill_level(this1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *Range) GetSliderRange() (int, int) {
	var this1 *C.GtkRange
	var slider_start1 C.int32_t
	var slider_end1 C.int32_t
	if this0 != nil {
		this1 = this0.InheritedFromGtkRange()
	}
	C.gtk_range_get_slider_range(this1, &slider_start1, &slider_end1)
	var slider_start2 int
	var slider_end2 int
	slider_start2 = int(slider_start1)
	slider_end2 = int(slider_end1)
	return slider_start2, slider_end2
}
func (this0 *Range) GetSliderSizeFixed() bool {
	var this1 *C.GtkRange
	if this0 != nil {
		this1 = this0.InheritedFromGtkRange()
	}
	ret1 := C.gtk_range_get_slider_size_fixed(this1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *Range) GetUpperStepperSensitivity() SensitivityType {
	var this1 *C.GtkRange
	if this0 != nil {
		this1 = this0.InheritedFromGtkRange()
	}
	ret1 := C.gtk_range_get_upper_stepper_sensitivity(this1)
	var ret2 SensitivityType
	ret2 = SensitivityType(ret1)
	return ret2
}
func (this0 *Range) GetValue() float64 {
	var this1 *C.GtkRange
	if this0 != nil {
		this1 = this0.InheritedFromGtkRange()
	}
	ret1 := C.gtk_range_get_value(this1)
	var ret2 float64
	ret2 = float64(ret1)
	return ret2
}
func (this0 *Range) SetAdjustment(adjustment0 AdjustmentLike) {
	var this1 *C.GtkRange
	var adjustment1 *C.GtkAdjustment
	if this0 != nil {
		this1 = this0.InheritedFromGtkRange()
	}
	if adjustment0 != nil {
		adjustment1 = adjustment0.InheritedFromGtkAdjustment()
	}
	C.gtk_range_set_adjustment(this1, adjustment1)
}
func (this0 *Range) SetFillLevel(fill_level0 float64) {
	var this1 *C.GtkRange
	var fill_level1 C.double
	if this0 != nil {
		this1 = this0.InheritedFromGtkRange()
	}
	fill_level1 = C.double(fill_level0)
	C.gtk_range_set_fill_level(this1, fill_level1)
}
func (this0 *Range) SetFlippable(flippable0 bool) {
	var this1 *C.GtkRange
	var flippable1 C.int
	if this0 != nil {
		this1 = this0.InheritedFromGtkRange()
	}
	flippable1 = _GoBoolToCBool(flippable0)
	C.gtk_range_set_flippable(this1, flippable1)
}
func (this0 *Range) SetIncrements(step0 float64, page0 float64) {
	var this1 *C.GtkRange
	var step1 C.double
	var page1 C.double
	if this0 != nil {
		this1 = this0.InheritedFromGtkRange()
	}
	step1 = C.double(step0)
	page1 = C.double(page0)
	C.gtk_range_set_increments(this1, step1, page1)
}
func (this0 *Range) SetInverted(setting0 bool) {
	var this1 *C.GtkRange
	var setting1 C.int
	if this0 != nil {
		this1 = this0.InheritedFromGtkRange()
	}
	setting1 = _GoBoolToCBool(setting0)
	C.gtk_range_set_inverted(this1, setting1)
}
func (this0 *Range) SetLowerStepperSensitivity(sensitivity0 SensitivityType) {
	var this1 *C.GtkRange
	var sensitivity1 C.GtkSensitivityType
	if this0 != nil {
		this1 = this0.InheritedFromGtkRange()
	}
	sensitivity1 = C.GtkSensitivityType(sensitivity0)
	C.gtk_range_set_lower_stepper_sensitivity(this1, sensitivity1)
}
func (this0 *Range) SetMinSliderSize(min_size0 int) {
	var this1 *C.GtkRange
	var min_size1 C.int32_t
	if this0 != nil {
		this1 = this0.InheritedFromGtkRange()
	}
	min_size1 = C.int32_t(min_size0)
	C.gtk_range_set_min_slider_size(this1, min_size1)
}
func (this0 *Range) SetRange(min0 float64, max0 float64) {
	var this1 *C.GtkRange
	var min1 C.double
	var max1 C.double
	if this0 != nil {
		this1 = this0.InheritedFromGtkRange()
	}
	min1 = C.double(min0)
	max1 = C.double(max0)
	C.gtk_range_set_range(this1, min1, max1)
}
func (this0 *Range) SetRestrictToFillLevel(restrict_to_fill_level0 bool) {
	var this1 *C.GtkRange
	var restrict_to_fill_level1 C.int
	if this0 != nil {
		this1 = this0.InheritedFromGtkRange()
	}
	restrict_to_fill_level1 = _GoBoolToCBool(restrict_to_fill_level0)
	C.gtk_range_set_restrict_to_fill_level(this1, restrict_to_fill_level1)
}
func (this0 *Range) SetRoundDigits(round_digits0 int) {
	var this1 *C.GtkRange
	var round_digits1 C.int32_t
	if this0 != nil {
		this1 = this0.InheritedFromGtkRange()
	}
	round_digits1 = C.int32_t(round_digits0)
	C.gtk_range_set_round_digits(this1, round_digits1)
}
func (this0 *Range) SetShowFillLevel(show_fill_level0 bool) {
	var this1 *C.GtkRange
	var show_fill_level1 C.int
	if this0 != nil {
		this1 = this0.InheritedFromGtkRange()
	}
	show_fill_level1 = _GoBoolToCBool(show_fill_level0)
	C.gtk_range_set_show_fill_level(this1, show_fill_level1)
}
func (this0 *Range) SetSliderSizeFixed(size_fixed0 bool) {
	var this1 *C.GtkRange
	var size_fixed1 C.int
	if this0 != nil {
		this1 = this0.InheritedFromGtkRange()
	}
	size_fixed1 = _GoBoolToCBool(size_fixed0)
	C.gtk_range_set_slider_size_fixed(this1, size_fixed1)
}
func (this0 *Range) SetUpperStepperSensitivity(sensitivity0 SensitivityType) {
	var this1 *C.GtkRange
	var sensitivity1 C.GtkSensitivityType
	if this0 != nil {
		this1 = this0.InheritedFromGtkRange()
	}
	sensitivity1 = C.GtkSensitivityType(sensitivity0)
	C.gtk_range_set_upper_stepper_sensitivity(this1, sensitivity1)
}
func (this0 *Range) SetValue(value0 float64) {
	var this1 *C.GtkRange
	var value1 C.double
	if this0 != nil {
		this1 = this0.InheritedFromGtkRange()
	}
	value1 = C.double(value0)
	C.gtk_range_set_value(this1, value1)
}
type RcContext struct {}
type RcFlags C.uint32_t
const (
	RcFlagsFg RcFlags = 1
	RcFlagsBg RcFlags = 2
	RcFlagsText RcFlags = 4
	RcFlagsBase RcFlags = 8
)
type RcProperty struct {
	TypeName uint32
	PropertyName uint32
	origin0 *C.char
	Value gobject.Value
}
func (this0 *RcProperty) Origin() string {
	var origin1 string
	origin1 = C.GoString(this0.origin0)
	return origin1
}
// blacklisted: RcPropertyParser (callback)
type RcStyleLike interface {
	gobject.ObjectLike
	InheritedFromGtkRcStyle() *C.GtkRcStyle
}

type RcStyle struct {
	gobject.Object
	
}

func ToRcStyle(objlike gobject.ObjectLike) *RcStyle {
	c := objlike.InheritedFromGObject()
	if c == nil {
		return nil
	}
	t := (*RcStyle)(nil).GetStaticType()
	obj := gobject.ObjectGrabIfType(unsafe.Pointer(c), t)
	if obj != nil {
		return (*RcStyle)(obj)
	}
	panic("cannot cast to RcStyle")
}

func (this0 *RcStyle) InheritedFromGtkRcStyle() *C.GtkRcStyle {
	if this0 == nil {
		return nil
	}
	return (*C.GtkRcStyle)(this0.C)
}

func (this0 *RcStyle) GetStaticType() gobject.Type {
	return gobject.Type(C.gtk_rc_style_get_type())
}

func RcStyleGetType() gobject.Type {
	return (*RcStyle)(nil).GetStaticType()
}
func NewRcStyle() *RcStyle {
	ret1 := C.gtk_rc_style_new()
	var ret2 *RcStyle
	ret2 = (*RcStyle)(gobject.ObjectWrap(unsafe.Pointer(ret1), false))
	return ret2
}
func (this0 *RcStyle) Copy() *RcStyle {
	var this1 *C.GtkRcStyle
	if this0 != nil {
		this1 = this0.InheritedFromGtkRcStyle()
	}
	ret1 := C.gtk_rc_style_copy(this1)
	var ret2 *RcStyle
	ret2 = (*RcStyle)(gobject.ObjectWrap(unsafe.Pointer(ret1), false))
	return ret2
}
type RcTokenType C.uint32_t
const (
	RcTokenTypeInvalid RcTokenType = 270
	RcTokenTypeInclude RcTokenType = 271
	RcTokenTypeNormal RcTokenType = 272
	RcTokenTypeActive RcTokenType = 273
	RcTokenTypePrelight RcTokenType = 274
	RcTokenTypeSelected RcTokenType = 275
	RcTokenTypeInsensitive RcTokenType = 276
	RcTokenTypeFg RcTokenType = 277
	RcTokenTypeBg RcTokenType = 278
	RcTokenTypeText RcTokenType = 279
	RcTokenTypeBase RcTokenType = 280
	RcTokenTypeXthickness RcTokenType = 281
	RcTokenTypeYthickness RcTokenType = 282
	RcTokenTypeFont RcTokenType = 283
	RcTokenTypeFontset RcTokenType = 284
	RcTokenTypeFontName RcTokenType = 285
	RcTokenTypeBgPixmap RcTokenType = 286
	RcTokenTypePixmapPath RcTokenType = 287
	RcTokenTypeStyle RcTokenType = 288
	RcTokenTypeBinding RcTokenType = 289
	RcTokenTypeBind RcTokenType = 290
	RcTokenTypeWidget RcTokenType = 291
	RcTokenTypeWidgetClass RcTokenType = 292
	RcTokenTypeClass RcTokenType = 293
	RcTokenTypeLowest RcTokenType = 294
	RcTokenTypeGtk RcTokenType = 295
	RcTokenTypeApplication RcTokenType = 296
	RcTokenTypeTheme RcTokenType = 297
	RcTokenTypeRc RcTokenType = 298
	RcTokenTypeHighest RcTokenType = 299
	RcTokenTypeEngine RcTokenType = 300
	RcTokenTypeModulePath RcTokenType = 301
	RcTokenTypeIMModulePath RcTokenType = 302
	RcTokenTypeIMModuleFile RcTokenType = 303
	RcTokenTypeStock RcTokenType = 304
	RcTokenTypeLtr RcTokenType = 305
	RcTokenTypeRtl RcTokenType = 306
	RcTokenTypeColor RcTokenType = 307
	RcTokenTypeUnbind RcTokenType = 308
	RcTokenTypeLast RcTokenType = 309
)
type RecentActionLike interface {
	ActionLike
	InheritedFromGtkRecentAction() *C.GtkRecentAction
}

type RecentAction struct {
	Action
	BuildableImpl
	RecentChooserImpl
}

func ToRecentAction(objlike gobject.ObjectLike) *RecentAction {
	c := objlike.InheritedFromGObject()
	if c == nil {
		return nil
	}
	t := (*RecentAction)(nil).GetStaticType()
	obj := gobject.ObjectGrabIfType(unsafe.Pointer(c), t)
	if obj != nil {
		return (*RecentAction)(obj)
	}
	panic("cannot cast to RecentAction")
}

func (this0 *RecentAction) InheritedFromGtkRecentAction() *C.GtkRecentAction {
	if this0 == nil {
		return nil
	}
	return (*C.GtkRecentAction)(this0.C)
}

func (this0 *RecentAction) GetStaticType() gobject.Type {
	return gobject.Type(C.gtk_recent_action_get_type())
}

func RecentActionGetType() gobject.Type {
	return (*RecentAction)(nil).GetStaticType()
}
func NewRecentAction(name0 string, label0 string, tooltip0 string, stock_id0 string) *RecentAction {
	var name1 *C.char
	var label1 *C.char
	var tooltip1 *C.char
	var stock_id1 *C.char
	name1 = _GoStringToGString(name0)
	defer C.free(unsafe.Pointer(name1))
	label1 = _GoStringToGString(label0)
	defer C.free(unsafe.Pointer(label1))
	tooltip1 = _GoStringToGString(tooltip0)
	defer C.free(unsafe.Pointer(tooltip1))
	stock_id1 = _GoStringToGString(stock_id0)
	defer C.free(unsafe.Pointer(stock_id1))
	ret1 := C.gtk_recent_action_new(name1, label1, tooltip1, stock_id1)
	var ret2 *RecentAction
	ret2 = (*RecentAction)(gobject.ObjectWrap(unsafe.Pointer(ret1), false))
	return ret2
}
func NewRecentActionForManager(name0 string, label0 string, tooltip0 string, stock_id0 string, manager0 RecentManagerLike) *RecentAction {
	var name1 *C.char
	var label1 *C.char
	var tooltip1 *C.char
	var stock_id1 *C.char
	var manager1 *C.GtkRecentManager
	name1 = _GoStringToGString(name0)
	defer C.free(unsafe.Pointer(name1))
	label1 = _GoStringToGString(label0)
	defer C.free(unsafe.Pointer(label1))
	tooltip1 = _GoStringToGString(tooltip0)
	defer C.free(unsafe.Pointer(tooltip1))
	stock_id1 = _GoStringToGString(stock_id0)
	defer C.free(unsafe.Pointer(stock_id1))
	if manager0 != nil {
		manager1 = manager0.InheritedFromGtkRecentManager()
	}
	ret1 := C.gtk_recent_action_new_for_manager(name1, label1, tooltip1, stock_id1, manager1)
	var ret2 *RecentAction
	ret2 = (*RecentAction)(gobject.ObjectWrap(unsafe.Pointer(ret1), false))
	return ret2
}
func (this0 *RecentAction) GetShowNumbers() bool {
	var this1 *C.GtkRecentAction
	if this0 != nil {
		this1 = this0.InheritedFromGtkRecentAction()
	}
	ret1 := C.gtk_recent_action_get_show_numbers(this1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *RecentAction) SetShowNumbers(show_numbers0 bool) {
	var this1 *C.GtkRecentAction
	var show_numbers1 C.int
	if this0 != nil {
		this1 = this0.InheritedFromGtkRecentAction()
	}
	show_numbers1 = _GoBoolToCBool(show_numbers0)
	C.gtk_recent_action_set_show_numbers(this1, show_numbers1)
}
type RecentChooserLike interface {
	ImplementsGtkRecentChooser() *C.GtkRecentChooser
}

type RecentChooser struct {
	gobject.Object
	RecentChooserImpl
}

type RecentChooserImpl struct {}

func ToRecentChooser(objlike gobject.ObjectLike) *RecentChooser {
	t := (*RecentChooserImpl)(nil).GetStaticType()
	c := objlike.InheritedFromGObject()
	obj := gobject.ObjectGrabIfType(unsafe.Pointer(c), t)
	if obj != nil {
		return (*RecentChooser)(obj)
	}
	panic("cannot cast to RecentChooser")
}

func (this0 *RecentChooserImpl) ImplementsGtkRecentChooser() *C.GtkRecentChooser {
	obj := uintptr(unsafe.Pointer(this0)) - unsafe.Sizeof(uintptr(0))
	return (*C.GtkRecentChooser)((*gobject.Object)(unsafe.Pointer(obj)).C)
}

func (this0 *RecentChooserImpl) GetStaticType() gobject.Type {
	return gobject.Type(C.gtk_recent_chooser_get_type())
}

func RecentChooserGetType() gobject.Type {
	return (*RecentChooserImpl)(nil).GetStaticType()
}
func (this0 *RecentChooserImpl) AddFilter(filter0 RecentFilterLike) {
	var this1 *C.GtkRecentChooser
	var filter1 *C.GtkRecentFilter
	if this0 != nil {
		this1 = this0.ImplementsGtkRecentChooser()}
	if filter0 != nil {
		filter1 = filter0.InheritedFromGtkRecentFilter()
	}
	C.gtk_recent_chooser_add_filter(this1, filter1)
}
func (this0 *RecentChooserImpl) GetCurrentItem() *RecentInfo {
	var this1 *C.GtkRecentChooser
	if this0 != nil {
		this1 = this0.ImplementsGtkRecentChooser()}
	ret1 := C.gtk_recent_chooser_get_current_item(this1)
	var ret2 *RecentInfo
	ret2 = (*RecentInfo)(unsafe.Pointer(ret1))
	return ret2
}
func (this0 *RecentChooserImpl) GetCurrentURI() string {
	var this1 *C.GtkRecentChooser
	if this0 != nil {
		this1 = this0.ImplementsGtkRecentChooser()}
	ret1 := C.gtk_recent_chooser_get_current_uri(this1)
	var ret2 string
	ret2 = C.GoString(ret1)
	C.g_free(unsafe.Pointer(ret1))
	return ret2
}
func (this0 *RecentChooserImpl) GetFilter() *RecentFilter {
	var this1 *C.GtkRecentChooser
	if this0 != nil {
		this1 = this0.ImplementsGtkRecentChooser()}
	ret1 := C.gtk_recent_chooser_get_filter(this1)
	var ret2 *RecentFilter
	ret2 = (*RecentFilter)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
func (this0 *RecentChooserImpl) GetItems() []RecentInfo {
	var this1 *C.GtkRecentChooser
	if this0 != nil {
		this1 = this0.ImplementsGtkRecentChooser()}
	ret1 := C.gtk_recent_chooser_get_items(this1)
	var ret2 []RecentInfo
	for iter := (*_GList)(unsafe.Pointer(ret1)); iter != nil; iter = iter.next {
		var elt RecentInfo
		elt = *(*RecentInfo)(unsafe.Pointer((*C.GtkRecentInfo)(iter.data)))
		ret2 = append(ret2, elt)
	}
	return ret2
}
func (this0 *RecentChooserImpl) GetLimit() int {
	var this1 *C.GtkRecentChooser
	if this0 != nil {
		this1 = this0.ImplementsGtkRecentChooser()}
	ret1 := C.gtk_recent_chooser_get_limit(this1)
	var ret2 int
	ret2 = int(ret1)
	return ret2
}
func (this0 *RecentChooserImpl) GetLocalOnly() bool {
	var this1 *C.GtkRecentChooser
	if this0 != nil {
		this1 = this0.ImplementsGtkRecentChooser()}
	ret1 := C.gtk_recent_chooser_get_local_only(this1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *RecentChooserImpl) GetSelectMultiple() bool {
	var this1 *C.GtkRecentChooser
	if this0 != nil {
		this1 = this0.ImplementsGtkRecentChooser()}
	ret1 := C.gtk_recent_chooser_get_select_multiple(this1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *RecentChooserImpl) GetShowIcons() bool {
	var this1 *C.GtkRecentChooser
	if this0 != nil {
		this1 = this0.ImplementsGtkRecentChooser()}
	ret1 := C.gtk_recent_chooser_get_show_icons(this1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *RecentChooserImpl) GetShowNotFound() bool {
	var this1 *C.GtkRecentChooser
	if this0 != nil {
		this1 = this0.ImplementsGtkRecentChooser()}
	ret1 := C.gtk_recent_chooser_get_show_not_found(this1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *RecentChooserImpl) GetShowPrivate() bool {
	var this1 *C.GtkRecentChooser
	if this0 != nil {
		this1 = this0.ImplementsGtkRecentChooser()}
	ret1 := C.gtk_recent_chooser_get_show_private(this1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *RecentChooserImpl) GetShowTips() bool {
	var this1 *C.GtkRecentChooser
	if this0 != nil {
		this1 = this0.ImplementsGtkRecentChooser()}
	ret1 := C.gtk_recent_chooser_get_show_tips(this1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *RecentChooserImpl) GetSortType() RecentSortType {
	var this1 *C.GtkRecentChooser
	if this0 != nil {
		this1 = this0.ImplementsGtkRecentChooser()}
	ret1 := C.gtk_recent_chooser_get_sort_type(this1)
	var ret2 RecentSortType
	ret2 = RecentSortType(ret1)
	return ret2
}
func (this0 *RecentChooserImpl) GetURIs() (uint64, []string) {
	var this1 *C.GtkRecentChooser
	var length1 C.uint64_t
	if this0 != nil {
		this1 = this0.ImplementsGtkRecentChooser()}
	ret1 := C.gtk_recent_chooser_get_uris(this1, &length1)
	var length2 uint64
	var ret2 []string
	length2 = uint64(length1)
	ret2 = make([]string, length1)
	for i := range ret2 {
		ret2[i] = C.GoString((*(*[999999]*C.char)(unsafe.Pointer(ret1)))[i])
		C.g_free(unsafe.Pointer((*(*[999999]*C.char)(unsafe.Pointer(ret1)))[i]))
	}
	return length2, ret2
}
func (this0 *RecentChooserImpl) ListFilters() []*RecentFilter {
	var this1 *C.GtkRecentChooser
	if this0 != nil {
		this1 = this0.ImplementsGtkRecentChooser()}
	ret1 := C.gtk_recent_chooser_list_filters(this1)
	var ret2 []*RecentFilter
	for iter := (*_GSList)(unsafe.Pointer(ret1)); iter != nil; iter = iter.next {
		var elt *RecentFilter
		elt = (*RecentFilter)(gobject.ObjectWrap(unsafe.Pointer((*C.GtkRecentFilter)(iter.data)), true))
		ret2 = append(ret2, elt)
	}
	return ret2
}
func (this0 *RecentChooserImpl) RemoveFilter(filter0 RecentFilterLike) {
	var this1 *C.GtkRecentChooser
	var filter1 *C.GtkRecentFilter
	if this0 != nil {
		this1 = this0.ImplementsGtkRecentChooser()}
	if filter0 != nil {
		filter1 = filter0.InheritedFromGtkRecentFilter()
	}
	C.gtk_recent_chooser_remove_filter(this1, filter1)
}
func (this0 *RecentChooserImpl) SelectAll() {
	var this1 *C.GtkRecentChooser
	if this0 != nil {
		this1 = this0.ImplementsGtkRecentChooser()}
	C.gtk_recent_chooser_select_all(this1)
}
func (this0 *RecentChooserImpl) SelectURI(uri0 string) (bool, error) {
	var this1 *C.GtkRecentChooser
	var uri1 *C.char
	var err1 *C.GError
	if this0 != nil {
		this1 = this0.ImplementsGtkRecentChooser()}
	uri1 = _GoStringToGString(uri0)
	defer C.free(unsafe.Pointer(uri1))
	ret1 := C.gtk_recent_chooser_select_uri(this1, uri1, &err1)
	var ret2 bool
	var err2 error
	ret2 = ret1 != 0
	if err1 != nil {
		err2 = errors.New(C.GoString(((*_GError)(unsafe.Pointer(err1))).message))
		C.g_error_free(err1)
	}
	return ret2, err2
}
func (this0 *RecentChooserImpl) SetCurrentURI(uri0 string) (bool, error) {
	var this1 *C.GtkRecentChooser
	var uri1 *C.char
	var err1 *C.GError
	if this0 != nil {
		this1 = this0.ImplementsGtkRecentChooser()}
	uri1 = _GoStringToGString(uri0)
	defer C.free(unsafe.Pointer(uri1))
	ret1 := C.gtk_recent_chooser_set_current_uri(this1, uri1, &err1)
	var ret2 bool
	var err2 error
	ret2 = ret1 != 0
	if err1 != nil {
		err2 = errors.New(C.GoString(((*_GError)(unsafe.Pointer(err1))).message))
		C.g_error_free(err1)
	}
	return ret2, err2
}
func (this0 *RecentChooserImpl) SetFilter(filter0 RecentFilterLike) {
	var this1 *C.GtkRecentChooser
	var filter1 *C.GtkRecentFilter
	if this0 != nil {
		this1 = this0.ImplementsGtkRecentChooser()}
	if filter0 != nil {
		filter1 = filter0.InheritedFromGtkRecentFilter()
	}
	C.gtk_recent_chooser_set_filter(this1, filter1)
}
func (this0 *RecentChooserImpl) SetLimit(limit0 int) {
	var this1 *C.GtkRecentChooser
	var limit1 C.int32_t
	if this0 != nil {
		this1 = this0.ImplementsGtkRecentChooser()}
	limit1 = C.int32_t(limit0)
	C.gtk_recent_chooser_set_limit(this1, limit1)
}
func (this0 *RecentChooserImpl) SetLocalOnly(local_only0 bool) {
	var this1 *C.GtkRecentChooser
	var local_only1 C.int
	if this0 != nil {
		this1 = this0.ImplementsGtkRecentChooser()}
	local_only1 = _GoBoolToCBool(local_only0)
	C.gtk_recent_chooser_set_local_only(this1, local_only1)
}
func (this0 *RecentChooserImpl) SetSelectMultiple(select_multiple0 bool) {
	var this1 *C.GtkRecentChooser
	var select_multiple1 C.int
	if this0 != nil {
		this1 = this0.ImplementsGtkRecentChooser()}
	select_multiple1 = _GoBoolToCBool(select_multiple0)
	C.gtk_recent_chooser_set_select_multiple(this1, select_multiple1)
}
func (this0 *RecentChooserImpl) SetShowIcons(show_icons0 bool) {
	var this1 *C.GtkRecentChooser
	var show_icons1 C.int
	if this0 != nil {
		this1 = this0.ImplementsGtkRecentChooser()}
	show_icons1 = _GoBoolToCBool(show_icons0)
	C.gtk_recent_chooser_set_show_icons(this1, show_icons1)
}
func (this0 *RecentChooserImpl) SetShowNotFound(show_not_found0 bool) {
	var this1 *C.GtkRecentChooser
	var show_not_found1 C.int
	if this0 != nil {
		this1 = this0.ImplementsGtkRecentChooser()}
	show_not_found1 = _GoBoolToCBool(show_not_found0)
	C.gtk_recent_chooser_set_show_not_found(this1, show_not_found1)
}
func (this0 *RecentChooserImpl) SetShowPrivate(show_private0 bool) {
	var this1 *C.GtkRecentChooser
	var show_private1 C.int
	if this0 != nil {
		this1 = this0.ImplementsGtkRecentChooser()}
	show_private1 = _GoBoolToCBool(show_private0)
	C.gtk_recent_chooser_set_show_private(this1, show_private1)
}
func (this0 *RecentChooserImpl) SetShowTips(show_tips0 bool) {
	var this1 *C.GtkRecentChooser
	var show_tips1 C.int
	if this0 != nil {
		this1 = this0.ImplementsGtkRecentChooser()}
	show_tips1 = _GoBoolToCBool(show_tips0)
	C.gtk_recent_chooser_set_show_tips(this1, show_tips1)
}
func (this0 *RecentChooserImpl) SetSortFunc(sort_func0 RecentSortFunc) {
	var this1 *C.GtkRecentChooser
	var sort_func1 unsafe.Pointer
	if this0 != nil {
		this1 = this0.ImplementsGtkRecentChooser()}
	if sort_func0 != nil {
		sort_func1 = unsafe.Pointer(&sort_func0)}
	gobject.Holder.Grab(sort_func1)
	C._gtk_recent_chooser_set_sort_func(this1, sort_func1)
}
func (this0 *RecentChooserImpl) SetSortType(sort_type0 RecentSortType) {
	var this1 *C.GtkRecentChooser
	var sort_type1 C.GtkRecentSortType
	if this0 != nil {
		this1 = this0.ImplementsGtkRecentChooser()}
	sort_type1 = C.GtkRecentSortType(sort_type0)
	C.gtk_recent_chooser_set_sort_type(this1, sort_type1)
}
func (this0 *RecentChooserImpl) UnselectAll() {
	var this1 *C.GtkRecentChooser
	if this0 != nil {
		this1 = this0.ImplementsGtkRecentChooser()}
	C.gtk_recent_chooser_unselect_all(this1)
}
func (this0 *RecentChooserImpl) UnselectURI(uri0 string) {
	var this1 *C.GtkRecentChooser
	var uri1 *C.char
	if this0 != nil {
		this1 = this0.ImplementsGtkRecentChooser()}
	uri1 = _GoStringToGString(uri0)
	defer C.free(unsafe.Pointer(uri1))
	C.gtk_recent_chooser_unselect_uri(this1, uri1)
}
type RecentChooserDialogLike interface {
	DialogLike
	InheritedFromGtkRecentChooserDialog() *C.GtkRecentChooserDialog
}

type RecentChooserDialog struct {
	Dialog
	atk.ImplementorIfaceImpl
	BuildableImpl
	RecentChooserImpl
}

func ToRecentChooserDialog(objlike gobject.ObjectLike) *RecentChooserDialog {
	c := objlike.InheritedFromGObject()
	if c == nil {
		return nil
	}
	t := (*RecentChooserDialog)(nil).GetStaticType()
	obj := gobject.ObjectGrabIfType(unsafe.Pointer(c), t)
	if obj != nil {
		return (*RecentChooserDialog)(obj)
	}
	panic("cannot cast to RecentChooserDialog")
}

func (this0 *RecentChooserDialog) InheritedFromGtkRecentChooserDialog() *C.GtkRecentChooserDialog {
	if this0 == nil {
		return nil
	}
	return (*C.GtkRecentChooserDialog)(this0.C)
}

func (this0 *RecentChooserDialog) GetStaticType() gobject.Type {
	return gobject.Type(C.gtk_recent_chooser_dialog_get_type())
}

func RecentChooserDialogGetType() gobject.Type {
	return (*RecentChooserDialog)(nil).GetStaticType()
}
type RecentChooserError C.uint32_t
const (
	RecentChooserErrorNotFound RecentChooserError = 0
	RecentChooserErrorInvalidURI RecentChooserError = 1
)
type RecentChooserMenuLike interface {
	MenuLike
	InheritedFromGtkRecentChooserMenu() *C.GtkRecentChooserMenu
}

type RecentChooserMenu struct {
	Menu
	atk.ImplementorIfaceImpl
	ActivatableImpl
	BuildableImpl
	RecentChooserImpl
}

func ToRecentChooserMenu(objlike gobject.ObjectLike) *RecentChooserMenu {
	c := objlike.InheritedFromGObject()
	if c == nil {
		return nil
	}
	t := (*RecentChooserMenu)(nil).GetStaticType()
	obj := gobject.ObjectGrabIfType(unsafe.Pointer(c), t)
	if obj != nil {
		return (*RecentChooserMenu)(obj)
	}
	panic("cannot cast to RecentChooserMenu")
}

func (this0 *RecentChooserMenu) InheritedFromGtkRecentChooserMenu() *C.GtkRecentChooserMenu {
	if this0 == nil {
		return nil
	}
	return (*C.GtkRecentChooserMenu)(this0.C)
}

func (this0 *RecentChooserMenu) GetStaticType() gobject.Type {
	return gobject.Type(C.gtk_recent_chooser_menu_get_type())
}

func RecentChooserMenuGetType() gobject.Type {
	return (*RecentChooserMenu)(nil).GetStaticType()
}
func NewRecentChooserMenu() *RecentChooserMenu {
	ret1 := C.gtk_recent_chooser_menu_new()
	var ret2 *RecentChooserMenu
	ret2 = (*RecentChooserMenu)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
func NewRecentChooserMenuForManager(manager0 RecentManagerLike) *RecentChooserMenu {
	var manager1 *C.GtkRecentManager
	if manager0 != nil {
		manager1 = manager0.InheritedFromGtkRecentManager()
	}
	ret1 := C.gtk_recent_chooser_menu_new_for_manager(manager1)
	var ret2 *RecentChooserMenu
	ret2 = (*RecentChooserMenu)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
func (this0 *RecentChooserMenu) GetShowNumbers() bool {
	var this1 *C.GtkRecentChooserMenu
	if this0 != nil {
		this1 = this0.InheritedFromGtkRecentChooserMenu()
	}
	ret1 := C.gtk_recent_chooser_menu_get_show_numbers(this1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *RecentChooserMenu) SetShowNumbers(show_numbers0 bool) {
	var this1 *C.GtkRecentChooserMenu
	var show_numbers1 C.int
	if this0 != nil {
		this1 = this0.InheritedFromGtkRecentChooserMenu()
	}
	show_numbers1 = _GoBoolToCBool(show_numbers0)
	C.gtk_recent_chooser_menu_set_show_numbers(this1, show_numbers1)
}
type RecentChooserWidgetLike interface {
	BoxLike
	InheritedFromGtkRecentChooserWidget() *C.GtkRecentChooserWidget
}

type RecentChooserWidget struct {
	Box
	atk.ImplementorIfaceImpl
	BuildableImpl
	OrientableImpl
	RecentChooserImpl
}

func ToRecentChooserWidget(objlike gobject.ObjectLike) *RecentChooserWidget {
	c := objlike.InheritedFromGObject()
	if c == nil {
		return nil
	}
	t := (*RecentChooserWidget)(nil).GetStaticType()
	obj := gobject.ObjectGrabIfType(unsafe.Pointer(c), t)
	if obj != nil {
		return (*RecentChooserWidget)(obj)
	}
	panic("cannot cast to RecentChooserWidget")
}

func (this0 *RecentChooserWidget) InheritedFromGtkRecentChooserWidget() *C.GtkRecentChooserWidget {
	if this0 == nil {
		return nil
	}
	return (*C.GtkRecentChooserWidget)(this0.C)
}

func (this0 *RecentChooserWidget) GetStaticType() gobject.Type {
	return gobject.Type(C.gtk_recent_chooser_widget_get_type())
}

func RecentChooserWidgetGetType() gobject.Type {
	return (*RecentChooserWidget)(nil).GetStaticType()
}
func NewRecentChooserWidget() *RecentChooserWidget {
	ret1 := C.gtk_recent_chooser_widget_new()
	var ret2 *RecentChooserWidget
	ret2 = (*RecentChooserWidget)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
func NewRecentChooserWidgetForManager(manager0 RecentManagerLike) *RecentChooserWidget {
	var manager1 *C.GtkRecentManager
	if manager0 != nil {
		manager1 = manager0.InheritedFromGtkRecentManager()
	}
	ret1 := C.gtk_recent_chooser_widget_new_for_manager(manager1)
	var ret2 *RecentChooserWidget
	ret2 = (*RecentChooserWidget)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
type RecentData struct {
	display_name0 *C.char
	description0 *C.char
	mime_type0 *C.char
	app_name0 *C.char
	app_exec0 *C.char
	groups0 *C.char
	IsPrivate int32
	_ [4]byte
}
func (this0 *RecentData) DisplayName() string {
	var display_name1 string
	display_name1 = C.GoString(this0.display_name0)
	return display_name1
}
func (this0 *RecentData) Description() string {
	var description1 string
	description1 = C.GoString(this0.description0)
	return description1
}
func (this0 *RecentData) MIMEType() string {
	var mime_type1 string
	mime_type1 = C.GoString(this0.mime_type0)
	return mime_type1
}
func (this0 *RecentData) AppName() string {
	var app_name1 string
	app_name1 = C.GoString(this0.app_name0)
	return app_name1
}
func (this0 *RecentData) AppExec() string {
	var app_exec1 string
	app_exec1 = C.GoString(this0.app_exec0)
	return app_exec1
}
func (this0 *RecentData) Groups() string {
	var groups1 string
	groups1 = C.GoString(this0.groups0)
	return groups1
}
type RecentFilterLike interface {
	gobject.InitiallyUnownedLike
	InheritedFromGtkRecentFilter() *C.GtkRecentFilter
}

type RecentFilter struct {
	gobject.InitiallyUnowned
	BuildableImpl
}

func ToRecentFilter(objlike gobject.ObjectLike) *RecentFilter {
	c := objlike.InheritedFromGObject()
	if c == nil {
		return nil
	}
	t := (*RecentFilter)(nil).GetStaticType()
	obj := gobject.ObjectGrabIfType(unsafe.Pointer(c), t)
	if obj != nil {
		return (*RecentFilter)(obj)
	}
	panic("cannot cast to RecentFilter")
}

func (this0 *RecentFilter) InheritedFromGtkRecentFilter() *C.GtkRecentFilter {
	if this0 == nil {
		return nil
	}
	return (*C.GtkRecentFilter)(this0.C)
}

func (this0 *RecentFilter) GetStaticType() gobject.Type {
	return gobject.Type(C.gtk_recent_filter_get_type())
}

func RecentFilterGetType() gobject.Type {
	return (*RecentFilter)(nil).GetStaticType()
}
func NewRecentFilter() *RecentFilter {
	ret1 := C.gtk_recent_filter_new()
	var ret2 *RecentFilter
	ret2 = (*RecentFilter)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
func (this0 *RecentFilter) AddAge(days0 int) {
	var this1 *C.GtkRecentFilter
	var days1 C.int32_t
	if this0 != nil {
		this1 = this0.InheritedFromGtkRecentFilter()
	}
	days1 = C.int32_t(days0)
	C.gtk_recent_filter_add_age(this1, days1)
}
func (this0 *RecentFilter) AddApplication(application0 string) {
	var this1 *C.GtkRecentFilter
	var application1 *C.char
	if this0 != nil {
		this1 = this0.InheritedFromGtkRecentFilter()
	}
	application1 = _GoStringToGString(application0)
	defer C.free(unsafe.Pointer(application1))
	C.gtk_recent_filter_add_application(this1, application1)
}
func (this0 *RecentFilter) AddCustom(needed0 RecentFilterFlags, func0 RecentFilterFunc) {
	var this1 *C.GtkRecentFilter
	var needed1 C.GtkRecentFilterFlags
	var func1 unsafe.Pointer
	if this0 != nil {
		this1 = this0.InheritedFromGtkRecentFilter()
	}
	needed1 = C.GtkRecentFilterFlags(needed0)
	if func0 != nil {
		func1 = unsafe.Pointer(&func0)}
	gobject.Holder.Grab(func1)
	C._gtk_recent_filter_add_custom(this1, needed1, func1)
}
func (this0 *RecentFilter) AddGroup(group0 string) {
	var this1 *C.GtkRecentFilter
	var group1 *C.char
	if this0 != nil {
		this1 = this0.InheritedFromGtkRecentFilter()
	}
	group1 = _GoStringToGString(group0)
	defer C.free(unsafe.Pointer(group1))
	C.gtk_recent_filter_add_group(this1, group1)
}
func (this0 *RecentFilter) AddMIMEType(mime_type0 string) {
	var this1 *C.GtkRecentFilter
	var mime_type1 *C.char
	if this0 != nil {
		this1 = this0.InheritedFromGtkRecentFilter()
	}
	mime_type1 = _GoStringToGString(mime_type0)
	defer C.free(unsafe.Pointer(mime_type1))
	C.gtk_recent_filter_add_mime_type(this1, mime_type1)
}
func (this0 *RecentFilter) AddPattern(pattern0 string) {
	var this1 *C.GtkRecentFilter
	var pattern1 *C.char
	if this0 != nil {
		this1 = this0.InheritedFromGtkRecentFilter()
	}
	pattern1 = _GoStringToGString(pattern0)
	defer C.free(unsafe.Pointer(pattern1))
	C.gtk_recent_filter_add_pattern(this1, pattern1)
}
func (this0 *RecentFilter) AddPixbufFormats() {
	var this1 *C.GtkRecentFilter
	if this0 != nil {
		this1 = this0.InheritedFromGtkRecentFilter()
	}
	C.gtk_recent_filter_add_pixbuf_formats(this1)
}
func (this0 *RecentFilter) Filter(filter_info0 *RecentFilterInfo) bool {
	var this1 *C.GtkRecentFilter
	var filter_info1 *C.GtkRecentFilterInfo
	if this0 != nil {
		this1 = this0.InheritedFromGtkRecentFilter()
	}
	filter_info1 = (*C.GtkRecentFilterInfo)(unsafe.Pointer(filter_info0))
	ret1 := C.gtk_recent_filter_filter(this1, filter_info1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *RecentFilter) GetName() string {
	var this1 *C.GtkRecentFilter
	if this0 != nil {
		this1 = this0.InheritedFromGtkRecentFilter()
	}
	ret1 := C.gtk_recent_filter_get_name(this1)
	var ret2 string
	ret2 = C.GoString(ret1)
	return ret2
}
func (this0 *RecentFilter) GetNeeded() RecentFilterFlags {
	var this1 *C.GtkRecentFilter
	if this0 != nil {
		this1 = this0.InheritedFromGtkRecentFilter()
	}
	ret1 := C.gtk_recent_filter_get_needed(this1)
	var ret2 RecentFilterFlags
	ret2 = RecentFilterFlags(ret1)
	return ret2
}
func (this0 *RecentFilter) SetName(name0 string) {
	var this1 *C.GtkRecentFilter
	var name1 *C.char
	if this0 != nil {
		this1 = this0.InheritedFromGtkRecentFilter()
	}
	name1 = _GoStringToGString(name0)
	defer C.free(unsafe.Pointer(name1))
	C.gtk_recent_filter_set_name(this1, name1)
}
type RecentFilterFlags C.uint32_t
const (
	RecentFilterFlagsURI RecentFilterFlags = 1
	RecentFilterFlagsDisplayName RecentFilterFlags = 2
	RecentFilterFlagsMIMEType RecentFilterFlags = 4
	RecentFilterFlagsApplication RecentFilterFlags = 8
	RecentFilterFlagsGroup RecentFilterFlags = 16
	RecentFilterFlagsAge RecentFilterFlags = 32
)
type RecentFilterFunc func(filter_info *RecentFilterInfo) bool
//export _GtkRecentFilterFunc_c_wrapper
func _GtkRecentFilterFunc_c_wrapper(filter_info0 unsafe.Pointer, user_data0 unsafe.Pointer) int32 {
	var filter_info1 *RecentFilterInfo
	var user_data1 RecentFilterFunc
	filter_info1 = (*RecentFilterInfo)(unsafe.Pointer((*C.GtkRecentFilterInfo)(filter_info0)))
	user_data1 = *(*RecentFilterFunc)(user_data0)
	ret1 := user_data1(filter_info1)
	var ret2 C.int
	ret2 = _GoBoolToCBool(ret1)
	return (int32)(ret2)
}
//export _GtkRecentFilterFunc_c_wrapper_once
func _GtkRecentFilterFunc_c_wrapper_once(filter_info0 unsafe.Pointer, user_data0 unsafe.Pointer) int32 {
	ret := _GtkRecentFilterFunc_c_wrapper(filter_info0, user_data0)
	gobject.Holder.Release(user_data0)
	return ret
}
type RecentFilterInfo struct {
	Contains RecentFilterFlags
	_ [4]byte
	uri0 *C.char
	display_name0 *C.char
	mime_type0 *C.char
	applications0 *C.char
	groups0 *C.char
	Age int32
	_ [4]byte
}
func (this0 *RecentFilterInfo) URI() string {
	var uri1 string
	uri1 = C.GoString(this0.uri0)
	return uri1
}
func (this0 *RecentFilterInfo) DisplayName() string {
	var display_name1 string
	display_name1 = C.GoString(this0.display_name0)
	return display_name1
}
func (this0 *RecentFilterInfo) MIMEType() string {
	var mime_type1 string
	mime_type1 = C.GoString(this0.mime_type0)
	return mime_type1
}
func (this0 *RecentFilterInfo) Applications() string {
	var applications1 string
	applications1 = C.GoString(this0.applications0)
	return applications1
}
func (this0 *RecentFilterInfo) Groups() string {
	var groups1 string
	groups1 = C.GoString(this0.groups0)
	return groups1
}
type RecentInfo struct {}
func (this0 *RecentInfo) CreateAppInfo(app_name0 string) (*gio.AppInfo, error) {
	var this1 *C.GtkRecentInfo
	var app_name1 *C.char
	var err1 *C.GError
	this1 = (*C.GtkRecentInfo)(unsafe.Pointer(this0))
	app_name1 = _GoStringToGString(app_name0)
	defer C.free(unsafe.Pointer(app_name1))
	ret1 := C.gtk_recent_info_create_app_info(this1, app_name1, &err1)
	var ret2 *gio.AppInfo
	var err2 error
	ret2 = (*gio.AppInfo)(gobject.ObjectWrap(unsafe.Pointer(ret1), false))
	if err1 != nil {
		err2 = errors.New(C.GoString(((*_GError)(unsafe.Pointer(err1))).message))
		C.g_error_free(err1)
	}
	return ret2, err2
}
func (this0 *RecentInfo) Exists() bool {
	var this1 *C.GtkRecentInfo
	this1 = (*C.GtkRecentInfo)(unsafe.Pointer(this0))
	ret1 := C.gtk_recent_info_exists(this1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *RecentInfo) GetAdded() int64 {
	var this1 *C.GtkRecentInfo
	this1 = (*C.GtkRecentInfo)(unsafe.Pointer(this0))
	ret1 := C.gtk_recent_info_get_added(this1)
	var ret2 int64
	ret2 = int64(ret1)
	return ret2
}
func (this0 *RecentInfo) GetAge() int {
	var this1 *C.GtkRecentInfo
	this1 = (*C.GtkRecentInfo)(unsafe.Pointer(this0))
	ret1 := C.gtk_recent_info_get_age(this1)
	var ret2 int
	ret2 = int(ret1)
	return ret2
}
func (this0 *RecentInfo) GetApplicationInfo(app_name0 string) (string, int, int64, bool) {
	var this1 *C.GtkRecentInfo
	var app_name1 *C.char
	var app_exec1 *C.char
	var count1 C.uint32_t
	var time_1 C.int64_t
	this1 = (*C.GtkRecentInfo)(unsafe.Pointer(this0))
	app_name1 = _GoStringToGString(app_name0)
	defer C.free(unsafe.Pointer(app_name1))
	ret1 := C.gtk_recent_info_get_application_info(this1, app_name1, &app_exec1, &count1, &time_1)
	var app_exec2 string
	var count2 int
	var time_2 int64
	var ret2 bool
	app_exec2 = C.GoString(app_exec1)
	count2 = int(count1)
	time_2 = int64(time_1)
	ret2 = ret1 != 0
	return app_exec2, count2, time_2, ret2
}
func (this0 *RecentInfo) GetApplications() (uint64, []string) {
	var this1 *C.GtkRecentInfo
	var length1 C.uint64_t
	this1 = (*C.GtkRecentInfo)(unsafe.Pointer(this0))
	ret1 := C.gtk_recent_info_get_applications(this1, &length1)
	var length2 uint64
	var ret2 []string
	length2 = uint64(length1)
	ret2 = make([]string, length1)
	for i := range ret2 {
		ret2[i] = C.GoString((*(*[999999]*C.char)(unsafe.Pointer(ret1)))[i])
		C.g_free(unsafe.Pointer((*(*[999999]*C.char)(unsafe.Pointer(ret1)))[i]))
	}
	return length2, ret2
}
func (this0 *RecentInfo) GetDescription() string {
	var this1 *C.GtkRecentInfo
	this1 = (*C.GtkRecentInfo)(unsafe.Pointer(this0))
	ret1 := C.gtk_recent_info_get_description(this1)
	var ret2 string
	ret2 = C.GoString(ret1)
	return ret2
}
func (this0 *RecentInfo) GetDisplayName() string {
	var this1 *C.GtkRecentInfo
	this1 = (*C.GtkRecentInfo)(unsafe.Pointer(this0))
	ret1 := C.gtk_recent_info_get_display_name(this1)
	var ret2 string
	ret2 = C.GoString(ret1)
	return ret2
}
func (this0 *RecentInfo) GetGIcon() *gio.Icon {
	var this1 *C.GtkRecentInfo
	this1 = (*C.GtkRecentInfo)(unsafe.Pointer(this0))
	ret1 := C.gtk_recent_info_get_gicon(this1)
	var ret2 *gio.Icon
	ret2 = (*gio.Icon)(gobject.ObjectWrap(unsafe.Pointer(ret1), false))
	return ret2
}
func (this0 *RecentInfo) GetGroups() (uint64, []string) {
	var this1 *C.GtkRecentInfo
	var length1 C.uint64_t
	this1 = (*C.GtkRecentInfo)(unsafe.Pointer(this0))
	ret1 := C.gtk_recent_info_get_groups(this1, &length1)
	var length2 uint64
	var ret2 []string
	length2 = uint64(length1)
	ret2 = make([]string, length1)
	for i := range ret2 {
		ret2[i] = C.GoString((*(*[999999]*C.char)(unsafe.Pointer(ret1)))[i])
		C.g_free(unsafe.Pointer((*(*[999999]*C.char)(unsafe.Pointer(ret1)))[i]))
	}
	return length2, ret2
}
func (this0 *RecentInfo) GetIcon(size0 int) *gdkpixbuf.Pixbuf {
	var this1 *C.GtkRecentInfo
	var size1 C.int32_t
	this1 = (*C.GtkRecentInfo)(unsafe.Pointer(this0))
	size1 = C.int32_t(size0)
	ret1 := C.gtk_recent_info_get_icon(this1, size1)
	var ret2 *gdkpixbuf.Pixbuf
	ret2 = (*gdkpixbuf.Pixbuf)(gobject.ObjectWrap(unsafe.Pointer(ret1), false))
	return ret2
}
func (this0 *RecentInfo) GetMIMEType() string {
	var this1 *C.GtkRecentInfo
	this1 = (*C.GtkRecentInfo)(unsafe.Pointer(this0))
	ret1 := C.gtk_recent_info_get_mime_type(this1)
	var ret2 string
	ret2 = C.GoString(ret1)
	return ret2
}
func (this0 *RecentInfo) GetModified() int64 {
	var this1 *C.GtkRecentInfo
	this1 = (*C.GtkRecentInfo)(unsafe.Pointer(this0))
	ret1 := C.gtk_recent_info_get_modified(this1)
	var ret2 int64
	ret2 = int64(ret1)
	return ret2
}
func (this0 *RecentInfo) GetPrivateHint() bool {
	var this1 *C.GtkRecentInfo
	this1 = (*C.GtkRecentInfo)(unsafe.Pointer(this0))
	ret1 := C.gtk_recent_info_get_private_hint(this1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *RecentInfo) GetShortName() string {
	var this1 *C.GtkRecentInfo
	this1 = (*C.GtkRecentInfo)(unsafe.Pointer(this0))
	ret1 := C.gtk_recent_info_get_short_name(this1)
	var ret2 string
	ret2 = C.GoString(ret1)
	C.g_free(unsafe.Pointer(ret1))
	return ret2
}
func (this0 *RecentInfo) GetURI() string {
	var this1 *C.GtkRecentInfo
	this1 = (*C.GtkRecentInfo)(unsafe.Pointer(this0))
	ret1 := C.gtk_recent_info_get_uri(this1)
	var ret2 string
	ret2 = C.GoString(ret1)
	return ret2
}
func (this0 *RecentInfo) GetURIDisplay() string {
	var this1 *C.GtkRecentInfo
	this1 = (*C.GtkRecentInfo)(unsafe.Pointer(this0))
	ret1 := C.gtk_recent_info_get_uri_display(this1)
	var ret2 string
	ret2 = C.GoString(ret1)
	C.g_free(unsafe.Pointer(ret1))
	return ret2
}
func (this0 *RecentInfo) GetVisited() int64 {
	var this1 *C.GtkRecentInfo
	this1 = (*C.GtkRecentInfo)(unsafe.Pointer(this0))
	ret1 := C.gtk_recent_info_get_visited(this1)
	var ret2 int64
	ret2 = int64(ret1)
	return ret2
}
func (this0 *RecentInfo) HasApplication(app_name0 string) bool {
	var this1 *C.GtkRecentInfo
	var app_name1 *C.char
	this1 = (*C.GtkRecentInfo)(unsafe.Pointer(this0))
	app_name1 = _GoStringToGString(app_name0)
	defer C.free(unsafe.Pointer(app_name1))
	ret1 := C.gtk_recent_info_has_application(this1, app_name1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *RecentInfo) HasGroup(group_name0 string) bool {
	var this1 *C.GtkRecentInfo
	var group_name1 *C.char
	this1 = (*C.GtkRecentInfo)(unsafe.Pointer(this0))
	group_name1 = _GoStringToGString(group_name0)
	defer C.free(unsafe.Pointer(group_name1))
	ret1 := C.gtk_recent_info_has_group(this1, group_name1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *RecentInfo) IsLocal() bool {
	var this1 *C.GtkRecentInfo
	this1 = (*C.GtkRecentInfo)(unsafe.Pointer(this0))
	ret1 := C.gtk_recent_info_is_local(this1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *RecentInfo) LastApplication() string {
	var this1 *C.GtkRecentInfo
	this1 = (*C.GtkRecentInfo)(unsafe.Pointer(this0))
	ret1 := C.gtk_recent_info_last_application(this1)
	var ret2 string
	ret2 = C.GoString(ret1)
	C.g_free(unsafe.Pointer(ret1))
	return ret2
}
func (this0 *RecentInfo) Match(info_b0 *RecentInfo) bool {
	var this1 *C.GtkRecentInfo
	var info_b1 *C.GtkRecentInfo
	this1 = (*C.GtkRecentInfo)(unsafe.Pointer(this0))
	info_b1 = (*C.GtkRecentInfo)(unsafe.Pointer(info_b0))
	ret1 := C.gtk_recent_info_match(this1, info_b1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
type RecentManagerLike interface {
	gobject.ObjectLike
	InheritedFromGtkRecentManager() *C.GtkRecentManager
}

type RecentManager struct {
	gobject.Object
	
}

func ToRecentManager(objlike gobject.ObjectLike) *RecentManager {
	c := objlike.InheritedFromGObject()
	if c == nil {
		return nil
	}
	t := (*RecentManager)(nil).GetStaticType()
	obj := gobject.ObjectGrabIfType(unsafe.Pointer(c), t)
	if obj != nil {
		return (*RecentManager)(obj)
	}
	panic("cannot cast to RecentManager")
}

func (this0 *RecentManager) InheritedFromGtkRecentManager() *C.GtkRecentManager {
	if this0 == nil {
		return nil
	}
	return (*C.GtkRecentManager)(this0.C)
}

func (this0 *RecentManager) GetStaticType() gobject.Type {
	return gobject.Type(C.gtk_recent_manager_get_type())
}

func RecentManagerGetType() gobject.Type {
	return (*RecentManager)(nil).GetStaticType()
}
func NewRecentManager() *RecentManager {
	ret1 := C.gtk_recent_manager_new()
	var ret2 *RecentManager
	ret2 = (*RecentManager)(gobject.ObjectWrap(unsafe.Pointer(ret1), false))
	return ret2
}
func RecentManagerGetDefault() *RecentManager {
	ret1 := C.gtk_recent_manager_get_default()
	var ret2 *RecentManager
	ret2 = (*RecentManager)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
func (this0 *RecentManager) AddFull(uri0 string, recent_data0 *RecentData) bool {
	var this1 *C.GtkRecentManager
	var uri1 *C.char
	var recent_data1 *C.GtkRecentData
	if this0 != nil {
		this1 = this0.InheritedFromGtkRecentManager()
	}
	uri1 = _GoStringToGString(uri0)
	defer C.free(unsafe.Pointer(uri1))
	recent_data1 = (*C.GtkRecentData)(unsafe.Pointer(recent_data0))
	ret1 := C.gtk_recent_manager_add_full(this1, uri1, recent_data1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *RecentManager) AddItem(uri0 string) bool {
	var this1 *C.GtkRecentManager
	var uri1 *C.char
	if this0 != nil {
		this1 = this0.InheritedFromGtkRecentManager()
	}
	uri1 = _GoStringToGString(uri0)
	defer C.free(unsafe.Pointer(uri1))
	ret1 := C.gtk_recent_manager_add_item(this1, uri1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *RecentManager) GetItems() []RecentInfo {
	var this1 *C.GtkRecentManager
	if this0 != nil {
		this1 = this0.InheritedFromGtkRecentManager()
	}
	ret1 := C.gtk_recent_manager_get_items(this1)
	var ret2 []RecentInfo
	for iter := (*_GList)(unsafe.Pointer(ret1)); iter != nil; iter = iter.next {
		var elt RecentInfo
		elt = *(*RecentInfo)(unsafe.Pointer((*C.GtkRecentInfo)(iter.data)))
		ret2 = append(ret2, elt)
	}
	return ret2
}
func (this0 *RecentManager) HasItem(uri0 string) bool {
	var this1 *C.GtkRecentManager
	var uri1 *C.char
	if this0 != nil {
		this1 = this0.InheritedFromGtkRecentManager()
	}
	uri1 = _GoStringToGString(uri0)
	defer C.free(unsafe.Pointer(uri1))
	ret1 := C.gtk_recent_manager_has_item(this1, uri1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *RecentManager) LookupItem(uri0 string) (*RecentInfo, error) {
	var this1 *C.GtkRecentManager
	var uri1 *C.char
	var err1 *C.GError
	if this0 != nil {
		this1 = this0.InheritedFromGtkRecentManager()
	}
	uri1 = _GoStringToGString(uri0)
	defer C.free(unsafe.Pointer(uri1))
	ret1 := C.gtk_recent_manager_lookup_item(this1, uri1, &err1)
	var ret2 *RecentInfo
	var err2 error
	ret2 = (*RecentInfo)(unsafe.Pointer(ret1))
	if err1 != nil {
		err2 = errors.New(C.GoString(((*_GError)(unsafe.Pointer(err1))).message))
		C.g_error_free(err1)
	}
	return ret2, err2
}
func (this0 *RecentManager) MoveItem(uri0 string, new_uri0 string) (bool, error) {
	var this1 *C.GtkRecentManager
	var uri1 *C.char
	var new_uri1 *C.char
	var err1 *C.GError
	if this0 != nil {
		this1 = this0.InheritedFromGtkRecentManager()
	}
	uri1 = _GoStringToGString(uri0)
	defer C.free(unsafe.Pointer(uri1))
	new_uri1 = _GoStringToGString(new_uri0)
	defer C.free(unsafe.Pointer(new_uri1))
	ret1 := C.gtk_recent_manager_move_item(this1, uri1, new_uri1, &err1)
	var ret2 bool
	var err2 error
	ret2 = ret1 != 0
	if err1 != nil {
		err2 = errors.New(C.GoString(((*_GError)(unsafe.Pointer(err1))).message))
		C.g_error_free(err1)
	}
	return ret2, err2
}
func (this0 *RecentManager) PurgeItems() (int, error) {
	var this1 *C.GtkRecentManager
	var err1 *C.GError
	if this0 != nil {
		this1 = this0.InheritedFromGtkRecentManager()
	}
	ret1 := C.gtk_recent_manager_purge_items(this1, &err1)
	var ret2 int
	var err2 error
	ret2 = int(ret1)
	if err1 != nil {
		err2 = errors.New(C.GoString(((*_GError)(unsafe.Pointer(err1))).message))
		C.g_error_free(err1)
	}
	return ret2, err2
}
func (this0 *RecentManager) RemoveItem(uri0 string) (bool, error) {
	var this1 *C.GtkRecentManager
	var uri1 *C.char
	var err1 *C.GError
	if this0 != nil {
		this1 = this0.InheritedFromGtkRecentManager()
	}
	uri1 = _GoStringToGString(uri0)
	defer C.free(unsafe.Pointer(uri1))
	ret1 := C.gtk_recent_manager_remove_item(this1, uri1, &err1)
	var ret2 bool
	var err2 error
	ret2 = ret1 != 0
	if err1 != nil {
		err2 = errors.New(C.GoString(((*_GError)(unsafe.Pointer(err1))).message))
		C.g_error_free(err1)
	}
	return ret2, err2
}
type RecentManagerError C.uint32_t
const (
	RecentManagerErrorNotFound RecentManagerError = 0
	RecentManagerErrorInvalidURI RecentManagerError = 1
	RecentManagerErrorInvalidEncoding RecentManagerError = 2
	RecentManagerErrorNotRegistered RecentManagerError = 3
	RecentManagerErrorRead RecentManagerError = 4
	RecentManagerErrorWrite RecentManagerError = 5
	RecentManagerErrorUnknown RecentManagerError = 6
)
type RecentSortFunc func(a *RecentInfo, b *RecentInfo) int
//export _GtkRecentSortFunc_c_wrapper
func _GtkRecentSortFunc_c_wrapper(a0 unsafe.Pointer, b0 unsafe.Pointer, user_data0 unsafe.Pointer) int32 {
	var a1 *RecentInfo
	var b1 *RecentInfo
	var user_data1 RecentSortFunc
	a1 = (*RecentInfo)(unsafe.Pointer((*C.GtkRecentInfo)(a0)))
	b1 = (*RecentInfo)(unsafe.Pointer((*C.GtkRecentInfo)(b0)))
	user_data1 = *(*RecentSortFunc)(user_data0)
	ret1 := user_data1(a1, b1)
	var ret2 C.int32_t
	ret2 = C.int32_t(ret1)
	return (int32)(ret2)
}
//export _GtkRecentSortFunc_c_wrapper_once
func _GtkRecentSortFunc_c_wrapper_once(a0 unsafe.Pointer, b0 unsafe.Pointer, user_data0 unsafe.Pointer) int32 {
	ret := _GtkRecentSortFunc_c_wrapper(a0, b0, user_data0)
	gobject.Holder.Release(user_data0)
	return ret
}
type RecentSortType C.uint32_t
const (
	RecentSortTypeNone RecentSortType = 0
	RecentSortTypeMru RecentSortType = 1
	RecentSortTypeLru RecentSortType = 2
	RecentSortTypeCustom RecentSortType = 3
)
type RegionFlags C.uint32_t
const (
	RegionFlagsEven RegionFlags = 1
	RegionFlagsOdd RegionFlags = 2
	RegionFlagsFirst RegionFlags = 4
	RegionFlagsLast RegionFlags = 8
	RegionFlagsSorted RegionFlags = 32
)
type ReliefStyle C.uint32_t
const (
	ReliefStyleNormal ReliefStyle = 0
	ReliefStyleHalf ReliefStyle = 1
	ReliefStyleNone ReliefStyle = 2
)
type RequestedSize struct {
	Data unsafe.Pointer
	MinimumSize int32
	NaturalSize int32
}
type Requisition struct {
	Width int32
	Height int32
}
func NewRequisition() *Requisition {
	ret1 := C.gtk_requisition_new()
	var ret2 *Requisition
	ret2 = (*Requisition)(unsafe.Pointer(ret1))
	return ret2
}
func (this0 *Requisition) Copy() *Requisition {
	var this1 *C.GtkRequisition
	this1 = (*C.GtkRequisition)(unsafe.Pointer(this0))
	ret1 := C.gtk_requisition_copy(this1)
	var ret2 *Requisition
	ret2 = (*Requisition)(unsafe.Pointer(ret1))
	return ret2
}
func (this0 *Requisition) Free() {
	var this1 *C.GtkRequisition
	this1 = (*C.GtkRequisition)(unsafe.Pointer(this0))
	C.gtk_requisition_free(this1)
}
type ResizeMode C.uint32_t
const (
	ResizeModeParent ResizeMode = 0
	ResizeModeQueue ResizeMode = 1
	ResizeModeImmediate ResizeMode = 2
)
type ResponseType C.int32_t
const (
	ResponseTypeNone ResponseType = -1
	ResponseTypeReject ResponseType = -2
	ResponseTypeAccept ResponseType = -3
	ResponseTypeDeleteEvent ResponseType = -4
	ResponseTypeOk ResponseType = -5
	ResponseTypeCancel ResponseType = -6
	ResponseTypeClose ResponseType = -7
	ResponseTypeYes ResponseType = -8
	ResponseTypeNo ResponseType = -9
	ResponseTypeApply ResponseType = -10
	ResponseTypeHelp ResponseType = -11
)
const StockAbout = "gtk-about"
const StockAdd = "gtk-add"
const StockApply = "gtk-apply"
const StockBold = "gtk-bold"
const StockCancel = "gtk-cancel"
const StockCapsLockWarning = "gtk-caps-lock-warning"
const StockCdrom = "gtk-cdrom"
const StockClear = "gtk-clear"
const StockClose = "gtk-close"
const StockColorPicker = "gtk-color-picker"
const StockConnect = "gtk-connect"
const StockConvert = "gtk-convert"
const StockCopy = "gtk-copy"
const StockCut = "gtk-cut"
const StockDelete = "gtk-delete"
const StockDialogAuthentication = "gtk-dialog-authentication"
const StockDialogError = "gtk-dialog-error"
const StockDialogInfo = "gtk-dialog-info"
const StockDialogQuestion = "gtk-dialog-question"
const StockDialogWarning = "gtk-dialog-warning"
const StockDirectory = "gtk-directory"
const StockDiscard = "gtk-discard"
const StockDisconnect = "gtk-disconnect"
const StockDnd = "gtk-dnd"
const StockDndMultiple = "gtk-dnd-multiple"
const StockEdit = "gtk-edit"
const StockExecute = "gtk-execute"
const StockFile = "gtk-file"
const StockFind = "gtk-find"
const StockFindAndReplace = "gtk-find-and-replace"
const StockFloppy = "gtk-floppy"
const StockFullscreen = "gtk-fullscreen"
const StockGotoBottom = "gtk-goto-bottom"
const StockGotoFirst = "gtk-goto-first"
const StockGotoLast = "gtk-goto-last"
const StockGotoTop = "gtk-goto-top"
const StockGoBack = "gtk-go-back"
const StockGoDown = "gtk-go-down"
const StockGoForward = "gtk-go-forward"
const StockGoUp = "gtk-go-up"
const StockHarddisk = "gtk-harddisk"
const StockHelp = "gtk-help"
const StockHome = "gtk-home"
const StockIndent = "gtk-indent"
const StockIndex = "gtk-index"
const StockInfo = "gtk-info"
const StockItalic = "gtk-italic"
const StockJumpTo = "gtk-jump-to"
const StockJustifyCenter = "gtk-justify-center"
const StockJustifyFill = "gtk-justify-fill"
const StockJustifyLeft = "gtk-justify-left"
const StockJustifyRight = "gtk-justify-right"
const StockLeaveFullscreen = "gtk-leave-fullscreen"
const StockMediaForward = "gtk-media-forward"
const StockMediaNext = "gtk-media-next"
const StockMediaPause = "gtk-media-pause"
const StockMediaPlay = "gtk-media-play"
const StockMediaPrevious = "gtk-media-previous"
const StockMediaRecord = "gtk-media-record"
const StockMediaRewind = "gtk-media-rewind"
const StockMediaStop = "gtk-media-stop"
const StockMissingImage = "gtk-missing-image"
const StockNetwork = "gtk-network"
const StockNew = "gtk-new"
const StockNo = "gtk-no"
const StockOk = "gtk-ok"
const StockOpen = "gtk-open"
const StockOrientationLandscape = "gtk-orientation-landscape"
const StockOrientationPortrait = "gtk-orientation-portrait"
const StockOrientationReverseLandscape = "gtk-orientation-reverse-landscape"
const StockOrientationReversePortrait = "gtk-orientation-reverse-portrait"
const StockPageSetup = "gtk-page-setup"
const StockPaste = "gtk-paste"
const StockPreferences = "gtk-preferences"
const StockPrint = "gtk-print"
const StockPrintError = "gtk-print-error"
const StockPrintPaused = "gtk-print-paused"
const StockPrintPreview = "gtk-print-preview"
const StockPrintReport = "gtk-print-report"
const StockPrintWarning = "gtk-print-warning"
const StockProperties = "gtk-properties"
const StockQuit = "gtk-quit"
const StockRedo = "gtk-redo"
const StockRefresh = "gtk-refresh"
const StockRemove = "gtk-remove"
const StockRevertToSaved = "gtk-revert-to-saved"
const StockSave = "gtk-save"
const StockSaveAs = "gtk-save-as"
const StockSelectAll = "gtk-select-all"
const StockSelectColor = "gtk-select-color"
const StockSelectFont = "gtk-select-font"
const StockSortAscending = "gtk-sort-ascending"
const StockSortDescending = "gtk-sort-descending"
const StockSpellCheck = "gtk-spell-check"
const StockStop = "gtk-stop"
const StockStrikethrough = "gtk-strikethrough"
const StockUndelete = "gtk-undelete"
const StockUnderline = "gtk-underline"
const StockUndo = "gtk-undo"
const StockUnindent = "gtk-unindent"
const StockYes = "gtk-yes"
const StockZoom100 = "gtk-zoom-100"
const StockZoomFit = "gtk-zoom-fit"
const StockZoomIn = "gtk-zoom-in"
const StockZoomOut = "gtk-zoom-out"
const StyleClassAccelerator = "accelerator"
const StyleClassBackground = "background"
const StyleClassButton = "button"
const StyleClassCalendar = "calendar"
const StyleClassCell = "cell"
const StyleClassCheck = "check"
const StyleClassComboboxEntry = "combobox-entry"
const StyleClassDefault = "default"
const StyleClassDnd = "dnd"
const StyleClassDock = "dock"
const StyleClassEntry = "entry"
const StyleClassError = "error"
const StyleClassExpander = "expander"
const StyleClassFrame = "frame"
const StyleClassGrip = "grip"
const StyleClassHeader = "header"
const StyleClassHighlight = "highlight"
const StyleClassHorizontal = "horizontal"
const StyleClassImage = "image"
const StyleClassInfo = "info"
const StyleClassInlineToolbar = "inline-toolbar"
const StyleClassMark = "mark"
const StyleClassMenu = "menu"
const StyleClassMenubar = "menubar"
const StyleClassMenuitem = "menuitem"
const StyleClassNotebook = "notebook"
const StyleClassPaneSeparator = "pane-separator"
const StyleClassPrimaryToolbar = "primary-toolbar"
const StyleClassProgressbar = "progressbar"
const StyleClassQuestion = "question"
const StyleClassRadio = "radio"
const StyleClassRaised = "raised"
const StyleClassRubberband = "rubberband"
const StyleClassScale = "scale"
const StyleClassScaleHasMarksAbove = "scale-has-marks-above"
const StyleClassScaleHasMarksBelow = "scale-has-marks-below"
const StyleClassScrollbar = "scrollbar"
const StyleClassSeparator = "separator"
const StyleClassSidebar = "sidebar"
const StyleClassSlider = "slider"
const StyleClassSpinbutton = "spinbutton"
const StyleClassSpinner = "spinner"
const StyleClassToolbar = "toolbar"
const StyleClassTooltip = "tooltip"
const StyleClassTrough = "trough"
const StyleClassVertical = "vertical"
const StyleClassView = "view"
const StyleClassWarning = "warning"
const StylePropertyBackgroundColor = "background-color"
const StylePropertyBackgroundImage = "background-image"
const StylePropertyBorderColor = "border-color"
const StylePropertyBorderRadius = "border-radius"
const StylePropertyBorderStyle = "border-style"
const StylePropertyBorderWidth = "border-width"
const StylePropertyColor = "color"
const StylePropertyFont = "font"
const StylePropertyMargin = "margin"
const StylePropertyPadding = "padding"
const StyleProviderPriorityApplication = 600
const StyleProviderPriorityFallback = 1
const StyleProviderPrioritySettings = 400
const StyleProviderPriorityTheme = 200
const StyleProviderPriorityUser = 800
const StyleRegionColumn = "column"
const StyleRegionColumnHeader = "column-header"
const StyleRegionRow = "row"
const StyleRegionTab = "tab"
type ScaleLike interface {
	RangeLike
	InheritedFromGtkScale() *C.GtkScale
}

type Scale struct {
	Range
	atk.ImplementorIfaceImpl
	BuildableImpl
	OrientableImpl
}

func ToScale(objlike gobject.ObjectLike) *Scale {
	c := objlike.InheritedFromGObject()
	if c == nil {
		return nil
	}
	t := (*Scale)(nil).GetStaticType()
	obj := gobject.ObjectGrabIfType(unsafe.Pointer(c), t)
	if obj != nil {
		return (*Scale)(obj)
	}
	panic("cannot cast to Scale")
}

func (this0 *Scale) InheritedFromGtkScale() *C.GtkScale {
	if this0 == nil {
		return nil
	}
	return (*C.GtkScale)(this0.C)
}

func (this0 *Scale) GetStaticType() gobject.Type {
	return gobject.Type(C.gtk_scale_get_type())
}

func ScaleGetType() gobject.Type {
	return (*Scale)(nil).GetStaticType()
}
func NewScale(orientation0 Orientation, adjustment0 AdjustmentLike) *Scale {
	var orientation1 C.GtkOrientation
	var adjustment1 *C.GtkAdjustment
	orientation1 = C.GtkOrientation(orientation0)
	if adjustment0 != nil {
		adjustment1 = adjustment0.InheritedFromGtkAdjustment()
	}
	ret1 := C.gtk_scale_new(orientation1, adjustment1)
	var ret2 *Scale
	ret2 = (*Scale)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
func NewScaleWithRange(orientation0 Orientation, min0 float64, max0 float64, step0 float64) *Scale {
	var orientation1 C.GtkOrientation
	var min1 C.double
	var max1 C.double
	var step1 C.double
	orientation1 = C.GtkOrientation(orientation0)
	min1 = C.double(min0)
	max1 = C.double(max0)
	step1 = C.double(step0)
	ret1 := C.gtk_scale_new_with_range(orientation1, min1, max1, step1)
	var ret2 *Scale
	ret2 = (*Scale)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
func (this0 *Scale) AddMark(value0 float64, position0 PositionType, markup0 string) {
	var this1 *C.GtkScale
	var value1 C.double
	var position1 C.GtkPositionType
	var markup1 *C.char
	if this0 != nil {
		this1 = this0.InheritedFromGtkScale()
	}
	value1 = C.double(value0)
	position1 = C.GtkPositionType(position0)
	markup1 = _GoStringToGString(markup0)
	defer C.free(unsafe.Pointer(markup1))
	C.gtk_scale_add_mark(this1, value1, position1, markup1)
}
func (this0 *Scale) ClearMarks() {
	var this1 *C.GtkScale
	if this0 != nil {
		this1 = this0.InheritedFromGtkScale()
	}
	C.gtk_scale_clear_marks(this1)
}
func (this0 *Scale) GetDigits() int {
	var this1 *C.GtkScale
	if this0 != nil {
		this1 = this0.InheritedFromGtkScale()
	}
	ret1 := C.gtk_scale_get_digits(this1)
	var ret2 int
	ret2 = int(ret1)
	return ret2
}
func (this0 *Scale) GetDrawValue() bool {
	var this1 *C.GtkScale
	if this0 != nil {
		this1 = this0.InheritedFromGtkScale()
	}
	ret1 := C.gtk_scale_get_draw_value(this1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *Scale) GetLayout() *pango.Layout {
	var this1 *C.GtkScale
	if this0 != nil {
		this1 = this0.InheritedFromGtkScale()
	}
	ret1 := C.gtk_scale_get_layout(this1)
	var ret2 *pango.Layout
	ret2 = (*pango.Layout)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
func (this0 *Scale) GetLayoutOffsets() (int, int) {
	var this1 *C.GtkScale
	var x1 C.int32_t
	var y1 C.int32_t
	if this0 != nil {
		this1 = this0.InheritedFromGtkScale()
	}
	C.gtk_scale_get_layout_offsets(this1, &x1, &y1)
	var x2 int
	var y2 int
	x2 = int(x1)
	y2 = int(y1)
	return x2, y2
}
func (this0 *Scale) GetValuePos() PositionType {
	var this1 *C.GtkScale
	if this0 != nil {
		this1 = this0.InheritedFromGtkScale()
	}
	ret1 := C.gtk_scale_get_value_pos(this1)
	var ret2 PositionType
	ret2 = PositionType(ret1)
	return ret2
}
func (this0 *Scale) SetDigits(digits0 int) {
	var this1 *C.GtkScale
	var digits1 C.int32_t
	if this0 != nil {
		this1 = this0.InheritedFromGtkScale()
	}
	digits1 = C.int32_t(digits0)
	C.gtk_scale_set_digits(this1, digits1)
}
func (this0 *Scale) SetDrawValue(draw_value0 bool) {
	var this1 *C.GtkScale
	var draw_value1 C.int
	if this0 != nil {
		this1 = this0.InheritedFromGtkScale()
	}
	draw_value1 = _GoBoolToCBool(draw_value0)
	C.gtk_scale_set_draw_value(this1, draw_value1)
}
func (this0 *Scale) SetValuePos(pos0 PositionType) {
	var this1 *C.GtkScale
	var pos1 C.GtkPositionType
	if this0 != nil {
		this1 = this0.InheritedFromGtkScale()
	}
	pos1 = C.GtkPositionType(pos0)
	C.gtk_scale_set_value_pos(this1, pos1)
}
type ScaleButtonLike interface {
	ButtonLike
	InheritedFromGtkScaleButton() *C.GtkScaleButton
}

type ScaleButton struct {
	Button
	atk.ImplementorIfaceImpl
	ActivatableImpl
	BuildableImpl
	OrientableImpl
}

func ToScaleButton(objlike gobject.ObjectLike) *ScaleButton {
	c := objlike.InheritedFromGObject()
	if c == nil {
		return nil
	}
	t := (*ScaleButton)(nil).GetStaticType()
	obj := gobject.ObjectGrabIfType(unsafe.Pointer(c), t)
	if obj != nil {
		return (*ScaleButton)(obj)
	}
	panic("cannot cast to ScaleButton")
}

func (this0 *ScaleButton) InheritedFromGtkScaleButton() *C.GtkScaleButton {
	if this0 == nil {
		return nil
	}
	return (*C.GtkScaleButton)(this0.C)
}

func (this0 *ScaleButton) GetStaticType() gobject.Type {
	return gobject.Type(C.gtk_scale_button_get_type())
}

func ScaleButtonGetType() gobject.Type {
	return (*ScaleButton)(nil).GetStaticType()
}
func NewScaleButton(size0 int, min0 float64, max0 float64, step0 float64, icons0 []string) *ScaleButton {
	var size1 C.int32_t
	var min1 C.double
	var max1 C.double
	var step1 C.double
	var icons1 **C.char
	size1 = C.int32_t(size0)
	min1 = C.double(min0)
	max1 = C.double(max0)
	step1 = C.double(step0)
	icons1 = (**C.char)(C.malloc(C.size_t(int(unsafe.Sizeof(*icons1)) * (len(icons0) + 1))))
	defer C.free(unsafe.Pointer(icons1))
	for i, e := range icons0 {
		(*(*[999999]*C.char)(unsafe.Pointer(icons1)))[i] = _GoStringToGString(e)
		defer C.free(unsafe.Pointer((*(*[999999]*C.char)(unsafe.Pointer(icons1)))[i]))
	}
	(*(*[999999]*C.char)(unsafe.Pointer(icons1)))[len(icons0)] = nil
	ret1 := C.gtk_scale_button_new(size1, min1, max1, step1, icons1)
	var ret2 *ScaleButton
	ret2 = (*ScaleButton)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
func (this0 *ScaleButton) GetAdjustment() *Adjustment {
	var this1 *C.GtkScaleButton
	if this0 != nil {
		this1 = this0.InheritedFromGtkScaleButton()
	}
	ret1 := C.gtk_scale_button_get_adjustment(this1)
	var ret2 *Adjustment
	ret2 = (*Adjustment)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
func (this0 *ScaleButton) GetMinusButton() *Widget {
	var this1 *C.GtkScaleButton
	if this0 != nil {
		this1 = this0.InheritedFromGtkScaleButton()
	}
	ret1 := C.gtk_scale_button_get_minus_button(this1)
	var ret2 *Widget
	ret2 = (*Widget)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
func (this0 *ScaleButton) GetPlusButton() *Widget {
	var this1 *C.GtkScaleButton
	if this0 != nil {
		this1 = this0.InheritedFromGtkScaleButton()
	}
	ret1 := C.gtk_scale_button_get_plus_button(this1)
	var ret2 *Widget
	ret2 = (*Widget)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
func (this0 *ScaleButton) GetPopup() *Widget {
	var this1 *C.GtkScaleButton
	if this0 != nil {
		this1 = this0.InheritedFromGtkScaleButton()
	}
	ret1 := C.gtk_scale_button_get_popup(this1)
	var ret2 *Widget
	ret2 = (*Widget)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
func (this0 *ScaleButton) GetValue() float64 {
	var this1 *C.GtkScaleButton
	if this0 != nil {
		this1 = this0.InheritedFromGtkScaleButton()
	}
	ret1 := C.gtk_scale_button_get_value(this1)
	var ret2 float64
	ret2 = float64(ret1)
	return ret2
}
func (this0 *ScaleButton) SetAdjustment(adjustment0 AdjustmentLike) {
	var this1 *C.GtkScaleButton
	var adjustment1 *C.GtkAdjustment
	if this0 != nil {
		this1 = this0.InheritedFromGtkScaleButton()
	}
	if adjustment0 != nil {
		adjustment1 = adjustment0.InheritedFromGtkAdjustment()
	}
	C.gtk_scale_button_set_adjustment(this1, adjustment1)
}
func (this0 *ScaleButton) SetIcons(icons0 []string) {
	var this1 *C.GtkScaleButton
	var icons1 **C.char
	if this0 != nil {
		this1 = this0.InheritedFromGtkScaleButton()
	}
	icons1 = (**C.char)(C.malloc(C.size_t(int(unsafe.Sizeof(*icons1)) * (len(icons0) + 1))))
	defer C.free(unsafe.Pointer(icons1))
	for i, e := range icons0 {
		(*(*[999999]*C.char)(unsafe.Pointer(icons1)))[i] = _GoStringToGString(e)
		defer C.free(unsafe.Pointer((*(*[999999]*C.char)(unsafe.Pointer(icons1)))[i]))
	}
	(*(*[999999]*C.char)(unsafe.Pointer(icons1)))[len(icons0)] = nil
	C.gtk_scale_button_set_icons(this1, icons1)
}
func (this0 *ScaleButton) SetValue(value0 float64) {
	var this1 *C.GtkScaleButton
	var value1 C.double
	if this0 != nil {
		this1 = this0.InheritedFromGtkScaleButton()
	}
	value1 = C.double(value0)
	C.gtk_scale_button_set_value(this1, value1)
}
type ScrollStep C.uint32_t
const (
	ScrollStepSteps ScrollStep = 0
	ScrollStepPages ScrollStep = 1
	ScrollStepEnds ScrollStep = 2
	ScrollStepHorizontalSteps ScrollStep = 3
	ScrollStepHorizontalPages ScrollStep = 4
	ScrollStepHorizontalEnds ScrollStep = 5
)
type ScrollType C.uint32_t
const (
	ScrollTypeNone ScrollType = 0
	ScrollTypeJump ScrollType = 1
	ScrollTypeStepBackward ScrollType = 2
	ScrollTypeStepForward ScrollType = 3
	ScrollTypePageBackward ScrollType = 4
	ScrollTypePageForward ScrollType = 5
	ScrollTypeStepUp ScrollType = 6
	ScrollTypeStepDown ScrollType = 7
	ScrollTypePageUp ScrollType = 8
	ScrollTypePageDown ScrollType = 9
	ScrollTypeStepLeft ScrollType = 10
	ScrollTypeStepRight ScrollType = 11
	ScrollTypePageLeft ScrollType = 12
	ScrollTypePageRight ScrollType = 13
	ScrollTypeStart ScrollType = 14
	ScrollTypeEnd ScrollType = 15
)
type ScrollableLike interface {
	ImplementsGtkScrollable() *C.GtkScrollable
}

type Scrollable struct {
	gobject.Object
	ScrollableImpl
}

type ScrollableImpl struct {}

func ToScrollable(objlike gobject.ObjectLike) *Scrollable {
	t := (*ScrollableImpl)(nil).GetStaticType()
	c := objlike.InheritedFromGObject()
	obj := gobject.ObjectGrabIfType(unsafe.Pointer(c), t)
	if obj != nil {
		return (*Scrollable)(obj)
	}
	panic("cannot cast to Scrollable")
}

func (this0 *ScrollableImpl) ImplementsGtkScrollable() *C.GtkScrollable {
	obj := uintptr(unsafe.Pointer(this0)) - unsafe.Sizeof(uintptr(0))
	return (*C.GtkScrollable)((*gobject.Object)(unsafe.Pointer(obj)).C)
}

func (this0 *ScrollableImpl) GetStaticType() gobject.Type {
	return gobject.Type(C.gtk_scrollable_get_type())
}

func ScrollableGetType() gobject.Type {
	return (*ScrollableImpl)(nil).GetStaticType()
}
func (this0 *ScrollableImpl) GetHAdjustment() *Adjustment {
	var this1 *C.GtkScrollable
	if this0 != nil {
		this1 = this0.ImplementsGtkScrollable()}
	ret1 := C.gtk_scrollable_get_hadjustment(this1)
	var ret2 *Adjustment
	ret2 = (*Adjustment)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
func (this0 *ScrollableImpl) GetHScrollPolicy() ScrollablePolicy {
	var this1 *C.GtkScrollable
	if this0 != nil {
		this1 = this0.ImplementsGtkScrollable()}
	ret1 := C.gtk_scrollable_get_hscroll_policy(this1)
	var ret2 ScrollablePolicy
	ret2 = ScrollablePolicy(ret1)
	return ret2
}
func (this0 *ScrollableImpl) GetVAdjustment() *Adjustment {
	var this1 *C.GtkScrollable
	if this0 != nil {
		this1 = this0.ImplementsGtkScrollable()}
	ret1 := C.gtk_scrollable_get_vadjustment(this1)
	var ret2 *Adjustment
	ret2 = (*Adjustment)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
func (this0 *ScrollableImpl) GetVScrollPolicy() ScrollablePolicy {
	var this1 *C.GtkScrollable
	if this0 != nil {
		this1 = this0.ImplementsGtkScrollable()}
	ret1 := C.gtk_scrollable_get_vscroll_policy(this1)
	var ret2 ScrollablePolicy
	ret2 = ScrollablePolicy(ret1)
	return ret2
}
func (this0 *ScrollableImpl) SetHAdjustment(hadjustment0 AdjustmentLike) {
	var this1 *C.GtkScrollable
	var hadjustment1 *C.GtkAdjustment
	if this0 != nil {
		this1 = this0.ImplementsGtkScrollable()}
	if hadjustment0 != nil {
		hadjustment1 = hadjustment0.InheritedFromGtkAdjustment()
	}
	C.gtk_scrollable_set_hadjustment(this1, hadjustment1)
}
func (this0 *ScrollableImpl) SetHScrollPolicy(policy0 ScrollablePolicy) {
	var this1 *C.GtkScrollable
	var policy1 C.GtkScrollablePolicy
	if this0 != nil {
		this1 = this0.ImplementsGtkScrollable()}
	policy1 = C.GtkScrollablePolicy(policy0)
	C.gtk_scrollable_set_hscroll_policy(this1, policy1)
}
func (this0 *ScrollableImpl) SetVAdjustment(vadjustment0 AdjustmentLike) {
	var this1 *C.GtkScrollable
	var vadjustment1 *C.GtkAdjustment
	if this0 != nil {
		this1 = this0.ImplementsGtkScrollable()}
	if vadjustment0 != nil {
		vadjustment1 = vadjustment0.InheritedFromGtkAdjustment()
	}
	C.gtk_scrollable_set_vadjustment(this1, vadjustment1)
}
func (this0 *ScrollableImpl) SetVScrollPolicy(policy0 ScrollablePolicy) {
	var this1 *C.GtkScrollable
	var policy1 C.GtkScrollablePolicy
	if this0 != nil {
		this1 = this0.ImplementsGtkScrollable()}
	policy1 = C.GtkScrollablePolicy(policy0)
	C.gtk_scrollable_set_vscroll_policy(this1, policy1)
}
type ScrollablePolicy C.uint32_t
const (
	ScrollablePolicyMinimum ScrollablePolicy = 0
	ScrollablePolicyNatural ScrollablePolicy = 1
)
type ScrollbarLike interface {
	RangeLike
	InheritedFromGtkScrollbar() *C.GtkScrollbar
}

type Scrollbar struct {
	Range
	atk.ImplementorIfaceImpl
	BuildableImpl
	OrientableImpl
}

func ToScrollbar(objlike gobject.ObjectLike) *Scrollbar {
	c := objlike.InheritedFromGObject()
	if c == nil {
		return nil
	}
	t := (*Scrollbar)(nil).GetStaticType()
	obj := gobject.ObjectGrabIfType(unsafe.Pointer(c), t)
	if obj != nil {
		return (*Scrollbar)(obj)
	}
	panic("cannot cast to Scrollbar")
}

func (this0 *Scrollbar) InheritedFromGtkScrollbar() *C.GtkScrollbar {
	if this0 == nil {
		return nil
	}
	return (*C.GtkScrollbar)(this0.C)
}

func (this0 *Scrollbar) GetStaticType() gobject.Type {
	return gobject.Type(C.gtk_scrollbar_get_type())
}

func ScrollbarGetType() gobject.Type {
	return (*Scrollbar)(nil).GetStaticType()
}
func NewScrollbar(orientation0 Orientation, adjustment0 AdjustmentLike) *Scrollbar {
	var orientation1 C.GtkOrientation
	var adjustment1 *C.GtkAdjustment
	orientation1 = C.GtkOrientation(orientation0)
	if adjustment0 != nil {
		adjustment1 = adjustment0.InheritedFromGtkAdjustment()
	}
	ret1 := C.gtk_scrollbar_new(orientation1, adjustment1)
	var ret2 *Scrollbar
	ret2 = (*Scrollbar)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
type ScrolledWindowLike interface {
	BinLike
	InheritedFromGtkScrolledWindow() *C.GtkScrolledWindow
}

type ScrolledWindow struct {
	Bin
	atk.ImplementorIfaceImpl
	BuildableImpl
}

func ToScrolledWindow(objlike gobject.ObjectLike) *ScrolledWindow {
	c := objlike.InheritedFromGObject()
	if c == nil {
		return nil
	}
	t := (*ScrolledWindow)(nil).GetStaticType()
	obj := gobject.ObjectGrabIfType(unsafe.Pointer(c), t)
	if obj != nil {
		return (*ScrolledWindow)(obj)
	}
	panic("cannot cast to ScrolledWindow")
}

func (this0 *ScrolledWindow) InheritedFromGtkScrolledWindow() *C.GtkScrolledWindow {
	if this0 == nil {
		return nil
	}
	return (*C.GtkScrolledWindow)(this0.C)
}

func (this0 *ScrolledWindow) GetStaticType() gobject.Type {
	return gobject.Type(C.gtk_scrolled_window_get_type())
}

func ScrolledWindowGetType() gobject.Type {
	return (*ScrolledWindow)(nil).GetStaticType()
}
func NewScrolledWindow(hadjustment0 AdjustmentLike, vadjustment0 AdjustmentLike) *ScrolledWindow {
	var hadjustment1 *C.GtkAdjustment
	var vadjustment1 *C.GtkAdjustment
	if hadjustment0 != nil {
		hadjustment1 = hadjustment0.InheritedFromGtkAdjustment()
	}
	if vadjustment0 != nil {
		vadjustment1 = vadjustment0.InheritedFromGtkAdjustment()
	}
	ret1 := C.gtk_scrolled_window_new(hadjustment1, vadjustment1)
	var ret2 *ScrolledWindow
	ret2 = (*ScrolledWindow)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
func (this0 *ScrolledWindow) AddWithViewport(child0 WidgetLike) {
	var this1 *C.GtkScrolledWindow
	var child1 *C.GtkWidget
	if this0 != nil {
		this1 = this0.InheritedFromGtkScrolledWindow()
	}
	if child0 != nil {
		child1 = child0.InheritedFromGtkWidget()
	}
	C.gtk_scrolled_window_add_with_viewport(this1, child1)
}
func (this0 *ScrolledWindow) GetHAdjustment() *Adjustment {
	var this1 *C.GtkScrolledWindow
	if this0 != nil {
		this1 = this0.InheritedFromGtkScrolledWindow()
	}
	ret1 := C.gtk_scrolled_window_get_hadjustment(this1)
	var ret2 *Adjustment
	ret2 = (*Adjustment)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
func (this0 *ScrolledWindow) GetHscrollbar() *Widget {
	var this1 *C.GtkScrolledWindow
	if this0 != nil {
		this1 = this0.InheritedFromGtkScrolledWindow()
	}
	ret1 := C.gtk_scrolled_window_get_hscrollbar(this1)
	var ret2 *Widget
	ret2 = (*Widget)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
func (this0 *ScrolledWindow) GetMinContentHeight() int {
	var this1 *C.GtkScrolledWindow
	if this0 != nil {
		this1 = this0.InheritedFromGtkScrolledWindow()
	}
	ret1 := C.gtk_scrolled_window_get_min_content_height(this1)
	var ret2 int
	ret2 = int(ret1)
	return ret2
}
func (this0 *ScrolledWindow) GetMinContentWidth() int {
	var this1 *C.GtkScrolledWindow
	if this0 != nil {
		this1 = this0.InheritedFromGtkScrolledWindow()
	}
	ret1 := C.gtk_scrolled_window_get_min_content_width(this1)
	var ret2 int
	ret2 = int(ret1)
	return ret2
}
func (this0 *ScrolledWindow) GetPlacement() CornerType {
	var this1 *C.GtkScrolledWindow
	if this0 != nil {
		this1 = this0.InheritedFromGtkScrolledWindow()
	}
	ret1 := C.gtk_scrolled_window_get_placement(this1)
	var ret2 CornerType
	ret2 = CornerType(ret1)
	return ret2
}
func (this0 *ScrolledWindow) GetPolicy() (PolicyType, PolicyType) {
	var this1 *C.GtkScrolledWindow
	var hscrollbar_policy1 C.GtkPolicyType
	var vscrollbar_policy1 C.GtkPolicyType
	if this0 != nil {
		this1 = this0.InheritedFromGtkScrolledWindow()
	}
	C.gtk_scrolled_window_get_policy(this1, &hscrollbar_policy1, &vscrollbar_policy1)
	var hscrollbar_policy2 PolicyType
	var vscrollbar_policy2 PolicyType
	hscrollbar_policy2 = PolicyType(hscrollbar_policy1)
	vscrollbar_policy2 = PolicyType(vscrollbar_policy1)
	return hscrollbar_policy2, vscrollbar_policy2
}
func (this0 *ScrolledWindow) GetShadowType() ShadowType {
	var this1 *C.GtkScrolledWindow
	if this0 != nil {
		this1 = this0.InheritedFromGtkScrolledWindow()
	}
	ret1 := C.gtk_scrolled_window_get_shadow_type(this1)
	var ret2 ShadowType
	ret2 = ShadowType(ret1)
	return ret2
}
func (this0 *ScrolledWindow) GetVAdjustment() *Adjustment {
	var this1 *C.GtkScrolledWindow
	if this0 != nil {
		this1 = this0.InheritedFromGtkScrolledWindow()
	}
	ret1 := C.gtk_scrolled_window_get_vadjustment(this1)
	var ret2 *Adjustment
	ret2 = (*Adjustment)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
func (this0 *ScrolledWindow) GetVscrollbar() *Widget {
	var this1 *C.GtkScrolledWindow
	if this0 != nil {
		this1 = this0.InheritedFromGtkScrolledWindow()
	}
	ret1 := C.gtk_scrolled_window_get_vscrollbar(this1)
	var ret2 *Widget
	ret2 = (*Widget)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
func (this0 *ScrolledWindow) SetHAdjustment(hadjustment0 AdjustmentLike) {
	var this1 *C.GtkScrolledWindow
	var hadjustment1 *C.GtkAdjustment
	if this0 != nil {
		this1 = this0.InheritedFromGtkScrolledWindow()
	}
	if hadjustment0 != nil {
		hadjustment1 = hadjustment0.InheritedFromGtkAdjustment()
	}
	C.gtk_scrolled_window_set_hadjustment(this1, hadjustment1)
}
func (this0 *ScrolledWindow) SetMinContentHeight(height0 int) {
	var this1 *C.GtkScrolledWindow
	var height1 C.int32_t
	if this0 != nil {
		this1 = this0.InheritedFromGtkScrolledWindow()
	}
	height1 = C.int32_t(height0)
	C.gtk_scrolled_window_set_min_content_height(this1, height1)
}
func (this0 *ScrolledWindow) SetMinContentWidth(width0 int) {
	var this1 *C.GtkScrolledWindow
	var width1 C.int32_t
	if this0 != nil {
		this1 = this0.InheritedFromGtkScrolledWindow()
	}
	width1 = C.int32_t(width0)
	C.gtk_scrolled_window_set_min_content_width(this1, width1)
}
func (this0 *ScrolledWindow) SetPlacement(window_placement0 CornerType) {
	var this1 *C.GtkScrolledWindow
	var window_placement1 C.GtkCornerType
	if this0 != nil {
		this1 = this0.InheritedFromGtkScrolledWindow()
	}
	window_placement1 = C.GtkCornerType(window_placement0)
	C.gtk_scrolled_window_set_placement(this1, window_placement1)
}
func (this0 *ScrolledWindow) SetPolicy(hscrollbar_policy0 PolicyType, vscrollbar_policy0 PolicyType) {
	var this1 *C.GtkScrolledWindow
	var hscrollbar_policy1 C.GtkPolicyType
	var vscrollbar_policy1 C.GtkPolicyType
	if this0 != nil {
		this1 = this0.InheritedFromGtkScrolledWindow()
	}
	hscrollbar_policy1 = C.GtkPolicyType(hscrollbar_policy0)
	vscrollbar_policy1 = C.GtkPolicyType(vscrollbar_policy0)
	C.gtk_scrolled_window_set_policy(this1, hscrollbar_policy1, vscrollbar_policy1)
}
func (this0 *ScrolledWindow) SetShadowType(type0 ShadowType) {
	var this1 *C.GtkScrolledWindow
	var type1 C.GtkShadowType
	if this0 != nil {
		this1 = this0.InheritedFromGtkScrolledWindow()
	}
	type1 = C.GtkShadowType(type0)
	C.gtk_scrolled_window_set_shadow_type(this1, type1)
}
func (this0 *ScrolledWindow) SetVAdjustment(vadjustment0 AdjustmentLike) {
	var this1 *C.GtkScrolledWindow
	var vadjustment1 *C.GtkAdjustment
	if this0 != nil {
		this1 = this0.InheritedFromGtkScrolledWindow()
	}
	if vadjustment0 != nil {
		vadjustment1 = vadjustment0.InheritedFromGtkAdjustment()
	}
	C.gtk_scrolled_window_set_vadjustment(this1, vadjustment1)
}
func (this0 *ScrolledWindow) UnsetPlacement() {
	var this1 *C.GtkScrolledWindow
	if this0 != nil {
		this1 = this0.InheritedFromGtkScrolledWindow()
	}
	C.gtk_scrolled_window_unset_placement(this1)
}
type SelectionData struct {}
func (this0 *SelectionData) Copy() *SelectionData {
	var this1 *C.GtkSelectionData
	this1 = (*C.GtkSelectionData)(unsafe.Pointer(this0))
	ret1 := C.gtk_selection_data_copy(this1)
	var ret2 *SelectionData
	ret2 = (*SelectionData)(unsafe.Pointer(ret1))
	return ret2
}
func (this0 *SelectionData) Free() {
	var this1 *C.GtkSelectionData
	this1 = (*C.GtkSelectionData)(unsafe.Pointer(this0))
	C.gtk_selection_data_free(this1)
}
func (this0 *SelectionData) GetDataType() gdk.Atom {
	var this1 *C.GtkSelectionData
	this1 = (*C.GtkSelectionData)(unsafe.Pointer(this0))
	ret1 := C.gtk_selection_data_get_data_type(this1)
	var ret2 gdk.Atom
	ret2 = gdk.Atom{unsafe.Pointer(ret1)}
	return ret2
}
func (this0 *SelectionData) GetData() (int, []int) {
	var this1 *C.GtkSelectionData
	var length1 C.int32_t
	this1 = (*C.GtkSelectionData)(unsafe.Pointer(this0))
	ret1 := C.gtk_selection_data_get_data_with_length(this1, &length1)
	var length2 int
	var ret2 []int
	length2 = int(length1)
	ret2 = make([]int, length1)
	for i := range ret2 {
		ret2[i] = int((*(*[999999]C.uint8_t)(unsafe.Pointer(ret1)))[i])
	}
	return length2, ret2
}
func (this0 *SelectionData) GetDisplay() *gdk.Display {
	var this1 *C.GtkSelectionData
	this1 = (*C.GtkSelectionData)(unsafe.Pointer(this0))
	ret1 := C.gtk_selection_data_get_display(this1)
	var ret2 *gdk.Display
	ret2 = (*gdk.Display)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
func (this0 *SelectionData) GetFormat() int {
	var this1 *C.GtkSelectionData
	this1 = (*C.GtkSelectionData)(unsafe.Pointer(this0))
	ret1 := C.gtk_selection_data_get_format(this1)
	var ret2 int
	ret2 = int(ret1)
	return ret2
}
func (this0 *SelectionData) GetLength() int {
	var this1 *C.GtkSelectionData
	this1 = (*C.GtkSelectionData)(unsafe.Pointer(this0))
	ret1 := C.gtk_selection_data_get_length(this1)
	var ret2 int
	ret2 = int(ret1)
	return ret2
}
func (this0 *SelectionData) GetPixbuf() *gdkpixbuf.Pixbuf {
	var this1 *C.GtkSelectionData
	this1 = (*C.GtkSelectionData)(unsafe.Pointer(this0))
	ret1 := C.gtk_selection_data_get_pixbuf(this1)
	var ret2 *gdkpixbuf.Pixbuf
	ret2 = (*gdkpixbuf.Pixbuf)(gobject.ObjectWrap(unsafe.Pointer(ret1), false))
	return ret2
}
func (this0 *SelectionData) GetSelection() gdk.Atom {
	var this1 *C.GtkSelectionData
	this1 = (*C.GtkSelectionData)(unsafe.Pointer(this0))
	ret1 := C.gtk_selection_data_get_selection(this1)
	var ret2 gdk.Atom
	ret2 = gdk.Atom{unsafe.Pointer(ret1)}
	return ret2
}
func (this0 *SelectionData) GetTarget() gdk.Atom {
	var this1 *C.GtkSelectionData
	this1 = (*C.GtkSelectionData)(unsafe.Pointer(this0))
	ret1 := C.gtk_selection_data_get_target(this1)
	var ret2 gdk.Atom
	ret2 = gdk.Atom{unsafe.Pointer(ret1)}
	return ret2
}
func (this0 *SelectionData) GetTargets() ([]gdk.Atom, bool) {
	var this1 *C.GtkSelectionData
	var targets1 *C.GdkAtom
	var n_atoms1 C.int32_t
	this1 = (*C.GtkSelectionData)(unsafe.Pointer(this0))
	ret1 := C.gtk_selection_data_get_targets(this1, &targets1, &n_atoms1)
	var targets2 []gdk.Atom
	var ret2 bool
	targets2 = make([]gdk.Atom, n_atoms1)
	for i := range targets2 {
		targets2[i] = gdk.Atom{unsafe.Pointer((*(*[999999]C.GdkAtom)(unsafe.Pointer(targets1)))[i])}
	}
	ret2 = ret1 != 0
	return targets2, ret2
}
func (this0 *SelectionData) GetText() string {
	var this1 *C.GtkSelectionData
	this1 = (*C.GtkSelectionData)(unsafe.Pointer(this0))
	ret1 := C.gtk_selection_data_get_text(this1)
	var ret2 string
	ret2 = C.GoString(ret1)
	return ret2
}
func (this0 *SelectionData) GetURIs() []string {
	var this1 *C.GtkSelectionData
	this1 = (*C.GtkSelectionData)(unsafe.Pointer(this0))
	ret1 := C.gtk_selection_data_get_uris(this1)
	var ret2 []string
	for i := range ret2 {
		ret2[i] = C.GoString((*(*[999999]*C.char)(unsafe.Pointer(ret1)))[i])
		C.g_free(unsafe.Pointer((*(*[999999]*C.char)(unsafe.Pointer(ret1)))[i]))
	}
	return ret2
}
func (this0 *SelectionData) Set(type0 gdk.Atom, format0 int, data0 []int) {
	var this1 *C.GtkSelectionData
	var type1 C.GdkAtom
	var format1 C.int32_t
	var data1 *C.uint8_t
	var length1 C.int32_t
	this1 = (*C.GtkSelectionData)(unsafe.Pointer(this0))
	type1 = *(*C.GdkAtom)(unsafe.Pointer(&type0))
	format1 = C.int32_t(format0)
	data1 = (*C.uint8_t)(C.malloc(C.size_t(int(unsafe.Sizeof(*data1)) * len(data0))))
	defer C.free(unsafe.Pointer(data1))
	for i, e := range data0 {
		(*(*[999999]C.uint8_t)(unsafe.Pointer(data1)))[i] = C.uint8_t(e)
	}
	length1 = C.int32_t(len(data0))
	C.gtk_selection_data_set(this1, type1, format1, data1, length1)
}
func (this0 *SelectionData) SetPixbuf(pixbuf0 gdkpixbuf.PixbufLike) bool {
	var this1 *C.GtkSelectionData
	var pixbuf1 *C.GdkPixbuf
	this1 = (*C.GtkSelectionData)(unsafe.Pointer(this0))
	if pixbuf0 != nil {
		pixbuf1 = pixbuf0.InheritedFromGdkPixbuf()
	}
	ret1 := C.gtk_selection_data_set_pixbuf(this1, pixbuf1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *SelectionData) SetText(str0 string, len0 int) bool {
	var this1 *C.GtkSelectionData
	var str1 *C.char
	var len1 C.int32_t
	this1 = (*C.GtkSelectionData)(unsafe.Pointer(this0))
	str1 = _GoStringToGString(str0)
	defer C.free(unsafe.Pointer(str1))
	len1 = C.int32_t(len0)
	ret1 := C.gtk_selection_data_set_text(this1, str1, len1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *SelectionData) SetURIs(uris0 []string) bool {
	var this1 *C.GtkSelectionData
	var uris1 **C.char
	this1 = (*C.GtkSelectionData)(unsafe.Pointer(this0))
	uris1 = (**C.char)(C.malloc(C.size_t(int(unsafe.Sizeof(*uris1)) * (len(uris0) + 1))))
	defer C.free(unsafe.Pointer(uris1))
	for i, e := range uris0 {
		(*(*[999999]*C.char)(unsafe.Pointer(uris1)))[i] = _GoStringToGString(e)
		defer C.free(unsafe.Pointer((*(*[999999]*C.char)(unsafe.Pointer(uris1)))[i]))
	}
	(*(*[999999]*C.char)(unsafe.Pointer(uris1)))[len(uris0)] = nil
	ret1 := C.gtk_selection_data_set_uris(this1, uris1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *SelectionData) TargetsIncludeImage(writable0 bool) bool {
	var this1 *C.GtkSelectionData
	var writable1 C.int
	this1 = (*C.GtkSelectionData)(unsafe.Pointer(this0))
	writable1 = _GoBoolToCBool(writable0)
	ret1 := C.gtk_selection_data_targets_include_image(this1, writable1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *SelectionData) TargetsIncludeRichText(buffer0 TextBufferLike) bool {
	var this1 *C.GtkSelectionData
	var buffer1 *C.GtkTextBuffer
	this1 = (*C.GtkSelectionData)(unsafe.Pointer(this0))
	if buffer0 != nil {
		buffer1 = buffer0.InheritedFromGtkTextBuffer()
	}
	ret1 := C.gtk_selection_data_targets_include_rich_text(this1, buffer1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *SelectionData) TargetsIncludeText() bool {
	var this1 *C.GtkSelectionData
	this1 = (*C.GtkSelectionData)(unsafe.Pointer(this0))
	ret1 := C.gtk_selection_data_targets_include_text(this1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *SelectionData) TargetsIncludeURI() bool {
	var this1 *C.GtkSelectionData
	this1 = (*C.GtkSelectionData)(unsafe.Pointer(this0))
	ret1 := C.gtk_selection_data_targets_include_uri(this1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
type SelectionMode C.uint32_t
const (
	SelectionModeNone SelectionMode = 0
	SelectionModeSingle SelectionMode = 1
	SelectionModeBrowse SelectionMode = 2
	SelectionModeMultiple SelectionMode = 3
)
type SensitivityType C.uint32_t
const (
	SensitivityTypeAuto SensitivityType = 0
	SensitivityTypeOn SensitivityType = 1
	SensitivityTypeOff SensitivityType = 2
)
type SeparatorLike interface {
	WidgetLike
	InheritedFromGtkSeparator() *C.GtkSeparator
}

type Separator struct {
	Widget
	atk.ImplementorIfaceImpl
	BuildableImpl
	OrientableImpl
}

func ToSeparator(objlike gobject.ObjectLike) *Separator {
	c := objlike.InheritedFromGObject()
	if c == nil {
		return nil
	}
	t := (*Separator)(nil).GetStaticType()
	obj := gobject.ObjectGrabIfType(unsafe.Pointer(c), t)
	if obj != nil {
		return (*Separator)(obj)
	}
	panic("cannot cast to Separator")
}

func (this0 *Separator) InheritedFromGtkSeparator() *C.GtkSeparator {
	if this0 == nil {
		return nil
	}
	return (*C.GtkSeparator)(this0.C)
}

func (this0 *Separator) GetStaticType() gobject.Type {
	return gobject.Type(C.gtk_separator_get_type())
}

func SeparatorGetType() gobject.Type {
	return (*Separator)(nil).GetStaticType()
}
func NewSeparator(orientation0 Orientation) *Separator {
	var orientation1 C.GtkOrientation
	orientation1 = C.GtkOrientation(orientation0)
	ret1 := C.gtk_separator_new(orientation1)
	var ret2 *Separator
	ret2 = (*Separator)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
type SeparatorMenuItemLike interface {
	MenuItemLike
	InheritedFromGtkSeparatorMenuItem() *C.GtkSeparatorMenuItem
}

type SeparatorMenuItem struct {
	MenuItem
	atk.ImplementorIfaceImpl
	ActivatableImpl
	BuildableImpl
}

func ToSeparatorMenuItem(objlike gobject.ObjectLike) *SeparatorMenuItem {
	c := objlike.InheritedFromGObject()
	if c == nil {
		return nil
	}
	t := (*SeparatorMenuItem)(nil).GetStaticType()
	obj := gobject.ObjectGrabIfType(unsafe.Pointer(c), t)
	if obj != nil {
		return (*SeparatorMenuItem)(obj)
	}
	panic("cannot cast to SeparatorMenuItem")
}

func (this0 *SeparatorMenuItem) InheritedFromGtkSeparatorMenuItem() *C.GtkSeparatorMenuItem {
	if this0 == nil {
		return nil
	}
	return (*C.GtkSeparatorMenuItem)(this0.C)
}

func (this0 *SeparatorMenuItem) GetStaticType() gobject.Type {
	return gobject.Type(C.gtk_separator_menu_item_get_type())
}

func SeparatorMenuItemGetType() gobject.Type {
	return (*SeparatorMenuItem)(nil).GetStaticType()
}
func NewSeparatorMenuItem() *SeparatorMenuItem {
	ret1 := C.gtk_separator_menu_item_new()
	var ret2 *SeparatorMenuItem
	ret2 = (*SeparatorMenuItem)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
type SeparatorToolItemLike interface {
	ToolItemLike
	InheritedFromGtkSeparatorToolItem() *C.GtkSeparatorToolItem
}

type SeparatorToolItem struct {
	ToolItem
	atk.ImplementorIfaceImpl
	ActivatableImpl
	BuildableImpl
}

func ToSeparatorToolItem(objlike gobject.ObjectLike) *SeparatorToolItem {
	c := objlike.InheritedFromGObject()
	if c == nil {
		return nil
	}
	t := (*SeparatorToolItem)(nil).GetStaticType()
	obj := gobject.ObjectGrabIfType(unsafe.Pointer(c), t)
	if obj != nil {
		return (*SeparatorToolItem)(obj)
	}
	panic("cannot cast to SeparatorToolItem")
}

func (this0 *SeparatorToolItem) InheritedFromGtkSeparatorToolItem() *C.GtkSeparatorToolItem {
	if this0 == nil {
		return nil
	}
	return (*C.GtkSeparatorToolItem)(this0.C)
}

func (this0 *SeparatorToolItem) GetStaticType() gobject.Type {
	return gobject.Type(C.gtk_separator_tool_item_get_type())
}

func SeparatorToolItemGetType() gobject.Type {
	return (*SeparatorToolItem)(nil).GetStaticType()
}
func NewSeparatorToolItem() *SeparatorToolItem {
	ret1 := C.gtk_separator_tool_item_new()
	var ret2 *SeparatorToolItem
	ret2 = (*SeparatorToolItem)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
func (this0 *SeparatorToolItem) GetDraw() bool {
	var this1 *C.GtkSeparatorToolItem
	if this0 != nil {
		this1 = this0.InheritedFromGtkSeparatorToolItem()
	}
	ret1 := C.gtk_separator_tool_item_get_draw(this1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *SeparatorToolItem) SetDraw(draw0 bool) {
	var this1 *C.GtkSeparatorToolItem
	var draw1 C.int
	if this0 != nil {
		this1 = this0.InheritedFromGtkSeparatorToolItem()
	}
	draw1 = _GoBoolToCBool(draw0)
	C.gtk_separator_tool_item_set_draw(this1, draw1)
}
type SettingsLike interface {
	gobject.ObjectLike
	InheritedFromGtkSettings() *C.GtkSettings
}

type Settings struct {
	gobject.Object
	StyleProviderImpl
}

func ToSettings(objlike gobject.ObjectLike) *Settings {
	c := objlike.InheritedFromGObject()
	if c == nil {
		return nil
	}
	t := (*Settings)(nil).GetStaticType()
	obj := gobject.ObjectGrabIfType(unsafe.Pointer(c), t)
	if obj != nil {
		return (*Settings)(obj)
	}
	panic("cannot cast to Settings")
}

func (this0 *Settings) InheritedFromGtkSettings() *C.GtkSettings {
	if this0 == nil {
		return nil
	}
	return (*C.GtkSettings)(this0.C)
}

func (this0 *Settings) GetStaticType() gobject.Type {
	return gobject.Type(C.gtk_settings_get_type())
}

func SettingsGetType() gobject.Type {
	return (*Settings)(nil).GetStaticType()
}
func SettingsGetDefault() *Settings {
	ret1 := C.gtk_settings_get_default()
	var ret2 *Settings
	ret2 = (*Settings)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
func SettingsGetForScreen(screen0 gdk.ScreenLike) *Settings {
	var screen1 *C.GdkScreen
	if screen0 != nil {
		screen1 = screen0.InheritedFromGdkScreen()
	}
	ret1 := C.gtk_settings_get_for_screen(screen1)
	var ret2 *Settings
	ret2 = (*Settings)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
// blacklisted: Settings.install_property (method)
// blacklisted: Settings.install_property_parser (method)
func (this0 *Settings) SetDoubleProperty(name0 string, v_double0 float64, origin0 string) {
	var this1 *C.GtkSettings
	var name1 *C.char
	var v_double1 C.double
	var origin1 *C.char
	if this0 != nil {
		this1 = this0.InheritedFromGtkSettings()
	}
	name1 = _GoStringToGString(name0)
	defer C.free(unsafe.Pointer(name1))
	v_double1 = C.double(v_double0)
	origin1 = _GoStringToGString(origin0)
	defer C.free(unsafe.Pointer(origin1))
	C.gtk_settings_set_double_property(this1, name1, v_double1, origin1)
}
func (this0 *Settings) SetLongProperty(name0 string, v_long0 int64, origin0 string) {
	var this1 *C.GtkSettings
	var name1 *C.char
	var v_long1 C.int64_t
	var origin1 *C.char
	if this0 != nil {
		this1 = this0.InheritedFromGtkSettings()
	}
	name1 = _GoStringToGString(name0)
	defer C.free(unsafe.Pointer(name1))
	v_long1 = C.int64_t(v_long0)
	origin1 = _GoStringToGString(origin0)
	defer C.free(unsafe.Pointer(origin1))
	C.gtk_settings_set_long_property(this1, name1, v_long1, origin1)
}
func (this0 *Settings) SetPropertyValue(name0 string, svalue0 *SettingsValue) {
	var this1 *C.GtkSettings
	var name1 *C.char
	var svalue1 *C.GtkSettingsValue
	if this0 != nil {
		this1 = this0.InheritedFromGtkSettings()
	}
	name1 = _GoStringToGString(name0)
	defer C.free(unsafe.Pointer(name1))
	svalue1 = (*C.GtkSettingsValue)(unsafe.Pointer(svalue0))
	C.gtk_settings_set_property_value(this1, name1, svalue1)
}
func (this0 *Settings) SetStringProperty(name0 string, v_string0 string, origin0 string) {
	var this1 *C.GtkSettings
	var name1 *C.char
	var v_string1 *C.char
	var origin1 *C.char
	if this0 != nil {
		this1 = this0.InheritedFromGtkSettings()
	}
	name1 = _GoStringToGString(name0)
	defer C.free(unsafe.Pointer(name1))
	v_string1 = _GoStringToGString(v_string0)
	defer C.free(unsafe.Pointer(v_string1))
	origin1 = _GoStringToGString(origin0)
	defer C.free(unsafe.Pointer(origin1))
	C.gtk_settings_set_string_property(this1, name1, v_string1, origin1)
}
type SettingsValue struct {
	origin0 *C.char
	Value gobject.Value
}
func (this0 *SettingsValue) Origin() string {
	var origin1 string
	origin1 = C.GoString(this0.origin0)
	return origin1
}
type ShadowType C.uint32_t
const (
	ShadowTypeNone ShadowType = 0
	ShadowTypeIn ShadowType = 1
	ShadowTypeOut ShadowType = 2
	ShadowTypeEtchedIn ShadowType = 3
	ShadowTypeEtchedOut ShadowType = 4
)
type SizeGroupLike interface {
	gobject.ObjectLike
	InheritedFromGtkSizeGroup() *C.GtkSizeGroup
}

type SizeGroup struct {
	gobject.Object
	BuildableImpl
}

func ToSizeGroup(objlike gobject.ObjectLike) *SizeGroup {
	c := objlike.InheritedFromGObject()
	if c == nil {
		return nil
	}
	t := (*SizeGroup)(nil).GetStaticType()
	obj := gobject.ObjectGrabIfType(unsafe.Pointer(c), t)
	if obj != nil {
		return (*SizeGroup)(obj)
	}
	panic("cannot cast to SizeGroup")
}

func (this0 *SizeGroup) InheritedFromGtkSizeGroup() *C.GtkSizeGroup {
	if this0 == nil {
		return nil
	}
	return (*C.GtkSizeGroup)(this0.C)
}

func (this0 *SizeGroup) GetStaticType() gobject.Type {
	return gobject.Type(C.gtk_size_group_get_type())
}

func SizeGroupGetType() gobject.Type {
	return (*SizeGroup)(nil).GetStaticType()
}
func NewSizeGroup(mode0 SizeGroupMode) *SizeGroup {
	var mode1 C.GtkSizeGroupMode
	mode1 = C.GtkSizeGroupMode(mode0)
	ret1 := C.gtk_size_group_new(mode1)
	var ret2 *SizeGroup
	ret2 = (*SizeGroup)(gobject.ObjectWrap(unsafe.Pointer(ret1), false))
	return ret2
}
func (this0 *SizeGroup) AddWidget(widget0 WidgetLike) {
	var this1 *C.GtkSizeGroup
	var widget1 *C.GtkWidget
	if this0 != nil {
		this1 = this0.InheritedFromGtkSizeGroup()
	}
	if widget0 != nil {
		widget1 = widget0.InheritedFromGtkWidget()
	}
	C.gtk_size_group_add_widget(this1, widget1)
}
func (this0 *SizeGroup) GetIgnoreHidden() bool {
	var this1 *C.GtkSizeGroup
	if this0 != nil {
		this1 = this0.InheritedFromGtkSizeGroup()
	}
	ret1 := C.gtk_size_group_get_ignore_hidden(this1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *SizeGroup) GetMode() SizeGroupMode {
	var this1 *C.GtkSizeGroup
	if this0 != nil {
		this1 = this0.InheritedFromGtkSizeGroup()
	}
	ret1 := C.gtk_size_group_get_mode(this1)
	var ret2 SizeGroupMode
	ret2 = SizeGroupMode(ret1)
	return ret2
}
func (this0 *SizeGroup) GetWidgets() []*Widget {
	var this1 *C.GtkSizeGroup
	if this0 != nil {
		this1 = this0.InheritedFromGtkSizeGroup()
	}
	ret1 := C.gtk_size_group_get_widgets(this1)
	var ret2 []*Widget
	for iter := (*_GSList)(unsafe.Pointer(ret1)); iter != nil; iter = iter.next {
		var elt *Widget
		elt = (*Widget)(gobject.ObjectWrap(unsafe.Pointer((*C.GtkWidget)(iter.data)), true))
		ret2 = append(ret2, elt)
	}
	return ret2
}
func (this0 *SizeGroup) RemoveWidget(widget0 WidgetLike) {
	var this1 *C.GtkSizeGroup
	var widget1 *C.GtkWidget
	if this0 != nil {
		this1 = this0.InheritedFromGtkSizeGroup()
	}
	if widget0 != nil {
		widget1 = widget0.InheritedFromGtkWidget()
	}
	C.gtk_size_group_remove_widget(this1, widget1)
}
func (this0 *SizeGroup) SetIgnoreHidden(ignore_hidden0 bool) {
	var this1 *C.GtkSizeGroup
	var ignore_hidden1 C.int
	if this0 != nil {
		this1 = this0.InheritedFromGtkSizeGroup()
	}
	ignore_hidden1 = _GoBoolToCBool(ignore_hidden0)
	C.gtk_size_group_set_ignore_hidden(this1, ignore_hidden1)
}
func (this0 *SizeGroup) SetMode(mode0 SizeGroupMode) {
	var this1 *C.GtkSizeGroup
	var mode1 C.GtkSizeGroupMode
	if this0 != nil {
		this1 = this0.InheritedFromGtkSizeGroup()
	}
	mode1 = C.GtkSizeGroupMode(mode0)
	C.gtk_size_group_set_mode(this1, mode1)
}
type SizeGroupMode C.uint32_t
const (
	SizeGroupModeNone SizeGroupMode = 0
	SizeGroupModeHorizontal SizeGroupMode = 1
	SizeGroupModeVertical SizeGroupMode = 2
	SizeGroupModeBoth SizeGroupMode = 3
)
type SizeRequestMode C.uint32_t
const (
	SizeRequestModeHeightForWidth SizeRequestMode = 0
	SizeRequestModeWidthForHeight SizeRequestMode = 1
	SizeRequestModeConstantSize SizeRequestMode = 2
)
type SocketLike interface {
	ContainerLike
	InheritedFromGtkSocket() *C.GtkSocket
}

type Socket struct {
	Container
	atk.ImplementorIfaceImpl
	BuildableImpl
}

func ToSocket(objlike gobject.ObjectLike) *Socket {
	c := objlike.InheritedFromGObject()
	if c == nil {
		return nil
	}
	t := (*Socket)(nil).GetStaticType()
	obj := gobject.ObjectGrabIfType(unsafe.Pointer(c), t)
	if obj != nil {
		return (*Socket)(obj)
	}
	panic("cannot cast to Socket")
}

func (this0 *Socket) InheritedFromGtkSocket() *C.GtkSocket {
	if this0 == nil {
		return nil
	}
	return (*C.GtkSocket)(this0.C)
}

func (this0 *Socket) GetStaticType() gobject.Type {
	return gobject.Type(C.gtk_socket_get_type())
}

func SocketGetType() gobject.Type {
	return (*Socket)(nil).GetStaticType()
}
func NewSocket() *Socket {
	ret1 := C.gtk_socket_new()
	var ret2 *Socket
	ret2 = (*Socket)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
func (this0 *Socket) AddID(window0 uint64) {
	var this1 *C.GtkSocket
	var window1 C.uint64_t
	if this0 != nil {
		this1 = this0.InheritedFromGtkSocket()
	}
	window1 = C.uint64_t(window0)
	C.gtk_socket_add_id(this1, window1)
}
func (this0 *Socket) GetID() uint64 {
	var this1 *C.GtkSocket
	if this0 != nil {
		this1 = this0.InheritedFromGtkSocket()
	}
	ret1 := C.gtk_socket_get_id(this1)
	var ret2 uint64
	ret2 = uint64(ret1)
	return ret2
}
func (this0 *Socket) GetPlugWindow() *gdk.Window {
	var this1 *C.GtkSocket
	if this0 != nil {
		this1 = this0.InheritedFromGtkSocket()
	}
	ret1 := C.gtk_socket_get_plug_window(this1)
	var ret2 *gdk.Window
	ret2 = (*gdk.Window)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
type SortType C.uint32_t
const (
	SortTypeAscending SortType = 0
	SortTypeDescending SortType = 1
)
type SpinButtonLike interface {
	EntryLike
	InheritedFromGtkSpinButton() *C.GtkSpinButton
}

type SpinButton struct {
	Entry
	atk.ImplementorIfaceImpl
	BuildableImpl
	CellEditableImpl
	EditableImpl
}

func ToSpinButton(objlike gobject.ObjectLike) *SpinButton {
	c := objlike.InheritedFromGObject()
	if c == nil {
		return nil
	}
	t := (*SpinButton)(nil).GetStaticType()
	obj := gobject.ObjectGrabIfType(unsafe.Pointer(c), t)
	if obj != nil {
		return (*SpinButton)(obj)
	}
	panic("cannot cast to SpinButton")
}

func (this0 *SpinButton) InheritedFromGtkSpinButton() *C.GtkSpinButton {
	if this0 == nil {
		return nil
	}
	return (*C.GtkSpinButton)(this0.C)
}

func (this0 *SpinButton) GetStaticType() gobject.Type {
	return gobject.Type(C.gtk_spin_button_get_type())
}

func SpinButtonGetType() gobject.Type {
	return (*SpinButton)(nil).GetStaticType()
}
func NewSpinButton(adjustment0 AdjustmentLike, climb_rate0 float64, digits0 int) *SpinButton {
	var adjustment1 *C.GtkAdjustment
	var climb_rate1 C.double
	var digits1 C.uint32_t
	if adjustment0 != nil {
		adjustment1 = adjustment0.InheritedFromGtkAdjustment()
	}
	climb_rate1 = C.double(climb_rate0)
	digits1 = C.uint32_t(digits0)
	ret1 := C.gtk_spin_button_new(adjustment1, climb_rate1, digits1)
	var ret2 *SpinButton
	ret2 = (*SpinButton)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
func NewSpinButtonWithRange(min0 float64, max0 float64, step0 float64) *SpinButton {
	var min1 C.double
	var max1 C.double
	var step1 C.double
	min1 = C.double(min0)
	max1 = C.double(max0)
	step1 = C.double(step0)
	ret1 := C.gtk_spin_button_new_with_range(min1, max1, step1)
	var ret2 *SpinButton
	ret2 = (*SpinButton)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
func (this0 *SpinButton) Configure(adjustment0 AdjustmentLike, climb_rate0 float64, digits0 int) {
	var this1 *C.GtkSpinButton
	var adjustment1 *C.GtkAdjustment
	var climb_rate1 C.double
	var digits1 C.uint32_t
	if this0 != nil {
		this1 = this0.InheritedFromGtkSpinButton()
	}
	if adjustment0 != nil {
		adjustment1 = adjustment0.InheritedFromGtkAdjustment()
	}
	climb_rate1 = C.double(climb_rate0)
	digits1 = C.uint32_t(digits0)
	C.gtk_spin_button_configure(this1, adjustment1, climb_rate1, digits1)
}
func (this0 *SpinButton) GetAdjustment() *Adjustment {
	var this1 *C.GtkSpinButton
	if this0 != nil {
		this1 = this0.InheritedFromGtkSpinButton()
	}
	ret1 := C.gtk_spin_button_get_adjustment(this1)
	var ret2 *Adjustment
	ret2 = (*Adjustment)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
func (this0 *SpinButton) GetDigits() int {
	var this1 *C.GtkSpinButton
	if this0 != nil {
		this1 = this0.InheritedFromGtkSpinButton()
	}
	ret1 := C.gtk_spin_button_get_digits(this1)
	var ret2 int
	ret2 = int(ret1)
	return ret2
}
func (this0 *SpinButton) GetIncrements() (float64, float64) {
	var this1 *C.GtkSpinButton
	var step1 C.double
	var page1 C.double
	if this0 != nil {
		this1 = this0.InheritedFromGtkSpinButton()
	}
	C.gtk_spin_button_get_increments(this1, &step1, &page1)
	var step2 float64
	var page2 float64
	step2 = float64(step1)
	page2 = float64(page1)
	return step2, page2
}
func (this0 *SpinButton) GetNumeric() bool {
	var this1 *C.GtkSpinButton
	if this0 != nil {
		this1 = this0.InheritedFromGtkSpinButton()
	}
	ret1 := C.gtk_spin_button_get_numeric(this1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *SpinButton) GetRange() (float64, float64) {
	var this1 *C.GtkSpinButton
	var min1 C.double
	var max1 C.double
	if this0 != nil {
		this1 = this0.InheritedFromGtkSpinButton()
	}
	C.gtk_spin_button_get_range(this1, &min1, &max1)
	var min2 float64
	var max2 float64
	min2 = float64(min1)
	max2 = float64(max1)
	return min2, max2
}
func (this0 *SpinButton) GetSnapToTicks() bool {
	var this1 *C.GtkSpinButton
	if this0 != nil {
		this1 = this0.InheritedFromGtkSpinButton()
	}
	ret1 := C.gtk_spin_button_get_snap_to_ticks(this1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *SpinButton) GetUpdatePolicy() SpinButtonUpdatePolicy {
	var this1 *C.GtkSpinButton
	if this0 != nil {
		this1 = this0.InheritedFromGtkSpinButton()
	}
	ret1 := C.gtk_spin_button_get_update_policy(this1)
	var ret2 SpinButtonUpdatePolicy
	ret2 = SpinButtonUpdatePolicy(ret1)
	return ret2
}
func (this0 *SpinButton) GetValue() float64 {
	var this1 *C.GtkSpinButton
	if this0 != nil {
		this1 = this0.InheritedFromGtkSpinButton()
	}
	ret1 := C.gtk_spin_button_get_value(this1)
	var ret2 float64
	ret2 = float64(ret1)
	return ret2
}
func (this0 *SpinButton) GetValueAsInt() int {
	var this1 *C.GtkSpinButton
	if this0 != nil {
		this1 = this0.InheritedFromGtkSpinButton()
	}
	ret1 := C.gtk_spin_button_get_value_as_int(this1)
	var ret2 int
	ret2 = int(ret1)
	return ret2
}
func (this0 *SpinButton) GetWrap() bool {
	var this1 *C.GtkSpinButton
	if this0 != nil {
		this1 = this0.InheritedFromGtkSpinButton()
	}
	ret1 := C.gtk_spin_button_get_wrap(this1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *SpinButton) SetAdjustment(adjustment0 AdjustmentLike) {
	var this1 *C.GtkSpinButton
	var adjustment1 *C.GtkAdjustment
	if this0 != nil {
		this1 = this0.InheritedFromGtkSpinButton()
	}
	if adjustment0 != nil {
		adjustment1 = adjustment0.InheritedFromGtkAdjustment()
	}
	C.gtk_spin_button_set_adjustment(this1, adjustment1)
}
func (this0 *SpinButton) SetDigits(digits0 int) {
	var this1 *C.GtkSpinButton
	var digits1 C.uint32_t
	if this0 != nil {
		this1 = this0.InheritedFromGtkSpinButton()
	}
	digits1 = C.uint32_t(digits0)
	C.gtk_spin_button_set_digits(this1, digits1)
}
func (this0 *SpinButton) SetIncrements(step0 float64, page0 float64) {
	var this1 *C.GtkSpinButton
	var step1 C.double
	var page1 C.double
	if this0 != nil {
		this1 = this0.InheritedFromGtkSpinButton()
	}
	step1 = C.double(step0)
	page1 = C.double(page0)
	C.gtk_spin_button_set_increments(this1, step1, page1)
}
func (this0 *SpinButton) SetNumeric(numeric0 bool) {
	var this1 *C.GtkSpinButton
	var numeric1 C.int
	if this0 != nil {
		this1 = this0.InheritedFromGtkSpinButton()
	}
	numeric1 = _GoBoolToCBool(numeric0)
	C.gtk_spin_button_set_numeric(this1, numeric1)
}
func (this0 *SpinButton) SetRange(min0 float64, max0 float64) {
	var this1 *C.GtkSpinButton
	var min1 C.double
	var max1 C.double
	if this0 != nil {
		this1 = this0.InheritedFromGtkSpinButton()
	}
	min1 = C.double(min0)
	max1 = C.double(max0)
	C.gtk_spin_button_set_range(this1, min1, max1)
}
func (this0 *SpinButton) SetSnapToTicks(snap_to_ticks0 bool) {
	var this1 *C.GtkSpinButton
	var snap_to_ticks1 C.int
	if this0 != nil {
		this1 = this0.InheritedFromGtkSpinButton()
	}
	snap_to_ticks1 = _GoBoolToCBool(snap_to_ticks0)
	C.gtk_spin_button_set_snap_to_ticks(this1, snap_to_ticks1)
}
func (this0 *SpinButton) SetUpdatePolicy(policy0 SpinButtonUpdatePolicy) {
	var this1 *C.GtkSpinButton
	var policy1 C.GtkSpinButtonUpdatePolicy
	if this0 != nil {
		this1 = this0.InheritedFromGtkSpinButton()
	}
	policy1 = C.GtkSpinButtonUpdatePolicy(policy0)
	C.gtk_spin_button_set_update_policy(this1, policy1)
}
func (this0 *SpinButton) SetValue(value0 float64) {
	var this1 *C.GtkSpinButton
	var value1 C.double
	if this0 != nil {
		this1 = this0.InheritedFromGtkSpinButton()
	}
	value1 = C.double(value0)
	C.gtk_spin_button_set_value(this1, value1)
}
func (this0 *SpinButton) SetWrap(wrap0 bool) {
	var this1 *C.GtkSpinButton
	var wrap1 C.int
	if this0 != nil {
		this1 = this0.InheritedFromGtkSpinButton()
	}
	wrap1 = _GoBoolToCBool(wrap0)
	C.gtk_spin_button_set_wrap(this1, wrap1)
}
func (this0 *SpinButton) Spin(direction0 SpinType, increment0 float64) {
	var this1 *C.GtkSpinButton
	var direction1 C.GtkSpinType
	var increment1 C.double
	if this0 != nil {
		this1 = this0.InheritedFromGtkSpinButton()
	}
	direction1 = C.GtkSpinType(direction0)
	increment1 = C.double(increment0)
	C.gtk_spin_button_spin(this1, direction1, increment1)
}
func (this0 *SpinButton) Update() {
	var this1 *C.GtkSpinButton
	if this0 != nil {
		this1 = this0.InheritedFromGtkSpinButton()
	}
	C.gtk_spin_button_update(this1)
}
type SpinButtonUpdatePolicy C.uint32_t
const (
	SpinButtonUpdatePolicyAlways SpinButtonUpdatePolicy = 0
	SpinButtonUpdatePolicyIfValid SpinButtonUpdatePolicy = 1
)
type SpinType C.uint32_t
const (
	SpinTypeStepForward SpinType = 0
	SpinTypeStepBackward SpinType = 1
	SpinTypePageForward SpinType = 2
	SpinTypePageBackward SpinType = 3
	SpinTypeHome SpinType = 4
	SpinTypeEnd SpinType = 5
	SpinTypeUserDefined SpinType = 6
)
type SpinnerLike interface {
	WidgetLike
	InheritedFromGtkSpinner() *C.GtkSpinner
}

type Spinner struct {
	Widget
	atk.ImplementorIfaceImpl
	BuildableImpl
}

func ToSpinner(objlike gobject.ObjectLike) *Spinner {
	c := objlike.InheritedFromGObject()
	if c == nil {
		return nil
	}
	t := (*Spinner)(nil).GetStaticType()
	obj := gobject.ObjectGrabIfType(unsafe.Pointer(c), t)
	if obj != nil {
		return (*Spinner)(obj)
	}
	panic("cannot cast to Spinner")
}

func (this0 *Spinner) InheritedFromGtkSpinner() *C.GtkSpinner {
	if this0 == nil {
		return nil
	}
	return (*C.GtkSpinner)(this0.C)
}

func (this0 *Spinner) GetStaticType() gobject.Type {
	return gobject.Type(C.gtk_spinner_get_type())
}

func SpinnerGetType() gobject.Type {
	return (*Spinner)(nil).GetStaticType()
}
func NewSpinner() *Spinner {
	ret1 := C.gtk_spinner_new()
	var ret2 *Spinner
	ret2 = (*Spinner)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
func (this0 *Spinner) Start() {
	var this1 *C.GtkSpinner
	if this0 != nil {
		this1 = this0.InheritedFromGtkSpinner()
	}
	C.gtk_spinner_start(this1)
}
func (this0 *Spinner) Stop() {
	var this1 *C.GtkSpinner
	if this0 != nil {
		this1 = this0.InheritedFromGtkSpinner()
	}
	C.gtk_spinner_stop(this1)
}
type StateFlags C.uint32_t
const (
	StateFlagsNormal StateFlags = 0
	StateFlagsActive StateFlags = 1
	StateFlagsPrelight StateFlags = 2
	StateFlagsSelected StateFlags = 4
	StateFlagsInsensitive StateFlags = 8
	StateFlagsInconsistent StateFlags = 16
	StateFlagsFocused StateFlags = 32
)
type StateType C.uint32_t
const (
	StateTypeNormal StateType = 0
	StateTypeActive StateType = 1
	StateTypePrelight StateType = 2
	StateTypeSelected StateType = 3
	StateTypeInsensitive StateType = 4
	StateTypeInconsistent StateType = 5
	StateTypeFocused StateType = 6
)
type StatusIconLike interface {
	gobject.ObjectLike
	InheritedFromGtkStatusIcon() *C.GtkStatusIcon
}

type StatusIcon struct {
	gobject.Object
	
}

func ToStatusIcon(objlike gobject.ObjectLike) *StatusIcon {
	c := objlike.InheritedFromGObject()
	if c == nil {
		return nil
	}
	t := (*StatusIcon)(nil).GetStaticType()
	obj := gobject.ObjectGrabIfType(unsafe.Pointer(c), t)
	if obj != nil {
		return (*StatusIcon)(obj)
	}
	panic("cannot cast to StatusIcon")
}

func (this0 *StatusIcon) InheritedFromGtkStatusIcon() *C.GtkStatusIcon {
	if this0 == nil {
		return nil
	}
	return (*C.GtkStatusIcon)(this0.C)
}

func (this0 *StatusIcon) GetStaticType() gobject.Type {
	return gobject.Type(C.gtk_status_icon_get_type())
}

func StatusIconGetType() gobject.Type {
	return (*StatusIcon)(nil).GetStaticType()
}
func NewStatusIcon() *StatusIcon {
	ret1 := C.gtk_status_icon_new()
	var ret2 *StatusIcon
	ret2 = (*StatusIcon)(gobject.ObjectWrap(unsafe.Pointer(ret1), false))
	return ret2
}
func NewStatusIconFromFile(filename0 string) *StatusIcon {
	var filename1 *C.char
	filename1 = _GoStringToGString(filename0)
	defer C.free(unsafe.Pointer(filename1))
	ret1 := C.gtk_status_icon_new_from_file(filename1)
	var ret2 *StatusIcon
	ret2 = (*StatusIcon)(gobject.ObjectWrap(unsafe.Pointer(ret1), false))
	return ret2
}
func NewStatusIconFromGIcon(icon0 gio.IconLike) *StatusIcon {
	var icon1 *C.GIcon
	if icon0 != nil {
		icon1 = icon0.ImplementsGIcon()}
	ret1 := C.gtk_status_icon_new_from_gicon(icon1)
	var ret2 *StatusIcon
	ret2 = (*StatusIcon)(gobject.ObjectWrap(unsafe.Pointer(ret1), false))
	return ret2
}
func NewStatusIconFromIconName(icon_name0 string) *StatusIcon {
	var icon_name1 *C.char
	icon_name1 = _GoStringToGString(icon_name0)
	defer C.free(unsafe.Pointer(icon_name1))
	ret1 := C.gtk_status_icon_new_from_icon_name(icon_name1)
	var ret2 *StatusIcon
	ret2 = (*StatusIcon)(gobject.ObjectWrap(unsafe.Pointer(ret1), false))
	return ret2
}
func NewStatusIconFromPixbuf(pixbuf0 gdkpixbuf.PixbufLike) *StatusIcon {
	var pixbuf1 *C.GdkPixbuf
	if pixbuf0 != nil {
		pixbuf1 = pixbuf0.InheritedFromGdkPixbuf()
	}
	ret1 := C.gtk_status_icon_new_from_pixbuf(pixbuf1)
	var ret2 *StatusIcon
	ret2 = (*StatusIcon)(gobject.ObjectWrap(unsafe.Pointer(ret1), false))
	return ret2
}
func NewStatusIconFromStock(stock_id0 string) *StatusIcon {
	var stock_id1 *C.char
	stock_id1 = _GoStringToGString(stock_id0)
	defer C.free(unsafe.Pointer(stock_id1))
	ret1 := C.gtk_status_icon_new_from_stock(stock_id1)
	var ret2 *StatusIcon
	ret2 = (*StatusIcon)(gobject.ObjectWrap(unsafe.Pointer(ret1), false))
	return ret2
}
func StatusIconPositionMenu(menu0 MenuLike, user_data0 StatusIconLike) (int, int, bool) {
	var menu1 *C.GtkMenu
	var user_data1 *C.GtkStatusIcon
	var x1 C.int32_t
	var y1 C.int32_t
	var push_in1 C.int
	if menu0 != nil {
		menu1 = menu0.InheritedFromGtkMenu()
	}
	if user_data0 != nil {
		user_data1 = user_data0.InheritedFromGtkStatusIcon()
	}
	C.gtk_status_icon_position_menu(menu1, &x1, &y1, &push_in1, user_data1)
	var x2 int
	var y2 int
	var push_in2 bool
	x2 = int(x1)
	y2 = int(y1)
	push_in2 = push_in1 != 0
	return x2, y2, push_in2
}
func (this0 *StatusIcon) GetGeometry() (*gdk.Screen, cairo.RectangleInt, Orientation, bool) {
	var this1 *C.GtkStatusIcon
	var screen1 *C.GdkScreen
	var area1 C.cairoRectangleInt
	var orientation1 C.GtkOrientation
	if this0 != nil {
		this1 = this0.InheritedFromGtkStatusIcon()
	}
	ret1 := C.gtk_status_icon_get_geometry(this1, &screen1, &area1, &orientation1)
	var screen2 *gdk.Screen
	var area2 cairo.RectangleInt
	var orientation2 Orientation
	var ret2 bool
	screen2 = (*gdk.Screen)(gobject.ObjectWrap(unsafe.Pointer(screen1), true))
	area2 = *(*cairo.RectangleInt)(unsafe.Pointer(&area1))
	orientation2 = Orientation(orientation1)
	ret2 = ret1 != 0
	return screen2, area2, orientation2, ret2
}
func (this0 *StatusIcon) GetGIcon() *gio.Icon {
	var this1 *C.GtkStatusIcon
	if this0 != nil {
		this1 = this0.InheritedFromGtkStatusIcon()
	}
	ret1 := C.gtk_status_icon_get_gicon(this1)
	var ret2 *gio.Icon
	ret2 = (*gio.Icon)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
func (this0 *StatusIcon) GetHasTooltip() bool {
	var this1 *C.GtkStatusIcon
	if this0 != nil {
		this1 = this0.InheritedFromGtkStatusIcon()
	}
	ret1 := C.gtk_status_icon_get_has_tooltip(this1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *StatusIcon) GetIconName() string {
	var this1 *C.GtkStatusIcon
	if this0 != nil {
		this1 = this0.InheritedFromGtkStatusIcon()
	}
	ret1 := C.gtk_status_icon_get_icon_name(this1)
	var ret2 string
	ret2 = C.GoString(ret1)
	return ret2
}
func (this0 *StatusIcon) GetPixbuf() *gdkpixbuf.Pixbuf {
	var this1 *C.GtkStatusIcon
	if this0 != nil {
		this1 = this0.InheritedFromGtkStatusIcon()
	}
	ret1 := C.gtk_status_icon_get_pixbuf(this1)
	var ret2 *gdkpixbuf.Pixbuf
	ret2 = (*gdkpixbuf.Pixbuf)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
func (this0 *StatusIcon) GetScreen() *gdk.Screen {
	var this1 *C.GtkStatusIcon
	if this0 != nil {
		this1 = this0.InheritedFromGtkStatusIcon()
	}
	ret1 := C.gtk_status_icon_get_screen(this1)
	var ret2 *gdk.Screen
	ret2 = (*gdk.Screen)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
func (this0 *StatusIcon) GetSize() int {
	var this1 *C.GtkStatusIcon
	if this0 != nil {
		this1 = this0.InheritedFromGtkStatusIcon()
	}
	ret1 := C.gtk_status_icon_get_size(this1)
	var ret2 int
	ret2 = int(ret1)
	return ret2
}
func (this0 *StatusIcon) GetStock() string {
	var this1 *C.GtkStatusIcon
	if this0 != nil {
		this1 = this0.InheritedFromGtkStatusIcon()
	}
	ret1 := C.gtk_status_icon_get_stock(this1)
	var ret2 string
	ret2 = C.GoString(ret1)
	return ret2
}
func (this0 *StatusIcon) GetStorageType() ImageType {
	var this1 *C.GtkStatusIcon
	if this0 != nil {
		this1 = this0.InheritedFromGtkStatusIcon()
	}
	ret1 := C.gtk_status_icon_get_storage_type(this1)
	var ret2 ImageType
	ret2 = ImageType(ret1)
	return ret2
}
func (this0 *StatusIcon) GetTitle() string {
	var this1 *C.GtkStatusIcon
	if this0 != nil {
		this1 = this0.InheritedFromGtkStatusIcon()
	}
	ret1 := C.gtk_status_icon_get_title(this1)
	var ret2 string
	ret2 = C.GoString(ret1)
	return ret2
}
func (this0 *StatusIcon) GetTooltipMarkup() string {
	var this1 *C.GtkStatusIcon
	if this0 != nil {
		this1 = this0.InheritedFromGtkStatusIcon()
	}
	ret1 := C.gtk_status_icon_get_tooltip_markup(this1)
	var ret2 string
	ret2 = C.GoString(ret1)
	C.g_free(unsafe.Pointer(ret1))
	return ret2
}
func (this0 *StatusIcon) GetTooltipText() string {
	var this1 *C.GtkStatusIcon
	if this0 != nil {
		this1 = this0.InheritedFromGtkStatusIcon()
	}
	ret1 := C.gtk_status_icon_get_tooltip_text(this1)
	var ret2 string
	ret2 = C.GoString(ret1)
	C.g_free(unsafe.Pointer(ret1))
	return ret2
}
func (this0 *StatusIcon) GetVisible() bool {
	var this1 *C.GtkStatusIcon
	if this0 != nil {
		this1 = this0.InheritedFromGtkStatusIcon()
	}
	ret1 := C.gtk_status_icon_get_visible(this1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *StatusIcon) GetX11WindowID() int {
	var this1 *C.GtkStatusIcon
	if this0 != nil {
		this1 = this0.InheritedFromGtkStatusIcon()
	}
	ret1 := C.gtk_status_icon_get_x11_window_id(this1)
	var ret2 int
	ret2 = int(ret1)
	return ret2
}
func (this0 *StatusIcon) IsEmbedded() bool {
	var this1 *C.GtkStatusIcon
	if this0 != nil {
		this1 = this0.InheritedFromGtkStatusIcon()
	}
	ret1 := C.gtk_status_icon_is_embedded(this1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *StatusIcon) SetFromFile(filename0 string) {
	var this1 *C.GtkStatusIcon
	var filename1 *C.char
	if this0 != nil {
		this1 = this0.InheritedFromGtkStatusIcon()
	}
	filename1 = _GoStringToGString(filename0)
	defer C.free(unsafe.Pointer(filename1))
	C.gtk_status_icon_set_from_file(this1, filename1)
}
func (this0 *StatusIcon) SetFromGIcon(icon0 gio.IconLike) {
	var this1 *C.GtkStatusIcon
	var icon1 *C.GIcon
	if this0 != nil {
		this1 = this0.InheritedFromGtkStatusIcon()
	}
	if icon0 != nil {
		icon1 = icon0.ImplementsGIcon()}
	C.gtk_status_icon_set_from_gicon(this1, icon1)
}
func (this0 *StatusIcon) SetFromIconName(icon_name0 string) {
	var this1 *C.GtkStatusIcon
	var icon_name1 *C.char
	if this0 != nil {
		this1 = this0.InheritedFromGtkStatusIcon()
	}
	icon_name1 = _GoStringToGString(icon_name0)
	defer C.free(unsafe.Pointer(icon_name1))
	C.gtk_status_icon_set_from_icon_name(this1, icon_name1)
}
func (this0 *StatusIcon) SetFromPixbuf(pixbuf0 gdkpixbuf.PixbufLike) {
	var this1 *C.GtkStatusIcon
	var pixbuf1 *C.GdkPixbuf
	if this0 != nil {
		this1 = this0.InheritedFromGtkStatusIcon()
	}
	if pixbuf0 != nil {
		pixbuf1 = pixbuf0.InheritedFromGdkPixbuf()
	}
	C.gtk_status_icon_set_from_pixbuf(this1, pixbuf1)
}
func (this0 *StatusIcon) SetFromStock(stock_id0 string) {
	var this1 *C.GtkStatusIcon
	var stock_id1 *C.char
	if this0 != nil {
		this1 = this0.InheritedFromGtkStatusIcon()
	}
	stock_id1 = _GoStringToGString(stock_id0)
	defer C.free(unsafe.Pointer(stock_id1))
	C.gtk_status_icon_set_from_stock(this1, stock_id1)
}
func (this0 *StatusIcon) SetHasTooltip(has_tooltip0 bool) {
	var this1 *C.GtkStatusIcon
	var has_tooltip1 C.int
	if this0 != nil {
		this1 = this0.InheritedFromGtkStatusIcon()
	}
	has_tooltip1 = _GoBoolToCBool(has_tooltip0)
	C.gtk_status_icon_set_has_tooltip(this1, has_tooltip1)
}
func (this0 *StatusIcon) SetName(name0 string) {
	var this1 *C.GtkStatusIcon
	var name1 *C.char
	if this0 != nil {
		this1 = this0.InheritedFromGtkStatusIcon()
	}
	name1 = _GoStringToGString(name0)
	defer C.free(unsafe.Pointer(name1))
	C.gtk_status_icon_set_name(this1, name1)
}
func (this0 *StatusIcon) SetScreen(screen0 gdk.ScreenLike) {
	var this1 *C.GtkStatusIcon
	var screen1 *C.GdkScreen
	if this0 != nil {
		this1 = this0.InheritedFromGtkStatusIcon()
	}
	if screen0 != nil {
		screen1 = screen0.InheritedFromGdkScreen()
	}
	C.gtk_status_icon_set_screen(this1, screen1)
}
func (this0 *StatusIcon) SetTitle(title0 string) {
	var this1 *C.GtkStatusIcon
	var title1 *C.char
	if this0 != nil {
		this1 = this0.InheritedFromGtkStatusIcon()
	}
	title1 = _GoStringToGString(title0)
	defer C.free(unsafe.Pointer(title1))
	C.gtk_status_icon_set_title(this1, title1)
}
func (this0 *StatusIcon) SetTooltipMarkup(markup0 string) {
	var this1 *C.GtkStatusIcon
	var markup1 *C.char
	if this0 != nil {
		this1 = this0.InheritedFromGtkStatusIcon()
	}
	markup1 = _GoStringToGString(markup0)
	defer C.free(unsafe.Pointer(markup1))
	C.gtk_status_icon_set_tooltip_markup(this1, markup1)
}
func (this0 *StatusIcon) SetTooltipText(text0 string) {
	var this1 *C.GtkStatusIcon
	var text1 *C.char
	if this0 != nil {
		this1 = this0.InheritedFromGtkStatusIcon()
	}
	text1 = _GoStringToGString(text0)
	defer C.free(unsafe.Pointer(text1))
	C.gtk_status_icon_set_tooltip_text(this1, text1)
}
func (this0 *StatusIcon) SetVisible(visible0 bool) {
	var this1 *C.GtkStatusIcon
	var visible1 C.int
	if this0 != nil {
		this1 = this0.InheritedFromGtkStatusIcon()
	}
	visible1 = _GoBoolToCBool(visible0)
	C.gtk_status_icon_set_visible(this1, visible1)
}
type StatusbarLike interface {
	BoxLike
	InheritedFromGtkStatusbar() *C.GtkStatusbar
}

type Statusbar struct {
	Box
	atk.ImplementorIfaceImpl
	BuildableImpl
	OrientableImpl
}

func ToStatusbar(objlike gobject.ObjectLike) *Statusbar {
	c := objlike.InheritedFromGObject()
	if c == nil {
		return nil
	}
	t := (*Statusbar)(nil).GetStaticType()
	obj := gobject.ObjectGrabIfType(unsafe.Pointer(c), t)
	if obj != nil {
		return (*Statusbar)(obj)
	}
	panic("cannot cast to Statusbar")
}

func (this0 *Statusbar) InheritedFromGtkStatusbar() *C.GtkStatusbar {
	if this0 == nil {
		return nil
	}
	return (*C.GtkStatusbar)(this0.C)
}

func (this0 *Statusbar) GetStaticType() gobject.Type {
	return gobject.Type(C.gtk_statusbar_get_type())
}

func StatusbarGetType() gobject.Type {
	return (*Statusbar)(nil).GetStaticType()
}
func NewStatusbar() *Statusbar {
	ret1 := C.gtk_statusbar_new()
	var ret2 *Statusbar
	ret2 = (*Statusbar)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
func (this0 *Statusbar) GetContextID(context_description0 string) int {
	var this1 *C.GtkStatusbar
	var context_description1 *C.char
	if this0 != nil {
		this1 = this0.InheritedFromGtkStatusbar()
	}
	context_description1 = _GoStringToGString(context_description0)
	defer C.free(unsafe.Pointer(context_description1))
	ret1 := C.gtk_statusbar_get_context_id(this1, context_description1)
	var ret2 int
	ret2 = int(ret1)
	return ret2
}
func (this0 *Statusbar) GetMessageArea() *Widget {
	var this1 *C.GtkStatusbar
	if this0 != nil {
		this1 = this0.InheritedFromGtkStatusbar()
	}
	ret1 := C.gtk_statusbar_get_message_area(this1)
	var ret2 *Widget
	ret2 = (*Widget)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
func (this0 *Statusbar) Pop(context_id0 int) {
	var this1 *C.GtkStatusbar
	var context_id1 C.uint32_t
	if this0 != nil {
		this1 = this0.InheritedFromGtkStatusbar()
	}
	context_id1 = C.uint32_t(context_id0)
	C.gtk_statusbar_pop(this1, context_id1)
}
func (this0 *Statusbar) Push(context_id0 int, text0 string) int {
	var this1 *C.GtkStatusbar
	var context_id1 C.uint32_t
	var text1 *C.char
	if this0 != nil {
		this1 = this0.InheritedFromGtkStatusbar()
	}
	context_id1 = C.uint32_t(context_id0)
	text1 = _GoStringToGString(text0)
	defer C.free(unsafe.Pointer(text1))
	ret1 := C.gtk_statusbar_push(this1, context_id1, text1)
	var ret2 int
	ret2 = int(ret1)
	return ret2
}
func (this0 *Statusbar) Remove(context_id0 int, message_id0 int) {
	var this1 *C.GtkStatusbar
	var context_id1 C.uint32_t
	var message_id1 C.uint32_t
	if this0 != nil {
		this1 = this0.InheritedFromGtkStatusbar()
	}
	context_id1 = C.uint32_t(context_id0)
	message_id1 = C.uint32_t(message_id0)
	C.gtk_statusbar_remove(this1, context_id1, message_id1)
}
func (this0 *Statusbar) RemoveAll(context_id0 int) {
	var this1 *C.GtkStatusbar
	var context_id1 C.uint32_t
	if this0 != nil {
		this1 = this0.InheritedFromGtkStatusbar()
	}
	context_id1 = C.uint32_t(context_id0)
	C.gtk_statusbar_remove_all(this1, context_id1)
}
// blacklisted: StockItem (struct)
type StyleLike interface {
	gobject.ObjectLike
	InheritedFromGtkStyle() *C.GtkStyle
}

type Style struct {
	gobject.Object
	
}

func ToStyle(objlike gobject.ObjectLike) *Style {
	c := objlike.InheritedFromGObject()
	if c == nil {
		return nil
	}
	t := (*Style)(nil).GetStaticType()
	obj := gobject.ObjectGrabIfType(unsafe.Pointer(c), t)
	if obj != nil {
		return (*Style)(obj)
	}
	panic("cannot cast to Style")
}

func (this0 *Style) InheritedFromGtkStyle() *C.GtkStyle {
	if this0 == nil {
		return nil
	}
	return (*C.GtkStyle)(this0.C)
}

func (this0 *Style) GetStaticType() gobject.Type {
	return gobject.Type(C.gtk_style_get_type())
}

func StyleGetType() gobject.Type {
	return (*Style)(nil).GetStaticType()
}
func NewStyle() *Style {
	ret1 := C.gtk_style_new()
	var ret2 *Style
	ret2 = (*Style)(gobject.ObjectWrap(unsafe.Pointer(ret1), false))
	return ret2
}
func (this0 *Style) ApplyDefaultBackground(cr0 *cairo.Context, window0 gdk.WindowLike, state_type0 StateType, x0 int, y0 int, width0 int, height0 int) {
	var this1 *C.GtkStyle
	var cr1 *C.cairoContext
	var window1 *C.GdkWindow
	var state_type1 C.GtkStateType
	var x1 C.int32_t
	var y1 C.int32_t
	var width1 C.int32_t
	var height1 C.int32_t
	if this0 != nil {
		this1 = this0.InheritedFromGtkStyle()
	}
	if cr0 != nil {
		cr1 = (*C.cairoContext)(cr0.C)
	}
	if window0 != nil {
		window1 = window0.InheritedFromGdkWindow()
	}
	state_type1 = C.GtkStateType(state_type0)
	x1 = C.int32_t(x0)
	y1 = C.int32_t(y0)
	width1 = C.int32_t(width0)
	height1 = C.int32_t(height0)
	C.gtk_style_apply_default_background(this1, cr1, window1, state_type1, x1, y1, width1, height1)
}
func (this0 *Style) Copy() *Style {
	var this1 *C.GtkStyle
	if this0 != nil {
		this1 = this0.InheritedFromGtkStyle()
	}
	ret1 := C.gtk_style_copy(this1)
	var ret2 *Style
	ret2 = (*Style)(gobject.ObjectWrap(unsafe.Pointer(ret1), false))
	return ret2
}
func (this0 *Style) Detach() {
	var this1 *C.GtkStyle
	if this0 != nil {
		this1 = this0.InheritedFromGtkStyle()
	}
	C.gtk_style_detach(this1)
}
func (this0 *Style) GetStyleProperty(widget_type0 gobject.Type, property_name0 string, value0 *gobject.Value) {
	var this1 *C.GtkStyle
	var widget_type1 C.GType
	var property_name1 *C.char
	var value1 *C.GValue
	if this0 != nil {
		this1 = this0.InheritedFromGtkStyle()
	}
	widget_type1 = C.GType(widget_type0)
	property_name1 = _GoStringToGString(property_name0)
	defer C.free(unsafe.Pointer(property_name1))
	value1 = (*C.GValue)(unsafe.Pointer(value0))
	C.gtk_style_get_style_property(this1, widget_type1, property_name1, value1)
}
func (this0 *Style) HasContext() bool {
	var this1 *C.GtkStyle
	if this0 != nil {
		this1 = this0.InheritedFromGtkStyle()
	}
	ret1 := C.gtk_style_has_context(this1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *Style) LookupColor(color_name0 string) (gdk.Color, bool) {
	var this1 *C.GtkStyle
	var color_name1 *C.char
	var color1 C.GdkColor
	if this0 != nil {
		this1 = this0.InheritedFromGtkStyle()
	}
	color_name1 = _GoStringToGString(color_name0)
	defer C.free(unsafe.Pointer(color_name1))
	ret1 := C.gtk_style_lookup_color(this1, color_name1, &color1)
	var color2 gdk.Color
	var ret2 bool
	color2 = *(*gdk.Color)(unsafe.Pointer(&color1))
	ret2 = ret1 != 0
	return color2, ret2
}
func (this0 *Style) LookupIconSet(stock_id0 string) *IconSet {
	var this1 *C.GtkStyle
	var stock_id1 *C.char
	if this0 != nil {
		this1 = this0.InheritedFromGtkStyle()
	}
	stock_id1 = _GoStringToGString(stock_id0)
	defer C.free(unsafe.Pointer(stock_id1))
	ret1 := C.gtk_style_lookup_icon_set(this1, stock_id1)
	var ret2 *IconSet
	ret2 = (*IconSet)(unsafe.Pointer(ret1))
	return ret2
}
func (this0 *Style) RenderIcon(source0 *IconSource, direction0 TextDirection, state0 StateType, size0 int, widget0 WidgetLike, detail0 string) *gdkpixbuf.Pixbuf {
	var this1 *C.GtkStyle
	var source1 *C.GtkIconSource
	var direction1 C.GtkTextDirection
	var state1 C.GtkStateType
	var size1 C.int32_t
	var widget1 *C.GtkWidget
	var detail1 *C.char
	if this0 != nil {
		this1 = this0.InheritedFromGtkStyle()
	}
	source1 = (*C.GtkIconSource)(unsafe.Pointer(source0))
	direction1 = C.GtkTextDirection(direction0)
	state1 = C.GtkStateType(state0)
	size1 = C.int32_t(size0)
	if widget0 != nil {
		widget1 = widget0.InheritedFromGtkWidget()
	}
	detail1 = _GoStringToGString(detail0)
	defer C.free(unsafe.Pointer(detail1))
	ret1 := C.gtk_style_render_icon(this1, source1, direction1, state1, size1, widget1, detail1)
	var ret2 *gdkpixbuf.Pixbuf
	ret2 = (*gdkpixbuf.Pixbuf)(gobject.ObjectWrap(unsafe.Pointer(ret1), false))
	return ret2
}
func (this0 *Style) SetBackground(window0 gdk.WindowLike, state_type0 StateType) {
	var this1 *C.GtkStyle
	var window1 *C.GdkWindow
	var state_type1 C.GtkStateType
	if this0 != nil {
		this1 = this0.InheritedFromGtkStyle()
	}
	if window0 != nil {
		window1 = window0.InheritedFromGdkWindow()
	}
	state_type1 = C.GtkStateType(state_type0)
	C.gtk_style_set_background(this1, window1, state_type1)
}
type StyleContextLike interface {
	gobject.ObjectLike
	InheritedFromGtkStyleContext() *C.GtkStyleContext
}

type StyleContext struct {
	gobject.Object
	
}

func ToStyleContext(objlike gobject.ObjectLike) *StyleContext {
	c := objlike.InheritedFromGObject()
	if c == nil {
		return nil
	}
	t := (*StyleContext)(nil).GetStaticType()
	obj := gobject.ObjectGrabIfType(unsafe.Pointer(c), t)
	if obj != nil {
		return (*StyleContext)(obj)
	}
	panic("cannot cast to StyleContext")
}

func (this0 *StyleContext) InheritedFromGtkStyleContext() *C.GtkStyleContext {
	if this0 == nil {
		return nil
	}
	return (*C.GtkStyleContext)(this0.C)
}

func (this0 *StyleContext) GetStaticType() gobject.Type {
	return gobject.Type(C.gtk_style_context_get_type())
}

func StyleContextGetType() gobject.Type {
	return (*StyleContext)(nil).GetStaticType()
}
func NewStyleContext() *StyleContext {
	ret1 := C.gtk_style_context_new()
	var ret2 *StyleContext
	ret2 = (*StyleContext)(gobject.ObjectWrap(unsafe.Pointer(ret1), false))
	return ret2
}
func StyleContextAddProviderForScreen(screen0 gdk.ScreenLike, provider0 StyleProviderLike, priority0 int) {
	var screen1 *C.GdkScreen
	var provider1 *C.GtkStyleProvider
	var priority1 C.uint32_t
	if screen0 != nil {
		screen1 = screen0.InheritedFromGdkScreen()
	}
	if provider0 != nil {
		provider1 = provider0.ImplementsGtkStyleProvider()}
	priority1 = C.uint32_t(priority0)
	C.gtk_style_context_add_provider_for_screen(screen1, provider1, priority1)
}
func StyleContextRemoveProviderForScreen(screen0 gdk.ScreenLike, provider0 StyleProviderLike) {
	var screen1 *C.GdkScreen
	var provider1 *C.GtkStyleProvider
	if screen0 != nil {
		screen1 = screen0.InheritedFromGdkScreen()
	}
	if provider0 != nil {
		provider1 = provider0.ImplementsGtkStyleProvider()}
	C.gtk_style_context_remove_provider_for_screen(screen1, provider1)
}
func StyleContextResetWidgets(screen0 gdk.ScreenLike) {
	var screen1 *C.GdkScreen
	if screen0 != nil {
		screen1 = screen0.InheritedFromGdkScreen()
	}
	C.gtk_style_context_reset_widgets(screen1)
}
func (this0 *StyleContext) AddClass(class_name0 string) {
	var this1 *C.GtkStyleContext
	var class_name1 *C.char
	if this0 != nil {
		this1 = this0.InheritedFromGtkStyleContext()
	}
	class_name1 = _GoStringToGString(class_name0)
	defer C.free(unsafe.Pointer(class_name1))
	C.gtk_style_context_add_class(this1, class_name1)
}
func (this0 *StyleContext) AddProvider(provider0 StyleProviderLike, priority0 int) {
	var this1 *C.GtkStyleContext
	var provider1 *C.GtkStyleProvider
	var priority1 C.uint32_t
	if this0 != nil {
		this1 = this0.InheritedFromGtkStyleContext()
	}
	if provider0 != nil {
		provider1 = provider0.ImplementsGtkStyleProvider()}
	priority1 = C.uint32_t(priority0)
	C.gtk_style_context_add_provider(this1, provider1, priority1)
}
func (this0 *StyleContext) AddRegion(region_name0 string, flags0 RegionFlags) {
	var this1 *C.GtkStyleContext
	var region_name1 *C.char
	var flags1 C.GtkRegionFlags
	if this0 != nil {
		this1 = this0.InheritedFromGtkStyleContext()
	}
	region_name1 = _GoStringToGString(region_name0)
	defer C.free(unsafe.Pointer(region_name1))
	flags1 = C.GtkRegionFlags(flags0)
	C.gtk_style_context_add_region(this1, region_name1, flags1)
}
func (this0 *StyleContext) CancelAnimations(region_id0 unsafe.Pointer) {
	var this1 *C.GtkStyleContext
	var region_id1 unsafe.Pointer
	if this0 != nil {
		this1 = this0.InheritedFromGtkStyleContext()
	}
	region_id1 = unsafe.Pointer(region_id0)
	C.gtk_style_context_cancel_animations(this1, region_id1)
}
func (this0 *StyleContext) GetBackgroundColor(state0 StateFlags) gdk.RGBA {
	var this1 *C.GtkStyleContext
	var state1 C.GtkStateFlags
	var color1 C.GdkRGBA
	if this0 != nil {
		this1 = this0.InheritedFromGtkStyleContext()
	}
	state1 = C.GtkStateFlags(state0)
	C.gtk_style_context_get_background_color(this1, state1, &color1)
	var color2 gdk.RGBA
	color2 = *(*gdk.RGBA)(unsafe.Pointer(&color1))
	return color2
}
func (this0 *StyleContext) GetBorder(state0 StateFlags) Border {
	var this1 *C.GtkStyleContext
	var state1 C.GtkStateFlags
	var border1 C.GtkBorder
	if this0 != nil {
		this1 = this0.InheritedFromGtkStyleContext()
	}
	state1 = C.GtkStateFlags(state0)
	C.gtk_style_context_get_border(this1, state1, &border1)
	var border2 Border
	border2 = *(*Border)(unsafe.Pointer(&border1))
	return border2
}
func (this0 *StyleContext) GetBorderColor(state0 StateFlags) gdk.RGBA {
	var this1 *C.GtkStyleContext
	var state1 C.GtkStateFlags
	var color1 C.GdkRGBA
	if this0 != nil {
		this1 = this0.InheritedFromGtkStyleContext()
	}
	state1 = C.GtkStateFlags(state0)
	C.gtk_style_context_get_border_color(this1, state1, &color1)
	var color2 gdk.RGBA
	color2 = *(*gdk.RGBA)(unsafe.Pointer(&color1))
	return color2
}
func (this0 *StyleContext) GetColor(state0 StateFlags) gdk.RGBA {
	var this1 *C.GtkStyleContext
	var state1 C.GtkStateFlags
	var color1 C.GdkRGBA
	if this0 != nil {
		this1 = this0.InheritedFromGtkStyleContext()
	}
	state1 = C.GtkStateFlags(state0)
	C.gtk_style_context_get_color(this1, state1, &color1)
	var color2 gdk.RGBA
	color2 = *(*gdk.RGBA)(unsafe.Pointer(&color1))
	return color2
}
func (this0 *StyleContext) GetDirection() TextDirection {
	var this1 *C.GtkStyleContext
	if this0 != nil {
		this1 = this0.InheritedFromGtkStyleContext()
	}
	ret1 := C.gtk_style_context_get_direction(this1)
	var ret2 TextDirection
	ret2 = TextDirection(ret1)
	return ret2
}
func (this0 *StyleContext) GetFont(state0 StateFlags) *pango.FontDescription {
	var this1 *C.GtkStyleContext
	var state1 C.GtkStateFlags
	if this0 != nil {
		this1 = this0.InheritedFromGtkStyleContext()
	}
	state1 = C.GtkStateFlags(state0)
	ret1 := C.gtk_style_context_get_font(this1, state1)
	var ret2 *pango.FontDescription
	ret2 = (*pango.FontDescription)(unsafe.Pointer(ret1))
	return ret2
}
func (this0 *StyleContext) GetJunctionSides() JunctionSides {
	var this1 *C.GtkStyleContext
	if this0 != nil {
		this1 = this0.InheritedFromGtkStyleContext()
	}
	ret1 := C.gtk_style_context_get_junction_sides(this1)
	var ret2 JunctionSides
	ret2 = JunctionSides(ret1)
	return ret2
}
func (this0 *StyleContext) GetMargin(state0 StateFlags) Border {
	var this1 *C.GtkStyleContext
	var state1 C.GtkStateFlags
	var margin1 C.GtkBorder
	if this0 != nil {
		this1 = this0.InheritedFromGtkStyleContext()
	}
	state1 = C.GtkStateFlags(state0)
	C.gtk_style_context_get_margin(this1, state1, &margin1)
	var margin2 Border
	margin2 = *(*Border)(unsafe.Pointer(&margin1))
	return margin2
}
func (this0 *StyleContext) GetPadding(state0 StateFlags) Border {
	var this1 *C.GtkStyleContext
	var state1 C.GtkStateFlags
	var padding1 C.GtkBorder
	if this0 != nil {
		this1 = this0.InheritedFromGtkStyleContext()
	}
	state1 = C.GtkStateFlags(state0)
	C.gtk_style_context_get_padding(this1, state1, &padding1)
	var padding2 Border
	padding2 = *(*Border)(unsafe.Pointer(&padding1))
	return padding2
}
func (this0 *StyleContext) GetPath() *WidgetPath {
	var this1 *C.GtkStyleContext
	if this0 != nil {
		this1 = this0.InheritedFromGtkStyleContext()
	}
	ret1 := C.gtk_style_context_get_path(this1)
	var ret2 *WidgetPath
	ret2 = (*WidgetPath)(unsafe.Pointer(ret1))
	return ret2
}
func (this0 *StyleContext) GetProperty(property0 string, state0 StateFlags) gobject.Value {
	var this1 *C.GtkStyleContext
	var property1 *C.char
	var state1 C.GtkStateFlags
	var value1 C.GValue
	if this0 != nil {
		this1 = this0.InheritedFromGtkStyleContext()
	}
	property1 = _GoStringToGString(property0)
	defer C.free(unsafe.Pointer(property1))
	state1 = C.GtkStateFlags(state0)
	C.gtk_style_context_get_property(this1, property1, state1, &value1)
	var value2 gobject.Value
	value2 = *(*gobject.Value)(unsafe.Pointer(&value1))
	return value2
}
func (this0 *StyleContext) GetScreen() *gdk.Screen {
	var this1 *C.GtkStyleContext
	if this0 != nil {
		this1 = this0.InheritedFromGtkStyleContext()
	}
	ret1 := C.gtk_style_context_get_screen(this1)
	var ret2 *gdk.Screen
	ret2 = (*gdk.Screen)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
func (this0 *StyleContext) GetState() StateFlags {
	var this1 *C.GtkStyleContext
	if this0 != nil {
		this1 = this0.InheritedFromGtkStyleContext()
	}
	ret1 := C.gtk_style_context_get_state(this1)
	var ret2 StateFlags
	ret2 = StateFlags(ret1)
	return ret2
}
func (this0 *StyleContext) GetStyleProperty(property_name0 string, value0 *gobject.Value) {
	var this1 *C.GtkStyleContext
	var property_name1 *C.char
	var value1 *C.GValue
	if this0 != nil {
		this1 = this0.InheritedFromGtkStyleContext()
	}
	property_name1 = _GoStringToGString(property_name0)
	defer C.free(unsafe.Pointer(property_name1))
	value1 = (*C.GValue)(unsafe.Pointer(value0))
	C.gtk_style_context_get_style_property(this1, property_name1, value1)
}
func (this0 *StyleContext) HasClass(class_name0 string) bool {
	var this1 *C.GtkStyleContext
	var class_name1 *C.char
	if this0 != nil {
		this1 = this0.InheritedFromGtkStyleContext()
	}
	class_name1 = _GoStringToGString(class_name0)
	defer C.free(unsafe.Pointer(class_name1))
	ret1 := C.gtk_style_context_has_class(this1, class_name1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *StyleContext) HasRegion(region_name0 string) (RegionFlags, bool) {
	var this1 *C.GtkStyleContext
	var region_name1 *C.char
	var flags_return1 C.GtkRegionFlags
	if this0 != nil {
		this1 = this0.InheritedFromGtkStyleContext()
	}
	region_name1 = _GoStringToGString(region_name0)
	defer C.free(unsafe.Pointer(region_name1))
	ret1 := C.gtk_style_context_has_region(this1, region_name1, &flags_return1)
	var flags_return2 RegionFlags
	var ret2 bool
	flags_return2 = RegionFlags(flags_return1)
	ret2 = ret1 != 0
	return flags_return2, ret2
}
func (this0 *StyleContext) Invalidate() {
	var this1 *C.GtkStyleContext
	if this0 != nil {
		this1 = this0.InheritedFromGtkStyleContext()
	}
	C.gtk_style_context_invalidate(this1)
}
func (this0 *StyleContext) ListClasses() []string {
	var this1 *C.GtkStyleContext
	if this0 != nil {
		this1 = this0.InheritedFromGtkStyleContext()
	}
	ret1 := C.gtk_style_context_list_classes(this1)
	var ret2 []string
	for iter := (*_GList)(unsafe.Pointer(ret1)); iter != nil; iter = iter.next {
		var elt string
		elt = C.GoString((*C.char)(iter.data))
		ret2 = append(ret2, elt)
	}
	return ret2
}
func (this0 *StyleContext) ListRegions() []string {
	var this1 *C.GtkStyleContext
	if this0 != nil {
		this1 = this0.InheritedFromGtkStyleContext()
	}
	ret1 := C.gtk_style_context_list_regions(this1)
	var ret2 []string
	for iter := (*_GList)(unsafe.Pointer(ret1)); iter != nil; iter = iter.next {
		var elt string
		elt = C.GoString((*C.char)(iter.data))
		ret2 = append(ret2, elt)
	}
	return ret2
}
func (this0 *StyleContext) LookupColor(color_name0 string) (gdk.RGBA, bool) {
	var this1 *C.GtkStyleContext
	var color_name1 *C.char
	var color1 C.GdkRGBA
	if this0 != nil {
		this1 = this0.InheritedFromGtkStyleContext()
	}
	color_name1 = _GoStringToGString(color_name0)
	defer C.free(unsafe.Pointer(color_name1))
	ret1 := C.gtk_style_context_lookup_color(this1, color_name1, &color1)
	var color2 gdk.RGBA
	var ret2 bool
	color2 = *(*gdk.RGBA)(unsafe.Pointer(&color1))
	ret2 = ret1 != 0
	return color2, ret2
}
func (this0 *StyleContext) LookupIconSet(stock_id0 string) *IconSet {
	var this1 *C.GtkStyleContext
	var stock_id1 *C.char
	if this0 != nil {
		this1 = this0.InheritedFromGtkStyleContext()
	}
	stock_id1 = _GoStringToGString(stock_id0)
	defer C.free(unsafe.Pointer(stock_id1))
	ret1 := C.gtk_style_context_lookup_icon_set(this1, stock_id1)
	var ret2 *IconSet
	ret2 = (*IconSet)(unsafe.Pointer(ret1))
	return ret2
}
func (this0 *StyleContext) NotifyStateChange(window0 gdk.WindowLike, region_id0 unsafe.Pointer, state0 StateType, state_value0 bool) {
	var this1 *C.GtkStyleContext
	var window1 *C.GdkWindow
	var region_id1 unsafe.Pointer
	var state1 C.GtkStateType
	var state_value1 C.int
	if this0 != nil {
		this1 = this0.InheritedFromGtkStyleContext()
	}
	if window0 != nil {
		window1 = window0.InheritedFromGdkWindow()
	}
	region_id1 = unsafe.Pointer(region_id0)
	state1 = C.GtkStateType(state0)
	state_value1 = _GoBoolToCBool(state_value0)
	C.gtk_style_context_notify_state_change(this1, window1, region_id1, state1, state_value1)
}
func (this0 *StyleContext) PopAnimatableRegion() {
	var this1 *C.GtkStyleContext
	if this0 != nil {
		this1 = this0.InheritedFromGtkStyleContext()
	}
	C.gtk_style_context_pop_animatable_region(this1)
}
func (this0 *StyleContext) PushAnimatableRegion(region_id0 unsafe.Pointer) {
	var this1 *C.GtkStyleContext
	var region_id1 unsafe.Pointer
	if this0 != nil {
		this1 = this0.InheritedFromGtkStyleContext()
	}
	region_id1 = unsafe.Pointer(region_id0)
	C.gtk_style_context_push_animatable_region(this1, region_id1)
}
func (this0 *StyleContext) RemoveClass(class_name0 string) {
	var this1 *C.GtkStyleContext
	var class_name1 *C.char
	if this0 != nil {
		this1 = this0.InheritedFromGtkStyleContext()
	}
	class_name1 = _GoStringToGString(class_name0)
	defer C.free(unsafe.Pointer(class_name1))
	C.gtk_style_context_remove_class(this1, class_name1)
}
func (this0 *StyleContext) RemoveProvider(provider0 StyleProviderLike) {
	var this1 *C.GtkStyleContext
	var provider1 *C.GtkStyleProvider
	if this0 != nil {
		this1 = this0.InheritedFromGtkStyleContext()
	}
	if provider0 != nil {
		provider1 = provider0.ImplementsGtkStyleProvider()}
	C.gtk_style_context_remove_provider(this1, provider1)
}
func (this0 *StyleContext) RemoveRegion(region_name0 string) {
	var this1 *C.GtkStyleContext
	var region_name1 *C.char
	if this0 != nil {
		this1 = this0.InheritedFromGtkStyleContext()
	}
	region_name1 = _GoStringToGString(region_name0)
	defer C.free(unsafe.Pointer(region_name1))
	C.gtk_style_context_remove_region(this1, region_name1)
}
func (this0 *StyleContext) Restore() {
	var this1 *C.GtkStyleContext
	if this0 != nil {
		this1 = this0.InheritedFromGtkStyleContext()
	}
	C.gtk_style_context_restore(this1)
}
func (this0 *StyleContext) Save() {
	var this1 *C.GtkStyleContext
	if this0 != nil {
		this1 = this0.InheritedFromGtkStyleContext()
	}
	C.gtk_style_context_save(this1)
}
func (this0 *StyleContext) ScrollAnimations(window0 gdk.WindowLike, dx0 int, dy0 int) {
	var this1 *C.GtkStyleContext
	var window1 *C.GdkWindow
	var dx1 C.int32_t
	var dy1 C.int32_t
	if this0 != nil {
		this1 = this0.InheritedFromGtkStyleContext()
	}
	if window0 != nil {
		window1 = window0.InheritedFromGdkWindow()
	}
	dx1 = C.int32_t(dx0)
	dy1 = C.int32_t(dy0)
	C.gtk_style_context_scroll_animations(this1, window1, dx1, dy1)
}
func (this0 *StyleContext) SetBackground(window0 gdk.WindowLike) {
	var this1 *C.GtkStyleContext
	var window1 *C.GdkWindow
	if this0 != nil {
		this1 = this0.InheritedFromGtkStyleContext()
	}
	if window0 != nil {
		window1 = window0.InheritedFromGdkWindow()
	}
	C.gtk_style_context_set_background(this1, window1)
}
func (this0 *StyleContext) SetDirection(direction0 TextDirection) {
	var this1 *C.GtkStyleContext
	var direction1 C.GtkTextDirection
	if this0 != nil {
		this1 = this0.InheritedFromGtkStyleContext()
	}
	direction1 = C.GtkTextDirection(direction0)
	C.gtk_style_context_set_direction(this1, direction1)
}
func (this0 *StyleContext) SetJunctionSides(sides0 JunctionSides) {
	var this1 *C.GtkStyleContext
	var sides1 C.GtkJunctionSides
	if this0 != nil {
		this1 = this0.InheritedFromGtkStyleContext()
	}
	sides1 = C.GtkJunctionSides(sides0)
	C.gtk_style_context_set_junction_sides(this1, sides1)
}
func (this0 *StyleContext) SetPath(path0 *WidgetPath) {
	var this1 *C.GtkStyleContext
	var path1 *C.GtkWidgetPath
	if this0 != nil {
		this1 = this0.InheritedFromGtkStyleContext()
	}
	path1 = (*C.GtkWidgetPath)(unsafe.Pointer(path0))
	C.gtk_style_context_set_path(this1, path1)
}
func (this0 *StyleContext) SetScreen(screen0 gdk.ScreenLike) {
	var this1 *C.GtkStyleContext
	var screen1 *C.GdkScreen
	if this0 != nil {
		this1 = this0.InheritedFromGtkStyleContext()
	}
	if screen0 != nil {
		screen1 = screen0.InheritedFromGdkScreen()
	}
	C.gtk_style_context_set_screen(this1, screen1)
}
func (this0 *StyleContext) SetState(flags0 StateFlags) {
	var this1 *C.GtkStyleContext
	var flags1 C.GtkStateFlags
	if this0 != nil {
		this1 = this0.InheritedFromGtkStyleContext()
	}
	flags1 = C.GtkStateFlags(flags0)
	C.gtk_style_context_set_state(this1, flags1)
}
func (this0 *StyleContext) StateIsRunning(state0 StateType) (float64, bool) {
	var this1 *C.GtkStyleContext
	var state1 C.GtkStateType
	var progress1 C.double
	if this0 != nil {
		this1 = this0.InheritedFromGtkStyleContext()
	}
	state1 = C.GtkStateType(state0)
	ret1 := C.gtk_style_context_state_is_running(this1, state1, &progress1)
	var progress2 float64
	var ret2 bool
	progress2 = float64(progress1)
	ret2 = ret1 != 0
	return progress2, ret2
}
type StylePropertiesLike interface {
	gobject.ObjectLike
	InheritedFromGtkStyleProperties() *C.GtkStyleProperties
}

type StyleProperties struct {
	gobject.Object
	StyleProviderImpl
}

func ToStyleProperties(objlike gobject.ObjectLike) *StyleProperties {
	c := objlike.InheritedFromGObject()
	if c == nil {
		return nil
	}
	t := (*StyleProperties)(nil).GetStaticType()
	obj := gobject.ObjectGrabIfType(unsafe.Pointer(c), t)
	if obj != nil {
		return (*StyleProperties)(obj)
	}
	panic("cannot cast to StyleProperties")
}

func (this0 *StyleProperties) InheritedFromGtkStyleProperties() *C.GtkStyleProperties {
	if this0 == nil {
		return nil
	}
	return (*C.GtkStyleProperties)(this0.C)
}

func (this0 *StyleProperties) GetStaticType() gobject.Type {
	return gobject.Type(C.gtk_style_properties_get_type())
}

func StylePropertiesGetType() gobject.Type {
	return (*StyleProperties)(nil).GetStaticType()
}
func NewStyleProperties() *StyleProperties {
	ret1 := C.gtk_style_properties_new()
	var ret2 *StyleProperties
	ret2 = (*StyleProperties)(gobject.ObjectWrap(unsafe.Pointer(ret1), false))
	return ret2
}
func (this0 *StyleProperties) Clear() {
	var this1 *C.GtkStyleProperties
	if this0 != nil {
		this1 = this0.InheritedFromGtkStyleProperties()
	}
	C.gtk_style_properties_clear(this1)
}
func (this0 *StyleProperties) GetProperty(property0 string, state0 StateFlags) (gobject.Value, bool) {
	var this1 *C.GtkStyleProperties
	var property1 *C.char
	var state1 C.GtkStateFlags
	var value1 C.GValue
	if this0 != nil {
		this1 = this0.InheritedFromGtkStyleProperties()
	}
	property1 = _GoStringToGString(property0)
	defer C.free(unsafe.Pointer(property1))
	state1 = C.GtkStateFlags(state0)
	ret1 := C.gtk_style_properties_get_property(this1, property1, state1, &value1)
	var value2 gobject.Value
	var ret2 bool
	value2 = *(*gobject.Value)(unsafe.Pointer(&value1))
	ret2 = ret1 != 0
	return value2, ret2
}
func (this0 *StyleProperties) LookupColor(name0 string) *SymbolicColor {
	var this1 *C.GtkStyleProperties
	var name1 *C.char
	if this0 != nil {
		this1 = this0.InheritedFromGtkStyleProperties()
	}
	name1 = _GoStringToGString(name0)
	defer C.free(unsafe.Pointer(name1))
	ret1 := C.gtk_style_properties_lookup_color(this1, name1)
	var ret2 *SymbolicColor
	ret2 = (*SymbolicColor)(unsafe.Pointer(ret1))
	return ret2
}
func (this0 *StyleProperties) MapColor(name0 string, color0 *SymbolicColor) {
	var this1 *C.GtkStyleProperties
	var name1 *C.char
	var color1 *C.GtkSymbolicColor
	if this0 != nil {
		this1 = this0.InheritedFromGtkStyleProperties()
	}
	name1 = _GoStringToGString(name0)
	defer C.free(unsafe.Pointer(name1))
	color1 = (*C.GtkSymbolicColor)(unsafe.Pointer(color0))
	C.gtk_style_properties_map_color(this1, name1, color1)
}
func (this0 *StyleProperties) Merge(props_to_merge0 StylePropertiesLike, replace0 bool) {
	var this1 *C.GtkStyleProperties
	var props_to_merge1 *C.GtkStyleProperties
	var replace1 C.int
	if this0 != nil {
		this1 = this0.InheritedFromGtkStyleProperties()
	}
	if props_to_merge0 != nil {
		props_to_merge1 = props_to_merge0.InheritedFromGtkStyleProperties()
	}
	replace1 = _GoBoolToCBool(replace0)
	C.gtk_style_properties_merge(this1, props_to_merge1, replace1)
}
func (this0 *StyleProperties) SetProperty(property0 string, state0 StateFlags, value0 *gobject.Value) {
	var this1 *C.GtkStyleProperties
	var property1 *C.char
	var state1 C.GtkStateFlags
	var value1 *C.GValue
	if this0 != nil {
		this1 = this0.InheritedFromGtkStyleProperties()
	}
	property1 = _GoStringToGString(property0)
	defer C.free(unsafe.Pointer(property1))
	state1 = C.GtkStateFlags(state0)
	value1 = (*C.GValue)(unsafe.Pointer(value0))
	C.gtk_style_properties_set_property(this1, property1, state1, value1)
}
func (this0 *StyleProperties) UnsetProperty(property0 string, state0 StateFlags) {
	var this1 *C.GtkStyleProperties
	var property1 *C.char
	var state1 C.GtkStateFlags
	if this0 != nil {
		this1 = this0.InheritedFromGtkStyleProperties()
	}
	property1 = _GoStringToGString(property0)
	defer C.free(unsafe.Pointer(property1))
	state1 = C.GtkStateFlags(state0)
	C.gtk_style_properties_unset_property(this1, property1, state1)
}
// blacklisted (no userdata): type StylePropertyParser func(string string, value *gobject.Value) bool
type StyleProviderLike interface {
	ImplementsGtkStyleProvider() *C.GtkStyleProvider
}

type StyleProvider struct {
	gobject.Object
	StyleProviderImpl
}

type StyleProviderImpl struct {}

func ToStyleProvider(objlike gobject.ObjectLike) *StyleProvider {
	t := (*StyleProviderImpl)(nil).GetStaticType()
	c := objlike.InheritedFromGObject()
	obj := gobject.ObjectGrabIfType(unsafe.Pointer(c), t)
	if obj != nil {
		return (*StyleProvider)(obj)
	}
	panic("cannot cast to StyleProvider")
}

func (this0 *StyleProviderImpl) ImplementsGtkStyleProvider() *C.GtkStyleProvider {
	obj := uintptr(unsafe.Pointer(this0)) - unsafe.Sizeof(uintptr(0))
	return (*C.GtkStyleProvider)((*gobject.Object)(unsafe.Pointer(obj)).C)
}

func (this0 *StyleProviderImpl) GetStaticType() gobject.Type {
	return gobject.Type(C.gtk_style_provider_get_type())
}

func StyleProviderGetType() gobject.Type {
	return (*StyleProviderImpl)(nil).GetStaticType()
}
func (this0 *StyleProviderImpl) GetIconFactory(path0 *WidgetPath) *IconFactory {
	var this1 *C.GtkStyleProvider
	var path1 *C.GtkWidgetPath
	if this0 != nil {
		this1 = this0.ImplementsGtkStyleProvider()}
	path1 = (*C.GtkWidgetPath)(unsafe.Pointer(path0))
	ret1 := C.gtk_style_provider_get_icon_factory(this1, path1)
	var ret2 *IconFactory
	ret2 = (*IconFactory)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
func (this0 *StyleProviderImpl) GetStyle(path0 *WidgetPath) *StyleProperties {
	var this1 *C.GtkStyleProvider
	var path1 *C.GtkWidgetPath
	if this0 != nil {
		this1 = this0.ImplementsGtkStyleProvider()}
	path1 = (*C.GtkWidgetPath)(unsafe.Pointer(path0))
	ret1 := C.gtk_style_provider_get_style(this1, path1)
	var ret2 *StyleProperties
	ret2 = (*StyleProperties)(gobject.ObjectWrap(unsafe.Pointer(ret1), false))
	return ret2
}
// blacklisted: StyleProvider.get_style_property (method)
type SwitchLike interface {
	WidgetLike
	InheritedFromGtkSwitch() *C.GtkSwitch
}

type Switch struct {
	Widget
	atk.ImplementorIfaceImpl
	ActivatableImpl
	BuildableImpl
}

func ToSwitch(objlike gobject.ObjectLike) *Switch {
	c := objlike.InheritedFromGObject()
	if c == nil {
		return nil
	}
	t := (*Switch)(nil).GetStaticType()
	obj := gobject.ObjectGrabIfType(unsafe.Pointer(c), t)
	if obj != nil {
		return (*Switch)(obj)
	}
	panic("cannot cast to Switch")
}

func (this0 *Switch) InheritedFromGtkSwitch() *C.GtkSwitch {
	if this0 == nil {
		return nil
	}
	return (*C.GtkSwitch)(this0.C)
}

func (this0 *Switch) GetStaticType() gobject.Type {
	return gobject.Type(C.gtk_switch_get_type())
}

func SwitchGetType() gobject.Type {
	return (*Switch)(nil).GetStaticType()
}
func NewSwitch() *Switch {
	ret1 := C.gtk_switch_new()
	var ret2 *Switch
	ret2 = (*Switch)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
func (this0 *Switch) GetActive() bool {
	var this1 *C.GtkSwitch
	if this0 != nil {
		this1 = this0.InheritedFromGtkSwitch()
	}
	ret1 := C.gtk_switch_get_active(this1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *Switch) SetActive(is_active0 bool) {
	var this1 *C.GtkSwitch
	var is_active1 C.int
	if this0 != nil {
		this1 = this0.InheritedFromGtkSwitch()
	}
	is_active1 = _GoBoolToCBool(is_active0)
	C.gtk_switch_set_active(this1, is_active1)
}
type SymbolicColor struct {}
func NewSymbolicColorAlpha(color0 *SymbolicColor, factor0 float64) *SymbolicColor {
	var color1 *C.GtkSymbolicColor
	var factor1 C.double
	color1 = (*C.GtkSymbolicColor)(unsafe.Pointer(color0))
	factor1 = C.double(factor0)
	ret1 := C.gtk_symbolic_color_new_alpha(color1, factor1)
	var ret2 *SymbolicColor
	ret2 = (*SymbolicColor)(unsafe.Pointer(ret1))
	return ret2
}
func NewSymbolicColorLiteral(color0 *gdk.RGBA) *SymbolicColor {
	var color1 *C.GdkRGBA
	color1 = (*C.GdkRGBA)(unsafe.Pointer(color0))
	ret1 := C.gtk_symbolic_color_new_literal(color1)
	var ret2 *SymbolicColor
	ret2 = (*SymbolicColor)(unsafe.Pointer(ret1))
	return ret2
}
func NewSymbolicColorMix(color10 *SymbolicColor, color20 *SymbolicColor, factor0 float64) *SymbolicColor {
	var color11 *C.GtkSymbolicColor
	var color21 *C.GtkSymbolicColor
	var factor1 C.double
	color11 = (*C.GtkSymbolicColor)(unsafe.Pointer(color10))
	color21 = (*C.GtkSymbolicColor)(unsafe.Pointer(color20))
	factor1 = C.double(factor0)
	ret1 := C.gtk_symbolic_color_new_mix(color11, color21, factor1)
	var ret2 *SymbolicColor
	ret2 = (*SymbolicColor)(unsafe.Pointer(ret1))
	return ret2
}
func NewSymbolicColorName(name0 string) *SymbolicColor {
	var name1 *C.char
	name1 = _GoStringToGString(name0)
	defer C.free(unsafe.Pointer(name1))
	ret1 := C.gtk_symbolic_color_new_name(name1)
	var ret2 *SymbolicColor
	ret2 = (*SymbolicColor)(unsafe.Pointer(ret1))
	return ret2
}
func NewSymbolicColorShade(color0 *SymbolicColor, factor0 float64) *SymbolicColor {
	var color1 *C.GtkSymbolicColor
	var factor1 C.double
	color1 = (*C.GtkSymbolicColor)(unsafe.Pointer(color0))
	factor1 = C.double(factor0)
	ret1 := C.gtk_symbolic_color_new_shade(color1, factor1)
	var ret2 *SymbolicColor
	ret2 = (*SymbolicColor)(unsafe.Pointer(ret1))
	return ret2
}
func (this0 *SymbolicColor) Resolve(props0 StylePropertiesLike) (gdk.RGBA, bool) {
	var this1 *C.GtkSymbolicColor
	var props1 *C.GtkStyleProperties
	var resolved_color1 C.GdkRGBA
	this1 = (*C.GtkSymbolicColor)(unsafe.Pointer(this0))
	if props0 != nil {
		props1 = props0.InheritedFromGtkStyleProperties()
	}
	ret1 := C.gtk_symbolic_color_resolve(this1, props1, &resolved_color1)
	var resolved_color2 gdk.RGBA
	var ret2 bool
	resolved_color2 = *(*gdk.RGBA)(unsafe.Pointer(&resolved_color1))
	ret2 = ret1 != 0
	return resolved_color2, ret2
}
func (this0 *SymbolicColor) ToString() string {
	var this1 *C.GtkSymbolicColor
	this1 = (*C.GtkSymbolicColor)(unsafe.Pointer(this0))
	ret1 := C.gtk_symbolic_color_to_string(this1)
	var ret2 string
	ret2 = C.GoString(ret1)
	C.g_free(unsafe.Pointer(ret1))
	return ret2
}
const TextViewPriorityValidate = 5
type TableLike interface {
	ContainerLike
	InheritedFromGtkTable() *C.GtkTable
}

type Table struct {
	Container
	atk.ImplementorIfaceImpl
	BuildableImpl
}

func ToTable(objlike gobject.ObjectLike) *Table {
	c := objlike.InheritedFromGObject()
	if c == nil {
		return nil
	}
	t := (*Table)(nil).GetStaticType()
	obj := gobject.ObjectGrabIfType(unsafe.Pointer(c), t)
	if obj != nil {
		return (*Table)(obj)
	}
	panic("cannot cast to Table")
}

func (this0 *Table) InheritedFromGtkTable() *C.GtkTable {
	if this0 == nil {
		return nil
	}
	return (*C.GtkTable)(this0.C)
}

func (this0 *Table) GetStaticType() gobject.Type {
	return gobject.Type(C.gtk_table_get_type())
}

func TableGetType() gobject.Type {
	return (*Table)(nil).GetStaticType()
}
func NewTable(rows0 int, columns0 int, homogeneous0 bool) *Table {
	var rows1 C.uint32_t
	var columns1 C.uint32_t
	var homogeneous1 C.int
	rows1 = C.uint32_t(rows0)
	columns1 = C.uint32_t(columns0)
	homogeneous1 = _GoBoolToCBool(homogeneous0)
	ret1 := C.gtk_table_new(rows1, columns1, homogeneous1)
	var ret2 *Table
	ret2 = (*Table)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
func (this0 *Table) Attach(child0 WidgetLike, left_attach0 int, right_attach0 int, top_attach0 int, bottom_attach0 int, xoptions0 AttachOptions, yoptions0 AttachOptions, xpadding0 int, ypadding0 int) {
	var this1 *C.GtkTable
	var child1 *C.GtkWidget
	var left_attach1 C.uint32_t
	var right_attach1 C.uint32_t
	var top_attach1 C.uint32_t
	var bottom_attach1 C.uint32_t
	var xoptions1 C.GtkAttachOptions
	var yoptions1 C.GtkAttachOptions
	var xpadding1 C.uint32_t
	var ypadding1 C.uint32_t
	if this0 != nil {
		this1 = this0.InheritedFromGtkTable()
	}
	if child0 != nil {
		child1 = child0.InheritedFromGtkWidget()
	}
	left_attach1 = C.uint32_t(left_attach0)
	right_attach1 = C.uint32_t(right_attach0)
	top_attach1 = C.uint32_t(top_attach0)
	bottom_attach1 = C.uint32_t(bottom_attach0)
	xoptions1 = C.GtkAttachOptions(xoptions0)
	yoptions1 = C.GtkAttachOptions(yoptions0)
	xpadding1 = C.uint32_t(xpadding0)
	ypadding1 = C.uint32_t(ypadding0)
	C.gtk_table_attach(this1, child1, left_attach1, right_attach1, top_attach1, bottom_attach1, xoptions1, yoptions1, xpadding1, ypadding1)
}
func (this0 *Table) AttachDefaults(widget0 WidgetLike, left_attach0 int, right_attach0 int, top_attach0 int, bottom_attach0 int) {
	var this1 *C.GtkTable
	var widget1 *C.GtkWidget
	var left_attach1 C.uint32_t
	var right_attach1 C.uint32_t
	var top_attach1 C.uint32_t
	var bottom_attach1 C.uint32_t
	if this0 != nil {
		this1 = this0.InheritedFromGtkTable()
	}
	if widget0 != nil {
		widget1 = widget0.InheritedFromGtkWidget()
	}
	left_attach1 = C.uint32_t(left_attach0)
	right_attach1 = C.uint32_t(right_attach0)
	top_attach1 = C.uint32_t(top_attach0)
	bottom_attach1 = C.uint32_t(bottom_attach0)
	C.gtk_table_attach_defaults(this1, widget1, left_attach1, right_attach1, top_attach1, bottom_attach1)
}
func (this0 *Table) GetColSpacing(column0 int) int {
	var this1 *C.GtkTable
	var column1 C.uint32_t
	if this0 != nil {
		this1 = this0.InheritedFromGtkTable()
	}
	column1 = C.uint32_t(column0)
	ret1 := C.gtk_table_get_col_spacing(this1, column1)
	var ret2 int
	ret2 = int(ret1)
	return ret2
}
func (this0 *Table) GetDefaultColSpacing() int {
	var this1 *C.GtkTable
	if this0 != nil {
		this1 = this0.InheritedFromGtkTable()
	}
	ret1 := C.gtk_table_get_default_col_spacing(this1)
	var ret2 int
	ret2 = int(ret1)
	return ret2
}
func (this0 *Table) GetDefaultRowSpacing() int {
	var this1 *C.GtkTable
	if this0 != nil {
		this1 = this0.InheritedFromGtkTable()
	}
	ret1 := C.gtk_table_get_default_row_spacing(this1)
	var ret2 int
	ret2 = int(ret1)
	return ret2
}
func (this0 *Table) GetHomogeneous() bool {
	var this1 *C.GtkTable
	if this0 != nil {
		this1 = this0.InheritedFromGtkTable()
	}
	ret1 := C.gtk_table_get_homogeneous(this1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *Table) GetRowSpacing(row0 int) int {
	var this1 *C.GtkTable
	var row1 C.uint32_t
	if this0 != nil {
		this1 = this0.InheritedFromGtkTable()
	}
	row1 = C.uint32_t(row0)
	ret1 := C.gtk_table_get_row_spacing(this1, row1)
	var ret2 int
	ret2 = int(ret1)
	return ret2
}
func (this0 *Table) GetSize() (int, int) {
	var this1 *C.GtkTable
	var rows1 C.uint32_t
	var columns1 C.uint32_t
	if this0 != nil {
		this1 = this0.InheritedFromGtkTable()
	}
	C.gtk_table_get_size(this1, &rows1, &columns1)
	var rows2 int
	var columns2 int
	rows2 = int(rows1)
	columns2 = int(columns1)
	return rows2, columns2
}
func (this0 *Table) Resize(rows0 int, columns0 int) {
	var this1 *C.GtkTable
	var rows1 C.uint32_t
	var columns1 C.uint32_t
	if this0 != nil {
		this1 = this0.InheritedFromGtkTable()
	}
	rows1 = C.uint32_t(rows0)
	columns1 = C.uint32_t(columns0)
	C.gtk_table_resize(this1, rows1, columns1)
}
func (this0 *Table) SetColSpacing(column0 int, spacing0 int) {
	var this1 *C.GtkTable
	var column1 C.uint32_t
	var spacing1 C.uint32_t
	if this0 != nil {
		this1 = this0.InheritedFromGtkTable()
	}
	column1 = C.uint32_t(column0)
	spacing1 = C.uint32_t(spacing0)
	C.gtk_table_set_col_spacing(this1, column1, spacing1)
}
func (this0 *Table) SetColSpacings(spacing0 int) {
	var this1 *C.GtkTable
	var spacing1 C.uint32_t
	if this0 != nil {
		this1 = this0.InheritedFromGtkTable()
	}
	spacing1 = C.uint32_t(spacing0)
	C.gtk_table_set_col_spacings(this1, spacing1)
}
func (this0 *Table) SetHomogeneous(homogeneous0 bool) {
	var this1 *C.GtkTable
	var homogeneous1 C.int
	if this0 != nil {
		this1 = this0.InheritedFromGtkTable()
	}
	homogeneous1 = _GoBoolToCBool(homogeneous0)
	C.gtk_table_set_homogeneous(this1, homogeneous1)
}
func (this0 *Table) SetRowSpacing(row0 int, spacing0 int) {
	var this1 *C.GtkTable
	var row1 C.uint32_t
	var spacing1 C.uint32_t
	if this0 != nil {
		this1 = this0.InheritedFromGtkTable()
	}
	row1 = C.uint32_t(row0)
	spacing1 = C.uint32_t(spacing0)
	C.gtk_table_set_row_spacing(this1, row1, spacing1)
}
func (this0 *Table) SetRowSpacings(spacing0 int) {
	var this1 *C.GtkTable
	var spacing1 C.uint32_t
	if this0 != nil {
		this1 = this0.InheritedFromGtkTable()
	}
	spacing1 = C.uint32_t(spacing0)
	C.gtk_table_set_row_spacings(this1, spacing1)
}
type TableChild struct {
	widget0 *C.GtkWidget
	LeftAttach uint16
	RightAttach uint16
	TopAttach uint16
	BottomAttach uint16
	Xpadding uint16
	Ypadding uint16
	Xexpand uint32
	Yexpand uint32
	Xshrink uint32
	Yshrink uint32
	Xfill uint32
	Yfill uint32
	_ [4]byte
}
func (this0 *TableChild) Widget() *Widget {
	var widget1 *Widget
	widget1 = (*Widget)(gobject.ObjectWrap(unsafe.Pointer(this0.widget0), true))
	return widget1
}
type TableRowCol struct {
	Requisition uint16
	Allocation uint16
	Spacing uint16
	_ [2]byte
	NeedExpand uint32
	NeedShrink uint32
	Expand uint32
	Shrink uint32
	Empty uint32
}
type TargetEntry struct {
	target0 *C.char
	Flags uint32
	Info uint32
}
func (this0 *TargetEntry) Target() string {
	var target1 string
	target1 = C.GoString(this0.target0)
	return target1
}
func NewTargetEntry(target0 string, flags0 int, info0 int) *TargetEntry {
	var target1 *C.char
	var flags1 C.uint32_t
	var info1 C.uint32_t
	target1 = _GoStringToGString(target0)
	defer C.free(unsafe.Pointer(target1))
	flags1 = C.uint32_t(flags0)
	info1 = C.uint32_t(info0)
	ret1 := C.gtk_target_entry_new(target1, flags1, info1)
	var ret2 *TargetEntry
	ret2 = (*TargetEntry)(unsafe.Pointer(ret1))
	return ret2
}
func (this0 *TargetEntry) Copy() *TargetEntry {
	var this1 *C.GtkTargetEntry
	this1 = (*C.GtkTargetEntry)(unsafe.Pointer(this0))
	ret1 := C.gtk_target_entry_copy(this1)
	var ret2 *TargetEntry
	ret2 = (*TargetEntry)(unsafe.Pointer(ret1))
	return ret2
}
func (this0 *TargetEntry) Free() {
	var this1 *C.GtkTargetEntry
	this1 = (*C.GtkTargetEntry)(unsafe.Pointer(this0))
	C.gtk_target_entry_free(this1)
}
type TargetFlags C.uint32_t
const (
	TargetFlagsSameApp TargetFlags = 1
	TargetFlagsSameWidget TargetFlags = 2
	TargetFlagsOtherApp TargetFlags = 4
	TargetFlagsOtherWidget TargetFlags = 8
)
type TargetList struct {}
func NewTargetList(targets0 []TargetEntry) *TargetList {
	var targets1 *C.GtkTargetEntry
	var ntargets1 C.uint32_t
	targets1 = (*C.GtkTargetEntry)(C.malloc(C.size_t(int(unsafe.Sizeof(*targets1)) * len(targets0))))
	defer C.free(unsafe.Pointer(targets1))
	for i, e := range targets0 {
		(*(*[999999]C.GtkTargetEntry)(unsafe.Pointer(targets1)))[i] = *(*C.GtkTargetEntry)(unsafe.Pointer(&e))
	}
	ntargets1 = C.uint32_t(len(targets0))
	ret1 := C.gtk_target_list_new(targets1, ntargets1)
	var ret2 *TargetList
	ret2 = (*TargetList)(unsafe.Pointer(ret1))
	return ret2
}
func (this0 *TargetList) Add(target0 gdk.Atom, flags0 int, info0 int) {
	var this1 *C.GtkTargetList
	var target1 C.GdkAtom
	var flags1 C.uint32_t
	var info1 C.uint32_t
	this1 = (*C.GtkTargetList)(unsafe.Pointer(this0))
	target1 = *(*C.GdkAtom)(unsafe.Pointer(&target0))
	flags1 = C.uint32_t(flags0)
	info1 = C.uint32_t(info0)
	C.gtk_target_list_add(this1, target1, flags1, info1)
}
func (this0 *TargetList) AddImageTargets(info0 int, writable0 bool) {
	var this1 *C.GtkTargetList
	var info1 C.uint32_t
	var writable1 C.int
	this1 = (*C.GtkTargetList)(unsafe.Pointer(this0))
	info1 = C.uint32_t(info0)
	writable1 = _GoBoolToCBool(writable0)
	C.gtk_target_list_add_image_targets(this1, info1, writable1)
}
func (this0 *TargetList) AddRichTextTargets(info0 int, deserializable0 bool, buffer0 TextBufferLike) {
	var this1 *C.GtkTargetList
	var info1 C.uint32_t
	var deserializable1 C.int
	var buffer1 *C.GtkTextBuffer
	this1 = (*C.GtkTargetList)(unsafe.Pointer(this0))
	info1 = C.uint32_t(info0)
	deserializable1 = _GoBoolToCBool(deserializable0)
	if buffer0 != nil {
		buffer1 = buffer0.InheritedFromGtkTextBuffer()
	}
	C.gtk_target_list_add_rich_text_targets(this1, info1, deserializable1, buffer1)
}
func (this0 *TargetList) AddTable(targets0 []TargetEntry) {
	var this1 *C.GtkTargetList
	var targets1 *C.GtkTargetEntry
	var ntargets1 C.uint32_t
	this1 = (*C.GtkTargetList)(unsafe.Pointer(this0))
	targets1 = (*C.GtkTargetEntry)(C.malloc(C.size_t(int(unsafe.Sizeof(*targets1)) * len(targets0))))
	defer C.free(unsafe.Pointer(targets1))
	for i, e := range targets0 {
		(*(*[999999]C.GtkTargetEntry)(unsafe.Pointer(targets1)))[i] = *(*C.GtkTargetEntry)(unsafe.Pointer(&e))
	}
	ntargets1 = C.uint32_t(len(targets0))
	C.gtk_target_list_add_table(this1, targets1, ntargets1)
}
func (this0 *TargetList) AddTextTargets(info0 int) {
	var this1 *C.GtkTargetList
	var info1 C.uint32_t
	this1 = (*C.GtkTargetList)(unsafe.Pointer(this0))
	info1 = C.uint32_t(info0)
	C.gtk_target_list_add_text_targets(this1, info1)
}
func (this0 *TargetList) AddURITargets(info0 int) {
	var this1 *C.GtkTargetList
	var info1 C.uint32_t
	this1 = (*C.GtkTargetList)(unsafe.Pointer(this0))
	info1 = C.uint32_t(info0)
	C.gtk_target_list_add_uri_targets(this1, info1)
}
func (this0 *TargetList) Find(target0 gdk.Atom, info0 *int) bool {
	var this1 *C.GtkTargetList
	var target1 C.GdkAtom
	var info1 *C.uint32_t
	this1 = (*C.GtkTargetList)(unsafe.Pointer(this0))
	target1 = *(*C.GdkAtom)(unsafe.Pointer(&target0))
	info1 = (*C.uint32_t)(unsafe.Pointer(info0))
	ret1 := C.gtk_target_list_find(this1, target1, info1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *TargetList) Remove(target0 gdk.Atom) {
	var this1 *C.GtkTargetList
	var target1 C.GdkAtom
	this1 = (*C.GtkTargetList)(unsafe.Pointer(this0))
	target1 = *(*C.GdkAtom)(unsafe.Pointer(&target0))
	C.gtk_target_list_remove(this1, target1)
}
type TearoffMenuItemLike interface {
	MenuItemLike
	InheritedFromGtkTearoffMenuItem() *C.GtkTearoffMenuItem
}

type TearoffMenuItem struct {
	MenuItem
	atk.ImplementorIfaceImpl
	ActivatableImpl
	BuildableImpl
}

func ToTearoffMenuItem(objlike gobject.ObjectLike) *TearoffMenuItem {
	c := objlike.InheritedFromGObject()
	if c == nil {
		return nil
	}
	t := (*TearoffMenuItem)(nil).GetStaticType()
	obj := gobject.ObjectGrabIfType(unsafe.Pointer(c), t)
	if obj != nil {
		return (*TearoffMenuItem)(obj)
	}
	panic("cannot cast to TearoffMenuItem")
}

func (this0 *TearoffMenuItem) InheritedFromGtkTearoffMenuItem() *C.GtkTearoffMenuItem {
	if this0 == nil {
		return nil
	}
	return (*C.GtkTearoffMenuItem)(this0.C)
}

func (this0 *TearoffMenuItem) GetStaticType() gobject.Type {
	return gobject.Type(C.gtk_tearoff_menu_item_get_type())
}

func TearoffMenuItemGetType() gobject.Type {
	return (*TearoffMenuItem)(nil).GetStaticType()
}
func NewTearoffMenuItem() *TearoffMenuItem {
	ret1 := C.gtk_tearoff_menu_item_new()
	var ret2 *TearoffMenuItem
	ret2 = (*TearoffMenuItem)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
type TextAppearance struct {
	BgColor gdk.Color
	FgColor gdk.Color
	Rise int32
	Underline uint32
	Strikethrough uint32
	DrawBg uint32
	InsideSelection uint32
	IsText uint32
	RGBA [2]*gdk.RGBA
}
type TextAttributes struct {
	Refcount uint32
	_ [4]byte
	Appearance TextAppearance
	Justification Justification
	Direction TextDirection
	Font *pango.FontDescription
	FontScale float64
	LeftMargin int32
	RightMargin int32
	Indent int32
	PixelsAboveLines int32
	PixelsBelowLines int32
	PixelsInsideWrap int32
	Tabs *pango.TabArray
	WrapMode WrapMode
	_ [4]byte
	Language *pango.Language
	PgBgColor *gdk.Color
	Invisible uint32
	BgFullHeight uint32
	Editable uint32
	_ [4]byte
	PgBgRGBA *gdk.RGBA
	Padding [3]uint32
	_ [4]byte
}
func NewTextAttributes() *TextAttributes {
	ret1 := C.gtk_text_attributes_new()
	var ret2 *TextAttributes
	ret2 = (*TextAttributes)(unsafe.Pointer(ret1))
	return ret2
}
func (this0 *TextAttributes) Copy() *TextAttributes {
	var this1 *C.GtkTextAttributes
	this1 = (*C.GtkTextAttributes)(unsafe.Pointer(this0))
	ret1 := C.gtk_text_attributes_copy(this1)
	var ret2 *TextAttributes
	ret2 = (*TextAttributes)(unsafe.Pointer(ret1))
	return ret2
}
func (this0 *TextAttributes) CopyValues(dest0 *TextAttributes) {
	var this1 *C.GtkTextAttributes
	var dest1 *C.GtkTextAttributes
	this1 = (*C.GtkTextAttributes)(unsafe.Pointer(this0))
	dest1 = (*C.GtkTextAttributes)(unsafe.Pointer(dest0))
	C.gtk_text_attributes_copy_values(this1, dest1)
}
type TextBTree struct {}
type TextBufferLike interface {
	gobject.ObjectLike
	InheritedFromGtkTextBuffer() *C.GtkTextBuffer
}

type TextBuffer struct {
	gobject.Object
	
}

func ToTextBuffer(objlike gobject.ObjectLike) *TextBuffer {
	c := objlike.InheritedFromGObject()
	if c == nil {
		return nil
	}
	t := (*TextBuffer)(nil).GetStaticType()
	obj := gobject.ObjectGrabIfType(unsafe.Pointer(c), t)
	if obj != nil {
		return (*TextBuffer)(obj)
	}
	panic("cannot cast to TextBuffer")
}

func (this0 *TextBuffer) InheritedFromGtkTextBuffer() *C.GtkTextBuffer {
	if this0 == nil {
		return nil
	}
	return (*C.GtkTextBuffer)(this0.C)
}

func (this0 *TextBuffer) GetStaticType() gobject.Type {
	return gobject.Type(C.gtk_text_buffer_get_type())
}

func TextBufferGetType() gobject.Type {
	return (*TextBuffer)(nil).GetStaticType()
}
func NewTextBuffer(table0 TextTagTableLike) *TextBuffer {
	var table1 *C.GtkTextTagTable
	if table0 != nil {
		table1 = table0.InheritedFromGtkTextTagTable()
	}
	ret1 := C.gtk_text_buffer_new(table1)
	var ret2 *TextBuffer
	ret2 = (*TextBuffer)(gobject.ObjectWrap(unsafe.Pointer(ret1), false))
	return ret2
}
func (this0 *TextBuffer) AddMark(mark0 TextMarkLike, where0 *TextIter) {
	var this1 *C.GtkTextBuffer
	var mark1 *C.GtkTextMark
	var where1 *C.GtkTextIter
	if this0 != nil {
		this1 = this0.InheritedFromGtkTextBuffer()
	}
	if mark0 != nil {
		mark1 = mark0.InheritedFromGtkTextMark()
	}
	where1 = (*C.GtkTextIter)(unsafe.Pointer(where0))
	C.gtk_text_buffer_add_mark(this1, mark1, where1)
}
func (this0 *TextBuffer) AddSelectionClipboard(clipboard0 ClipboardLike) {
	var this1 *C.GtkTextBuffer
	var clipboard1 *C.GtkClipboard
	if this0 != nil {
		this1 = this0.InheritedFromGtkTextBuffer()
	}
	if clipboard0 != nil {
		clipboard1 = clipboard0.InheritedFromGtkClipboard()
	}
	C.gtk_text_buffer_add_selection_clipboard(this1, clipboard1)
}
func (this0 *TextBuffer) ApplyTag(tag0 TextTagLike, start0 *TextIter, end0 *TextIter) {
	var this1 *C.GtkTextBuffer
	var tag1 *C.GtkTextTag
	var start1 *C.GtkTextIter
	var end1 *C.GtkTextIter
	if this0 != nil {
		this1 = this0.InheritedFromGtkTextBuffer()
	}
	if tag0 != nil {
		tag1 = tag0.InheritedFromGtkTextTag()
	}
	start1 = (*C.GtkTextIter)(unsafe.Pointer(start0))
	end1 = (*C.GtkTextIter)(unsafe.Pointer(end0))
	C.gtk_text_buffer_apply_tag(this1, tag1, start1, end1)
}
func (this0 *TextBuffer) ApplyTagByName(name0 string, start0 *TextIter, end0 *TextIter) {
	var this1 *C.GtkTextBuffer
	var name1 *C.char
	var start1 *C.GtkTextIter
	var end1 *C.GtkTextIter
	if this0 != nil {
		this1 = this0.InheritedFromGtkTextBuffer()
	}
	name1 = _GoStringToGString(name0)
	defer C.free(unsafe.Pointer(name1))
	start1 = (*C.GtkTextIter)(unsafe.Pointer(start0))
	end1 = (*C.GtkTextIter)(unsafe.Pointer(end0))
	C.gtk_text_buffer_apply_tag_by_name(this1, name1, start1, end1)
}
func (this0 *TextBuffer) Backspace(iter0 *TextIter, interactive0 bool, default_editable0 bool) bool {
	var this1 *C.GtkTextBuffer
	var iter1 *C.GtkTextIter
	var interactive1 C.int
	var default_editable1 C.int
	if this0 != nil {
		this1 = this0.InheritedFromGtkTextBuffer()
	}
	iter1 = (*C.GtkTextIter)(unsafe.Pointer(iter0))
	interactive1 = _GoBoolToCBool(interactive0)
	default_editable1 = _GoBoolToCBool(default_editable0)
	ret1 := C.gtk_text_buffer_backspace(this1, iter1, interactive1, default_editable1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *TextBuffer) BeginUserAction() {
	var this1 *C.GtkTextBuffer
	if this0 != nil {
		this1 = this0.InheritedFromGtkTextBuffer()
	}
	C.gtk_text_buffer_begin_user_action(this1)
}
func (this0 *TextBuffer) CopyClipboard(clipboard0 ClipboardLike) {
	var this1 *C.GtkTextBuffer
	var clipboard1 *C.GtkClipboard
	if this0 != nil {
		this1 = this0.InheritedFromGtkTextBuffer()
	}
	if clipboard0 != nil {
		clipboard1 = clipboard0.InheritedFromGtkClipboard()
	}
	C.gtk_text_buffer_copy_clipboard(this1, clipboard1)
}
func (this0 *TextBuffer) CreateChildAnchor(iter0 *TextIter) *TextChildAnchor {
	var this1 *C.GtkTextBuffer
	var iter1 *C.GtkTextIter
	if this0 != nil {
		this1 = this0.InheritedFromGtkTextBuffer()
	}
	iter1 = (*C.GtkTextIter)(unsafe.Pointer(iter0))
	ret1 := C.gtk_text_buffer_create_child_anchor(this1, iter1)
	var ret2 *TextChildAnchor
	ret2 = (*TextChildAnchor)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
func (this0 *TextBuffer) CreateMark(mark_name0 string, where0 *TextIter, left_gravity0 bool) *TextMark {
	var this1 *C.GtkTextBuffer
	var mark_name1 *C.char
	var where1 *C.GtkTextIter
	var left_gravity1 C.int
	if this0 != nil {
		this1 = this0.InheritedFromGtkTextBuffer()
	}
	mark_name1 = _GoStringToGString(mark_name0)
	defer C.free(unsafe.Pointer(mark_name1))
	where1 = (*C.GtkTextIter)(unsafe.Pointer(where0))
	left_gravity1 = _GoBoolToCBool(left_gravity0)
	ret1 := C.gtk_text_buffer_create_mark(this1, mark_name1, where1, left_gravity1)
	var ret2 *TextMark
	ret2 = (*TextMark)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
func (this0 *TextBuffer) CutClipboard(clipboard0 ClipboardLike, default_editable0 bool) {
	var this1 *C.GtkTextBuffer
	var clipboard1 *C.GtkClipboard
	var default_editable1 C.int
	if this0 != nil {
		this1 = this0.InheritedFromGtkTextBuffer()
	}
	if clipboard0 != nil {
		clipboard1 = clipboard0.InheritedFromGtkClipboard()
	}
	default_editable1 = _GoBoolToCBool(default_editable0)
	C.gtk_text_buffer_cut_clipboard(this1, clipboard1, default_editable1)
}
func (this0 *TextBuffer) Delete(start0 *TextIter, end0 *TextIter) {
	var this1 *C.GtkTextBuffer
	var start1 *C.GtkTextIter
	var end1 *C.GtkTextIter
	if this0 != nil {
		this1 = this0.InheritedFromGtkTextBuffer()
	}
	start1 = (*C.GtkTextIter)(unsafe.Pointer(start0))
	end1 = (*C.GtkTextIter)(unsafe.Pointer(end0))
	C.gtk_text_buffer_delete(this1, start1, end1)
}
func (this0 *TextBuffer) DeleteInteractive(start_iter0 *TextIter, end_iter0 *TextIter, default_editable0 bool) bool {
	var this1 *C.GtkTextBuffer
	var start_iter1 *C.GtkTextIter
	var end_iter1 *C.GtkTextIter
	var default_editable1 C.int
	if this0 != nil {
		this1 = this0.InheritedFromGtkTextBuffer()
	}
	start_iter1 = (*C.GtkTextIter)(unsafe.Pointer(start_iter0))
	end_iter1 = (*C.GtkTextIter)(unsafe.Pointer(end_iter0))
	default_editable1 = _GoBoolToCBool(default_editable0)
	ret1 := C.gtk_text_buffer_delete_interactive(this1, start_iter1, end_iter1, default_editable1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *TextBuffer) DeleteMark(mark0 TextMarkLike) {
	var this1 *C.GtkTextBuffer
	var mark1 *C.GtkTextMark
	if this0 != nil {
		this1 = this0.InheritedFromGtkTextBuffer()
	}
	if mark0 != nil {
		mark1 = mark0.InheritedFromGtkTextMark()
	}
	C.gtk_text_buffer_delete_mark(this1, mark1)
}
func (this0 *TextBuffer) DeleteMarkByName(name0 string) {
	var this1 *C.GtkTextBuffer
	var name1 *C.char
	if this0 != nil {
		this1 = this0.InheritedFromGtkTextBuffer()
	}
	name1 = _GoStringToGString(name0)
	defer C.free(unsafe.Pointer(name1))
	C.gtk_text_buffer_delete_mark_by_name(this1, name1)
}
func (this0 *TextBuffer) DeleteSelection(interactive0 bool, default_editable0 bool) bool {
	var this1 *C.GtkTextBuffer
	var interactive1 C.int
	var default_editable1 C.int
	if this0 != nil {
		this1 = this0.InheritedFromGtkTextBuffer()
	}
	interactive1 = _GoBoolToCBool(interactive0)
	default_editable1 = _GoBoolToCBool(default_editable0)
	ret1 := C.gtk_text_buffer_delete_selection(this1, interactive1, default_editable1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *TextBuffer) Deserialize(content_buffer0 TextBufferLike, format0 gdk.Atom, iter0 *TextIter, data0 []int) (bool, error) {
	var this1 *C.GtkTextBuffer
	var content_buffer1 *C.GtkTextBuffer
	var format1 C.GdkAtom
	var iter1 *C.GtkTextIter
	var data1 *C.uint8_t
	var length1 C.uint64_t
	var err1 *C.GError
	if this0 != nil {
		this1 = this0.InheritedFromGtkTextBuffer()
	}
	if content_buffer0 != nil {
		content_buffer1 = content_buffer0.InheritedFromGtkTextBuffer()
	}
	format1 = *(*C.GdkAtom)(unsafe.Pointer(&format0))
	iter1 = (*C.GtkTextIter)(unsafe.Pointer(iter0))
	data1 = (*C.uint8_t)(C.malloc(C.size_t(int(unsafe.Sizeof(*data1)) * len(data0))))
	defer C.free(unsafe.Pointer(data1))
	for i, e := range data0 {
		(*(*[999999]C.uint8_t)(unsafe.Pointer(data1)))[i] = C.uint8_t(e)
	}
	length1 = C.uint64_t(len(data0))
	ret1 := C.gtk_text_buffer_deserialize(this1, content_buffer1, format1, iter1, data1, length1, &err1)
	var ret2 bool
	var err2 error
	ret2 = ret1 != 0
	if err1 != nil {
		err2 = errors.New(C.GoString(((*_GError)(unsafe.Pointer(err1))).message))
		C.g_error_free(err1)
	}
	return ret2, err2
}
func (this0 *TextBuffer) DeserializeGetCanCreateTags(format0 gdk.Atom) bool {
	var this1 *C.GtkTextBuffer
	var format1 C.GdkAtom
	if this0 != nil {
		this1 = this0.InheritedFromGtkTextBuffer()
	}
	format1 = *(*C.GdkAtom)(unsafe.Pointer(&format0))
	ret1 := C.gtk_text_buffer_deserialize_get_can_create_tags(this1, format1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *TextBuffer) DeserializeSetCanCreateTags(format0 gdk.Atom, can_create_tags0 bool) {
	var this1 *C.GtkTextBuffer
	var format1 C.GdkAtom
	var can_create_tags1 C.int
	if this0 != nil {
		this1 = this0.InheritedFromGtkTextBuffer()
	}
	format1 = *(*C.GdkAtom)(unsafe.Pointer(&format0))
	can_create_tags1 = _GoBoolToCBool(can_create_tags0)
	C.gtk_text_buffer_deserialize_set_can_create_tags(this1, format1, can_create_tags1)
}
func (this0 *TextBuffer) EndUserAction() {
	var this1 *C.GtkTextBuffer
	if this0 != nil {
		this1 = this0.InheritedFromGtkTextBuffer()
	}
	C.gtk_text_buffer_end_user_action(this1)
}
func (this0 *TextBuffer) GetBounds() (TextIter, TextIter) {
	var this1 *C.GtkTextBuffer
	var start1 C.GtkTextIter
	var end1 C.GtkTextIter
	if this0 != nil {
		this1 = this0.InheritedFromGtkTextBuffer()
	}
	C.gtk_text_buffer_get_bounds(this1, &start1, &end1)
	var start2 TextIter
	var end2 TextIter
	start2 = *(*TextIter)(unsafe.Pointer(&start1))
	end2 = *(*TextIter)(unsafe.Pointer(&end1))
	return start2, end2
}
func (this0 *TextBuffer) GetCharCount() int {
	var this1 *C.GtkTextBuffer
	if this0 != nil {
		this1 = this0.InheritedFromGtkTextBuffer()
	}
	ret1 := C.gtk_text_buffer_get_char_count(this1)
	var ret2 int
	ret2 = int(ret1)
	return ret2
}
func (this0 *TextBuffer) GetCopyTargetList() *TargetList {
	var this1 *C.GtkTextBuffer
	if this0 != nil {
		this1 = this0.InheritedFromGtkTextBuffer()
	}
	ret1 := C.gtk_text_buffer_get_copy_target_list(this1)
	var ret2 *TargetList
	ret2 = (*TargetList)(unsafe.Pointer(ret1))
	return ret2
}
func (this0 *TextBuffer) GetDeserializeFormats() (int, []gdk.Atom) {
	var this1 *C.GtkTextBuffer
	var n_formats1 C.int32_t
	if this0 != nil {
		this1 = this0.InheritedFromGtkTextBuffer()
	}
	ret1 := C.gtk_text_buffer_get_deserialize_formats(this1, &n_formats1)
	var n_formats2 int
	var ret2 []gdk.Atom
	n_formats2 = int(n_formats1)
	ret2 = make([]gdk.Atom, n_formats1)
	for i := range ret2 {
		ret2[i] = gdk.Atom{unsafe.Pointer((*(*[999999]C.GdkAtom)(unsafe.Pointer(ret1)))[i])}
	}
	return n_formats2, ret2
}
func (this0 *TextBuffer) GetEndIter() TextIter {
	var this1 *C.GtkTextBuffer
	var iter1 C.GtkTextIter
	if this0 != nil {
		this1 = this0.InheritedFromGtkTextBuffer()
	}
	C.gtk_text_buffer_get_end_iter(this1, &iter1)
	var iter2 TextIter
	iter2 = *(*TextIter)(unsafe.Pointer(&iter1))
	return iter2
}
func (this0 *TextBuffer) GetHasSelection() bool {
	var this1 *C.GtkTextBuffer
	if this0 != nil {
		this1 = this0.InheritedFromGtkTextBuffer()
	}
	ret1 := C.gtk_text_buffer_get_has_selection(this1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *TextBuffer) GetInsert() *TextMark {
	var this1 *C.GtkTextBuffer
	if this0 != nil {
		this1 = this0.InheritedFromGtkTextBuffer()
	}
	ret1 := C.gtk_text_buffer_get_insert(this1)
	var ret2 *TextMark
	ret2 = (*TextMark)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
func (this0 *TextBuffer) GetIterAtChildAnchor(anchor0 TextChildAnchorLike) TextIter {
	var this1 *C.GtkTextBuffer
	var anchor1 *C.GtkTextChildAnchor
	var iter1 C.GtkTextIter
	if this0 != nil {
		this1 = this0.InheritedFromGtkTextBuffer()
	}
	if anchor0 != nil {
		anchor1 = anchor0.InheritedFromGtkTextChildAnchor()
	}
	C.gtk_text_buffer_get_iter_at_child_anchor(this1, &iter1, anchor1)
	var iter2 TextIter
	iter2 = *(*TextIter)(unsafe.Pointer(&iter1))
	return iter2
}
func (this0 *TextBuffer) GetIterAtLine(line_number0 int) TextIter {
	var this1 *C.GtkTextBuffer
	var line_number1 C.int32_t
	var iter1 C.GtkTextIter
	if this0 != nil {
		this1 = this0.InheritedFromGtkTextBuffer()
	}
	line_number1 = C.int32_t(line_number0)
	C.gtk_text_buffer_get_iter_at_line(this1, &iter1, line_number1)
	var iter2 TextIter
	iter2 = *(*TextIter)(unsafe.Pointer(&iter1))
	return iter2
}
func (this0 *TextBuffer) GetIterAtLineIndex(line_number0 int, byte_index0 int) TextIter {
	var this1 *C.GtkTextBuffer
	var line_number1 C.int32_t
	var byte_index1 C.int32_t
	var iter1 C.GtkTextIter
	if this0 != nil {
		this1 = this0.InheritedFromGtkTextBuffer()
	}
	line_number1 = C.int32_t(line_number0)
	byte_index1 = C.int32_t(byte_index0)
	C.gtk_text_buffer_get_iter_at_line_index(this1, &iter1, line_number1, byte_index1)
	var iter2 TextIter
	iter2 = *(*TextIter)(unsafe.Pointer(&iter1))
	return iter2
}
func (this0 *TextBuffer) GetIterAtLineOffset(line_number0 int, char_offset0 int) TextIter {
	var this1 *C.GtkTextBuffer
	var line_number1 C.int32_t
	var char_offset1 C.int32_t
	var iter1 C.GtkTextIter
	if this0 != nil {
		this1 = this0.InheritedFromGtkTextBuffer()
	}
	line_number1 = C.int32_t(line_number0)
	char_offset1 = C.int32_t(char_offset0)
	C.gtk_text_buffer_get_iter_at_line_offset(this1, &iter1, line_number1, char_offset1)
	var iter2 TextIter
	iter2 = *(*TextIter)(unsafe.Pointer(&iter1))
	return iter2
}
func (this0 *TextBuffer) GetIterAtMark(mark0 TextMarkLike) TextIter {
	var this1 *C.GtkTextBuffer
	var mark1 *C.GtkTextMark
	var iter1 C.GtkTextIter
	if this0 != nil {
		this1 = this0.InheritedFromGtkTextBuffer()
	}
	if mark0 != nil {
		mark1 = mark0.InheritedFromGtkTextMark()
	}
	C.gtk_text_buffer_get_iter_at_mark(this1, &iter1, mark1)
	var iter2 TextIter
	iter2 = *(*TextIter)(unsafe.Pointer(&iter1))
	return iter2
}
func (this0 *TextBuffer) GetIterAtOffset(char_offset0 int) TextIter {
	var this1 *C.GtkTextBuffer
	var char_offset1 C.int32_t
	var iter1 C.GtkTextIter
	if this0 != nil {
		this1 = this0.InheritedFromGtkTextBuffer()
	}
	char_offset1 = C.int32_t(char_offset0)
	C.gtk_text_buffer_get_iter_at_offset(this1, &iter1, char_offset1)
	var iter2 TextIter
	iter2 = *(*TextIter)(unsafe.Pointer(&iter1))
	return iter2
}
func (this0 *TextBuffer) GetLineCount() int {
	var this1 *C.GtkTextBuffer
	if this0 != nil {
		this1 = this0.InheritedFromGtkTextBuffer()
	}
	ret1 := C.gtk_text_buffer_get_line_count(this1)
	var ret2 int
	ret2 = int(ret1)
	return ret2
}
func (this0 *TextBuffer) GetMark(name0 string) *TextMark {
	var this1 *C.GtkTextBuffer
	var name1 *C.char
	if this0 != nil {
		this1 = this0.InheritedFromGtkTextBuffer()
	}
	name1 = _GoStringToGString(name0)
	defer C.free(unsafe.Pointer(name1))
	ret1 := C.gtk_text_buffer_get_mark(this1, name1)
	var ret2 *TextMark
	ret2 = (*TextMark)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
func (this0 *TextBuffer) GetModified() bool {
	var this1 *C.GtkTextBuffer
	if this0 != nil {
		this1 = this0.InheritedFromGtkTextBuffer()
	}
	ret1 := C.gtk_text_buffer_get_modified(this1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *TextBuffer) GetPasteTargetList() *TargetList {
	var this1 *C.GtkTextBuffer
	if this0 != nil {
		this1 = this0.InheritedFromGtkTextBuffer()
	}
	ret1 := C.gtk_text_buffer_get_paste_target_list(this1)
	var ret2 *TargetList
	ret2 = (*TargetList)(unsafe.Pointer(ret1))
	return ret2
}
func (this0 *TextBuffer) GetSelectionBound() *TextMark {
	var this1 *C.GtkTextBuffer
	if this0 != nil {
		this1 = this0.InheritedFromGtkTextBuffer()
	}
	ret1 := C.gtk_text_buffer_get_selection_bound(this1)
	var ret2 *TextMark
	ret2 = (*TextMark)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
func (this0 *TextBuffer) GetSelectionBounds() (TextIter, TextIter, bool) {
	var this1 *C.GtkTextBuffer
	var start1 C.GtkTextIter
	var end1 C.GtkTextIter
	if this0 != nil {
		this1 = this0.InheritedFromGtkTextBuffer()
	}
	ret1 := C.gtk_text_buffer_get_selection_bounds(this1, &start1, &end1)
	var start2 TextIter
	var end2 TextIter
	var ret2 bool
	start2 = *(*TextIter)(unsafe.Pointer(&start1))
	end2 = *(*TextIter)(unsafe.Pointer(&end1))
	ret2 = ret1 != 0
	return start2, end2, ret2
}
func (this0 *TextBuffer) GetSerializeFormats() (int, []gdk.Atom) {
	var this1 *C.GtkTextBuffer
	var n_formats1 C.int32_t
	if this0 != nil {
		this1 = this0.InheritedFromGtkTextBuffer()
	}
	ret1 := C.gtk_text_buffer_get_serialize_formats(this1, &n_formats1)
	var n_formats2 int
	var ret2 []gdk.Atom
	n_formats2 = int(n_formats1)
	ret2 = make([]gdk.Atom, n_formats1)
	for i := range ret2 {
		ret2[i] = gdk.Atom{unsafe.Pointer((*(*[999999]C.GdkAtom)(unsafe.Pointer(ret1)))[i])}
	}
	return n_formats2, ret2
}
func (this0 *TextBuffer) GetSlice(start0 *TextIter, end0 *TextIter, include_hidden_chars0 bool) string {
	var this1 *C.GtkTextBuffer
	var start1 *C.GtkTextIter
	var end1 *C.GtkTextIter
	var include_hidden_chars1 C.int
	if this0 != nil {
		this1 = this0.InheritedFromGtkTextBuffer()
	}
	start1 = (*C.GtkTextIter)(unsafe.Pointer(start0))
	end1 = (*C.GtkTextIter)(unsafe.Pointer(end0))
	include_hidden_chars1 = _GoBoolToCBool(include_hidden_chars0)
	ret1 := C.gtk_text_buffer_get_slice(this1, start1, end1, include_hidden_chars1)
	var ret2 string
	ret2 = C.GoString(ret1)
	C.g_free(unsafe.Pointer(ret1))
	return ret2
}
func (this0 *TextBuffer) GetStartIter() TextIter {
	var this1 *C.GtkTextBuffer
	var iter1 C.GtkTextIter
	if this0 != nil {
		this1 = this0.InheritedFromGtkTextBuffer()
	}
	C.gtk_text_buffer_get_start_iter(this1, &iter1)
	var iter2 TextIter
	iter2 = *(*TextIter)(unsafe.Pointer(&iter1))
	return iter2
}
func (this0 *TextBuffer) GetTagTable() *TextTagTable {
	var this1 *C.GtkTextBuffer
	if this0 != nil {
		this1 = this0.InheritedFromGtkTextBuffer()
	}
	ret1 := C.gtk_text_buffer_get_tag_table(this1)
	var ret2 *TextTagTable
	ret2 = (*TextTagTable)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
func (this0 *TextBuffer) GetText(start0 *TextIter, end0 *TextIter, include_hidden_chars0 bool) string {
	var this1 *C.GtkTextBuffer
	var start1 *C.GtkTextIter
	var end1 *C.GtkTextIter
	var include_hidden_chars1 C.int
	if this0 != nil {
		this1 = this0.InheritedFromGtkTextBuffer()
	}
	start1 = (*C.GtkTextIter)(unsafe.Pointer(start0))
	end1 = (*C.GtkTextIter)(unsafe.Pointer(end0))
	include_hidden_chars1 = _GoBoolToCBool(include_hidden_chars0)
	ret1 := C.gtk_text_buffer_get_text(this1, start1, end1, include_hidden_chars1)
	var ret2 string
	ret2 = C.GoString(ret1)
	C.g_free(unsafe.Pointer(ret1))
	return ret2
}
func (this0 *TextBuffer) Insert(iter0 *TextIter, text0 string, len0 int) {
	var this1 *C.GtkTextBuffer
	var iter1 *C.GtkTextIter
	var text1 *C.char
	var len1 C.int32_t
	if this0 != nil {
		this1 = this0.InheritedFromGtkTextBuffer()
	}
	iter1 = (*C.GtkTextIter)(unsafe.Pointer(iter0))
	text1 = _GoStringToGString(text0)
	defer C.free(unsafe.Pointer(text1))
	len1 = C.int32_t(len0)
	C.gtk_text_buffer_insert(this1, iter1, text1, len1)
}
func (this0 *TextBuffer) InsertAtCursor(text0 string, len0 int) {
	var this1 *C.GtkTextBuffer
	var text1 *C.char
	var len1 C.int32_t
	if this0 != nil {
		this1 = this0.InheritedFromGtkTextBuffer()
	}
	text1 = _GoStringToGString(text0)
	defer C.free(unsafe.Pointer(text1))
	len1 = C.int32_t(len0)
	C.gtk_text_buffer_insert_at_cursor(this1, text1, len1)
}
func (this0 *TextBuffer) InsertChildAnchor(iter0 *TextIter, anchor0 TextChildAnchorLike) {
	var this1 *C.GtkTextBuffer
	var iter1 *C.GtkTextIter
	var anchor1 *C.GtkTextChildAnchor
	if this0 != nil {
		this1 = this0.InheritedFromGtkTextBuffer()
	}
	iter1 = (*C.GtkTextIter)(unsafe.Pointer(iter0))
	if anchor0 != nil {
		anchor1 = anchor0.InheritedFromGtkTextChildAnchor()
	}
	C.gtk_text_buffer_insert_child_anchor(this1, iter1, anchor1)
}
func (this0 *TextBuffer) InsertInteractive(iter0 *TextIter, text0 string, len0 int, default_editable0 bool) bool {
	var this1 *C.GtkTextBuffer
	var iter1 *C.GtkTextIter
	var text1 *C.char
	var len1 C.int32_t
	var default_editable1 C.int
	if this0 != nil {
		this1 = this0.InheritedFromGtkTextBuffer()
	}
	iter1 = (*C.GtkTextIter)(unsafe.Pointer(iter0))
	text1 = _GoStringToGString(text0)
	defer C.free(unsafe.Pointer(text1))
	len1 = C.int32_t(len0)
	default_editable1 = _GoBoolToCBool(default_editable0)
	ret1 := C.gtk_text_buffer_insert_interactive(this1, iter1, text1, len1, default_editable1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *TextBuffer) InsertInteractiveAtCursor(text0 string, len0 int, default_editable0 bool) bool {
	var this1 *C.GtkTextBuffer
	var text1 *C.char
	var len1 C.int32_t
	var default_editable1 C.int
	if this0 != nil {
		this1 = this0.InheritedFromGtkTextBuffer()
	}
	text1 = _GoStringToGString(text0)
	defer C.free(unsafe.Pointer(text1))
	len1 = C.int32_t(len0)
	default_editable1 = _GoBoolToCBool(default_editable0)
	ret1 := C.gtk_text_buffer_insert_interactive_at_cursor(this1, text1, len1, default_editable1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *TextBuffer) InsertPixbuf(iter0 *TextIter, pixbuf0 gdkpixbuf.PixbufLike) {
	var this1 *C.GtkTextBuffer
	var iter1 *C.GtkTextIter
	var pixbuf1 *C.GdkPixbuf
	if this0 != nil {
		this1 = this0.InheritedFromGtkTextBuffer()
	}
	iter1 = (*C.GtkTextIter)(unsafe.Pointer(iter0))
	if pixbuf0 != nil {
		pixbuf1 = pixbuf0.InheritedFromGdkPixbuf()
	}
	C.gtk_text_buffer_insert_pixbuf(this1, iter1, pixbuf1)
}
func (this0 *TextBuffer) InsertRange(iter0 *TextIter, start0 *TextIter, end0 *TextIter) {
	var this1 *C.GtkTextBuffer
	var iter1 *C.GtkTextIter
	var start1 *C.GtkTextIter
	var end1 *C.GtkTextIter
	if this0 != nil {
		this1 = this0.InheritedFromGtkTextBuffer()
	}
	iter1 = (*C.GtkTextIter)(unsafe.Pointer(iter0))
	start1 = (*C.GtkTextIter)(unsafe.Pointer(start0))
	end1 = (*C.GtkTextIter)(unsafe.Pointer(end0))
	C.gtk_text_buffer_insert_range(this1, iter1, start1, end1)
}
func (this0 *TextBuffer) InsertRangeInteractive(iter0 *TextIter, start0 *TextIter, end0 *TextIter, default_editable0 bool) bool {
	var this1 *C.GtkTextBuffer
	var iter1 *C.GtkTextIter
	var start1 *C.GtkTextIter
	var end1 *C.GtkTextIter
	var default_editable1 C.int
	if this0 != nil {
		this1 = this0.InheritedFromGtkTextBuffer()
	}
	iter1 = (*C.GtkTextIter)(unsafe.Pointer(iter0))
	start1 = (*C.GtkTextIter)(unsafe.Pointer(start0))
	end1 = (*C.GtkTextIter)(unsafe.Pointer(end0))
	default_editable1 = _GoBoolToCBool(default_editable0)
	ret1 := C.gtk_text_buffer_insert_range_interactive(this1, iter1, start1, end1, default_editable1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *TextBuffer) MoveMark(mark0 TextMarkLike, where0 *TextIter) {
	var this1 *C.GtkTextBuffer
	var mark1 *C.GtkTextMark
	var where1 *C.GtkTextIter
	if this0 != nil {
		this1 = this0.InheritedFromGtkTextBuffer()
	}
	if mark0 != nil {
		mark1 = mark0.InheritedFromGtkTextMark()
	}
	where1 = (*C.GtkTextIter)(unsafe.Pointer(where0))
	C.gtk_text_buffer_move_mark(this1, mark1, where1)
}
func (this0 *TextBuffer) MoveMarkByName(name0 string, where0 *TextIter) {
	var this1 *C.GtkTextBuffer
	var name1 *C.char
	var where1 *C.GtkTextIter
	if this0 != nil {
		this1 = this0.InheritedFromGtkTextBuffer()
	}
	name1 = _GoStringToGString(name0)
	defer C.free(unsafe.Pointer(name1))
	where1 = (*C.GtkTextIter)(unsafe.Pointer(where0))
	C.gtk_text_buffer_move_mark_by_name(this1, name1, where1)
}
func (this0 *TextBuffer) PasteClipboard(clipboard0 ClipboardLike, override_location0 *TextIter, default_editable0 bool) {
	var this1 *C.GtkTextBuffer
	var clipboard1 *C.GtkClipboard
	var override_location1 *C.GtkTextIter
	var default_editable1 C.int
	if this0 != nil {
		this1 = this0.InheritedFromGtkTextBuffer()
	}
	if clipboard0 != nil {
		clipboard1 = clipboard0.InheritedFromGtkClipboard()
	}
	override_location1 = (*C.GtkTextIter)(unsafe.Pointer(override_location0))
	default_editable1 = _GoBoolToCBool(default_editable0)
	C.gtk_text_buffer_paste_clipboard(this1, clipboard1, override_location1, default_editable1)
}
func (this0 *TextBuffer) PlaceCursor(where0 *TextIter) {
	var this1 *C.GtkTextBuffer
	var where1 *C.GtkTextIter
	if this0 != nil {
		this1 = this0.InheritedFromGtkTextBuffer()
	}
	where1 = (*C.GtkTextIter)(unsafe.Pointer(where0))
	C.gtk_text_buffer_place_cursor(this1, where1)
}
// blacklisted: TextBuffer.register_deserialize_format (method)
func (this0 *TextBuffer) RegisterDeserializeTagset(tagset_name0 string) gdk.Atom {
	var this1 *C.GtkTextBuffer
	var tagset_name1 *C.char
	if this0 != nil {
		this1 = this0.InheritedFromGtkTextBuffer()
	}
	tagset_name1 = _GoStringToGString(tagset_name0)
	defer C.free(unsafe.Pointer(tagset_name1))
	ret1 := C.gtk_text_buffer_register_deserialize_tagset(this1, tagset_name1)
	var ret2 gdk.Atom
	ret2 = gdk.Atom{unsafe.Pointer(ret1)}
	return ret2
}
// blacklisted: TextBuffer.register_serialize_format (method)
func (this0 *TextBuffer) RegisterSerializeTagset(tagset_name0 string) gdk.Atom {
	var this1 *C.GtkTextBuffer
	var tagset_name1 *C.char
	if this0 != nil {
		this1 = this0.InheritedFromGtkTextBuffer()
	}
	tagset_name1 = _GoStringToGString(tagset_name0)
	defer C.free(unsafe.Pointer(tagset_name1))
	ret1 := C.gtk_text_buffer_register_serialize_tagset(this1, tagset_name1)
	var ret2 gdk.Atom
	ret2 = gdk.Atom{unsafe.Pointer(ret1)}
	return ret2
}
func (this0 *TextBuffer) RemoveAllTags(start0 *TextIter, end0 *TextIter) {
	var this1 *C.GtkTextBuffer
	var start1 *C.GtkTextIter
	var end1 *C.GtkTextIter
	if this0 != nil {
		this1 = this0.InheritedFromGtkTextBuffer()
	}
	start1 = (*C.GtkTextIter)(unsafe.Pointer(start0))
	end1 = (*C.GtkTextIter)(unsafe.Pointer(end0))
	C.gtk_text_buffer_remove_all_tags(this1, start1, end1)
}
func (this0 *TextBuffer) RemoveSelectionClipboard(clipboard0 ClipboardLike) {
	var this1 *C.GtkTextBuffer
	var clipboard1 *C.GtkClipboard
	if this0 != nil {
		this1 = this0.InheritedFromGtkTextBuffer()
	}
	if clipboard0 != nil {
		clipboard1 = clipboard0.InheritedFromGtkClipboard()
	}
	C.gtk_text_buffer_remove_selection_clipboard(this1, clipboard1)
}
func (this0 *TextBuffer) RemoveTag(tag0 TextTagLike, start0 *TextIter, end0 *TextIter) {
	var this1 *C.GtkTextBuffer
	var tag1 *C.GtkTextTag
	var start1 *C.GtkTextIter
	var end1 *C.GtkTextIter
	if this0 != nil {
		this1 = this0.InheritedFromGtkTextBuffer()
	}
	if tag0 != nil {
		tag1 = tag0.InheritedFromGtkTextTag()
	}
	start1 = (*C.GtkTextIter)(unsafe.Pointer(start0))
	end1 = (*C.GtkTextIter)(unsafe.Pointer(end0))
	C.gtk_text_buffer_remove_tag(this1, tag1, start1, end1)
}
func (this0 *TextBuffer) RemoveTagByName(name0 string, start0 *TextIter, end0 *TextIter) {
	var this1 *C.GtkTextBuffer
	var name1 *C.char
	var start1 *C.GtkTextIter
	var end1 *C.GtkTextIter
	if this0 != nil {
		this1 = this0.InheritedFromGtkTextBuffer()
	}
	name1 = _GoStringToGString(name0)
	defer C.free(unsafe.Pointer(name1))
	start1 = (*C.GtkTextIter)(unsafe.Pointer(start0))
	end1 = (*C.GtkTextIter)(unsafe.Pointer(end0))
	C.gtk_text_buffer_remove_tag_by_name(this1, name1, start1, end1)
}
func (this0 *TextBuffer) SelectRange(ins0 *TextIter, bound0 *TextIter) {
	var this1 *C.GtkTextBuffer
	var ins1 *C.GtkTextIter
	var bound1 *C.GtkTextIter
	if this0 != nil {
		this1 = this0.InheritedFromGtkTextBuffer()
	}
	ins1 = (*C.GtkTextIter)(unsafe.Pointer(ins0))
	bound1 = (*C.GtkTextIter)(unsafe.Pointer(bound0))
	C.gtk_text_buffer_select_range(this1, ins1, bound1)
}
func (this0 *TextBuffer) Serialize(content_buffer0 TextBufferLike, format0 gdk.Atom, start0 *TextIter, end0 *TextIter) (uint64, []int) {
	var this1 *C.GtkTextBuffer
	var content_buffer1 *C.GtkTextBuffer
	var format1 C.GdkAtom
	var start1 *C.GtkTextIter
	var end1 *C.GtkTextIter
	var length1 C.uint64_t
	if this0 != nil {
		this1 = this0.InheritedFromGtkTextBuffer()
	}
	if content_buffer0 != nil {
		content_buffer1 = content_buffer0.InheritedFromGtkTextBuffer()
	}
	format1 = *(*C.GdkAtom)(unsafe.Pointer(&format0))
	start1 = (*C.GtkTextIter)(unsafe.Pointer(start0))
	end1 = (*C.GtkTextIter)(unsafe.Pointer(end0))
	ret1 := C.gtk_text_buffer_serialize(this1, content_buffer1, format1, start1, end1, &length1)
	var length2 uint64
	var ret2 []int
	length2 = uint64(length1)
	ret2 = make([]int, length1)
	for i := range ret2 {
		ret2[i] = int((*(*[999999]C.uint8_t)(unsafe.Pointer(ret1)))[i])
	}
	return length2, ret2
}
func (this0 *TextBuffer) SetModified(setting0 bool) {
	var this1 *C.GtkTextBuffer
	var setting1 C.int
	if this0 != nil {
		this1 = this0.InheritedFromGtkTextBuffer()
	}
	setting1 = _GoBoolToCBool(setting0)
	C.gtk_text_buffer_set_modified(this1, setting1)
}
func (this0 *TextBuffer) SetText(text0 string, len0 int) {
	var this1 *C.GtkTextBuffer
	var text1 *C.char
	var len1 C.int32_t
	if this0 != nil {
		this1 = this0.InheritedFromGtkTextBuffer()
	}
	text1 = _GoStringToGString(text0)
	defer C.free(unsafe.Pointer(text1))
	len1 = C.int32_t(len0)
	C.gtk_text_buffer_set_text(this1, text1, len1)
}
func (this0 *TextBuffer) UnregisterDeserializeFormat(format0 gdk.Atom) {
	var this1 *C.GtkTextBuffer
	var format1 C.GdkAtom
	if this0 != nil {
		this1 = this0.InheritedFromGtkTextBuffer()
	}
	format1 = *(*C.GdkAtom)(unsafe.Pointer(&format0))
	C.gtk_text_buffer_unregister_deserialize_format(this1, format1)
}
func (this0 *TextBuffer) UnregisterSerializeFormat(format0 gdk.Atom) {
	var this1 *C.GtkTextBuffer
	var format1 C.GdkAtom
	if this0 != nil {
		this1 = this0.InheritedFromGtkTextBuffer()
	}
	format1 = *(*C.GdkAtom)(unsafe.Pointer(&format0))
	C.gtk_text_buffer_unregister_serialize_format(this1, format1)
}
// blacklisted: TextBufferDeserializeFunc (callback)
// blacklisted: TextBufferSerializeFunc (callback)
type TextBufferTargetInfo C.int32_t
const (
	TextBufferTargetInfoBufferContents TextBufferTargetInfo = -1
	TextBufferTargetInfoRichText TextBufferTargetInfo = -2
	TextBufferTargetInfoText TextBufferTargetInfo = -3
)
type TextCharPredicate func(ch rune) bool
//export _GtkTextCharPredicate_c_wrapper
func _GtkTextCharPredicate_c_wrapper(ch0 rune, user_data0 unsafe.Pointer) int32 {
	var ch1 rune
	var user_data1 TextCharPredicate
	ch1 = rune((C.uint32_t)(ch0))
	user_data1 = *(*TextCharPredicate)(user_data0)
	ret1 := user_data1(ch1)
	var ret2 C.int
	ret2 = _GoBoolToCBool(ret1)
	return (int32)(ret2)
}
//export _GtkTextCharPredicate_c_wrapper_once
func _GtkTextCharPredicate_c_wrapper_once(ch0 rune, user_data0 unsafe.Pointer) int32 {
	ret := _GtkTextCharPredicate_c_wrapper(ch0, user_data0)
	gobject.Holder.Release(user_data0)
	return ret
}
type TextChildAnchorLike interface {
	gobject.ObjectLike
	InheritedFromGtkTextChildAnchor() *C.GtkTextChildAnchor
}

type TextChildAnchor struct {
	gobject.Object
	
}

func ToTextChildAnchor(objlike gobject.ObjectLike) *TextChildAnchor {
	c := objlike.InheritedFromGObject()
	if c == nil {
		return nil
	}
	t := (*TextChildAnchor)(nil).GetStaticType()
	obj := gobject.ObjectGrabIfType(unsafe.Pointer(c), t)
	if obj != nil {
		return (*TextChildAnchor)(obj)
	}
	panic("cannot cast to TextChildAnchor")
}

func (this0 *TextChildAnchor) InheritedFromGtkTextChildAnchor() *C.GtkTextChildAnchor {
	if this0 == nil {
		return nil
	}
	return (*C.GtkTextChildAnchor)(this0.C)
}

func (this0 *TextChildAnchor) GetStaticType() gobject.Type {
	return gobject.Type(C.gtk_text_child_anchor_get_type())
}

func TextChildAnchorGetType() gobject.Type {
	return (*TextChildAnchor)(nil).GetStaticType()
}
func NewTextChildAnchor() *TextChildAnchor {
	ret1 := C.gtk_text_child_anchor_new()
	var ret2 *TextChildAnchor
	ret2 = (*TextChildAnchor)(gobject.ObjectWrap(unsafe.Pointer(ret1), false))
	return ret2
}
func (this0 *TextChildAnchor) GetDeleted() bool {
	var this1 *C.GtkTextChildAnchor
	if this0 != nil {
		this1 = this0.InheritedFromGtkTextChildAnchor()
	}
	ret1 := C.gtk_text_child_anchor_get_deleted(this1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *TextChildAnchor) GetWidgets() []*Widget {
	var this1 *C.GtkTextChildAnchor
	if this0 != nil {
		this1 = this0.InheritedFromGtkTextChildAnchor()
	}
	ret1 := C.gtk_text_child_anchor_get_widgets(this1)
	var ret2 []*Widget
	for iter := (*_GList)(unsafe.Pointer(ret1)); iter != nil; iter = iter.next {
		var elt *Widget
		elt = (*Widget)(gobject.ObjectWrap(unsafe.Pointer((*C.GtkWidget)(iter.data)), true))
		ret2 = append(ret2, elt)
	}
	return ret2
}
type TextDirection C.uint32_t
const (
	TextDirectionNone TextDirection = 0
	TextDirectionLtr TextDirection = 1
	TextDirectionRtl TextDirection = 2
)
type TextIter struct {
	Dummy1 unsafe.Pointer
	Dummy2 unsafe.Pointer
	Dummy3 int32
	Dummy4 int32
	Dummy5 int32
	Dummy6 int32
	Dummy7 int32
	Dummy8 int32
	Dummy9 unsafe.Pointer
	Dummy10 unsafe.Pointer
	Dummy11 int32
	Dummy12 int32
	Dummy13 int32
	_ [4]byte
	Dummy14 unsafe.Pointer
}
func (this0 *TextIter) Assign(other0 *TextIter) {
	var this1 *C.GtkTextIter
	var other1 *C.GtkTextIter
	this1 = (*C.GtkTextIter)(unsafe.Pointer(this0))
	other1 = (*C.GtkTextIter)(unsafe.Pointer(other0))
	C.gtk_text_iter_assign(this1, other1)
}
func (this0 *TextIter) BackwardChar() bool {
	var this1 *C.GtkTextIter
	this1 = (*C.GtkTextIter)(unsafe.Pointer(this0))
	ret1 := C.gtk_text_iter_backward_char(this1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *TextIter) BackwardChars(count0 int) bool {
	var this1 *C.GtkTextIter
	var count1 C.int32_t
	this1 = (*C.GtkTextIter)(unsafe.Pointer(this0))
	count1 = C.int32_t(count0)
	ret1 := C.gtk_text_iter_backward_chars(this1, count1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *TextIter) BackwardCursorPosition() bool {
	var this1 *C.GtkTextIter
	this1 = (*C.GtkTextIter)(unsafe.Pointer(this0))
	ret1 := C.gtk_text_iter_backward_cursor_position(this1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *TextIter) BackwardCursorPositions(count0 int) bool {
	var this1 *C.GtkTextIter
	var count1 C.int32_t
	this1 = (*C.GtkTextIter)(unsafe.Pointer(this0))
	count1 = C.int32_t(count0)
	ret1 := C.gtk_text_iter_backward_cursor_positions(this1, count1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *TextIter) BackwardFindChar(pred0 TextCharPredicate, limit0 *TextIter) bool {
	var this1 *C.GtkTextIter
	var pred1 unsafe.Pointer
	var limit1 *C.GtkTextIter
	this1 = (*C.GtkTextIter)(unsafe.Pointer(this0))
	if pred0 != nil {
		pred1 = unsafe.Pointer(&pred0)}
	limit1 = (*C.GtkTextIter)(unsafe.Pointer(limit0))
	ret1 := C._gtk_text_iter_backward_find_char(this1, pred1, limit1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *TextIter) BackwardLine() bool {
	var this1 *C.GtkTextIter
	this1 = (*C.GtkTextIter)(unsafe.Pointer(this0))
	ret1 := C.gtk_text_iter_backward_line(this1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *TextIter) BackwardLines(count0 int) bool {
	var this1 *C.GtkTextIter
	var count1 C.int32_t
	this1 = (*C.GtkTextIter)(unsafe.Pointer(this0))
	count1 = C.int32_t(count0)
	ret1 := C.gtk_text_iter_backward_lines(this1, count1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *TextIter) BackwardSearch(str0 string, flags0 TextSearchFlags, limit0 *TextIter) (TextIter, TextIter, bool) {
	var this1 *C.GtkTextIter
	var str1 *C.char
	var flags1 C.GtkTextSearchFlags
	var limit1 *C.GtkTextIter
	var match_start1 C.GtkTextIter
	var match_end1 C.GtkTextIter
	this1 = (*C.GtkTextIter)(unsafe.Pointer(this0))
	str1 = _GoStringToGString(str0)
	defer C.free(unsafe.Pointer(str1))
	flags1 = C.GtkTextSearchFlags(flags0)
	limit1 = (*C.GtkTextIter)(unsafe.Pointer(limit0))
	ret1 := C.gtk_text_iter_backward_search(this1, str1, flags1, &match_start1, &match_end1, limit1)
	var match_start2 TextIter
	var match_end2 TextIter
	var ret2 bool
	match_start2 = *(*TextIter)(unsafe.Pointer(&match_start1))
	match_end2 = *(*TextIter)(unsafe.Pointer(&match_end1))
	ret2 = ret1 != 0
	return match_start2, match_end2, ret2
}
func (this0 *TextIter) BackwardSentenceStart() bool {
	var this1 *C.GtkTextIter
	this1 = (*C.GtkTextIter)(unsafe.Pointer(this0))
	ret1 := C.gtk_text_iter_backward_sentence_start(this1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *TextIter) BackwardSentenceStarts(count0 int) bool {
	var this1 *C.GtkTextIter
	var count1 C.int32_t
	this1 = (*C.GtkTextIter)(unsafe.Pointer(this0))
	count1 = C.int32_t(count0)
	ret1 := C.gtk_text_iter_backward_sentence_starts(this1, count1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *TextIter) BackwardToTagToggle(tag0 TextTagLike) bool {
	var this1 *C.GtkTextIter
	var tag1 *C.GtkTextTag
	this1 = (*C.GtkTextIter)(unsafe.Pointer(this0))
	if tag0 != nil {
		tag1 = tag0.InheritedFromGtkTextTag()
	}
	ret1 := C.gtk_text_iter_backward_to_tag_toggle(this1, tag1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *TextIter) BackwardVisibleCursorPosition() bool {
	var this1 *C.GtkTextIter
	this1 = (*C.GtkTextIter)(unsafe.Pointer(this0))
	ret1 := C.gtk_text_iter_backward_visible_cursor_position(this1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *TextIter) BackwardVisibleCursorPositions(count0 int) bool {
	var this1 *C.GtkTextIter
	var count1 C.int32_t
	this1 = (*C.GtkTextIter)(unsafe.Pointer(this0))
	count1 = C.int32_t(count0)
	ret1 := C.gtk_text_iter_backward_visible_cursor_positions(this1, count1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *TextIter) BackwardVisibleLine() bool {
	var this1 *C.GtkTextIter
	this1 = (*C.GtkTextIter)(unsafe.Pointer(this0))
	ret1 := C.gtk_text_iter_backward_visible_line(this1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *TextIter) BackwardVisibleLines(count0 int) bool {
	var this1 *C.GtkTextIter
	var count1 C.int32_t
	this1 = (*C.GtkTextIter)(unsafe.Pointer(this0))
	count1 = C.int32_t(count0)
	ret1 := C.gtk_text_iter_backward_visible_lines(this1, count1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *TextIter) BackwardVisibleWordStart() bool {
	var this1 *C.GtkTextIter
	this1 = (*C.GtkTextIter)(unsafe.Pointer(this0))
	ret1 := C.gtk_text_iter_backward_visible_word_start(this1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *TextIter) BackwardVisibleWordStarts(count0 int) bool {
	var this1 *C.GtkTextIter
	var count1 C.int32_t
	this1 = (*C.GtkTextIter)(unsafe.Pointer(this0))
	count1 = C.int32_t(count0)
	ret1 := C.gtk_text_iter_backward_visible_word_starts(this1, count1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *TextIter) BackwardWordStart() bool {
	var this1 *C.GtkTextIter
	this1 = (*C.GtkTextIter)(unsafe.Pointer(this0))
	ret1 := C.gtk_text_iter_backward_word_start(this1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *TextIter) BackwardWordStarts(count0 int) bool {
	var this1 *C.GtkTextIter
	var count1 C.int32_t
	this1 = (*C.GtkTextIter)(unsafe.Pointer(this0))
	count1 = C.int32_t(count0)
	ret1 := C.gtk_text_iter_backward_word_starts(this1, count1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *TextIter) BeginsTag(tag0 TextTagLike) bool {
	var this1 *C.GtkTextIter
	var tag1 *C.GtkTextTag
	this1 = (*C.GtkTextIter)(unsafe.Pointer(this0))
	if tag0 != nil {
		tag1 = tag0.InheritedFromGtkTextTag()
	}
	ret1 := C.gtk_text_iter_begins_tag(this1, tag1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *TextIter) CanInsert(default_editability0 bool) bool {
	var this1 *C.GtkTextIter
	var default_editability1 C.int
	this1 = (*C.GtkTextIter)(unsafe.Pointer(this0))
	default_editability1 = _GoBoolToCBool(default_editability0)
	ret1 := C.gtk_text_iter_can_insert(this1, default_editability1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *TextIter) Compare(rhs0 *TextIter) int {
	var this1 *C.GtkTextIter
	var rhs1 *C.GtkTextIter
	this1 = (*C.GtkTextIter)(unsafe.Pointer(this0))
	rhs1 = (*C.GtkTextIter)(unsafe.Pointer(rhs0))
	ret1 := C.gtk_text_iter_compare(this1, rhs1)
	var ret2 int
	ret2 = int(ret1)
	return ret2
}
func (this0 *TextIter) Copy() *TextIter {
	var this1 *C.GtkTextIter
	this1 = (*C.GtkTextIter)(unsafe.Pointer(this0))
	ret1 := C.gtk_text_iter_copy(this1)
	var ret2 *TextIter
	ret2 = (*TextIter)(unsafe.Pointer(ret1))
	return ret2
}
func (this0 *TextIter) Editable(default_setting0 bool) bool {
	var this1 *C.GtkTextIter
	var default_setting1 C.int
	this1 = (*C.GtkTextIter)(unsafe.Pointer(this0))
	default_setting1 = _GoBoolToCBool(default_setting0)
	ret1 := C.gtk_text_iter_editable(this1, default_setting1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *TextIter) EndsLine() bool {
	var this1 *C.GtkTextIter
	this1 = (*C.GtkTextIter)(unsafe.Pointer(this0))
	ret1 := C.gtk_text_iter_ends_line(this1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *TextIter) EndsSentence() bool {
	var this1 *C.GtkTextIter
	this1 = (*C.GtkTextIter)(unsafe.Pointer(this0))
	ret1 := C.gtk_text_iter_ends_sentence(this1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *TextIter) EndsTag(tag0 TextTagLike) bool {
	var this1 *C.GtkTextIter
	var tag1 *C.GtkTextTag
	this1 = (*C.GtkTextIter)(unsafe.Pointer(this0))
	if tag0 != nil {
		tag1 = tag0.InheritedFromGtkTextTag()
	}
	ret1 := C.gtk_text_iter_ends_tag(this1, tag1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *TextIter) EndsWord() bool {
	var this1 *C.GtkTextIter
	this1 = (*C.GtkTextIter)(unsafe.Pointer(this0))
	ret1 := C.gtk_text_iter_ends_word(this1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *TextIter) Equal(rhs0 *TextIter) bool {
	var this1 *C.GtkTextIter
	var rhs1 *C.GtkTextIter
	this1 = (*C.GtkTextIter)(unsafe.Pointer(this0))
	rhs1 = (*C.GtkTextIter)(unsafe.Pointer(rhs0))
	ret1 := C.gtk_text_iter_equal(this1, rhs1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *TextIter) ForwardChar() bool {
	var this1 *C.GtkTextIter
	this1 = (*C.GtkTextIter)(unsafe.Pointer(this0))
	ret1 := C.gtk_text_iter_forward_char(this1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *TextIter) ForwardChars(count0 int) bool {
	var this1 *C.GtkTextIter
	var count1 C.int32_t
	this1 = (*C.GtkTextIter)(unsafe.Pointer(this0))
	count1 = C.int32_t(count0)
	ret1 := C.gtk_text_iter_forward_chars(this1, count1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *TextIter) ForwardCursorPosition() bool {
	var this1 *C.GtkTextIter
	this1 = (*C.GtkTextIter)(unsafe.Pointer(this0))
	ret1 := C.gtk_text_iter_forward_cursor_position(this1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *TextIter) ForwardCursorPositions(count0 int) bool {
	var this1 *C.GtkTextIter
	var count1 C.int32_t
	this1 = (*C.GtkTextIter)(unsafe.Pointer(this0))
	count1 = C.int32_t(count0)
	ret1 := C.gtk_text_iter_forward_cursor_positions(this1, count1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *TextIter) ForwardFindChar(pred0 TextCharPredicate, limit0 *TextIter) bool {
	var this1 *C.GtkTextIter
	var pred1 unsafe.Pointer
	var limit1 *C.GtkTextIter
	this1 = (*C.GtkTextIter)(unsafe.Pointer(this0))
	if pred0 != nil {
		pred1 = unsafe.Pointer(&pred0)}
	limit1 = (*C.GtkTextIter)(unsafe.Pointer(limit0))
	ret1 := C._gtk_text_iter_forward_find_char(this1, pred1, limit1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *TextIter) ForwardLine() bool {
	var this1 *C.GtkTextIter
	this1 = (*C.GtkTextIter)(unsafe.Pointer(this0))
	ret1 := C.gtk_text_iter_forward_line(this1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *TextIter) ForwardLines(count0 int) bool {
	var this1 *C.GtkTextIter
	var count1 C.int32_t
	this1 = (*C.GtkTextIter)(unsafe.Pointer(this0))
	count1 = C.int32_t(count0)
	ret1 := C.gtk_text_iter_forward_lines(this1, count1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *TextIter) ForwardSearch(str0 string, flags0 TextSearchFlags, limit0 *TextIter) (TextIter, TextIter, bool) {
	var this1 *C.GtkTextIter
	var str1 *C.char
	var flags1 C.GtkTextSearchFlags
	var limit1 *C.GtkTextIter
	var match_start1 C.GtkTextIter
	var match_end1 C.GtkTextIter
	this1 = (*C.GtkTextIter)(unsafe.Pointer(this0))
	str1 = _GoStringToGString(str0)
	defer C.free(unsafe.Pointer(str1))
	flags1 = C.GtkTextSearchFlags(flags0)
	limit1 = (*C.GtkTextIter)(unsafe.Pointer(limit0))
	ret1 := C.gtk_text_iter_forward_search(this1, str1, flags1, &match_start1, &match_end1, limit1)
	var match_start2 TextIter
	var match_end2 TextIter
	var ret2 bool
	match_start2 = *(*TextIter)(unsafe.Pointer(&match_start1))
	match_end2 = *(*TextIter)(unsafe.Pointer(&match_end1))
	ret2 = ret1 != 0
	return match_start2, match_end2, ret2
}
func (this0 *TextIter) ForwardSentenceEnd() bool {
	var this1 *C.GtkTextIter
	this1 = (*C.GtkTextIter)(unsafe.Pointer(this0))
	ret1 := C.gtk_text_iter_forward_sentence_end(this1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *TextIter) ForwardSentenceEnds(count0 int) bool {
	var this1 *C.GtkTextIter
	var count1 C.int32_t
	this1 = (*C.GtkTextIter)(unsafe.Pointer(this0))
	count1 = C.int32_t(count0)
	ret1 := C.gtk_text_iter_forward_sentence_ends(this1, count1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *TextIter) ForwardToEnd() {
	var this1 *C.GtkTextIter
	this1 = (*C.GtkTextIter)(unsafe.Pointer(this0))
	C.gtk_text_iter_forward_to_end(this1)
}
func (this0 *TextIter) ForwardToLineEnd() bool {
	var this1 *C.GtkTextIter
	this1 = (*C.GtkTextIter)(unsafe.Pointer(this0))
	ret1 := C.gtk_text_iter_forward_to_line_end(this1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *TextIter) ForwardToTagToggle(tag0 TextTagLike) bool {
	var this1 *C.GtkTextIter
	var tag1 *C.GtkTextTag
	this1 = (*C.GtkTextIter)(unsafe.Pointer(this0))
	if tag0 != nil {
		tag1 = tag0.InheritedFromGtkTextTag()
	}
	ret1 := C.gtk_text_iter_forward_to_tag_toggle(this1, tag1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *TextIter) ForwardVisibleCursorPosition() bool {
	var this1 *C.GtkTextIter
	this1 = (*C.GtkTextIter)(unsafe.Pointer(this0))
	ret1 := C.gtk_text_iter_forward_visible_cursor_position(this1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *TextIter) ForwardVisibleCursorPositions(count0 int) bool {
	var this1 *C.GtkTextIter
	var count1 C.int32_t
	this1 = (*C.GtkTextIter)(unsafe.Pointer(this0))
	count1 = C.int32_t(count0)
	ret1 := C.gtk_text_iter_forward_visible_cursor_positions(this1, count1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *TextIter) ForwardVisibleLine() bool {
	var this1 *C.GtkTextIter
	this1 = (*C.GtkTextIter)(unsafe.Pointer(this0))
	ret1 := C.gtk_text_iter_forward_visible_line(this1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *TextIter) ForwardVisibleLines(count0 int) bool {
	var this1 *C.GtkTextIter
	var count1 C.int32_t
	this1 = (*C.GtkTextIter)(unsafe.Pointer(this0))
	count1 = C.int32_t(count0)
	ret1 := C.gtk_text_iter_forward_visible_lines(this1, count1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *TextIter) ForwardVisibleWordEnd() bool {
	var this1 *C.GtkTextIter
	this1 = (*C.GtkTextIter)(unsafe.Pointer(this0))
	ret1 := C.gtk_text_iter_forward_visible_word_end(this1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *TextIter) ForwardVisibleWordEnds(count0 int) bool {
	var this1 *C.GtkTextIter
	var count1 C.int32_t
	this1 = (*C.GtkTextIter)(unsafe.Pointer(this0))
	count1 = C.int32_t(count0)
	ret1 := C.gtk_text_iter_forward_visible_word_ends(this1, count1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *TextIter) ForwardWordEnd() bool {
	var this1 *C.GtkTextIter
	this1 = (*C.GtkTextIter)(unsafe.Pointer(this0))
	ret1 := C.gtk_text_iter_forward_word_end(this1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *TextIter) ForwardWordEnds(count0 int) bool {
	var this1 *C.GtkTextIter
	var count1 C.int32_t
	this1 = (*C.GtkTextIter)(unsafe.Pointer(this0))
	count1 = C.int32_t(count0)
	ret1 := C.gtk_text_iter_forward_word_ends(this1, count1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *TextIter) Free() {
	var this1 *C.GtkTextIter
	this1 = (*C.GtkTextIter)(unsafe.Pointer(this0))
	C.gtk_text_iter_free(this1)
}
func (this0 *TextIter) GetAttributes() (TextAttributes, bool) {
	var this1 *C.GtkTextIter
	var values1 C.GtkTextAttributes
	this1 = (*C.GtkTextIter)(unsafe.Pointer(this0))
	ret1 := C.gtk_text_iter_get_attributes(this1, &values1)
	var values2 TextAttributes
	var ret2 bool
	values2 = *(*TextAttributes)(unsafe.Pointer(&values1))
	ret2 = ret1 != 0
	return values2, ret2
}
func (this0 *TextIter) GetBuffer() *TextBuffer {
	var this1 *C.GtkTextIter
	this1 = (*C.GtkTextIter)(unsafe.Pointer(this0))
	ret1 := C.gtk_text_iter_get_buffer(this1)
	var ret2 *TextBuffer
	ret2 = (*TextBuffer)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
func (this0 *TextIter) GetBytesInLine() int {
	var this1 *C.GtkTextIter
	this1 = (*C.GtkTextIter)(unsafe.Pointer(this0))
	ret1 := C.gtk_text_iter_get_bytes_in_line(this1)
	var ret2 int
	ret2 = int(ret1)
	return ret2
}
func (this0 *TextIter) GetChar() rune {
	var this1 *C.GtkTextIter
	this1 = (*C.GtkTextIter)(unsafe.Pointer(this0))
	ret1 := C.gtk_text_iter_get_char(this1)
	var ret2 rune
	ret2 = rune(ret1)
	return ret2
}
func (this0 *TextIter) GetCharsInLine() int {
	var this1 *C.GtkTextIter
	this1 = (*C.GtkTextIter)(unsafe.Pointer(this0))
	ret1 := C.gtk_text_iter_get_chars_in_line(this1)
	var ret2 int
	ret2 = int(ret1)
	return ret2
}
func (this0 *TextIter) GetChildAnchor() *TextChildAnchor {
	var this1 *C.GtkTextIter
	this1 = (*C.GtkTextIter)(unsafe.Pointer(this0))
	ret1 := C.gtk_text_iter_get_child_anchor(this1)
	var ret2 *TextChildAnchor
	ret2 = (*TextChildAnchor)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
func (this0 *TextIter) GetLanguage() *pango.Language {
	var this1 *C.GtkTextIter
	this1 = (*C.GtkTextIter)(unsafe.Pointer(this0))
	ret1 := C.gtk_text_iter_get_language(this1)
	var ret2 *pango.Language
	ret2 = (*pango.Language)(unsafe.Pointer(ret1))
	return ret2
}
func (this0 *TextIter) GetLine() int {
	var this1 *C.GtkTextIter
	this1 = (*C.GtkTextIter)(unsafe.Pointer(this0))
	ret1 := C.gtk_text_iter_get_line(this1)
	var ret2 int
	ret2 = int(ret1)
	return ret2
}
func (this0 *TextIter) GetLineIndex() int {
	var this1 *C.GtkTextIter
	this1 = (*C.GtkTextIter)(unsafe.Pointer(this0))
	ret1 := C.gtk_text_iter_get_line_index(this1)
	var ret2 int
	ret2 = int(ret1)
	return ret2
}
func (this0 *TextIter) GetLineOffset() int {
	var this1 *C.GtkTextIter
	this1 = (*C.GtkTextIter)(unsafe.Pointer(this0))
	ret1 := C.gtk_text_iter_get_line_offset(this1)
	var ret2 int
	ret2 = int(ret1)
	return ret2
}
func (this0 *TextIter) GetMarks() []*TextMark {
	var this1 *C.GtkTextIter
	this1 = (*C.GtkTextIter)(unsafe.Pointer(this0))
	ret1 := C.gtk_text_iter_get_marks(this1)
	var ret2 []*TextMark
	for iter := (*_GSList)(unsafe.Pointer(ret1)); iter != nil; iter = iter.next {
		var elt *TextMark
		elt = (*TextMark)(gobject.ObjectWrap(unsafe.Pointer((*C.GtkTextMark)(iter.data)), true))
		ret2 = append(ret2, elt)
	}
	return ret2
}
func (this0 *TextIter) GetOffset() int {
	var this1 *C.GtkTextIter
	this1 = (*C.GtkTextIter)(unsafe.Pointer(this0))
	ret1 := C.gtk_text_iter_get_offset(this1)
	var ret2 int
	ret2 = int(ret1)
	return ret2
}
func (this0 *TextIter) GetPixbuf() *gdkpixbuf.Pixbuf {
	var this1 *C.GtkTextIter
	this1 = (*C.GtkTextIter)(unsafe.Pointer(this0))
	ret1 := C.gtk_text_iter_get_pixbuf(this1)
	var ret2 *gdkpixbuf.Pixbuf
	ret2 = (*gdkpixbuf.Pixbuf)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
func (this0 *TextIter) GetSlice(end0 *TextIter) string {
	var this1 *C.GtkTextIter
	var end1 *C.GtkTextIter
	this1 = (*C.GtkTextIter)(unsafe.Pointer(this0))
	end1 = (*C.GtkTextIter)(unsafe.Pointer(end0))
	ret1 := C.gtk_text_iter_get_slice(this1, end1)
	var ret2 string
	ret2 = C.GoString(ret1)
	C.g_free(unsafe.Pointer(ret1))
	return ret2
}
func (this0 *TextIter) GetTags() []*TextTag {
	var this1 *C.GtkTextIter
	this1 = (*C.GtkTextIter)(unsafe.Pointer(this0))
	ret1 := C.gtk_text_iter_get_tags(this1)
	var ret2 []*TextTag
	for iter := (*_GSList)(unsafe.Pointer(ret1)); iter != nil; iter = iter.next {
		var elt *TextTag
		elt = (*TextTag)(gobject.ObjectWrap(unsafe.Pointer((*C.GtkTextTag)(iter.data)), true))
		ret2 = append(ret2, elt)
	}
	return ret2
}
func (this0 *TextIter) GetText(end0 *TextIter) string {
	var this1 *C.GtkTextIter
	var end1 *C.GtkTextIter
	this1 = (*C.GtkTextIter)(unsafe.Pointer(this0))
	end1 = (*C.GtkTextIter)(unsafe.Pointer(end0))
	ret1 := C.gtk_text_iter_get_text(this1, end1)
	var ret2 string
	ret2 = C.GoString(ret1)
	C.g_free(unsafe.Pointer(ret1))
	return ret2
}
func (this0 *TextIter) GetToggledTags(toggled_on0 bool) []*TextTag {
	var this1 *C.GtkTextIter
	var toggled_on1 C.int
	this1 = (*C.GtkTextIter)(unsafe.Pointer(this0))
	toggled_on1 = _GoBoolToCBool(toggled_on0)
	ret1 := C.gtk_text_iter_get_toggled_tags(this1, toggled_on1)
	var ret2 []*TextTag
	for iter := (*_GSList)(unsafe.Pointer(ret1)); iter != nil; iter = iter.next {
		var elt *TextTag
		elt = (*TextTag)(gobject.ObjectWrap(unsafe.Pointer((*C.GtkTextTag)(iter.data)), true))
		ret2 = append(ret2, elt)
	}
	return ret2
}
func (this0 *TextIter) GetVisibleLineIndex() int {
	var this1 *C.GtkTextIter
	this1 = (*C.GtkTextIter)(unsafe.Pointer(this0))
	ret1 := C.gtk_text_iter_get_visible_line_index(this1)
	var ret2 int
	ret2 = int(ret1)
	return ret2
}
func (this0 *TextIter) GetVisibleLineOffset() int {
	var this1 *C.GtkTextIter
	this1 = (*C.GtkTextIter)(unsafe.Pointer(this0))
	ret1 := C.gtk_text_iter_get_visible_line_offset(this1)
	var ret2 int
	ret2 = int(ret1)
	return ret2
}
func (this0 *TextIter) GetVisibleSlice(end0 *TextIter) string {
	var this1 *C.GtkTextIter
	var end1 *C.GtkTextIter
	this1 = (*C.GtkTextIter)(unsafe.Pointer(this0))
	end1 = (*C.GtkTextIter)(unsafe.Pointer(end0))
	ret1 := C.gtk_text_iter_get_visible_slice(this1, end1)
	var ret2 string
	ret2 = C.GoString(ret1)
	C.g_free(unsafe.Pointer(ret1))
	return ret2
}
func (this0 *TextIter) GetVisibleText(end0 *TextIter) string {
	var this1 *C.GtkTextIter
	var end1 *C.GtkTextIter
	this1 = (*C.GtkTextIter)(unsafe.Pointer(this0))
	end1 = (*C.GtkTextIter)(unsafe.Pointer(end0))
	ret1 := C.gtk_text_iter_get_visible_text(this1, end1)
	var ret2 string
	ret2 = C.GoString(ret1)
	C.g_free(unsafe.Pointer(ret1))
	return ret2
}
func (this0 *TextIter) HasTag(tag0 TextTagLike) bool {
	var this1 *C.GtkTextIter
	var tag1 *C.GtkTextTag
	this1 = (*C.GtkTextIter)(unsafe.Pointer(this0))
	if tag0 != nil {
		tag1 = tag0.InheritedFromGtkTextTag()
	}
	ret1 := C.gtk_text_iter_has_tag(this1, tag1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *TextIter) InRange(start0 *TextIter, end0 *TextIter) bool {
	var this1 *C.GtkTextIter
	var start1 *C.GtkTextIter
	var end1 *C.GtkTextIter
	this1 = (*C.GtkTextIter)(unsafe.Pointer(this0))
	start1 = (*C.GtkTextIter)(unsafe.Pointer(start0))
	end1 = (*C.GtkTextIter)(unsafe.Pointer(end0))
	ret1 := C.gtk_text_iter_in_range(this1, start1, end1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *TextIter) InsideSentence() bool {
	var this1 *C.GtkTextIter
	this1 = (*C.GtkTextIter)(unsafe.Pointer(this0))
	ret1 := C.gtk_text_iter_inside_sentence(this1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *TextIter) InsideWord() bool {
	var this1 *C.GtkTextIter
	this1 = (*C.GtkTextIter)(unsafe.Pointer(this0))
	ret1 := C.gtk_text_iter_inside_word(this1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *TextIter) IsCursorPosition() bool {
	var this1 *C.GtkTextIter
	this1 = (*C.GtkTextIter)(unsafe.Pointer(this0))
	ret1 := C.gtk_text_iter_is_cursor_position(this1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *TextIter) IsEnd() bool {
	var this1 *C.GtkTextIter
	this1 = (*C.GtkTextIter)(unsafe.Pointer(this0))
	ret1 := C.gtk_text_iter_is_end(this1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *TextIter) IsStart() bool {
	var this1 *C.GtkTextIter
	this1 = (*C.GtkTextIter)(unsafe.Pointer(this0))
	ret1 := C.gtk_text_iter_is_start(this1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *TextIter) Order(second0 *TextIter) {
	var this1 *C.GtkTextIter
	var second1 *C.GtkTextIter
	this1 = (*C.GtkTextIter)(unsafe.Pointer(this0))
	second1 = (*C.GtkTextIter)(unsafe.Pointer(second0))
	C.gtk_text_iter_order(this1, second1)
}
func (this0 *TextIter) SetLine(line_number0 int) {
	var this1 *C.GtkTextIter
	var line_number1 C.int32_t
	this1 = (*C.GtkTextIter)(unsafe.Pointer(this0))
	line_number1 = C.int32_t(line_number0)
	C.gtk_text_iter_set_line(this1, line_number1)
}
func (this0 *TextIter) SetLineIndex(byte_on_line0 int) {
	var this1 *C.GtkTextIter
	var byte_on_line1 C.int32_t
	this1 = (*C.GtkTextIter)(unsafe.Pointer(this0))
	byte_on_line1 = C.int32_t(byte_on_line0)
	C.gtk_text_iter_set_line_index(this1, byte_on_line1)
}
func (this0 *TextIter) SetLineOffset(char_on_line0 int) {
	var this1 *C.GtkTextIter
	var char_on_line1 C.int32_t
	this1 = (*C.GtkTextIter)(unsafe.Pointer(this0))
	char_on_line1 = C.int32_t(char_on_line0)
	C.gtk_text_iter_set_line_offset(this1, char_on_line1)
}
func (this0 *TextIter) SetOffset(char_offset0 int) {
	var this1 *C.GtkTextIter
	var char_offset1 C.int32_t
	this1 = (*C.GtkTextIter)(unsafe.Pointer(this0))
	char_offset1 = C.int32_t(char_offset0)
	C.gtk_text_iter_set_offset(this1, char_offset1)
}
func (this0 *TextIter) SetVisibleLineIndex(byte_on_line0 int) {
	var this1 *C.GtkTextIter
	var byte_on_line1 C.int32_t
	this1 = (*C.GtkTextIter)(unsafe.Pointer(this0))
	byte_on_line1 = C.int32_t(byte_on_line0)
	C.gtk_text_iter_set_visible_line_index(this1, byte_on_line1)
}
func (this0 *TextIter) SetVisibleLineOffset(char_on_line0 int) {
	var this1 *C.GtkTextIter
	var char_on_line1 C.int32_t
	this1 = (*C.GtkTextIter)(unsafe.Pointer(this0))
	char_on_line1 = C.int32_t(char_on_line0)
	C.gtk_text_iter_set_visible_line_offset(this1, char_on_line1)
}
func (this0 *TextIter) StartsLine() bool {
	var this1 *C.GtkTextIter
	this1 = (*C.GtkTextIter)(unsafe.Pointer(this0))
	ret1 := C.gtk_text_iter_starts_line(this1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *TextIter) StartsSentence() bool {
	var this1 *C.GtkTextIter
	this1 = (*C.GtkTextIter)(unsafe.Pointer(this0))
	ret1 := C.gtk_text_iter_starts_sentence(this1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *TextIter) StartsWord() bool {
	var this1 *C.GtkTextIter
	this1 = (*C.GtkTextIter)(unsafe.Pointer(this0))
	ret1 := C.gtk_text_iter_starts_word(this1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *TextIter) TogglesTag(tag0 TextTagLike) bool {
	var this1 *C.GtkTextIter
	var tag1 *C.GtkTextTag
	this1 = (*C.GtkTextIter)(unsafe.Pointer(this0))
	if tag0 != nil {
		tag1 = tag0.InheritedFromGtkTextTag()
	}
	ret1 := C.gtk_text_iter_toggles_tag(this1, tag1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
type TextMarkLike interface {
	gobject.ObjectLike
	InheritedFromGtkTextMark() *C.GtkTextMark
}

type TextMark struct {
	gobject.Object
	
}

func ToTextMark(objlike gobject.ObjectLike) *TextMark {
	c := objlike.InheritedFromGObject()
	if c == nil {
		return nil
	}
	t := (*TextMark)(nil).GetStaticType()
	obj := gobject.ObjectGrabIfType(unsafe.Pointer(c), t)
	if obj != nil {
		return (*TextMark)(obj)
	}
	panic("cannot cast to TextMark")
}

func (this0 *TextMark) InheritedFromGtkTextMark() *C.GtkTextMark {
	if this0 == nil {
		return nil
	}
	return (*C.GtkTextMark)(this0.C)
}

func (this0 *TextMark) GetStaticType() gobject.Type {
	return gobject.Type(C.gtk_text_mark_get_type())
}

func TextMarkGetType() gobject.Type {
	return (*TextMark)(nil).GetStaticType()
}
func NewTextMark(name0 string, left_gravity0 bool) *TextMark {
	var name1 *C.char
	var left_gravity1 C.int
	name1 = _GoStringToGString(name0)
	defer C.free(unsafe.Pointer(name1))
	left_gravity1 = _GoBoolToCBool(left_gravity0)
	ret1 := C.gtk_text_mark_new(name1, left_gravity1)
	var ret2 *TextMark
	ret2 = (*TextMark)(gobject.ObjectWrap(unsafe.Pointer(ret1), false))
	return ret2
}
func (this0 *TextMark) GetBuffer() *TextBuffer {
	var this1 *C.GtkTextMark
	if this0 != nil {
		this1 = this0.InheritedFromGtkTextMark()
	}
	ret1 := C.gtk_text_mark_get_buffer(this1)
	var ret2 *TextBuffer
	ret2 = (*TextBuffer)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
func (this0 *TextMark) GetDeleted() bool {
	var this1 *C.GtkTextMark
	if this0 != nil {
		this1 = this0.InheritedFromGtkTextMark()
	}
	ret1 := C.gtk_text_mark_get_deleted(this1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *TextMark) GetLeftGravity() bool {
	var this1 *C.GtkTextMark
	if this0 != nil {
		this1 = this0.InheritedFromGtkTextMark()
	}
	ret1 := C.gtk_text_mark_get_left_gravity(this1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *TextMark) GetName() string {
	var this1 *C.GtkTextMark
	if this0 != nil {
		this1 = this0.InheritedFromGtkTextMark()
	}
	ret1 := C.gtk_text_mark_get_name(this1)
	var ret2 string
	ret2 = C.GoString(ret1)
	return ret2
}
func (this0 *TextMark) GetVisible() bool {
	var this1 *C.GtkTextMark
	if this0 != nil {
		this1 = this0.InheritedFromGtkTextMark()
	}
	ret1 := C.gtk_text_mark_get_visible(this1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *TextMark) SetVisible(setting0 bool) {
	var this1 *C.GtkTextMark
	var setting1 C.int
	if this0 != nil {
		this1 = this0.InheritedFromGtkTextMark()
	}
	setting1 = _GoBoolToCBool(setting0)
	C.gtk_text_mark_set_visible(this1, setting1)
}
type TextSearchFlags C.uint32_t
const (
	TextSearchFlagsVisibleOnly TextSearchFlags = 1
	TextSearchFlagsTextOnly TextSearchFlags = 2
	TextSearchFlagsCaseInsensitive TextSearchFlags = 4
)
type TextTagLike interface {
	gobject.ObjectLike
	InheritedFromGtkTextTag() *C.GtkTextTag
}

type TextTag struct {
	gobject.Object
	
}

func ToTextTag(objlike gobject.ObjectLike) *TextTag {
	c := objlike.InheritedFromGObject()
	if c == nil {
		return nil
	}
	t := (*TextTag)(nil).GetStaticType()
	obj := gobject.ObjectGrabIfType(unsafe.Pointer(c), t)
	if obj != nil {
		return (*TextTag)(obj)
	}
	panic("cannot cast to TextTag")
}

func (this0 *TextTag) InheritedFromGtkTextTag() *C.GtkTextTag {
	if this0 == nil {
		return nil
	}
	return (*C.GtkTextTag)(this0.C)
}

func (this0 *TextTag) GetStaticType() gobject.Type {
	return gobject.Type(C.gtk_text_tag_get_type())
}

func TextTagGetType() gobject.Type {
	return (*TextTag)(nil).GetStaticType()
}
func NewTextTag(name0 string) *TextTag {
	var name1 *C.char
	name1 = _GoStringToGString(name0)
	defer C.free(unsafe.Pointer(name1))
	ret1 := C.gtk_text_tag_new(name1)
	var ret2 *TextTag
	ret2 = (*TextTag)(gobject.ObjectWrap(unsafe.Pointer(ret1), false))
	return ret2
}
func (this0 *TextTag) Event(event_object0 gobject.ObjectLike, event0 *gdk.Event, iter0 *TextIter) bool {
	var this1 *C.GtkTextTag
	var event_object1 *C.GObject
	var event1 *C.GdkEvent
	var iter1 *C.GtkTextIter
	if this0 != nil {
		this1 = this0.InheritedFromGtkTextTag()
	}
	if event_object0 != nil {
		event_object1 = event_object0.InheritedFromGObject()
	}
	iter1 = (*C.GtkTextIter)(unsafe.Pointer(iter0))
	ret1 := C.gtk_text_tag_event(this1, event_object1, event1, iter1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *TextTag) GetPriority() int {
	var this1 *C.GtkTextTag
	if this0 != nil {
		this1 = this0.InheritedFromGtkTextTag()
	}
	ret1 := C.gtk_text_tag_get_priority(this1)
	var ret2 int
	ret2 = int(ret1)
	return ret2
}
func (this0 *TextTag) SetPriority(priority0 int) {
	var this1 *C.GtkTextTag
	var priority1 C.int32_t
	if this0 != nil {
		this1 = this0.InheritedFromGtkTextTag()
	}
	priority1 = C.int32_t(priority0)
	C.gtk_text_tag_set_priority(this1, priority1)
}
type TextTagTableLike interface {
	gobject.ObjectLike
	InheritedFromGtkTextTagTable() *C.GtkTextTagTable
}

type TextTagTable struct {
	gobject.Object
	BuildableImpl
}

func ToTextTagTable(objlike gobject.ObjectLike) *TextTagTable {
	c := objlike.InheritedFromGObject()
	if c == nil {
		return nil
	}
	t := (*TextTagTable)(nil).GetStaticType()
	obj := gobject.ObjectGrabIfType(unsafe.Pointer(c), t)
	if obj != nil {
		return (*TextTagTable)(obj)
	}
	panic("cannot cast to TextTagTable")
}

func (this0 *TextTagTable) InheritedFromGtkTextTagTable() *C.GtkTextTagTable {
	if this0 == nil {
		return nil
	}
	return (*C.GtkTextTagTable)(this0.C)
}

func (this0 *TextTagTable) GetStaticType() gobject.Type {
	return gobject.Type(C.gtk_text_tag_table_get_type())
}

func TextTagTableGetType() gobject.Type {
	return (*TextTagTable)(nil).GetStaticType()
}
func NewTextTagTable() *TextTagTable {
	ret1 := C.gtk_text_tag_table_new()
	var ret2 *TextTagTable
	ret2 = (*TextTagTable)(gobject.ObjectWrap(unsafe.Pointer(ret1), false))
	return ret2
}
func (this0 *TextTagTable) Add(tag0 TextTagLike) {
	var this1 *C.GtkTextTagTable
	var tag1 *C.GtkTextTag
	if this0 != nil {
		this1 = this0.InheritedFromGtkTextTagTable()
	}
	if tag0 != nil {
		tag1 = tag0.InheritedFromGtkTextTag()
	}
	C.gtk_text_tag_table_add(this1, tag1)
}
func (this0 *TextTagTable) Foreach(func0 TextTagTableForeach) {
	var this1 *C.GtkTextTagTable
	var func1 unsafe.Pointer
	if this0 != nil {
		this1 = this0.InheritedFromGtkTextTagTable()
	}
	if func0 != nil {
		func1 = unsafe.Pointer(&func0)}
	C._gtk_text_tag_table_foreach(this1, func1)
}
func (this0 *TextTagTable) GetSize() int {
	var this1 *C.GtkTextTagTable
	if this0 != nil {
		this1 = this0.InheritedFromGtkTextTagTable()
	}
	ret1 := C.gtk_text_tag_table_get_size(this1)
	var ret2 int
	ret2 = int(ret1)
	return ret2
}
func (this0 *TextTagTable) Lookup(name0 string) *TextTag {
	var this1 *C.GtkTextTagTable
	var name1 *C.char
	if this0 != nil {
		this1 = this0.InheritedFromGtkTextTagTable()
	}
	name1 = _GoStringToGString(name0)
	defer C.free(unsafe.Pointer(name1))
	ret1 := C.gtk_text_tag_table_lookup(this1, name1)
	var ret2 *TextTag
	ret2 = (*TextTag)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
func (this0 *TextTagTable) Remove(tag0 TextTagLike) {
	var this1 *C.GtkTextTagTable
	var tag1 *C.GtkTextTag
	if this0 != nil {
		this1 = this0.InheritedFromGtkTextTagTable()
	}
	if tag0 != nil {
		tag1 = tag0.InheritedFromGtkTextTag()
	}
	C.gtk_text_tag_table_remove(this1, tag1)
}
type TextTagTableForeach func(tag *TextTag)
//export _GtkTextTagTableForeach_c_wrapper
func _GtkTextTagTableForeach_c_wrapper(tag0 unsafe.Pointer, data0 unsafe.Pointer) {
	var tag1 *TextTag
	var data1 TextTagTableForeach
	tag1 = (*TextTag)(gobject.ObjectWrap(unsafe.Pointer((*C.GtkTextTag)(tag0)), true))
	data1 = *(*TextTagTableForeach)(data0)
	data1(tag1)
}
//export _GtkTextTagTableForeach_c_wrapper_once
func _GtkTextTagTableForeach_c_wrapper_once(tag0 unsafe.Pointer, data0 unsafe.Pointer) {
	_GtkTextTagTableForeach_c_wrapper(tag0, data0)
	gobject.Holder.Release(data0)
}
type TextViewLike interface {
	ContainerLike
	InheritedFromGtkTextView() *C.GtkTextView
}

type TextView struct {
	Container
	atk.ImplementorIfaceImpl
	BuildableImpl
	ScrollableImpl
}

func ToTextView(objlike gobject.ObjectLike) *TextView {
	c := objlike.InheritedFromGObject()
	if c == nil {
		return nil
	}
	t := (*TextView)(nil).GetStaticType()
	obj := gobject.ObjectGrabIfType(unsafe.Pointer(c), t)
	if obj != nil {
		return (*TextView)(obj)
	}
	panic("cannot cast to TextView")
}

func (this0 *TextView) InheritedFromGtkTextView() *C.GtkTextView {
	if this0 == nil {
		return nil
	}
	return (*C.GtkTextView)(this0.C)
}

func (this0 *TextView) GetStaticType() gobject.Type {
	return gobject.Type(C.gtk_text_view_get_type())
}

func TextViewGetType() gobject.Type {
	return (*TextView)(nil).GetStaticType()
}
func NewTextView() *TextView {
	ret1 := C.gtk_text_view_new()
	var ret2 *TextView
	ret2 = (*TextView)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
func NewTextViewWithBuffer(buffer0 TextBufferLike) *TextView {
	var buffer1 *C.GtkTextBuffer
	if buffer0 != nil {
		buffer1 = buffer0.InheritedFromGtkTextBuffer()
	}
	ret1 := C.gtk_text_view_new_with_buffer(buffer1)
	var ret2 *TextView
	ret2 = (*TextView)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
func (this0 *TextView) AddChildAtAnchor(child0 WidgetLike, anchor0 TextChildAnchorLike) {
	var this1 *C.GtkTextView
	var child1 *C.GtkWidget
	var anchor1 *C.GtkTextChildAnchor
	if this0 != nil {
		this1 = this0.InheritedFromGtkTextView()
	}
	if child0 != nil {
		child1 = child0.InheritedFromGtkWidget()
	}
	if anchor0 != nil {
		anchor1 = anchor0.InheritedFromGtkTextChildAnchor()
	}
	C.gtk_text_view_add_child_at_anchor(this1, child1, anchor1)
}
func (this0 *TextView) AddChildInWindow(child0 WidgetLike, which_window0 TextWindowType, xpos0 int, ypos0 int) {
	var this1 *C.GtkTextView
	var child1 *C.GtkWidget
	var which_window1 C.GtkTextWindowType
	var xpos1 C.int32_t
	var ypos1 C.int32_t
	if this0 != nil {
		this1 = this0.InheritedFromGtkTextView()
	}
	if child0 != nil {
		child1 = child0.InheritedFromGtkWidget()
	}
	which_window1 = C.GtkTextWindowType(which_window0)
	xpos1 = C.int32_t(xpos0)
	ypos1 = C.int32_t(ypos0)
	C.gtk_text_view_add_child_in_window(this1, child1, which_window1, xpos1, ypos1)
}
func (this0 *TextView) BackwardDisplayLine(iter0 *TextIter) bool {
	var this1 *C.GtkTextView
	var iter1 *C.GtkTextIter
	if this0 != nil {
		this1 = this0.InheritedFromGtkTextView()
	}
	iter1 = (*C.GtkTextIter)(unsafe.Pointer(iter0))
	ret1 := C.gtk_text_view_backward_display_line(this1, iter1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *TextView) BackwardDisplayLineStart(iter0 *TextIter) bool {
	var this1 *C.GtkTextView
	var iter1 *C.GtkTextIter
	if this0 != nil {
		this1 = this0.InheritedFromGtkTextView()
	}
	iter1 = (*C.GtkTextIter)(unsafe.Pointer(iter0))
	ret1 := C.gtk_text_view_backward_display_line_start(this1, iter1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *TextView) BufferToWindowCoords(win0 TextWindowType, buffer_x0 int, buffer_y0 int) (int, int) {
	var this1 *C.GtkTextView
	var win1 C.GtkTextWindowType
	var buffer_x1 C.int32_t
	var buffer_y1 C.int32_t
	var window_x1 C.int32_t
	var window_y1 C.int32_t
	if this0 != nil {
		this1 = this0.InheritedFromGtkTextView()
	}
	win1 = C.GtkTextWindowType(win0)
	buffer_x1 = C.int32_t(buffer_x0)
	buffer_y1 = C.int32_t(buffer_y0)
	C.gtk_text_view_buffer_to_window_coords(this1, win1, buffer_x1, buffer_y1, &window_x1, &window_y1)
	var window_x2 int
	var window_y2 int
	window_x2 = int(window_x1)
	window_y2 = int(window_y1)
	return window_x2, window_y2
}
func (this0 *TextView) ForwardDisplayLine(iter0 *TextIter) bool {
	var this1 *C.GtkTextView
	var iter1 *C.GtkTextIter
	if this0 != nil {
		this1 = this0.InheritedFromGtkTextView()
	}
	iter1 = (*C.GtkTextIter)(unsafe.Pointer(iter0))
	ret1 := C.gtk_text_view_forward_display_line(this1, iter1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *TextView) ForwardDisplayLineEnd(iter0 *TextIter) bool {
	var this1 *C.GtkTextView
	var iter1 *C.GtkTextIter
	if this0 != nil {
		this1 = this0.InheritedFromGtkTextView()
	}
	iter1 = (*C.GtkTextIter)(unsafe.Pointer(iter0))
	ret1 := C.gtk_text_view_forward_display_line_end(this1, iter1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *TextView) GetAcceptsTab() bool {
	var this1 *C.GtkTextView
	if this0 != nil {
		this1 = this0.InheritedFromGtkTextView()
	}
	ret1 := C.gtk_text_view_get_accepts_tab(this1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *TextView) GetBorderWindowSize(type0 TextWindowType) int {
	var this1 *C.GtkTextView
	var type1 C.GtkTextWindowType
	if this0 != nil {
		this1 = this0.InheritedFromGtkTextView()
	}
	type1 = C.GtkTextWindowType(type0)
	ret1 := C.gtk_text_view_get_border_window_size(this1, type1)
	var ret2 int
	ret2 = int(ret1)
	return ret2
}
func (this0 *TextView) GetBuffer() *TextBuffer {
	var this1 *C.GtkTextView
	if this0 != nil {
		this1 = this0.InheritedFromGtkTextView()
	}
	ret1 := C.gtk_text_view_get_buffer(this1)
	var ret2 *TextBuffer
	ret2 = (*TextBuffer)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
func (this0 *TextView) GetCursorLocations(iter0 *TextIter) (cairo.RectangleInt, cairo.RectangleInt) {
	var this1 *C.GtkTextView
	var iter1 *C.GtkTextIter
	var strong1 C.cairoRectangleInt
	var weak1 C.cairoRectangleInt
	if this0 != nil {
		this1 = this0.InheritedFromGtkTextView()
	}
	iter1 = (*C.GtkTextIter)(unsafe.Pointer(iter0))
	C.gtk_text_view_get_cursor_locations(this1, iter1, &strong1, &weak1)
	var strong2 cairo.RectangleInt
	var weak2 cairo.RectangleInt
	strong2 = *(*cairo.RectangleInt)(unsafe.Pointer(&strong1))
	weak2 = *(*cairo.RectangleInt)(unsafe.Pointer(&weak1))
	return strong2, weak2
}
func (this0 *TextView) GetCursorVisible() bool {
	var this1 *C.GtkTextView
	if this0 != nil {
		this1 = this0.InheritedFromGtkTextView()
	}
	ret1 := C.gtk_text_view_get_cursor_visible(this1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *TextView) GetDefaultAttributes() *TextAttributes {
	var this1 *C.GtkTextView
	if this0 != nil {
		this1 = this0.InheritedFromGtkTextView()
	}
	ret1 := C.gtk_text_view_get_default_attributes(this1)
	var ret2 *TextAttributes
	ret2 = (*TextAttributes)(unsafe.Pointer(ret1))
	return ret2
}
func (this0 *TextView) GetEditable() bool {
	var this1 *C.GtkTextView
	if this0 != nil {
		this1 = this0.InheritedFromGtkTextView()
	}
	ret1 := C.gtk_text_view_get_editable(this1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *TextView) GetHAdjustment() *Adjustment {
	var this1 *C.GtkTextView
	if this0 != nil {
		this1 = this0.InheritedFromGtkTextView()
	}
	ret1 := C.gtk_text_view_get_hadjustment(this1)
	var ret2 *Adjustment
	ret2 = (*Adjustment)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
func (this0 *TextView) GetIndent() int {
	var this1 *C.GtkTextView
	if this0 != nil {
		this1 = this0.InheritedFromGtkTextView()
	}
	ret1 := C.gtk_text_view_get_indent(this1)
	var ret2 int
	ret2 = int(ret1)
	return ret2
}
func (this0 *TextView) GetIterAtLocation(x0 int, y0 int) TextIter {
	var this1 *C.GtkTextView
	var x1 C.int32_t
	var y1 C.int32_t
	var iter1 C.GtkTextIter
	if this0 != nil {
		this1 = this0.InheritedFromGtkTextView()
	}
	x1 = C.int32_t(x0)
	y1 = C.int32_t(y0)
	C.gtk_text_view_get_iter_at_location(this1, &iter1, x1, y1)
	var iter2 TextIter
	iter2 = *(*TextIter)(unsafe.Pointer(&iter1))
	return iter2
}
func (this0 *TextView) GetIterAtPosition(x0 int, y0 int) (TextIter, int) {
	var this1 *C.GtkTextView
	var x1 C.int32_t
	var y1 C.int32_t
	var iter1 C.GtkTextIter
	var trailing1 C.int32_t
	if this0 != nil {
		this1 = this0.InheritedFromGtkTextView()
	}
	x1 = C.int32_t(x0)
	y1 = C.int32_t(y0)
	C.gtk_text_view_get_iter_at_position(this1, &iter1, &trailing1, x1, y1)
	var iter2 TextIter
	var trailing2 int
	iter2 = *(*TextIter)(unsafe.Pointer(&iter1))
	trailing2 = int(trailing1)
	return iter2, trailing2
}
func (this0 *TextView) GetIterLocation(iter0 *TextIter) cairo.RectangleInt {
	var this1 *C.GtkTextView
	var iter1 *C.GtkTextIter
	var location1 C.cairoRectangleInt
	if this0 != nil {
		this1 = this0.InheritedFromGtkTextView()
	}
	iter1 = (*C.GtkTextIter)(unsafe.Pointer(iter0))
	C.gtk_text_view_get_iter_location(this1, iter1, &location1)
	var location2 cairo.RectangleInt
	location2 = *(*cairo.RectangleInt)(unsafe.Pointer(&location1))
	return location2
}
func (this0 *TextView) GetJustification() Justification {
	var this1 *C.GtkTextView
	if this0 != nil {
		this1 = this0.InheritedFromGtkTextView()
	}
	ret1 := C.gtk_text_view_get_justification(this1)
	var ret2 Justification
	ret2 = Justification(ret1)
	return ret2
}
func (this0 *TextView) GetLeftMargin() int {
	var this1 *C.GtkTextView
	if this0 != nil {
		this1 = this0.InheritedFromGtkTextView()
	}
	ret1 := C.gtk_text_view_get_left_margin(this1)
	var ret2 int
	ret2 = int(ret1)
	return ret2
}
func (this0 *TextView) GetLineAtY(y0 int) (TextIter, int) {
	var this1 *C.GtkTextView
	var y1 C.int32_t
	var target_iter1 C.GtkTextIter
	var line_top1 C.int32_t
	if this0 != nil {
		this1 = this0.InheritedFromGtkTextView()
	}
	y1 = C.int32_t(y0)
	C.gtk_text_view_get_line_at_y(this1, &target_iter1, y1, &line_top1)
	var target_iter2 TextIter
	var line_top2 int
	target_iter2 = *(*TextIter)(unsafe.Pointer(&target_iter1))
	line_top2 = int(line_top1)
	return target_iter2, line_top2
}
func (this0 *TextView) GetLineYRange(iter0 *TextIter) (int, int) {
	var this1 *C.GtkTextView
	var iter1 *C.GtkTextIter
	var y1 C.int32_t
	var height1 C.int32_t
	if this0 != nil {
		this1 = this0.InheritedFromGtkTextView()
	}
	iter1 = (*C.GtkTextIter)(unsafe.Pointer(iter0))
	C.gtk_text_view_get_line_yrange(this1, iter1, &y1, &height1)
	var y2 int
	var height2 int
	y2 = int(y1)
	height2 = int(height1)
	return y2, height2
}
func (this0 *TextView) GetOverwrite() bool {
	var this1 *C.GtkTextView
	if this0 != nil {
		this1 = this0.InheritedFromGtkTextView()
	}
	ret1 := C.gtk_text_view_get_overwrite(this1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *TextView) GetPixelsAboveLines() int {
	var this1 *C.GtkTextView
	if this0 != nil {
		this1 = this0.InheritedFromGtkTextView()
	}
	ret1 := C.gtk_text_view_get_pixels_above_lines(this1)
	var ret2 int
	ret2 = int(ret1)
	return ret2
}
func (this0 *TextView) GetPixelsBelowLines() int {
	var this1 *C.GtkTextView
	if this0 != nil {
		this1 = this0.InheritedFromGtkTextView()
	}
	ret1 := C.gtk_text_view_get_pixels_below_lines(this1)
	var ret2 int
	ret2 = int(ret1)
	return ret2
}
func (this0 *TextView) GetPixelsInsideWrap() int {
	var this1 *C.GtkTextView
	if this0 != nil {
		this1 = this0.InheritedFromGtkTextView()
	}
	ret1 := C.gtk_text_view_get_pixels_inside_wrap(this1)
	var ret2 int
	ret2 = int(ret1)
	return ret2
}
func (this0 *TextView) GetRightMargin() int {
	var this1 *C.GtkTextView
	if this0 != nil {
		this1 = this0.InheritedFromGtkTextView()
	}
	ret1 := C.gtk_text_view_get_right_margin(this1)
	var ret2 int
	ret2 = int(ret1)
	return ret2
}
func (this0 *TextView) GetTabs() *pango.TabArray {
	var this1 *C.GtkTextView
	if this0 != nil {
		this1 = this0.InheritedFromGtkTextView()
	}
	ret1 := C.gtk_text_view_get_tabs(this1)
	var ret2 *pango.TabArray
	ret2 = (*pango.TabArray)(unsafe.Pointer(ret1))
	return ret2
}
func (this0 *TextView) GetVAdjustment() *Adjustment {
	var this1 *C.GtkTextView
	if this0 != nil {
		this1 = this0.InheritedFromGtkTextView()
	}
	ret1 := C.gtk_text_view_get_vadjustment(this1)
	var ret2 *Adjustment
	ret2 = (*Adjustment)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
func (this0 *TextView) GetVisibleRect() cairo.RectangleInt {
	var this1 *C.GtkTextView
	var visible_rect1 C.cairoRectangleInt
	if this0 != nil {
		this1 = this0.InheritedFromGtkTextView()
	}
	C.gtk_text_view_get_visible_rect(this1, &visible_rect1)
	var visible_rect2 cairo.RectangleInt
	visible_rect2 = *(*cairo.RectangleInt)(unsafe.Pointer(&visible_rect1))
	return visible_rect2
}
func (this0 *TextView) GetWindow(win0 TextWindowType) *gdk.Window {
	var this1 *C.GtkTextView
	var win1 C.GtkTextWindowType
	if this0 != nil {
		this1 = this0.InheritedFromGtkTextView()
	}
	win1 = C.GtkTextWindowType(win0)
	ret1 := C.gtk_text_view_get_window(this1, win1)
	var ret2 *gdk.Window
	ret2 = (*gdk.Window)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
func (this0 *TextView) GetWindowType(window0 gdk.WindowLike) TextWindowType {
	var this1 *C.GtkTextView
	var window1 *C.GdkWindow
	if this0 != nil {
		this1 = this0.InheritedFromGtkTextView()
	}
	if window0 != nil {
		window1 = window0.InheritedFromGdkWindow()
	}
	ret1 := C.gtk_text_view_get_window_type(this1, window1)
	var ret2 TextWindowType
	ret2 = TextWindowType(ret1)
	return ret2
}
func (this0 *TextView) GetWrapMode() WrapMode {
	var this1 *C.GtkTextView
	if this0 != nil {
		this1 = this0.InheritedFromGtkTextView()
	}
	ret1 := C.gtk_text_view_get_wrap_mode(this1)
	var ret2 WrapMode
	ret2 = WrapMode(ret1)
	return ret2
}
func (this0 *TextView) IMContextFilterKeypress(event0 *gdk.EventKey) bool {
	var this1 *C.GtkTextView
	var event1 *C.GdkEventKey
	if this0 != nil {
		this1 = this0.InheritedFromGtkTextView()
	}
	event1 = (*C.GdkEventKey)(unsafe.Pointer(event0))
	ret1 := C.gtk_text_view_im_context_filter_keypress(this1, event1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *TextView) MoveChild(child0 WidgetLike, xpos0 int, ypos0 int) {
	var this1 *C.GtkTextView
	var child1 *C.GtkWidget
	var xpos1 C.int32_t
	var ypos1 C.int32_t
	if this0 != nil {
		this1 = this0.InheritedFromGtkTextView()
	}
	if child0 != nil {
		child1 = child0.InheritedFromGtkWidget()
	}
	xpos1 = C.int32_t(xpos0)
	ypos1 = C.int32_t(ypos0)
	C.gtk_text_view_move_child(this1, child1, xpos1, ypos1)
}
func (this0 *TextView) MoveMarkOnscreen(mark0 TextMarkLike) bool {
	var this1 *C.GtkTextView
	var mark1 *C.GtkTextMark
	if this0 != nil {
		this1 = this0.InheritedFromGtkTextView()
	}
	if mark0 != nil {
		mark1 = mark0.InheritedFromGtkTextMark()
	}
	ret1 := C.gtk_text_view_move_mark_onscreen(this1, mark1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *TextView) MoveVisually(iter0 *TextIter, count0 int) bool {
	var this1 *C.GtkTextView
	var iter1 *C.GtkTextIter
	var count1 C.int32_t
	if this0 != nil {
		this1 = this0.InheritedFromGtkTextView()
	}
	iter1 = (*C.GtkTextIter)(unsafe.Pointer(iter0))
	count1 = C.int32_t(count0)
	ret1 := C.gtk_text_view_move_visually(this1, iter1, count1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *TextView) PlaceCursorOnscreen() bool {
	var this1 *C.GtkTextView
	if this0 != nil {
		this1 = this0.InheritedFromGtkTextView()
	}
	ret1 := C.gtk_text_view_place_cursor_onscreen(this1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *TextView) ResetIMContext() {
	var this1 *C.GtkTextView
	if this0 != nil {
		this1 = this0.InheritedFromGtkTextView()
	}
	C.gtk_text_view_reset_im_context(this1)
}
func (this0 *TextView) ScrollMarkOnscreen(mark0 TextMarkLike) {
	var this1 *C.GtkTextView
	var mark1 *C.GtkTextMark
	if this0 != nil {
		this1 = this0.InheritedFromGtkTextView()
	}
	if mark0 != nil {
		mark1 = mark0.InheritedFromGtkTextMark()
	}
	C.gtk_text_view_scroll_mark_onscreen(this1, mark1)
}
func (this0 *TextView) ScrollToIter(iter0 *TextIter, within_margin0 float64, use_align0 bool, xalign0 float64, yalign0 float64) bool {
	var this1 *C.GtkTextView
	var iter1 *C.GtkTextIter
	var within_margin1 C.double
	var use_align1 C.int
	var xalign1 C.double
	var yalign1 C.double
	if this0 != nil {
		this1 = this0.InheritedFromGtkTextView()
	}
	iter1 = (*C.GtkTextIter)(unsafe.Pointer(iter0))
	within_margin1 = C.double(within_margin0)
	use_align1 = _GoBoolToCBool(use_align0)
	xalign1 = C.double(xalign0)
	yalign1 = C.double(yalign0)
	ret1 := C.gtk_text_view_scroll_to_iter(this1, iter1, within_margin1, use_align1, xalign1, yalign1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *TextView) ScrollToMark(mark0 TextMarkLike, within_margin0 float64, use_align0 bool, xalign0 float64, yalign0 float64) {
	var this1 *C.GtkTextView
	var mark1 *C.GtkTextMark
	var within_margin1 C.double
	var use_align1 C.int
	var xalign1 C.double
	var yalign1 C.double
	if this0 != nil {
		this1 = this0.InheritedFromGtkTextView()
	}
	if mark0 != nil {
		mark1 = mark0.InheritedFromGtkTextMark()
	}
	within_margin1 = C.double(within_margin0)
	use_align1 = _GoBoolToCBool(use_align0)
	xalign1 = C.double(xalign0)
	yalign1 = C.double(yalign0)
	C.gtk_text_view_scroll_to_mark(this1, mark1, within_margin1, use_align1, xalign1, yalign1)
}
func (this0 *TextView) SetAcceptsTab(accepts_tab0 bool) {
	var this1 *C.GtkTextView
	var accepts_tab1 C.int
	if this0 != nil {
		this1 = this0.InheritedFromGtkTextView()
	}
	accepts_tab1 = _GoBoolToCBool(accepts_tab0)
	C.gtk_text_view_set_accepts_tab(this1, accepts_tab1)
}
func (this0 *TextView) SetBorderWindowSize(type0 TextWindowType, size0 int) {
	var this1 *C.GtkTextView
	var type1 C.GtkTextWindowType
	var size1 C.int32_t
	if this0 != nil {
		this1 = this0.InheritedFromGtkTextView()
	}
	type1 = C.GtkTextWindowType(type0)
	size1 = C.int32_t(size0)
	C.gtk_text_view_set_border_window_size(this1, type1, size1)
}
func (this0 *TextView) SetBuffer(buffer0 TextBufferLike) {
	var this1 *C.GtkTextView
	var buffer1 *C.GtkTextBuffer
	if this0 != nil {
		this1 = this0.InheritedFromGtkTextView()
	}
	if buffer0 != nil {
		buffer1 = buffer0.InheritedFromGtkTextBuffer()
	}
	C.gtk_text_view_set_buffer(this1, buffer1)
}
func (this0 *TextView) SetCursorVisible(setting0 bool) {
	var this1 *C.GtkTextView
	var setting1 C.int
	if this0 != nil {
		this1 = this0.InheritedFromGtkTextView()
	}
	setting1 = _GoBoolToCBool(setting0)
	C.gtk_text_view_set_cursor_visible(this1, setting1)
}
func (this0 *TextView) SetEditable(setting0 bool) {
	var this1 *C.GtkTextView
	var setting1 C.int
	if this0 != nil {
		this1 = this0.InheritedFromGtkTextView()
	}
	setting1 = _GoBoolToCBool(setting0)
	C.gtk_text_view_set_editable(this1, setting1)
}
func (this0 *TextView) SetIndent(indent0 int) {
	var this1 *C.GtkTextView
	var indent1 C.int32_t
	if this0 != nil {
		this1 = this0.InheritedFromGtkTextView()
	}
	indent1 = C.int32_t(indent0)
	C.gtk_text_view_set_indent(this1, indent1)
}
func (this0 *TextView) SetJustification(justification0 Justification) {
	var this1 *C.GtkTextView
	var justification1 C.GtkJustification
	if this0 != nil {
		this1 = this0.InheritedFromGtkTextView()
	}
	justification1 = C.GtkJustification(justification0)
	C.gtk_text_view_set_justification(this1, justification1)
}
func (this0 *TextView) SetLeftMargin(left_margin0 int) {
	var this1 *C.GtkTextView
	var left_margin1 C.int32_t
	if this0 != nil {
		this1 = this0.InheritedFromGtkTextView()
	}
	left_margin1 = C.int32_t(left_margin0)
	C.gtk_text_view_set_left_margin(this1, left_margin1)
}
func (this0 *TextView) SetOverwrite(overwrite0 bool) {
	var this1 *C.GtkTextView
	var overwrite1 C.int
	if this0 != nil {
		this1 = this0.InheritedFromGtkTextView()
	}
	overwrite1 = _GoBoolToCBool(overwrite0)
	C.gtk_text_view_set_overwrite(this1, overwrite1)
}
func (this0 *TextView) SetPixelsAboveLines(pixels_above_lines0 int) {
	var this1 *C.GtkTextView
	var pixels_above_lines1 C.int32_t
	if this0 != nil {
		this1 = this0.InheritedFromGtkTextView()
	}
	pixels_above_lines1 = C.int32_t(pixels_above_lines0)
	C.gtk_text_view_set_pixels_above_lines(this1, pixels_above_lines1)
}
func (this0 *TextView) SetPixelsBelowLines(pixels_below_lines0 int) {
	var this1 *C.GtkTextView
	var pixels_below_lines1 C.int32_t
	if this0 != nil {
		this1 = this0.InheritedFromGtkTextView()
	}
	pixels_below_lines1 = C.int32_t(pixels_below_lines0)
	C.gtk_text_view_set_pixels_below_lines(this1, pixels_below_lines1)
}
func (this0 *TextView) SetPixelsInsideWrap(pixels_inside_wrap0 int) {
	var this1 *C.GtkTextView
	var pixels_inside_wrap1 C.int32_t
	if this0 != nil {
		this1 = this0.InheritedFromGtkTextView()
	}
	pixels_inside_wrap1 = C.int32_t(pixels_inside_wrap0)
	C.gtk_text_view_set_pixels_inside_wrap(this1, pixels_inside_wrap1)
}
func (this0 *TextView) SetRightMargin(right_margin0 int) {
	var this1 *C.GtkTextView
	var right_margin1 C.int32_t
	if this0 != nil {
		this1 = this0.InheritedFromGtkTextView()
	}
	right_margin1 = C.int32_t(right_margin0)
	C.gtk_text_view_set_right_margin(this1, right_margin1)
}
func (this0 *TextView) SetTabs(tabs0 *pango.TabArray) {
	var this1 *C.GtkTextView
	var tabs1 *C.PangoTabArray
	if this0 != nil {
		this1 = this0.InheritedFromGtkTextView()
	}
	tabs1 = (*C.PangoTabArray)(unsafe.Pointer(tabs0))
	C.gtk_text_view_set_tabs(this1, tabs1)
}
func (this0 *TextView) SetWrapMode(wrap_mode0 WrapMode) {
	var this1 *C.GtkTextView
	var wrap_mode1 C.GtkWrapMode
	if this0 != nil {
		this1 = this0.InheritedFromGtkTextView()
	}
	wrap_mode1 = C.GtkWrapMode(wrap_mode0)
	C.gtk_text_view_set_wrap_mode(this1, wrap_mode1)
}
func (this0 *TextView) StartsDisplayLine(iter0 *TextIter) bool {
	var this1 *C.GtkTextView
	var iter1 *C.GtkTextIter
	if this0 != nil {
		this1 = this0.InheritedFromGtkTextView()
	}
	iter1 = (*C.GtkTextIter)(unsafe.Pointer(iter0))
	ret1 := C.gtk_text_view_starts_display_line(this1, iter1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *TextView) WindowToBufferCoords(win0 TextWindowType, window_x0 int, window_y0 int) (int, int) {
	var this1 *C.GtkTextView
	var win1 C.GtkTextWindowType
	var window_x1 C.int32_t
	var window_y1 C.int32_t
	var buffer_x1 C.int32_t
	var buffer_y1 C.int32_t
	if this0 != nil {
		this1 = this0.InheritedFromGtkTextView()
	}
	win1 = C.GtkTextWindowType(win0)
	window_x1 = C.int32_t(window_x0)
	window_y1 = C.int32_t(window_y0)
	C.gtk_text_view_window_to_buffer_coords(this1, win1, window_x1, window_y1, &buffer_x1, &buffer_y1)
	var buffer_x2 int
	var buffer_y2 int
	buffer_x2 = int(buffer_x1)
	buffer_y2 = int(buffer_y1)
	return buffer_x2, buffer_y2
}
type TextWindowType C.uint32_t
const (
	TextWindowTypePrivate TextWindowType = 0
	TextWindowTypeWidget TextWindowType = 1
	TextWindowTypeText TextWindowType = 2
	TextWindowTypeLeft TextWindowType = 3
	TextWindowTypeRight TextWindowType = 4
	TextWindowTypeTop TextWindowType = 5
	TextWindowTypeBottom TextWindowType = 6
)
type ThemeEngine struct {}
type ThemingEngineLike interface {
	gobject.ObjectLike
	InheritedFromGtkThemingEngine() *C.GtkThemingEngine
}

type ThemingEngine struct {
	gobject.Object
	
}

func ToThemingEngine(objlike gobject.ObjectLike) *ThemingEngine {
	c := objlike.InheritedFromGObject()
	if c == nil {
		return nil
	}
	t := (*ThemingEngine)(nil).GetStaticType()
	obj := gobject.ObjectGrabIfType(unsafe.Pointer(c), t)
	if obj != nil {
		return (*ThemingEngine)(obj)
	}
	panic("cannot cast to ThemingEngine")
}

func (this0 *ThemingEngine) InheritedFromGtkThemingEngine() *C.GtkThemingEngine {
	if this0 == nil {
		return nil
	}
	return (*C.GtkThemingEngine)(this0.C)
}

func (this0 *ThemingEngine) GetStaticType() gobject.Type {
	return gobject.Type(C.gtk_theming_engine_get_type())
}

func ThemingEngineGetType() gobject.Type {
	return (*ThemingEngine)(nil).GetStaticType()
}
func ThemingEngineLoad(name0 string) *ThemingEngine {
	var name1 *C.char
	name1 = _GoStringToGString(name0)
	defer C.free(unsafe.Pointer(name1))
	ret1 := C.gtk_theming_engine_load(name1)
	var ret2 *ThemingEngine
	ret2 = (*ThemingEngine)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
func (this0 *ThemingEngine) GetBackgroundColor(state0 StateFlags) gdk.RGBA {
	var this1 *C.GtkThemingEngine
	var state1 C.GtkStateFlags
	var color1 C.GdkRGBA
	if this0 != nil {
		this1 = this0.InheritedFromGtkThemingEngine()
	}
	state1 = C.GtkStateFlags(state0)
	C.gtk_theming_engine_get_background_color(this1, state1, &color1)
	var color2 gdk.RGBA
	color2 = *(*gdk.RGBA)(unsafe.Pointer(&color1))
	return color2
}
func (this0 *ThemingEngine) GetBorder(state0 StateFlags) Border {
	var this1 *C.GtkThemingEngine
	var state1 C.GtkStateFlags
	var border1 C.GtkBorder
	if this0 != nil {
		this1 = this0.InheritedFromGtkThemingEngine()
	}
	state1 = C.GtkStateFlags(state0)
	C.gtk_theming_engine_get_border(this1, state1, &border1)
	var border2 Border
	border2 = *(*Border)(unsafe.Pointer(&border1))
	return border2
}
func (this0 *ThemingEngine) GetBorderColor(state0 StateFlags) gdk.RGBA {
	var this1 *C.GtkThemingEngine
	var state1 C.GtkStateFlags
	var color1 C.GdkRGBA
	if this0 != nil {
		this1 = this0.InheritedFromGtkThemingEngine()
	}
	state1 = C.GtkStateFlags(state0)
	C.gtk_theming_engine_get_border_color(this1, state1, &color1)
	var color2 gdk.RGBA
	color2 = *(*gdk.RGBA)(unsafe.Pointer(&color1))
	return color2
}
func (this0 *ThemingEngine) GetColor(state0 StateFlags) gdk.RGBA {
	var this1 *C.GtkThemingEngine
	var state1 C.GtkStateFlags
	var color1 C.GdkRGBA
	if this0 != nil {
		this1 = this0.InheritedFromGtkThemingEngine()
	}
	state1 = C.GtkStateFlags(state0)
	C.gtk_theming_engine_get_color(this1, state1, &color1)
	var color2 gdk.RGBA
	color2 = *(*gdk.RGBA)(unsafe.Pointer(&color1))
	return color2
}
func (this0 *ThemingEngine) GetDirection() TextDirection {
	var this1 *C.GtkThemingEngine
	if this0 != nil {
		this1 = this0.InheritedFromGtkThemingEngine()
	}
	ret1 := C.gtk_theming_engine_get_direction(this1)
	var ret2 TextDirection
	ret2 = TextDirection(ret1)
	return ret2
}
func (this0 *ThemingEngine) GetFont(state0 StateFlags) *pango.FontDescription {
	var this1 *C.GtkThemingEngine
	var state1 C.GtkStateFlags
	if this0 != nil {
		this1 = this0.InheritedFromGtkThemingEngine()
	}
	state1 = C.GtkStateFlags(state0)
	ret1 := C.gtk_theming_engine_get_font(this1, state1)
	var ret2 *pango.FontDescription
	ret2 = (*pango.FontDescription)(unsafe.Pointer(ret1))
	return ret2
}
func (this0 *ThemingEngine) GetJunctionSides() JunctionSides {
	var this1 *C.GtkThemingEngine
	if this0 != nil {
		this1 = this0.InheritedFromGtkThemingEngine()
	}
	ret1 := C.gtk_theming_engine_get_junction_sides(this1)
	var ret2 JunctionSides
	ret2 = JunctionSides(ret1)
	return ret2
}
func (this0 *ThemingEngine) GetMargin(state0 StateFlags) Border {
	var this1 *C.GtkThemingEngine
	var state1 C.GtkStateFlags
	var margin1 C.GtkBorder
	if this0 != nil {
		this1 = this0.InheritedFromGtkThemingEngine()
	}
	state1 = C.GtkStateFlags(state0)
	C.gtk_theming_engine_get_margin(this1, state1, &margin1)
	var margin2 Border
	margin2 = *(*Border)(unsafe.Pointer(&margin1))
	return margin2
}
func (this0 *ThemingEngine) GetPadding(state0 StateFlags) Border {
	var this1 *C.GtkThemingEngine
	var state1 C.GtkStateFlags
	var padding1 C.GtkBorder
	if this0 != nil {
		this1 = this0.InheritedFromGtkThemingEngine()
	}
	state1 = C.GtkStateFlags(state0)
	C.gtk_theming_engine_get_padding(this1, state1, &padding1)
	var padding2 Border
	padding2 = *(*Border)(unsafe.Pointer(&padding1))
	return padding2
}
func (this0 *ThemingEngine) GetPath() *WidgetPath {
	var this1 *C.GtkThemingEngine
	if this0 != nil {
		this1 = this0.InheritedFromGtkThemingEngine()
	}
	ret1 := C.gtk_theming_engine_get_path(this1)
	var ret2 *WidgetPath
	ret2 = (*WidgetPath)(unsafe.Pointer(ret1))
	return ret2
}
func (this0 *ThemingEngine) GetProperty(property0 string, state0 StateFlags) gobject.Value {
	var this1 *C.GtkThemingEngine
	var property1 *C.char
	var state1 C.GtkStateFlags
	var value1 C.GValue
	if this0 != nil {
		this1 = this0.InheritedFromGtkThemingEngine()
	}
	property1 = _GoStringToGString(property0)
	defer C.free(unsafe.Pointer(property1))
	state1 = C.GtkStateFlags(state0)
	C.gtk_theming_engine_get_property(this1, property1, state1, &value1)
	var value2 gobject.Value
	value2 = *(*gobject.Value)(unsafe.Pointer(&value1))
	return value2
}
func (this0 *ThemingEngine) GetScreen() *gdk.Screen {
	var this1 *C.GtkThemingEngine
	if this0 != nil {
		this1 = this0.InheritedFromGtkThemingEngine()
	}
	ret1 := C.gtk_theming_engine_get_screen(this1)
	var ret2 *gdk.Screen
	ret2 = (*gdk.Screen)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
func (this0 *ThemingEngine) GetState() StateFlags {
	var this1 *C.GtkThemingEngine
	if this0 != nil {
		this1 = this0.InheritedFromGtkThemingEngine()
	}
	ret1 := C.gtk_theming_engine_get_state(this1)
	var ret2 StateFlags
	ret2 = StateFlags(ret1)
	return ret2
}
func (this0 *ThemingEngine) GetStyleProperty(property_name0 string, value0 *gobject.Value) {
	var this1 *C.GtkThemingEngine
	var property_name1 *C.char
	var value1 *C.GValue
	if this0 != nil {
		this1 = this0.InheritedFromGtkThemingEngine()
	}
	property_name1 = _GoStringToGString(property_name0)
	defer C.free(unsafe.Pointer(property_name1))
	value1 = (*C.GValue)(unsafe.Pointer(value0))
	C.gtk_theming_engine_get_style_property(this1, property_name1, value1)
}
func (this0 *ThemingEngine) HasClass(style_class0 string) bool {
	var this1 *C.GtkThemingEngine
	var style_class1 *C.char
	if this0 != nil {
		this1 = this0.InheritedFromGtkThemingEngine()
	}
	style_class1 = _GoStringToGString(style_class0)
	defer C.free(unsafe.Pointer(style_class1))
	ret1 := C.gtk_theming_engine_has_class(this1, style_class1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *ThemingEngine) HasRegion(style_region0 string) (RegionFlags, bool) {
	var this1 *C.GtkThemingEngine
	var style_region1 *C.char
	var flags1 C.GtkRegionFlags
	if this0 != nil {
		this1 = this0.InheritedFromGtkThemingEngine()
	}
	style_region1 = _GoStringToGString(style_region0)
	defer C.free(unsafe.Pointer(style_region1))
	ret1 := C.gtk_theming_engine_has_region(this1, style_region1, &flags1)
	var flags2 RegionFlags
	var ret2 bool
	flags2 = RegionFlags(flags1)
	ret2 = ret1 != 0
	return flags2, ret2
}
func (this0 *ThemingEngine) LookupColor(color_name0 string) (gdk.RGBA, bool) {
	var this1 *C.GtkThemingEngine
	var color_name1 *C.char
	var color1 C.GdkRGBA
	if this0 != nil {
		this1 = this0.InheritedFromGtkThemingEngine()
	}
	color_name1 = _GoStringToGString(color_name0)
	defer C.free(unsafe.Pointer(color_name1))
	ret1 := C.gtk_theming_engine_lookup_color(this1, color_name1, &color1)
	var color2 gdk.RGBA
	var ret2 bool
	color2 = *(*gdk.RGBA)(unsafe.Pointer(&color1))
	ret2 = ret1 != 0
	return color2, ret2
}
func (this0 *ThemingEngine) StateIsRunning(state0 StateType) (float64, bool) {
	var this1 *C.GtkThemingEngine
	var state1 C.GtkStateType
	var progress1 C.double
	if this0 != nil {
		this1 = this0.InheritedFromGtkThemingEngine()
	}
	state1 = C.GtkStateType(state0)
	ret1 := C.gtk_theming_engine_state_is_running(this1, state1, &progress1)
	var progress2 float64
	var ret2 bool
	progress2 = float64(progress1)
	ret2 = ret1 != 0
	return progress2, ret2
}
type ToggleActionLike interface {
	ActionLike
	InheritedFromGtkToggleAction() *C.GtkToggleAction
}

type ToggleAction struct {
	Action
	BuildableImpl
}

func ToToggleAction(objlike gobject.ObjectLike) *ToggleAction {
	c := objlike.InheritedFromGObject()
	if c == nil {
		return nil
	}
	t := (*ToggleAction)(nil).GetStaticType()
	obj := gobject.ObjectGrabIfType(unsafe.Pointer(c), t)
	if obj != nil {
		return (*ToggleAction)(obj)
	}
	panic("cannot cast to ToggleAction")
}

func (this0 *ToggleAction) InheritedFromGtkToggleAction() *C.GtkToggleAction {
	if this0 == nil {
		return nil
	}
	return (*C.GtkToggleAction)(this0.C)
}

func (this0 *ToggleAction) GetStaticType() gobject.Type {
	return gobject.Type(C.gtk_toggle_action_get_type())
}

func ToggleActionGetType() gobject.Type {
	return (*ToggleAction)(nil).GetStaticType()
}
func NewToggleAction(name0 string, label0 string, tooltip0 string, stock_id0 string) *ToggleAction {
	var name1 *C.char
	var label1 *C.char
	var tooltip1 *C.char
	var stock_id1 *C.char
	name1 = _GoStringToGString(name0)
	defer C.free(unsafe.Pointer(name1))
	label1 = _GoStringToGString(label0)
	defer C.free(unsafe.Pointer(label1))
	tooltip1 = _GoStringToGString(tooltip0)
	defer C.free(unsafe.Pointer(tooltip1))
	stock_id1 = _GoStringToGString(stock_id0)
	defer C.free(unsafe.Pointer(stock_id1))
	ret1 := C.gtk_toggle_action_new(name1, label1, tooltip1, stock_id1)
	var ret2 *ToggleAction
	ret2 = (*ToggleAction)(gobject.ObjectWrap(unsafe.Pointer(ret1), false))
	return ret2
}
func (this0 *ToggleAction) GetActive() bool {
	var this1 *C.GtkToggleAction
	if this0 != nil {
		this1 = this0.InheritedFromGtkToggleAction()
	}
	ret1 := C.gtk_toggle_action_get_active(this1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *ToggleAction) GetDrawAsRadio() bool {
	var this1 *C.GtkToggleAction
	if this0 != nil {
		this1 = this0.InheritedFromGtkToggleAction()
	}
	ret1 := C.gtk_toggle_action_get_draw_as_radio(this1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *ToggleAction) SetActive(is_active0 bool) {
	var this1 *C.GtkToggleAction
	var is_active1 C.int
	if this0 != nil {
		this1 = this0.InheritedFromGtkToggleAction()
	}
	is_active1 = _GoBoolToCBool(is_active0)
	C.gtk_toggle_action_set_active(this1, is_active1)
}
func (this0 *ToggleAction) SetDrawAsRadio(draw_as_radio0 bool) {
	var this1 *C.GtkToggleAction
	var draw_as_radio1 C.int
	if this0 != nil {
		this1 = this0.InheritedFromGtkToggleAction()
	}
	draw_as_radio1 = _GoBoolToCBool(draw_as_radio0)
	C.gtk_toggle_action_set_draw_as_radio(this1, draw_as_radio1)
}
func (this0 *ToggleAction) Toggled() {
	var this1 *C.GtkToggleAction
	if this0 != nil {
		this1 = this0.InheritedFromGtkToggleAction()
	}
	C.gtk_toggle_action_toggled(this1)
}
type ToggleButtonLike interface {
	ButtonLike
	InheritedFromGtkToggleButton() *C.GtkToggleButton
}

type ToggleButton struct {
	Button
	atk.ImplementorIfaceImpl
	ActivatableImpl
	BuildableImpl
}

func ToToggleButton(objlike gobject.ObjectLike) *ToggleButton {
	c := objlike.InheritedFromGObject()
	if c == nil {
		return nil
	}
	t := (*ToggleButton)(nil).GetStaticType()
	obj := gobject.ObjectGrabIfType(unsafe.Pointer(c), t)
	if obj != nil {
		return (*ToggleButton)(obj)
	}
	panic("cannot cast to ToggleButton")
}

func (this0 *ToggleButton) InheritedFromGtkToggleButton() *C.GtkToggleButton {
	if this0 == nil {
		return nil
	}
	return (*C.GtkToggleButton)(this0.C)
}

func (this0 *ToggleButton) GetStaticType() gobject.Type {
	return gobject.Type(C.gtk_toggle_button_get_type())
}

func ToggleButtonGetType() gobject.Type {
	return (*ToggleButton)(nil).GetStaticType()
}
func NewToggleButton() *ToggleButton {
	ret1 := C.gtk_toggle_button_new()
	var ret2 *ToggleButton
	ret2 = (*ToggleButton)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
func NewToggleButtonWithLabel(label0 string) *ToggleButton {
	var label1 *C.char
	label1 = _GoStringToGString(label0)
	defer C.free(unsafe.Pointer(label1))
	ret1 := C.gtk_toggle_button_new_with_label(label1)
	var ret2 *ToggleButton
	ret2 = (*ToggleButton)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
func NewToggleButtonWithMnemonic(label0 string) *ToggleButton {
	var label1 *C.char
	label1 = _GoStringToGString(label0)
	defer C.free(unsafe.Pointer(label1))
	ret1 := C.gtk_toggle_button_new_with_mnemonic(label1)
	var ret2 *ToggleButton
	ret2 = (*ToggleButton)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
func (this0 *ToggleButton) GetActive() bool {
	var this1 *C.GtkToggleButton
	if this0 != nil {
		this1 = this0.InheritedFromGtkToggleButton()
	}
	ret1 := C.gtk_toggle_button_get_active(this1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *ToggleButton) GetInconsistent() bool {
	var this1 *C.GtkToggleButton
	if this0 != nil {
		this1 = this0.InheritedFromGtkToggleButton()
	}
	ret1 := C.gtk_toggle_button_get_inconsistent(this1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *ToggleButton) GetMode() bool {
	var this1 *C.GtkToggleButton
	if this0 != nil {
		this1 = this0.InheritedFromGtkToggleButton()
	}
	ret1 := C.gtk_toggle_button_get_mode(this1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *ToggleButton) SetActive(is_active0 bool) {
	var this1 *C.GtkToggleButton
	var is_active1 C.int
	if this0 != nil {
		this1 = this0.InheritedFromGtkToggleButton()
	}
	is_active1 = _GoBoolToCBool(is_active0)
	C.gtk_toggle_button_set_active(this1, is_active1)
}
func (this0 *ToggleButton) SetInconsistent(setting0 bool) {
	var this1 *C.GtkToggleButton
	var setting1 C.int
	if this0 != nil {
		this1 = this0.InheritedFromGtkToggleButton()
	}
	setting1 = _GoBoolToCBool(setting0)
	C.gtk_toggle_button_set_inconsistent(this1, setting1)
}
func (this0 *ToggleButton) SetMode(draw_indicator0 bool) {
	var this1 *C.GtkToggleButton
	var draw_indicator1 C.int
	if this0 != nil {
		this1 = this0.InheritedFromGtkToggleButton()
	}
	draw_indicator1 = _GoBoolToCBool(draw_indicator0)
	C.gtk_toggle_button_set_mode(this1, draw_indicator1)
}
func (this0 *ToggleButton) Toggled() {
	var this1 *C.GtkToggleButton
	if this0 != nil {
		this1 = this0.InheritedFromGtkToggleButton()
	}
	C.gtk_toggle_button_toggled(this1)
}
type ToggleToolButtonLike interface {
	ToolButtonLike
	InheritedFromGtkToggleToolButton() *C.GtkToggleToolButton
}

type ToggleToolButton struct {
	ToolButton
	atk.ImplementorIfaceImpl
	ActivatableImpl
	BuildableImpl
}

func ToToggleToolButton(objlike gobject.ObjectLike) *ToggleToolButton {
	c := objlike.InheritedFromGObject()
	if c == nil {
		return nil
	}
	t := (*ToggleToolButton)(nil).GetStaticType()
	obj := gobject.ObjectGrabIfType(unsafe.Pointer(c), t)
	if obj != nil {
		return (*ToggleToolButton)(obj)
	}
	panic("cannot cast to ToggleToolButton")
}

func (this0 *ToggleToolButton) InheritedFromGtkToggleToolButton() *C.GtkToggleToolButton {
	if this0 == nil {
		return nil
	}
	return (*C.GtkToggleToolButton)(this0.C)
}

func (this0 *ToggleToolButton) GetStaticType() gobject.Type {
	return gobject.Type(C.gtk_toggle_tool_button_get_type())
}

func ToggleToolButtonGetType() gobject.Type {
	return (*ToggleToolButton)(nil).GetStaticType()
}
func NewToggleToolButton() *ToggleToolButton {
	ret1 := C.gtk_toggle_tool_button_new()
	var ret2 *ToggleToolButton
	ret2 = (*ToggleToolButton)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
func NewToggleToolButtonFromStock(stock_id0 string) *ToggleToolButton {
	var stock_id1 *C.char
	stock_id1 = _GoStringToGString(stock_id0)
	defer C.free(unsafe.Pointer(stock_id1))
	ret1 := C.gtk_toggle_tool_button_new_from_stock(stock_id1)
	var ret2 *ToggleToolButton
	ret2 = (*ToggleToolButton)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
func (this0 *ToggleToolButton) GetActive() bool {
	var this1 *C.GtkToggleToolButton
	if this0 != nil {
		this1 = this0.InheritedFromGtkToggleToolButton()
	}
	ret1 := C.gtk_toggle_tool_button_get_active(this1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *ToggleToolButton) SetActive(is_active0 bool) {
	var this1 *C.GtkToggleToolButton
	var is_active1 C.int
	if this0 != nil {
		this1 = this0.InheritedFromGtkToggleToolButton()
	}
	is_active1 = _GoBoolToCBool(is_active0)
	C.gtk_toggle_tool_button_set_active(this1, is_active1)
}
type ToolButtonLike interface {
	ToolItemLike
	InheritedFromGtkToolButton() *C.GtkToolButton
}

type ToolButton struct {
	ToolItem
	atk.ImplementorIfaceImpl
	ActivatableImpl
	BuildableImpl
}

func ToToolButton(objlike gobject.ObjectLike) *ToolButton {
	c := objlike.InheritedFromGObject()
	if c == nil {
		return nil
	}
	t := (*ToolButton)(nil).GetStaticType()
	obj := gobject.ObjectGrabIfType(unsafe.Pointer(c), t)
	if obj != nil {
		return (*ToolButton)(obj)
	}
	panic("cannot cast to ToolButton")
}

func (this0 *ToolButton) InheritedFromGtkToolButton() *C.GtkToolButton {
	if this0 == nil {
		return nil
	}
	return (*C.GtkToolButton)(this0.C)
}

func (this0 *ToolButton) GetStaticType() gobject.Type {
	return gobject.Type(C.gtk_tool_button_get_type())
}

func ToolButtonGetType() gobject.Type {
	return (*ToolButton)(nil).GetStaticType()
}
func NewToolButton(icon_widget0 WidgetLike, label0 string) *ToolButton {
	var icon_widget1 *C.GtkWidget
	var label1 *C.char
	if icon_widget0 != nil {
		icon_widget1 = icon_widget0.InheritedFromGtkWidget()
	}
	label1 = _GoStringToGString(label0)
	defer C.free(unsafe.Pointer(label1))
	ret1 := C.gtk_tool_button_new(icon_widget1, label1)
	var ret2 *ToolButton
	ret2 = (*ToolButton)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
func NewToolButtonFromStock(stock_id0 string) *ToolButton {
	var stock_id1 *C.char
	stock_id1 = _GoStringToGString(stock_id0)
	defer C.free(unsafe.Pointer(stock_id1))
	ret1 := C.gtk_tool_button_new_from_stock(stock_id1)
	var ret2 *ToolButton
	ret2 = (*ToolButton)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
func (this0 *ToolButton) GetIconName() string {
	var this1 *C.GtkToolButton
	if this0 != nil {
		this1 = this0.InheritedFromGtkToolButton()
	}
	ret1 := C.gtk_tool_button_get_icon_name(this1)
	var ret2 string
	ret2 = C.GoString(ret1)
	return ret2
}
func (this0 *ToolButton) GetIconWidget() *Widget {
	var this1 *C.GtkToolButton
	if this0 != nil {
		this1 = this0.InheritedFromGtkToolButton()
	}
	ret1 := C.gtk_tool_button_get_icon_widget(this1)
	var ret2 *Widget
	ret2 = (*Widget)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
func (this0 *ToolButton) GetLabel() string {
	var this1 *C.GtkToolButton
	if this0 != nil {
		this1 = this0.InheritedFromGtkToolButton()
	}
	ret1 := C.gtk_tool_button_get_label(this1)
	var ret2 string
	ret2 = C.GoString(ret1)
	return ret2
}
func (this0 *ToolButton) GetLabelWidget() *Widget {
	var this1 *C.GtkToolButton
	if this0 != nil {
		this1 = this0.InheritedFromGtkToolButton()
	}
	ret1 := C.gtk_tool_button_get_label_widget(this1)
	var ret2 *Widget
	ret2 = (*Widget)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
func (this0 *ToolButton) GetStockID() string {
	var this1 *C.GtkToolButton
	if this0 != nil {
		this1 = this0.InheritedFromGtkToolButton()
	}
	ret1 := C.gtk_tool_button_get_stock_id(this1)
	var ret2 string
	ret2 = C.GoString(ret1)
	return ret2
}
func (this0 *ToolButton) GetUseUnderline() bool {
	var this1 *C.GtkToolButton
	if this0 != nil {
		this1 = this0.InheritedFromGtkToolButton()
	}
	ret1 := C.gtk_tool_button_get_use_underline(this1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *ToolButton) SetIconName(icon_name0 string) {
	var this1 *C.GtkToolButton
	var icon_name1 *C.char
	if this0 != nil {
		this1 = this0.InheritedFromGtkToolButton()
	}
	icon_name1 = _GoStringToGString(icon_name0)
	defer C.free(unsafe.Pointer(icon_name1))
	C.gtk_tool_button_set_icon_name(this1, icon_name1)
}
func (this0 *ToolButton) SetIconWidget(icon_widget0 WidgetLike) {
	var this1 *C.GtkToolButton
	var icon_widget1 *C.GtkWidget
	if this0 != nil {
		this1 = this0.InheritedFromGtkToolButton()
	}
	if icon_widget0 != nil {
		icon_widget1 = icon_widget0.InheritedFromGtkWidget()
	}
	C.gtk_tool_button_set_icon_widget(this1, icon_widget1)
}
func (this0 *ToolButton) SetLabel(label0 string) {
	var this1 *C.GtkToolButton
	var label1 *C.char
	if this0 != nil {
		this1 = this0.InheritedFromGtkToolButton()
	}
	label1 = _GoStringToGString(label0)
	defer C.free(unsafe.Pointer(label1))
	C.gtk_tool_button_set_label(this1, label1)
}
func (this0 *ToolButton) SetLabelWidget(label_widget0 WidgetLike) {
	var this1 *C.GtkToolButton
	var label_widget1 *C.GtkWidget
	if this0 != nil {
		this1 = this0.InheritedFromGtkToolButton()
	}
	if label_widget0 != nil {
		label_widget1 = label_widget0.InheritedFromGtkWidget()
	}
	C.gtk_tool_button_set_label_widget(this1, label_widget1)
}
func (this0 *ToolButton) SetStockID(stock_id0 string) {
	var this1 *C.GtkToolButton
	var stock_id1 *C.char
	if this0 != nil {
		this1 = this0.InheritedFromGtkToolButton()
	}
	stock_id1 = _GoStringToGString(stock_id0)
	defer C.free(unsafe.Pointer(stock_id1))
	C.gtk_tool_button_set_stock_id(this1, stock_id1)
}
func (this0 *ToolButton) SetUseUnderline(use_underline0 bool) {
	var this1 *C.GtkToolButton
	var use_underline1 C.int
	if this0 != nil {
		this1 = this0.InheritedFromGtkToolButton()
	}
	use_underline1 = _GoBoolToCBool(use_underline0)
	C.gtk_tool_button_set_use_underline(this1, use_underline1)
}
type ToolItemLike interface {
	BinLike
	InheritedFromGtkToolItem() *C.GtkToolItem
}

type ToolItem struct {
	Bin
	atk.ImplementorIfaceImpl
	ActivatableImpl
	BuildableImpl
}

func ToToolItem(objlike gobject.ObjectLike) *ToolItem {
	c := objlike.InheritedFromGObject()
	if c == nil {
		return nil
	}
	t := (*ToolItem)(nil).GetStaticType()
	obj := gobject.ObjectGrabIfType(unsafe.Pointer(c), t)
	if obj != nil {
		return (*ToolItem)(obj)
	}
	panic("cannot cast to ToolItem")
}

func (this0 *ToolItem) InheritedFromGtkToolItem() *C.GtkToolItem {
	if this0 == nil {
		return nil
	}
	return (*C.GtkToolItem)(this0.C)
}

func (this0 *ToolItem) GetStaticType() gobject.Type {
	return gobject.Type(C.gtk_tool_item_get_type())
}

func ToolItemGetType() gobject.Type {
	return (*ToolItem)(nil).GetStaticType()
}
func NewToolItem() *ToolItem {
	ret1 := C.gtk_tool_item_new()
	var ret2 *ToolItem
	ret2 = (*ToolItem)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
func (this0 *ToolItem) GetEllipsizeMode() pango.EllipsizeMode {
	var this1 *C.GtkToolItem
	if this0 != nil {
		this1 = this0.InheritedFromGtkToolItem()
	}
	ret1 := C.gtk_tool_item_get_ellipsize_mode(this1)
	var ret2 pango.EllipsizeMode
	ret2 = pango.EllipsizeMode(ret1)
	return ret2
}
func (this0 *ToolItem) GetExpand() bool {
	var this1 *C.GtkToolItem
	if this0 != nil {
		this1 = this0.InheritedFromGtkToolItem()
	}
	ret1 := C.gtk_tool_item_get_expand(this1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *ToolItem) GetHomogeneous() bool {
	var this1 *C.GtkToolItem
	if this0 != nil {
		this1 = this0.InheritedFromGtkToolItem()
	}
	ret1 := C.gtk_tool_item_get_homogeneous(this1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *ToolItem) GetIconSize() int {
	var this1 *C.GtkToolItem
	if this0 != nil {
		this1 = this0.InheritedFromGtkToolItem()
	}
	ret1 := C.gtk_tool_item_get_icon_size(this1)
	var ret2 int
	ret2 = int(ret1)
	return ret2
}
func (this0 *ToolItem) GetIsImportant() bool {
	var this1 *C.GtkToolItem
	if this0 != nil {
		this1 = this0.InheritedFromGtkToolItem()
	}
	ret1 := C.gtk_tool_item_get_is_important(this1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *ToolItem) GetOrientation() Orientation {
	var this1 *C.GtkToolItem
	if this0 != nil {
		this1 = this0.InheritedFromGtkToolItem()
	}
	ret1 := C.gtk_tool_item_get_orientation(this1)
	var ret2 Orientation
	ret2 = Orientation(ret1)
	return ret2
}
func (this0 *ToolItem) GetProxyMenuItem(menu_item_id0 string) *Widget {
	var this1 *C.GtkToolItem
	var menu_item_id1 *C.char
	if this0 != nil {
		this1 = this0.InheritedFromGtkToolItem()
	}
	menu_item_id1 = _GoStringToGString(menu_item_id0)
	defer C.free(unsafe.Pointer(menu_item_id1))
	ret1 := C.gtk_tool_item_get_proxy_menu_item(this1, menu_item_id1)
	var ret2 *Widget
	ret2 = (*Widget)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
func (this0 *ToolItem) GetReliefStyle() ReliefStyle {
	var this1 *C.GtkToolItem
	if this0 != nil {
		this1 = this0.InheritedFromGtkToolItem()
	}
	ret1 := C.gtk_tool_item_get_relief_style(this1)
	var ret2 ReliefStyle
	ret2 = ReliefStyle(ret1)
	return ret2
}
func (this0 *ToolItem) GetTextAlignment() float64 {
	var this1 *C.GtkToolItem
	if this0 != nil {
		this1 = this0.InheritedFromGtkToolItem()
	}
	ret1 := C.gtk_tool_item_get_text_alignment(this1)
	var ret2 float64
	ret2 = float64(ret1)
	return ret2
}
func (this0 *ToolItem) GetTextOrientation() Orientation {
	var this1 *C.GtkToolItem
	if this0 != nil {
		this1 = this0.InheritedFromGtkToolItem()
	}
	ret1 := C.gtk_tool_item_get_text_orientation(this1)
	var ret2 Orientation
	ret2 = Orientation(ret1)
	return ret2
}
func (this0 *ToolItem) GetTextSizeGroup() *SizeGroup {
	var this1 *C.GtkToolItem
	if this0 != nil {
		this1 = this0.InheritedFromGtkToolItem()
	}
	ret1 := C.gtk_tool_item_get_text_size_group(this1)
	var ret2 *SizeGroup
	ret2 = (*SizeGroup)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
func (this0 *ToolItem) GetToolbarStyle() ToolbarStyle {
	var this1 *C.GtkToolItem
	if this0 != nil {
		this1 = this0.InheritedFromGtkToolItem()
	}
	ret1 := C.gtk_tool_item_get_toolbar_style(this1)
	var ret2 ToolbarStyle
	ret2 = ToolbarStyle(ret1)
	return ret2
}
func (this0 *ToolItem) GetUseDragWindow() bool {
	var this1 *C.GtkToolItem
	if this0 != nil {
		this1 = this0.InheritedFromGtkToolItem()
	}
	ret1 := C.gtk_tool_item_get_use_drag_window(this1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *ToolItem) GetVisibleHorizontal() bool {
	var this1 *C.GtkToolItem
	if this0 != nil {
		this1 = this0.InheritedFromGtkToolItem()
	}
	ret1 := C.gtk_tool_item_get_visible_horizontal(this1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *ToolItem) GetVisibleVertical() bool {
	var this1 *C.GtkToolItem
	if this0 != nil {
		this1 = this0.InheritedFromGtkToolItem()
	}
	ret1 := C.gtk_tool_item_get_visible_vertical(this1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *ToolItem) RebuildMenu() {
	var this1 *C.GtkToolItem
	if this0 != nil {
		this1 = this0.InheritedFromGtkToolItem()
	}
	C.gtk_tool_item_rebuild_menu(this1)
}
func (this0 *ToolItem) RetrieveProxyMenuItem() *Widget {
	var this1 *C.GtkToolItem
	if this0 != nil {
		this1 = this0.InheritedFromGtkToolItem()
	}
	ret1 := C.gtk_tool_item_retrieve_proxy_menu_item(this1)
	var ret2 *Widget
	ret2 = (*Widget)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
func (this0 *ToolItem) SetExpand(expand0 bool) {
	var this1 *C.GtkToolItem
	var expand1 C.int
	if this0 != nil {
		this1 = this0.InheritedFromGtkToolItem()
	}
	expand1 = _GoBoolToCBool(expand0)
	C.gtk_tool_item_set_expand(this1, expand1)
}
func (this0 *ToolItem) SetHomogeneous(homogeneous0 bool) {
	var this1 *C.GtkToolItem
	var homogeneous1 C.int
	if this0 != nil {
		this1 = this0.InheritedFromGtkToolItem()
	}
	homogeneous1 = _GoBoolToCBool(homogeneous0)
	C.gtk_tool_item_set_homogeneous(this1, homogeneous1)
}
func (this0 *ToolItem) SetIsImportant(is_important0 bool) {
	var this1 *C.GtkToolItem
	var is_important1 C.int
	if this0 != nil {
		this1 = this0.InheritedFromGtkToolItem()
	}
	is_important1 = _GoBoolToCBool(is_important0)
	C.gtk_tool_item_set_is_important(this1, is_important1)
}
func (this0 *ToolItem) SetProxyMenuItem(menu_item_id0 string, menu_item0 WidgetLike) {
	var this1 *C.GtkToolItem
	var menu_item_id1 *C.char
	var menu_item1 *C.GtkWidget
	if this0 != nil {
		this1 = this0.InheritedFromGtkToolItem()
	}
	menu_item_id1 = _GoStringToGString(menu_item_id0)
	defer C.free(unsafe.Pointer(menu_item_id1))
	if menu_item0 != nil {
		menu_item1 = menu_item0.InheritedFromGtkWidget()
	}
	C.gtk_tool_item_set_proxy_menu_item(this1, menu_item_id1, menu_item1)
}
func (this0 *ToolItem) SetTooltipMarkup(markup0 string) {
	var this1 *C.GtkToolItem
	var markup1 *C.char
	if this0 != nil {
		this1 = this0.InheritedFromGtkToolItem()
	}
	markup1 = _GoStringToGString(markup0)
	defer C.free(unsafe.Pointer(markup1))
	C.gtk_tool_item_set_tooltip_markup(this1, markup1)
}
func (this0 *ToolItem) SetTooltipText(text0 string) {
	var this1 *C.GtkToolItem
	var text1 *C.char
	if this0 != nil {
		this1 = this0.InheritedFromGtkToolItem()
	}
	text1 = _GoStringToGString(text0)
	defer C.free(unsafe.Pointer(text1))
	C.gtk_tool_item_set_tooltip_text(this1, text1)
}
func (this0 *ToolItem) SetUseDragWindow(use_drag_window0 bool) {
	var this1 *C.GtkToolItem
	var use_drag_window1 C.int
	if this0 != nil {
		this1 = this0.InheritedFromGtkToolItem()
	}
	use_drag_window1 = _GoBoolToCBool(use_drag_window0)
	C.gtk_tool_item_set_use_drag_window(this1, use_drag_window1)
}
func (this0 *ToolItem) SetVisibleHorizontal(visible_horizontal0 bool) {
	var this1 *C.GtkToolItem
	var visible_horizontal1 C.int
	if this0 != nil {
		this1 = this0.InheritedFromGtkToolItem()
	}
	visible_horizontal1 = _GoBoolToCBool(visible_horizontal0)
	C.gtk_tool_item_set_visible_horizontal(this1, visible_horizontal1)
}
func (this0 *ToolItem) SetVisibleVertical(visible_vertical0 bool) {
	var this1 *C.GtkToolItem
	var visible_vertical1 C.int
	if this0 != nil {
		this1 = this0.InheritedFromGtkToolItem()
	}
	visible_vertical1 = _GoBoolToCBool(visible_vertical0)
	C.gtk_tool_item_set_visible_vertical(this1, visible_vertical1)
}
func (this0 *ToolItem) ToolbarReconfigured() {
	var this1 *C.GtkToolItem
	if this0 != nil {
		this1 = this0.InheritedFromGtkToolItem()
	}
	C.gtk_tool_item_toolbar_reconfigured(this1)
}
type ToolItemGroupLike interface {
	ContainerLike
	InheritedFromGtkToolItemGroup() *C.GtkToolItemGroup
}

type ToolItemGroup struct {
	Container
	atk.ImplementorIfaceImpl
	BuildableImpl
	ToolShellImpl
}

func ToToolItemGroup(objlike gobject.ObjectLike) *ToolItemGroup {
	c := objlike.InheritedFromGObject()
	if c == nil {
		return nil
	}
	t := (*ToolItemGroup)(nil).GetStaticType()
	obj := gobject.ObjectGrabIfType(unsafe.Pointer(c), t)
	if obj != nil {
		return (*ToolItemGroup)(obj)
	}
	panic("cannot cast to ToolItemGroup")
}

func (this0 *ToolItemGroup) InheritedFromGtkToolItemGroup() *C.GtkToolItemGroup {
	if this0 == nil {
		return nil
	}
	return (*C.GtkToolItemGroup)(this0.C)
}

func (this0 *ToolItemGroup) GetStaticType() gobject.Type {
	return gobject.Type(C.gtk_tool_item_group_get_type())
}

func ToolItemGroupGetType() gobject.Type {
	return (*ToolItemGroup)(nil).GetStaticType()
}
func NewToolItemGroup(label0 string) *ToolItemGroup {
	var label1 *C.char
	label1 = _GoStringToGString(label0)
	defer C.free(unsafe.Pointer(label1))
	ret1 := C.gtk_tool_item_group_new(label1)
	var ret2 *ToolItemGroup
	ret2 = (*ToolItemGroup)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
func (this0 *ToolItemGroup) GetCollapsed() bool {
	var this1 *C.GtkToolItemGroup
	if this0 != nil {
		this1 = this0.InheritedFromGtkToolItemGroup()
	}
	ret1 := C.gtk_tool_item_group_get_collapsed(this1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *ToolItemGroup) GetDropItem(x0 int, y0 int) *ToolItem {
	var this1 *C.GtkToolItemGroup
	var x1 C.int32_t
	var y1 C.int32_t
	if this0 != nil {
		this1 = this0.InheritedFromGtkToolItemGroup()
	}
	x1 = C.int32_t(x0)
	y1 = C.int32_t(y0)
	ret1 := C.gtk_tool_item_group_get_drop_item(this1, x1, y1)
	var ret2 *ToolItem
	ret2 = (*ToolItem)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
func (this0 *ToolItemGroup) GetEllipsize() pango.EllipsizeMode {
	var this1 *C.GtkToolItemGroup
	if this0 != nil {
		this1 = this0.InheritedFromGtkToolItemGroup()
	}
	ret1 := C.gtk_tool_item_group_get_ellipsize(this1)
	var ret2 pango.EllipsizeMode
	ret2 = pango.EllipsizeMode(ret1)
	return ret2
}
func (this0 *ToolItemGroup) GetHeaderRelief() ReliefStyle {
	var this1 *C.GtkToolItemGroup
	if this0 != nil {
		this1 = this0.InheritedFromGtkToolItemGroup()
	}
	ret1 := C.gtk_tool_item_group_get_header_relief(this1)
	var ret2 ReliefStyle
	ret2 = ReliefStyle(ret1)
	return ret2
}
func (this0 *ToolItemGroup) GetItemPosition(item0 ToolItemLike) int {
	var this1 *C.GtkToolItemGroup
	var item1 *C.GtkToolItem
	if this0 != nil {
		this1 = this0.InheritedFromGtkToolItemGroup()
	}
	if item0 != nil {
		item1 = item0.InheritedFromGtkToolItem()
	}
	ret1 := C.gtk_tool_item_group_get_item_position(this1, item1)
	var ret2 int
	ret2 = int(ret1)
	return ret2
}
func (this0 *ToolItemGroup) GetLabel() string {
	var this1 *C.GtkToolItemGroup
	if this0 != nil {
		this1 = this0.InheritedFromGtkToolItemGroup()
	}
	ret1 := C.gtk_tool_item_group_get_label(this1)
	var ret2 string
	ret2 = C.GoString(ret1)
	return ret2
}
func (this0 *ToolItemGroup) GetLabelWidget() *Widget {
	var this1 *C.GtkToolItemGroup
	if this0 != nil {
		this1 = this0.InheritedFromGtkToolItemGroup()
	}
	ret1 := C.gtk_tool_item_group_get_label_widget(this1)
	var ret2 *Widget
	ret2 = (*Widget)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
func (this0 *ToolItemGroup) GetNItems() int {
	var this1 *C.GtkToolItemGroup
	if this0 != nil {
		this1 = this0.InheritedFromGtkToolItemGroup()
	}
	ret1 := C.gtk_tool_item_group_get_n_items(this1)
	var ret2 int
	ret2 = int(ret1)
	return ret2
}
func (this0 *ToolItemGroup) GetNthItem(index0 int) *ToolItem {
	var this1 *C.GtkToolItemGroup
	var index1 C.uint32_t
	if this0 != nil {
		this1 = this0.InheritedFromGtkToolItemGroup()
	}
	index1 = C.uint32_t(index0)
	ret1 := C.gtk_tool_item_group_get_nth_item(this1, index1)
	var ret2 *ToolItem
	ret2 = (*ToolItem)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
func (this0 *ToolItemGroup) Insert(item0 ToolItemLike, position0 int) {
	var this1 *C.GtkToolItemGroup
	var item1 *C.GtkToolItem
	var position1 C.int32_t
	if this0 != nil {
		this1 = this0.InheritedFromGtkToolItemGroup()
	}
	if item0 != nil {
		item1 = item0.InheritedFromGtkToolItem()
	}
	position1 = C.int32_t(position0)
	C.gtk_tool_item_group_insert(this1, item1, position1)
}
func (this0 *ToolItemGroup) SetCollapsed(collapsed0 bool) {
	var this1 *C.GtkToolItemGroup
	var collapsed1 C.int
	if this0 != nil {
		this1 = this0.InheritedFromGtkToolItemGroup()
	}
	collapsed1 = _GoBoolToCBool(collapsed0)
	C.gtk_tool_item_group_set_collapsed(this1, collapsed1)
}
func (this0 *ToolItemGroup) SetEllipsize(ellipsize0 pango.EllipsizeMode) {
	var this1 *C.GtkToolItemGroup
	var ellipsize1 C.PangoEllipsizeMode
	if this0 != nil {
		this1 = this0.InheritedFromGtkToolItemGroup()
	}
	ellipsize1 = C.PangoEllipsizeMode(ellipsize0)
	C.gtk_tool_item_group_set_ellipsize(this1, ellipsize1)
}
func (this0 *ToolItemGroup) SetHeaderRelief(style0 ReliefStyle) {
	var this1 *C.GtkToolItemGroup
	var style1 C.GtkReliefStyle
	if this0 != nil {
		this1 = this0.InheritedFromGtkToolItemGroup()
	}
	style1 = C.GtkReliefStyle(style0)
	C.gtk_tool_item_group_set_header_relief(this1, style1)
}
func (this0 *ToolItemGroup) SetItemPosition(item0 ToolItemLike, position0 int) {
	var this1 *C.GtkToolItemGroup
	var item1 *C.GtkToolItem
	var position1 C.int32_t
	if this0 != nil {
		this1 = this0.InheritedFromGtkToolItemGroup()
	}
	if item0 != nil {
		item1 = item0.InheritedFromGtkToolItem()
	}
	position1 = C.int32_t(position0)
	C.gtk_tool_item_group_set_item_position(this1, item1, position1)
}
func (this0 *ToolItemGroup) SetLabel(label0 string) {
	var this1 *C.GtkToolItemGroup
	var label1 *C.char
	if this0 != nil {
		this1 = this0.InheritedFromGtkToolItemGroup()
	}
	label1 = _GoStringToGString(label0)
	defer C.free(unsafe.Pointer(label1))
	C.gtk_tool_item_group_set_label(this1, label1)
}
func (this0 *ToolItemGroup) SetLabelWidget(label_widget0 WidgetLike) {
	var this1 *C.GtkToolItemGroup
	var label_widget1 *C.GtkWidget
	if this0 != nil {
		this1 = this0.InheritedFromGtkToolItemGroup()
	}
	if label_widget0 != nil {
		label_widget1 = label_widget0.InheritedFromGtkWidget()
	}
	C.gtk_tool_item_group_set_label_widget(this1, label_widget1)
}
type ToolPaletteLike interface {
	ContainerLike
	InheritedFromGtkToolPalette() *C.GtkToolPalette
}

type ToolPalette struct {
	Container
	atk.ImplementorIfaceImpl
	BuildableImpl
	OrientableImpl
	ScrollableImpl
}

func ToToolPalette(objlike gobject.ObjectLike) *ToolPalette {
	c := objlike.InheritedFromGObject()
	if c == nil {
		return nil
	}
	t := (*ToolPalette)(nil).GetStaticType()
	obj := gobject.ObjectGrabIfType(unsafe.Pointer(c), t)
	if obj != nil {
		return (*ToolPalette)(obj)
	}
	panic("cannot cast to ToolPalette")
}

func (this0 *ToolPalette) InheritedFromGtkToolPalette() *C.GtkToolPalette {
	if this0 == nil {
		return nil
	}
	return (*C.GtkToolPalette)(this0.C)
}

func (this0 *ToolPalette) GetStaticType() gobject.Type {
	return gobject.Type(C.gtk_tool_palette_get_type())
}

func ToolPaletteGetType() gobject.Type {
	return (*ToolPalette)(nil).GetStaticType()
}
func NewToolPalette() *ToolPalette {
	ret1 := C.gtk_tool_palette_new()
	var ret2 *ToolPalette
	ret2 = (*ToolPalette)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
func ToolPaletteGetDragTargetGroup() *TargetEntry {
	ret1 := C.gtk_tool_palette_get_drag_target_group()
	var ret2 *TargetEntry
	ret2 = (*TargetEntry)(unsafe.Pointer(ret1))
	return ret2
}
func ToolPaletteGetDragTargetItem() *TargetEntry {
	ret1 := C.gtk_tool_palette_get_drag_target_item()
	var ret2 *TargetEntry
	ret2 = (*TargetEntry)(unsafe.Pointer(ret1))
	return ret2
}
func (this0 *ToolPalette) AddDragDest(widget0 WidgetLike, flags0 DestDefaults, targets0 ToolPaletteDragTargets, actions0 gdk.DragAction) {
	var this1 *C.GtkToolPalette
	var widget1 *C.GtkWidget
	var flags1 C.GtkDestDefaults
	var targets1 C.GtkToolPaletteDragTargets
	var actions1 C.GdkDragAction
	if this0 != nil {
		this1 = this0.InheritedFromGtkToolPalette()
	}
	if widget0 != nil {
		widget1 = widget0.InheritedFromGtkWidget()
	}
	flags1 = C.GtkDestDefaults(flags0)
	targets1 = C.GtkToolPaletteDragTargets(targets0)
	actions1 = C.GdkDragAction(actions0)
	C.gtk_tool_palette_add_drag_dest(this1, widget1, flags1, targets1, actions1)
}
func (this0 *ToolPalette) GetDragItem(selection0 *SelectionData) *Widget {
	var this1 *C.GtkToolPalette
	var selection1 *C.GtkSelectionData
	if this0 != nil {
		this1 = this0.InheritedFromGtkToolPalette()
	}
	selection1 = (*C.GtkSelectionData)(unsafe.Pointer(selection0))
	ret1 := C.gtk_tool_palette_get_drag_item(this1, selection1)
	var ret2 *Widget
	ret2 = (*Widget)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
func (this0 *ToolPalette) GetDropGroup(x0 int, y0 int) *ToolItemGroup {
	var this1 *C.GtkToolPalette
	var x1 C.int32_t
	var y1 C.int32_t
	if this0 != nil {
		this1 = this0.InheritedFromGtkToolPalette()
	}
	x1 = C.int32_t(x0)
	y1 = C.int32_t(y0)
	ret1 := C.gtk_tool_palette_get_drop_group(this1, x1, y1)
	var ret2 *ToolItemGroup
	ret2 = (*ToolItemGroup)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
func (this0 *ToolPalette) GetDropItem(x0 int, y0 int) *ToolItem {
	var this1 *C.GtkToolPalette
	var x1 C.int32_t
	var y1 C.int32_t
	if this0 != nil {
		this1 = this0.InheritedFromGtkToolPalette()
	}
	x1 = C.int32_t(x0)
	y1 = C.int32_t(y0)
	ret1 := C.gtk_tool_palette_get_drop_item(this1, x1, y1)
	var ret2 *ToolItem
	ret2 = (*ToolItem)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
func (this0 *ToolPalette) GetExclusive(group0 ToolItemGroupLike) bool {
	var this1 *C.GtkToolPalette
	var group1 *C.GtkToolItemGroup
	if this0 != nil {
		this1 = this0.InheritedFromGtkToolPalette()
	}
	if group0 != nil {
		group1 = group0.InheritedFromGtkToolItemGroup()
	}
	ret1 := C.gtk_tool_palette_get_exclusive(this1, group1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *ToolPalette) GetExpand(group0 ToolItemGroupLike) bool {
	var this1 *C.GtkToolPalette
	var group1 *C.GtkToolItemGroup
	if this0 != nil {
		this1 = this0.InheritedFromGtkToolPalette()
	}
	if group0 != nil {
		group1 = group0.InheritedFromGtkToolItemGroup()
	}
	ret1 := C.gtk_tool_palette_get_expand(this1, group1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *ToolPalette) GetGroupPosition(group0 ToolItemGroupLike) int {
	var this1 *C.GtkToolPalette
	var group1 *C.GtkToolItemGroup
	if this0 != nil {
		this1 = this0.InheritedFromGtkToolPalette()
	}
	if group0 != nil {
		group1 = group0.InheritedFromGtkToolItemGroup()
	}
	ret1 := C.gtk_tool_palette_get_group_position(this1, group1)
	var ret2 int
	ret2 = int(ret1)
	return ret2
}
func (this0 *ToolPalette) GetHAdjustment() *Adjustment {
	var this1 *C.GtkToolPalette
	if this0 != nil {
		this1 = this0.InheritedFromGtkToolPalette()
	}
	ret1 := C.gtk_tool_palette_get_hadjustment(this1)
	var ret2 *Adjustment
	ret2 = (*Adjustment)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
func (this0 *ToolPalette) GetIconSize() int {
	var this1 *C.GtkToolPalette
	if this0 != nil {
		this1 = this0.InheritedFromGtkToolPalette()
	}
	ret1 := C.gtk_tool_palette_get_icon_size(this1)
	var ret2 int
	ret2 = int(ret1)
	return ret2
}
func (this0 *ToolPalette) GetStyle() ToolbarStyle {
	var this1 *C.GtkToolPalette
	if this0 != nil {
		this1 = this0.InheritedFromGtkToolPalette()
	}
	ret1 := C.gtk_tool_palette_get_style(this1)
	var ret2 ToolbarStyle
	ret2 = ToolbarStyle(ret1)
	return ret2
}
func (this0 *ToolPalette) GetVAdjustment() *Adjustment {
	var this1 *C.GtkToolPalette
	if this0 != nil {
		this1 = this0.InheritedFromGtkToolPalette()
	}
	ret1 := C.gtk_tool_palette_get_vadjustment(this1)
	var ret2 *Adjustment
	ret2 = (*Adjustment)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
func (this0 *ToolPalette) SetDragSource(targets0 ToolPaletteDragTargets) {
	var this1 *C.GtkToolPalette
	var targets1 C.GtkToolPaletteDragTargets
	if this0 != nil {
		this1 = this0.InheritedFromGtkToolPalette()
	}
	targets1 = C.GtkToolPaletteDragTargets(targets0)
	C.gtk_tool_palette_set_drag_source(this1, targets1)
}
func (this0 *ToolPalette) SetExclusive(group0 ToolItemGroupLike, exclusive0 bool) {
	var this1 *C.GtkToolPalette
	var group1 *C.GtkToolItemGroup
	var exclusive1 C.int
	if this0 != nil {
		this1 = this0.InheritedFromGtkToolPalette()
	}
	if group0 != nil {
		group1 = group0.InheritedFromGtkToolItemGroup()
	}
	exclusive1 = _GoBoolToCBool(exclusive0)
	C.gtk_tool_palette_set_exclusive(this1, group1, exclusive1)
}
func (this0 *ToolPalette) SetExpand(group0 ToolItemGroupLike, expand0 bool) {
	var this1 *C.GtkToolPalette
	var group1 *C.GtkToolItemGroup
	var expand1 C.int
	if this0 != nil {
		this1 = this0.InheritedFromGtkToolPalette()
	}
	if group0 != nil {
		group1 = group0.InheritedFromGtkToolItemGroup()
	}
	expand1 = _GoBoolToCBool(expand0)
	C.gtk_tool_palette_set_expand(this1, group1, expand1)
}
func (this0 *ToolPalette) SetGroupPosition(group0 ToolItemGroupLike, position0 int) {
	var this1 *C.GtkToolPalette
	var group1 *C.GtkToolItemGroup
	var position1 C.int32_t
	if this0 != nil {
		this1 = this0.InheritedFromGtkToolPalette()
	}
	if group0 != nil {
		group1 = group0.InheritedFromGtkToolItemGroup()
	}
	position1 = C.int32_t(position0)
	C.gtk_tool_palette_set_group_position(this1, group1, position1)
}
func (this0 *ToolPalette) SetIconSize(icon_size0 int) {
	var this1 *C.GtkToolPalette
	var icon_size1 C.int32_t
	if this0 != nil {
		this1 = this0.InheritedFromGtkToolPalette()
	}
	icon_size1 = C.int32_t(icon_size0)
	C.gtk_tool_palette_set_icon_size(this1, icon_size1)
}
func (this0 *ToolPalette) SetStyle(style0 ToolbarStyle) {
	var this1 *C.GtkToolPalette
	var style1 C.GtkToolbarStyle
	if this0 != nil {
		this1 = this0.InheritedFromGtkToolPalette()
	}
	style1 = C.GtkToolbarStyle(style0)
	C.gtk_tool_palette_set_style(this1, style1)
}
func (this0 *ToolPalette) UnsetIconSize() {
	var this1 *C.GtkToolPalette
	if this0 != nil {
		this1 = this0.InheritedFromGtkToolPalette()
	}
	C.gtk_tool_palette_unset_icon_size(this1)
}
func (this0 *ToolPalette) UnsetStyle() {
	var this1 *C.GtkToolPalette
	if this0 != nil {
		this1 = this0.InheritedFromGtkToolPalette()
	}
	C.gtk_tool_palette_unset_style(this1)
}
type ToolPaletteDragTargets C.uint32_t
const (
	ToolPaletteDragTargetsItems ToolPaletteDragTargets = 1
	ToolPaletteDragTargetsGroups ToolPaletteDragTargets = 2
)
type ToolShellLike interface {
	ImplementsGtkToolShell() *C.GtkToolShell
}

type ToolShell struct {
	gobject.Object
	ToolShellImpl
}

type ToolShellImpl struct {}

func ToToolShell(objlike gobject.ObjectLike) *ToolShell {
	t := (*ToolShellImpl)(nil).GetStaticType()
	c := objlike.InheritedFromGObject()
	obj := gobject.ObjectGrabIfType(unsafe.Pointer(c), t)
	if obj != nil {
		return (*ToolShell)(obj)
	}
	panic("cannot cast to ToolShell")
}

func (this0 *ToolShellImpl) ImplementsGtkToolShell() *C.GtkToolShell {
	obj := uintptr(unsafe.Pointer(this0)) - unsafe.Sizeof(uintptr(0))
	return (*C.GtkToolShell)((*gobject.Object)(unsafe.Pointer(obj)).C)
}

func (this0 *ToolShellImpl) GetStaticType() gobject.Type {
	return gobject.Type(C.gtk_tool_shell_get_type())
}

func ToolShellGetType() gobject.Type {
	return (*ToolShellImpl)(nil).GetStaticType()
}
func (this0 *ToolShellImpl) GetEllipsizeMode() pango.EllipsizeMode {
	var this1 *C.GtkToolShell
	if this0 != nil {
		this1 = this0.ImplementsGtkToolShell()}
	ret1 := C.gtk_tool_shell_get_ellipsize_mode(this1)
	var ret2 pango.EllipsizeMode
	ret2 = pango.EllipsizeMode(ret1)
	return ret2
}
func (this0 *ToolShellImpl) GetIconSize() int {
	var this1 *C.GtkToolShell
	if this0 != nil {
		this1 = this0.ImplementsGtkToolShell()}
	ret1 := C.gtk_tool_shell_get_icon_size(this1)
	var ret2 int
	ret2 = int(ret1)
	return ret2
}
func (this0 *ToolShellImpl) GetOrientation() Orientation {
	var this1 *C.GtkToolShell
	if this0 != nil {
		this1 = this0.ImplementsGtkToolShell()}
	ret1 := C.gtk_tool_shell_get_orientation(this1)
	var ret2 Orientation
	ret2 = Orientation(ret1)
	return ret2
}
func (this0 *ToolShellImpl) GetReliefStyle() ReliefStyle {
	var this1 *C.GtkToolShell
	if this0 != nil {
		this1 = this0.ImplementsGtkToolShell()}
	ret1 := C.gtk_tool_shell_get_relief_style(this1)
	var ret2 ReliefStyle
	ret2 = ReliefStyle(ret1)
	return ret2
}
func (this0 *ToolShellImpl) GetStyle() ToolbarStyle {
	var this1 *C.GtkToolShell
	if this0 != nil {
		this1 = this0.ImplementsGtkToolShell()}
	ret1 := C.gtk_tool_shell_get_style(this1)
	var ret2 ToolbarStyle
	ret2 = ToolbarStyle(ret1)
	return ret2
}
func (this0 *ToolShellImpl) GetTextAlignment() float64 {
	var this1 *C.GtkToolShell
	if this0 != nil {
		this1 = this0.ImplementsGtkToolShell()}
	ret1 := C.gtk_tool_shell_get_text_alignment(this1)
	var ret2 float64
	ret2 = float64(ret1)
	return ret2
}
func (this0 *ToolShellImpl) GetTextOrientation() Orientation {
	var this1 *C.GtkToolShell
	if this0 != nil {
		this1 = this0.ImplementsGtkToolShell()}
	ret1 := C.gtk_tool_shell_get_text_orientation(this1)
	var ret2 Orientation
	ret2 = Orientation(ret1)
	return ret2
}
func (this0 *ToolShellImpl) GetTextSizeGroup() *SizeGroup {
	var this1 *C.GtkToolShell
	if this0 != nil {
		this1 = this0.ImplementsGtkToolShell()}
	ret1 := C.gtk_tool_shell_get_text_size_group(this1)
	var ret2 *SizeGroup
	ret2 = (*SizeGroup)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
func (this0 *ToolShellImpl) RebuildMenu() {
	var this1 *C.GtkToolShell
	if this0 != nil {
		this1 = this0.ImplementsGtkToolShell()}
	C.gtk_tool_shell_rebuild_menu(this1)
}
type ToolbarLike interface {
	ContainerLike
	InheritedFromGtkToolbar() *C.GtkToolbar
}

type Toolbar struct {
	Container
	atk.ImplementorIfaceImpl
	BuildableImpl
	OrientableImpl
	ToolShellImpl
}

func ToToolbar(objlike gobject.ObjectLike) *Toolbar {
	c := objlike.InheritedFromGObject()
	if c == nil {
		return nil
	}
	t := (*Toolbar)(nil).GetStaticType()
	obj := gobject.ObjectGrabIfType(unsafe.Pointer(c), t)
	if obj != nil {
		return (*Toolbar)(obj)
	}
	panic("cannot cast to Toolbar")
}

func (this0 *Toolbar) InheritedFromGtkToolbar() *C.GtkToolbar {
	if this0 == nil {
		return nil
	}
	return (*C.GtkToolbar)(this0.C)
}

func (this0 *Toolbar) GetStaticType() gobject.Type {
	return gobject.Type(C.gtk_toolbar_get_type())
}

func ToolbarGetType() gobject.Type {
	return (*Toolbar)(nil).GetStaticType()
}
func NewToolbar() *Toolbar {
	ret1 := C.gtk_toolbar_new()
	var ret2 *Toolbar
	ret2 = (*Toolbar)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
func (this0 *Toolbar) GetDropIndex(x0 int, y0 int) int {
	var this1 *C.GtkToolbar
	var x1 C.int32_t
	var y1 C.int32_t
	if this0 != nil {
		this1 = this0.InheritedFromGtkToolbar()
	}
	x1 = C.int32_t(x0)
	y1 = C.int32_t(y0)
	ret1 := C.gtk_toolbar_get_drop_index(this1, x1, y1)
	var ret2 int
	ret2 = int(ret1)
	return ret2
}
func (this0 *Toolbar) GetIconSize() int {
	var this1 *C.GtkToolbar
	if this0 != nil {
		this1 = this0.InheritedFromGtkToolbar()
	}
	ret1 := C.gtk_toolbar_get_icon_size(this1)
	var ret2 int
	ret2 = int(ret1)
	return ret2
}
func (this0 *Toolbar) GetItemIndex(item0 ToolItemLike) int {
	var this1 *C.GtkToolbar
	var item1 *C.GtkToolItem
	if this0 != nil {
		this1 = this0.InheritedFromGtkToolbar()
	}
	if item0 != nil {
		item1 = item0.InheritedFromGtkToolItem()
	}
	ret1 := C.gtk_toolbar_get_item_index(this1, item1)
	var ret2 int
	ret2 = int(ret1)
	return ret2
}
func (this0 *Toolbar) GetNItems() int {
	var this1 *C.GtkToolbar
	if this0 != nil {
		this1 = this0.InheritedFromGtkToolbar()
	}
	ret1 := C.gtk_toolbar_get_n_items(this1)
	var ret2 int
	ret2 = int(ret1)
	return ret2
}
func (this0 *Toolbar) GetNthItem(n0 int) *ToolItem {
	var this1 *C.GtkToolbar
	var n1 C.int32_t
	if this0 != nil {
		this1 = this0.InheritedFromGtkToolbar()
	}
	n1 = C.int32_t(n0)
	ret1 := C.gtk_toolbar_get_nth_item(this1, n1)
	var ret2 *ToolItem
	ret2 = (*ToolItem)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
func (this0 *Toolbar) GetReliefStyle() ReliefStyle {
	var this1 *C.GtkToolbar
	if this0 != nil {
		this1 = this0.InheritedFromGtkToolbar()
	}
	ret1 := C.gtk_toolbar_get_relief_style(this1)
	var ret2 ReliefStyle
	ret2 = ReliefStyle(ret1)
	return ret2
}
func (this0 *Toolbar) GetShowArrow() bool {
	var this1 *C.GtkToolbar
	if this0 != nil {
		this1 = this0.InheritedFromGtkToolbar()
	}
	ret1 := C.gtk_toolbar_get_show_arrow(this1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *Toolbar) GetStyle() ToolbarStyle {
	var this1 *C.GtkToolbar
	if this0 != nil {
		this1 = this0.InheritedFromGtkToolbar()
	}
	ret1 := C.gtk_toolbar_get_style(this1)
	var ret2 ToolbarStyle
	ret2 = ToolbarStyle(ret1)
	return ret2
}
func (this0 *Toolbar) Insert(item0 ToolItemLike, pos0 int) {
	var this1 *C.GtkToolbar
	var item1 *C.GtkToolItem
	var pos1 C.int32_t
	if this0 != nil {
		this1 = this0.InheritedFromGtkToolbar()
	}
	if item0 != nil {
		item1 = item0.InheritedFromGtkToolItem()
	}
	pos1 = C.int32_t(pos0)
	C.gtk_toolbar_insert(this1, item1, pos1)
}
func (this0 *Toolbar) SetDropHighlightItem(tool_item0 ToolItemLike, index_0 int) {
	var this1 *C.GtkToolbar
	var tool_item1 *C.GtkToolItem
	var index_1 C.int32_t
	if this0 != nil {
		this1 = this0.InheritedFromGtkToolbar()
	}
	if tool_item0 != nil {
		tool_item1 = tool_item0.InheritedFromGtkToolItem()
	}
	index_1 = C.int32_t(index_0)
	C.gtk_toolbar_set_drop_highlight_item(this1, tool_item1, index_1)
}
func (this0 *Toolbar) SetIconSize(icon_size0 int) {
	var this1 *C.GtkToolbar
	var icon_size1 C.int32_t
	if this0 != nil {
		this1 = this0.InheritedFromGtkToolbar()
	}
	icon_size1 = C.int32_t(icon_size0)
	C.gtk_toolbar_set_icon_size(this1, icon_size1)
}
func (this0 *Toolbar) SetShowArrow(show_arrow0 bool) {
	var this1 *C.GtkToolbar
	var show_arrow1 C.int
	if this0 != nil {
		this1 = this0.InheritedFromGtkToolbar()
	}
	show_arrow1 = _GoBoolToCBool(show_arrow0)
	C.gtk_toolbar_set_show_arrow(this1, show_arrow1)
}
func (this0 *Toolbar) SetStyle(style0 ToolbarStyle) {
	var this1 *C.GtkToolbar
	var style1 C.GtkToolbarStyle
	if this0 != nil {
		this1 = this0.InheritedFromGtkToolbar()
	}
	style1 = C.GtkToolbarStyle(style0)
	C.gtk_toolbar_set_style(this1, style1)
}
func (this0 *Toolbar) UnsetIconSize() {
	var this1 *C.GtkToolbar
	if this0 != nil {
		this1 = this0.InheritedFromGtkToolbar()
	}
	C.gtk_toolbar_unset_icon_size(this1)
}
func (this0 *Toolbar) UnsetStyle() {
	var this1 *C.GtkToolbar
	if this0 != nil {
		this1 = this0.InheritedFromGtkToolbar()
	}
	C.gtk_toolbar_unset_style(this1)
}
type ToolbarSpaceStyle C.uint32_t
const (
	ToolbarSpaceStyleEmpty ToolbarSpaceStyle = 0
	ToolbarSpaceStyleLine ToolbarSpaceStyle = 1
)
type ToolbarStyle C.uint32_t
const (
	ToolbarStyleIcons ToolbarStyle = 0
	ToolbarStyleText ToolbarStyle = 1
	ToolbarStyleBoth ToolbarStyle = 2
	ToolbarStyleBothHoriz ToolbarStyle = 3
)
type TooltipLike interface {
	gobject.ObjectLike
	InheritedFromGtkTooltip() *C.GtkTooltip
}

type Tooltip struct {
	gobject.Object
	
}

func ToTooltip(objlike gobject.ObjectLike) *Tooltip {
	c := objlike.InheritedFromGObject()
	if c == nil {
		return nil
	}
	t := (*Tooltip)(nil).GetStaticType()
	obj := gobject.ObjectGrabIfType(unsafe.Pointer(c), t)
	if obj != nil {
		return (*Tooltip)(obj)
	}
	panic("cannot cast to Tooltip")
}

func (this0 *Tooltip) InheritedFromGtkTooltip() *C.GtkTooltip {
	if this0 == nil {
		return nil
	}
	return (*C.GtkTooltip)(this0.C)
}

func (this0 *Tooltip) GetStaticType() gobject.Type {
	return gobject.Type(C.gtk_tooltip_get_type())
}

func TooltipGetType() gobject.Type {
	return (*Tooltip)(nil).GetStaticType()
}
func TooltipTriggerTooltipQuery(display0 gdk.DisplayLike) {
	var display1 *C.GdkDisplay
	if display0 != nil {
		display1 = display0.InheritedFromGdkDisplay()
	}
	C.gtk_tooltip_trigger_tooltip_query(display1)
}
func (this0 *Tooltip) SetCustom(custom_widget0 WidgetLike) {
	var this1 *C.GtkTooltip
	var custom_widget1 *C.GtkWidget
	if this0 != nil {
		this1 = this0.InheritedFromGtkTooltip()
	}
	if custom_widget0 != nil {
		custom_widget1 = custom_widget0.InheritedFromGtkWidget()
	}
	C.gtk_tooltip_set_custom(this1, custom_widget1)
}
func (this0 *Tooltip) SetIcon(pixbuf0 gdkpixbuf.PixbufLike) {
	var this1 *C.GtkTooltip
	var pixbuf1 *C.GdkPixbuf
	if this0 != nil {
		this1 = this0.InheritedFromGtkTooltip()
	}
	if pixbuf0 != nil {
		pixbuf1 = pixbuf0.InheritedFromGdkPixbuf()
	}
	C.gtk_tooltip_set_icon(this1, pixbuf1)
}
func (this0 *Tooltip) SetIconFromGIcon(gicon0 gio.IconLike, size0 int) {
	var this1 *C.GtkTooltip
	var gicon1 *C.GIcon
	var size1 C.int32_t
	if this0 != nil {
		this1 = this0.InheritedFromGtkTooltip()
	}
	if gicon0 != nil {
		gicon1 = gicon0.ImplementsGIcon()}
	size1 = C.int32_t(size0)
	C.gtk_tooltip_set_icon_from_gicon(this1, gicon1, size1)
}
func (this0 *Tooltip) SetIconFromIconName(icon_name0 string, size0 int) {
	var this1 *C.GtkTooltip
	var icon_name1 *C.char
	var size1 C.int32_t
	if this0 != nil {
		this1 = this0.InheritedFromGtkTooltip()
	}
	icon_name1 = _GoStringToGString(icon_name0)
	defer C.free(unsafe.Pointer(icon_name1))
	size1 = C.int32_t(size0)
	C.gtk_tooltip_set_icon_from_icon_name(this1, icon_name1, size1)
}
func (this0 *Tooltip) SetIconFromStock(stock_id0 string, size0 int) {
	var this1 *C.GtkTooltip
	var stock_id1 *C.char
	var size1 C.int32_t
	if this0 != nil {
		this1 = this0.InheritedFromGtkTooltip()
	}
	stock_id1 = _GoStringToGString(stock_id0)
	defer C.free(unsafe.Pointer(stock_id1))
	size1 = C.int32_t(size0)
	C.gtk_tooltip_set_icon_from_stock(this1, stock_id1, size1)
}
func (this0 *Tooltip) SetMarkup(markup0 string) {
	var this1 *C.GtkTooltip
	var markup1 *C.char
	if this0 != nil {
		this1 = this0.InheritedFromGtkTooltip()
	}
	markup1 = _GoStringToGString(markup0)
	defer C.free(unsafe.Pointer(markup1))
	C.gtk_tooltip_set_markup(this1, markup1)
}
func (this0 *Tooltip) SetText(text0 string) {
	var this1 *C.GtkTooltip
	var text1 *C.char
	if this0 != nil {
		this1 = this0.InheritedFromGtkTooltip()
	}
	text1 = _GoStringToGString(text0)
	defer C.free(unsafe.Pointer(text1))
	C.gtk_tooltip_set_text(this1, text1)
}
func (this0 *Tooltip) SetTipArea(rect0 *cairo.RectangleInt) {
	var this1 *C.GtkTooltip
	var rect1 *C.cairoRectangleInt
	if this0 != nil {
		this1 = this0.InheritedFromGtkTooltip()
	}
	rect1 = (*C.cairoRectangleInt)(unsafe.Pointer(rect0))
	C.gtk_tooltip_set_tip_area(this1, rect1)
}
type TranslateFunc func(path string) string
//export _GtkTranslateFunc_c_wrapper
func _GtkTranslateFunc_c_wrapper(path0 unsafe.Pointer, func_data0 unsafe.Pointer) unsafe.Pointer {
	var path1 string
	var func_data1 TranslateFunc
	path1 = C.GoString((*C.char)(path0))
	func_data1 = *(*TranslateFunc)(func_data0)
	ret1 := func_data1(path1)
	var ret2 *C.char
	ret2 = _GoStringToGString(ret1)
	return (unsafe.Pointer)(ret2)
}
//export _GtkTranslateFunc_c_wrapper_once
func _GtkTranslateFunc_c_wrapper_once(path0 unsafe.Pointer, func_data0 unsafe.Pointer) unsafe.Pointer {
	ret := _GtkTranslateFunc_c_wrapper(path0, func_data0)
	gobject.Holder.Release(func_data0)
	return ret
}
type TreeCellDataFunc func(tree_column *TreeViewColumn, cell *CellRenderer, tree_model *TreeModel, iter *TreeIter)
//export _GtkTreeCellDataFunc_c_wrapper
func _GtkTreeCellDataFunc_c_wrapper(tree_column0 unsafe.Pointer, cell0 unsafe.Pointer, tree_model0 unsafe.Pointer, iter0 unsafe.Pointer, data0 unsafe.Pointer) {
	var tree_column1 *TreeViewColumn
	var cell1 *CellRenderer
	var tree_model1 *TreeModel
	var iter1 *TreeIter
	var data1 TreeCellDataFunc
	tree_column1 = (*TreeViewColumn)(gobject.ObjectWrap(unsafe.Pointer((*C.GtkTreeViewColumn)(tree_column0)), true))
	cell1 = (*CellRenderer)(gobject.ObjectWrap(unsafe.Pointer((*C.GtkCellRenderer)(cell0)), true))
	tree_model1 = (*TreeModel)(gobject.ObjectWrap(unsafe.Pointer((*C.GtkTreeModel)(tree_model0)), true))
	iter1 = (*TreeIter)(unsafe.Pointer((*C.GtkTreeIter)(iter0)))
	data1 = *(*TreeCellDataFunc)(data0)
	data1(tree_column1, cell1, tree_model1, iter1)
}
//export _GtkTreeCellDataFunc_c_wrapper_once
func _GtkTreeCellDataFunc_c_wrapper_once(tree_column0 unsafe.Pointer, cell0 unsafe.Pointer, tree_model0 unsafe.Pointer, iter0 unsafe.Pointer, data0 unsafe.Pointer) {
	_GtkTreeCellDataFunc_c_wrapper(tree_column0, cell0, tree_model0, iter0, data0)
	gobject.Holder.Release(data0)
}
type TreeDestroyCountFunc func(tree_view *TreeView, path *TreePath, children int)
//export _GtkTreeDestroyCountFunc_c_wrapper
func _GtkTreeDestroyCountFunc_c_wrapper(tree_view0 unsafe.Pointer, path0 unsafe.Pointer, children0 int32, user_data0 unsafe.Pointer) {
	var tree_view1 *TreeView
	var path1 *TreePath
	var children1 int
	var user_data1 TreeDestroyCountFunc
	tree_view1 = (*TreeView)(gobject.ObjectWrap(unsafe.Pointer((*C.GtkTreeView)(tree_view0)), true))
	path1 = (*TreePath)(unsafe.Pointer((*C.GtkTreePath)(path0)))
	children1 = int((C.int32_t)(children0))
	user_data1 = *(*TreeDestroyCountFunc)(user_data0)
	user_data1(tree_view1, path1, children1)
}
//export _GtkTreeDestroyCountFunc_c_wrapper_once
func _GtkTreeDestroyCountFunc_c_wrapper_once(tree_view0 unsafe.Pointer, path0 unsafe.Pointer, children0 int32, user_data0 unsafe.Pointer) {
	_GtkTreeDestroyCountFunc_c_wrapper(tree_view0, path0, children0, user_data0)
	gobject.Holder.Release(user_data0)
}
type TreeDragDestLike interface {
	ImplementsGtkTreeDragDest() *C.GtkTreeDragDest
}

type TreeDragDest struct {
	gobject.Object
	TreeDragDestImpl
}

type TreeDragDestImpl struct {}

func ToTreeDragDest(objlike gobject.ObjectLike) *TreeDragDest {
	t := (*TreeDragDestImpl)(nil).GetStaticType()
	c := objlike.InheritedFromGObject()
	obj := gobject.ObjectGrabIfType(unsafe.Pointer(c), t)
	if obj != nil {
		return (*TreeDragDest)(obj)
	}
	panic("cannot cast to TreeDragDest")
}

func (this0 *TreeDragDestImpl) ImplementsGtkTreeDragDest() *C.GtkTreeDragDest {
	obj := uintptr(unsafe.Pointer(this0)) - unsafe.Sizeof(uintptr(0))
	return (*C.GtkTreeDragDest)((*gobject.Object)(unsafe.Pointer(obj)).C)
}

func (this0 *TreeDragDestImpl) GetStaticType() gobject.Type {
	return gobject.Type(C.gtk_tree_drag_dest_get_type())
}

func TreeDragDestGetType() gobject.Type {
	return (*TreeDragDestImpl)(nil).GetStaticType()
}
func (this0 *TreeDragDestImpl) DragDataReceived(dest0 *TreePath, selection_data0 *SelectionData) bool {
	var this1 *C.GtkTreeDragDest
	var dest1 *C.GtkTreePath
	var selection_data1 *C.GtkSelectionData
	if this0 != nil {
		this1 = this0.ImplementsGtkTreeDragDest()}
	dest1 = (*C.GtkTreePath)(unsafe.Pointer(dest0))
	selection_data1 = (*C.GtkSelectionData)(unsafe.Pointer(selection_data0))
	ret1 := C.gtk_tree_drag_dest_drag_data_received(this1, dest1, selection_data1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *TreeDragDestImpl) RowDropPossible(dest_path0 *TreePath, selection_data0 *SelectionData) bool {
	var this1 *C.GtkTreeDragDest
	var dest_path1 *C.GtkTreePath
	var selection_data1 *C.GtkSelectionData
	if this0 != nil {
		this1 = this0.ImplementsGtkTreeDragDest()}
	dest_path1 = (*C.GtkTreePath)(unsafe.Pointer(dest_path0))
	selection_data1 = (*C.GtkSelectionData)(unsafe.Pointer(selection_data0))
	ret1 := C.gtk_tree_drag_dest_row_drop_possible(this1, dest_path1, selection_data1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
type TreeDragSourceLike interface {
	ImplementsGtkTreeDragSource() *C.GtkTreeDragSource
}

type TreeDragSource struct {
	gobject.Object
	TreeDragSourceImpl
}

type TreeDragSourceImpl struct {}

func ToTreeDragSource(objlike gobject.ObjectLike) *TreeDragSource {
	t := (*TreeDragSourceImpl)(nil).GetStaticType()
	c := objlike.InheritedFromGObject()
	obj := gobject.ObjectGrabIfType(unsafe.Pointer(c), t)
	if obj != nil {
		return (*TreeDragSource)(obj)
	}
	panic("cannot cast to TreeDragSource")
}

func (this0 *TreeDragSourceImpl) ImplementsGtkTreeDragSource() *C.GtkTreeDragSource {
	obj := uintptr(unsafe.Pointer(this0)) - unsafe.Sizeof(uintptr(0))
	return (*C.GtkTreeDragSource)((*gobject.Object)(unsafe.Pointer(obj)).C)
}

func (this0 *TreeDragSourceImpl) GetStaticType() gobject.Type {
	return gobject.Type(C.gtk_tree_drag_source_get_type())
}

func TreeDragSourceGetType() gobject.Type {
	return (*TreeDragSourceImpl)(nil).GetStaticType()
}
func (this0 *TreeDragSourceImpl) DragDataDelete(path0 *TreePath) bool {
	var this1 *C.GtkTreeDragSource
	var path1 *C.GtkTreePath
	if this0 != nil {
		this1 = this0.ImplementsGtkTreeDragSource()}
	path1 = (*C.GtkTreePath)(unsafe.Pointer(path0))
	ret1 := C.gtk_tree_drag_source_drag_data_delete(this1, path1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *TreeDragSourceImpl) DragDataGet(path0 *TreePath) (SelectionData, bool) {
	var this1 *C.GtkTreeDragSource
	var path1 *C.GtkTreePath
	var selection_data1 C.GtkSelectionData
	if this0 != nil {
		this1 = this0.ImplementsGtkTreeDragSource()}
	path1 = (*C.GtkTreePath)(unsafe.Pointer(path0))
	ret1 := C.gtk_tree_drag_source_drag_data_get(this1, path1, &selection_data1)
	var selection_data2 SelectionData
	var ret2 bool
	selection_data2 = *(*SelectionData)(unsafe.Pointer(&selection_data1))
	ret2 = ret1 != 0
	return selection_data2, ret2
}
func (this0 *TreeDragSourceImpl) RowDraggable(path0 *TreePath) bool {
	var this1 *C.GtkTreeDragSource
	var path1 *C.GtkTreePath
	if this0 != nil {
		this1 = this0.ImplementsGtkTreeDragSource()}
	path1 = (*C.GtkTreePath)(unsafe.Pointer(path0))
	ret1 := C.gtk_tree_drag_source_row_draggable(this1, path1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
type TreeIter struct {
	Stamp int32
	_ [4]byte
	UserData unsafe.Pointer
	UserData2 unsafe.Pointer
	UserData3 unsafe.Pointer
}
func (this0 *TreeIter) Copy() *TreeIter {
	var this1 *C.GtkTreeIter
	this1 = (*C.GtkTreeIter)(unsafe.Pointer(this0))
	ret1 := C.gtk_tree_iter_copy(this1)
	var ret2 *TreeIter
	ret2 = (*TreeIter)(unsafe.Pointer(ret1))
	return ret2
}
func (this0 *TreeIter) Free() {
	var this1 *C.GtkTreeIter
	this1 = (*C.GtkTreeIter)(unsafe.Pointer(this0))
	C.gtk_tree_iter_free(this1)
}
type TreeIterCompareFunc func(model *TreeModel, a *TreeIter, b *TreeIter) int
//export _GtkTreeIterCompareFunc_c_wrapper
func _GtkTreeIterCompareFunc_c_wrapper(model0 unsafe.Pointer, a0 unsafe.Pointer, b0 unsafe.Pointer, user_data0 unsafe.Pointer) int32 {
	var model1 *TreeModel
	var a1 *TreeIter
	var b1 *TreeIter
	var user_data1 TreeIterCompareFunc
	model1 = (*TreeModel)(gobject.ObjectWrap(unsafe.Pointer((*C.GtkTreeModel)(model0)), true))
	a1 = (*TreeIter)(unsafe.Pointer((*C.GtkTreeIter)(a0)))
	b1 = (*TreeIter)(unsafe.Pointer((*C.GtkTreeIter)(b0)))
	user_data1 = *(*TreeIterCompareFunc)(user_data0)
	ret1 := user_data1(model1, a1, b1)
	var ret2 C.int32_t
	ret2 = C.int32_t(ret1)
	return (int32)(ret2)
}
//export _GtkTreeIterCompareFunc_c_wrapper_once
func _GtkTreeIterCompareFunc_c_wrapper_once(model0 unsafe.Pointer, a0 unsafe.Pointer, b0 unsafe.Pointer, user_data0 unsafe.Pointer) int32 {
	ret := _GtkTreeIterCompareFunc_c_wrapper(model0, a0, b0, user_data0)
	gobject.Holder.Release(user_data0)
	return ret
}
type TreeModelLike interface {
	ImplementsGtkTreeModel() *C.GtkTreeModel
}

type TreeModel struct {
	gobject.Object
	TreeModelImpl
}

type TreeModelImpl struct {}

func ToTreeModel(objlike gobject.ObjectLike) *TreeModel {
	t := (*TreeModelImpl)(nil).GetStaticType()
	c := objlike.InheritedFromGObject()
	obj := gobject.ObjectGrabIfType(unsafe.Pointer(c), t)
	if obj != nil {
		return (*TreeModel)(obj)
	}
	panic("cannot cast to TreeModel")
}

func (this0 *TreeModelImpl) ImplementsGtkTreeModel() *C.GtkTreeModel {
	obj := uintptr(unsafe.Pointer(this0)) - unsafe.Sizeof(uintptr(0))
	return (*C.GtkTreeModel)((*gobject.Object)(unsafe.Pointer(obj)).C)
}

func (this0 *TreeModelImpl) GetStaticType() gobject.Type {
	return gobject.Type(C.gtk_tree_model_get_type())
}

func TreeModelGetType() gobject.Type {
	return (*TreeModelImpl)(nil).GetStaticType()
}
func (this0 *TreeModelImpl) FilterNew(root0 *TreePath) *TreeModel {
	var this1 *C.GtkTreeModel
	var root1 *C.GtkTreePath
	if this0 != nil {
		this1 = this0.ImplementsGtkTreeModel()}
	root1 = (*C.GtkTreePath)(unsafe.Pointer(root0))
	ret1 := C.gtk_tree_model_filter_new(this1, root1)
	var ret2 *TreeModel
	ret2 = (*TreeModel)(gobject.ObjectWrap(unsafe.Pointer(ret1), false))
	return ret2
}
func (this0 *TreeModelImpl) Foreach(func0 TreeModelForeachFunc) {
	var this1 *C.GtkTreeModel
	var func1 unsafe.Pointer
	if this0 != nil {
		this1 = this0.ImplementsGtkTreeModel()}
	if func0 != nil {
		func1 = unsafe.Pointer(&func0)}
	C._gtk_tree_model_foreach(this1, func1)
}
func (this0 *TreeModelImpl) GetColumnType(index_0 int) gobject.Type {
	var this1 *C.GtkTreeModel
	var index_1 C.int32_t
	if this0 != nil {
		this1 = this0.ImplementsGtkTreeModel()}
	index_1 = C.int32_t(index_0)
	ret1 := C.gtk_tree_model_get_column_type(this1, index_1)
	var ret2 gobject.Type
	ret2 = gobject.Type(ret1)
	return ret2
}
func (this0 *TreeModelImpl) GetFlags() TreeModelFlags {
	var this1 *C.GtkTreeModel
	if this0 != nil {
		this1 = this0.ImplementsGtkTreeModel()}
	ret1 := C.gtk_tree_model_get_flags(this1)
	var ret2 TreeModelFlags
	ret2 = TreeModelFlags(ret1)
	return ret2
}
func (this0 *TreeModelImpl) GetIter(path0 *TreePath) (TreeIter, bool) {
	var this1 *C.GtkTreeModel
	var path1 *C.GtkTreePath
	var iter1 C.GtkTreeIter
	if this0 != nil {
		this1 = this0.ImplementsGtkTreeModel()}
	path1 = (*C.GtkTreePath)(unsafe.Pointer(path0))
	ret1 := C.gtk_tree_model_get_iter(this1, &iter1, path1)
	var iter2 TreeIter
	var ret2 bool
	iter2 = *(*TreeIter)(unsafe.Pointer(&iter1))
	ret2 = ret1 != 0
	return iter2, ret2
}
func (this0 *TreeModelImpl) GetIterFirst() (TreeIter, bool) {
	var this1 *C.GtkTreeModel
	var iter1 C.GtkTreeIter
	if this0 != nil {
		this1 = this0.ImplementsGtkTreeModel()}
	ret1 := C.gtk_tree_model_get_iter_first(this1, &iter1)
	var iter2 TreeIter
	var ret2 bool
	iter2 = *(*TreeIter)(unsafe.Pointer(&iter1))
	ret2 = ret1 != 0
	return iter2, ret2
}
func (this0 *TreeModelImpl) GetIterFromString(path_string0 string) (TreeIter, bool) {
	var this1 *C.GtkTreeModel
	var path_string1 *C.char
	var iter1 C.GtkTreeIter
	if this0 != nil {
		this1 = this0.ImplementsGtkTreeModel()}
	path_string1 = _GoStringToGString(path_string0)
	defer C.free(unsafe.Pointer(path_string1))
	ret1 := C.gtk_tree_model_get_iter_from_string(this1, &iter1, path_string1)
	var iter2 TreeIter
	var ret2 bool
	iter2 = *(*TreeIter)(unsafe.Pointer(&iter1))
	ret2 = ret1 != 0
	return iter2, ret2
}
func (this0 *TreeModelImpl) GetNColumns() int {
	var this1 *C.GtkTreeModel
	if this0 != nil {
		this1 = this0.ImplementsGtkTreeModel()}
	ret1 := C.gtk_tree_model_get_n_columns(this1)
	var ret2 int
	ret2 = int(ret1)
	return ret2
}
func (this0 *TreeModelImpl) GetPath(iter0 *TreeIter) *TreePath {
	var this1 *C.GtkTreeModel
	var iter1 *C.GtkTreeIter
	if this0 != nil {
		this1 = this0.ImplementsGtkTreeModel()}
	iter1 = (*C.GtkTreeIter)(unsafe.Pointer(iter0))
	ret1 := C.gtk_tree_model_get_path(this1, iter1)
	var ret2 *TreePath
	ret2 = (*TreePath)(unsafe.Pointer(ret1))
	return ret2
}
func (this0 *TreeModelImpl) GetStringFromIter(iter0 *TreeIter) string {
	var this1 *C.GtkTreeModel
	var iter1 *C.GtkTreeIter
	if this0 != nil {
		this1 = this0.ImplementsGtkTreeModel()}
	iter1 = (*C.GtkTreeIter)(unsafe.Pointer(iter0))
	ret1 := C.gtk_tree_model_get_string_from_iter(this1, iter1)
	var ret2 string
	ret2 = C.GoString(ret1)
	C.g_free(unsafe.Pointer(ret1))
	return ret2
}
func (this0 *TreeModelImpl) GetValue(iter0 *TreeIter, column0 int) gobject.Value {
	var this1 *C.GtkTreeModel
	var iter1 *C.GtkTreeIter
	var column1 C.int32_t
	var value1 C.GValue
	if this0 != nil {
		this1 = this0.ImplementsGtkTreeModel()}
	iter1 = (*C.GtkTreeIter)(unsafe.Pointer(iter0))
	column1 = C.int32_t(column0)
	C.gtk_tree_model_get_value(this1, iter1, column1, &value1)
	var value2 gobject.Value
	value2 = *(*gobject.Value)(unsafe.Pointer(&value1))
	return value2
}
func (this0 *TreeModelImpl) IterChildren(parent0 *TreeIter) (TreeIter, bool) {
	var this1 *C.GtkTreeModel
	var parent1 *C.GtkTreeIter
	var iter1 C.GtkTreeIter
	if this0 != nil {
		this1 = this0.ImplementsGtkTreeModel()}
	parent1 = (*C.GtkTreeIter)(unsafe.Pointer(parent0))
	ret1 := C.gtk_tree_model_iter_children(this1, &iter1, parent1)
	var iter2 TreeIter
	var ret2 bool
	iter2 = *(*TreeIter)(unsafe.Pointer(&iter1))
	ret2 = ret1 != 0
	return iter2, ret2
}
func (this0 *TreeModelImpl) IterHasChild(iter0 *TreeIter) bool {
	var this1 *C.GtkTreeModel
	var iter1 *C.GtkTreeIter
	if this0 != nil {
		this1 = this0.ImplementsGtkTreeModel()}
	iter1 = (*C.GtkTreeIter)(unsafe.Pointer(iter0))
	ret1 := C.gtk_tree_model_iter_has_child(this1, iter1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *TreeModelImpl) IterNChildren(iter0 *TreeIter) int {
	var this1 *C.GtkTreeModel
	var iter1 *C.GtkTreeIter
	if this0 != nil {
		this1 = this0.ImplementsGtkTreeModel()}
	iter1 = (*C.GtkTreeIter)(unsafe.Pointer(iter0))
	ret1 := C.gtk_tree_model_iter_n_children(this1, iter1)
	var ret2 int
	ret2 = int(ret1)
	return ret2
}
func (this0 *TreeModelImpl) IterNext(iter0 *TreeIter) bool {
	var this1 *C.GtkTreeModel
	var iter1 *C.GtkTreeIter
	if this0 != nil {
		this1 = this0.ImplementsGtkTreeModel()}
	iter1 = (*C.GtkTreeIter)(unsafe.Pointer(iter0))
	ret1 := C.gtk_tree_model_iter_next(this1, iter1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *TreeModelImpl) IterNthChild(parent0 *TreeIter, n0 int) (TreeIter, bool) {
	var this1 *C.GtkTreeModel
	var parent1 *C.GtkTreeIter
	var n1 C.int32_t
	var iter1 C.GtkTreeIter
	if this0 != nil {
		this1 = this0.ImplementsGtkTreeModel()}
	parent1 = (*C.GtkTreeIter)(unsafe.Pointer(parent0))
	n1 = C.int32_t(n0)
	ret1 := C.gtk_tree_model_iter_nth_child(this1, &iter1, parent1, n1)
	var iter2 TreeIter
	var ret2 bool
	iter2 = *(*TreeIter)(unsafe.Pointer(&iter1))
	ret2 = ret1 != 0
	return iter2, ret2
}
func (this0 *TreeModelImpl) IterParent(child0 *TreeIter) (TreeIter, bool) {
	var this1 *C.GtkTreeModel
	var child1 *C.GtkTreeIter
	var iter1 C.GtkTreeIter
	if this0 != nil {
		this1 = this0.ImplementsGtkTreeModel()}
	child1 = (*C.GtkTreeIter)(unsafe.Pointer(child0))
	ret1 := C.gtk_tree_model_iter_parent(this1, &iter1, child1)
	var iter2 TreeIter
	var ret2 bool
	iter2 = *(*TreeIter)(unsafe.Pointer(&iter1))
	ret2 = ret1 != 0
	return iter2, ret2
}
func (this0 *TreeModelImpl) IterPrevious(iter0 *TreeIter) bool {
	var this1 *C.GtkTreeModel
	var iter1 *C.GtkTreeIter
	if this0 != nil {
		this1 = this0.ImplementsGtkTreeModel()}
	iter1 = (*C.GtkTreeIter)(unsafe.Pointer(iter0))
	ret1 := C.gtk_tree_model_iter_previous(this1, iter1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *TreeModelImpl) RefNode(iter0 *TreeIter) {
	var this1 *C.GtkTreeModel
	var iter1 *C.GtkTreeIter
	if this0 != nil {
		this1 = this0.ImplementsGtkTreeModel()}
	iter1 = (*C.GtkTreeIter)(unsafe.Pointer(iter0))
	C.gtk_tree_model_ref_node(this1, iter1)
}
func (this0 *TreeModelImpl) RowChanged(path0 *TreePath, iter0 *TreeIter) {
	var this1 *C.GtkTreeModel
	var path1 *C.GtkTreePath
	var iter1 *C.GtkTreeIter
	if this0 != nil {
		this1 = this0.ImplementsGtkTreeModel()}
	path1 = (*C.GtkTreePath)(unsafe.Pointer(path0))
	iter1 = (*C.GtkTreeIter)(unsafe.Pointer(iter0))
	C.gtk_tree_model_row_changed(this1, path1, iter1)
}
func (this0 *TreeModelImpl) RowDeleted(path0 *TreePath) {
	var this1 *C.GtkTreeModel
	var path1 *C.GtkTreePath
	if this0 != nil {
		this1 = this0.ImplementsGtkTreeModel()}
	path1 = (*C.GtkTreePath)(unsafe.Pointer(path0))
	C.gtk_tree_model_row_deleted(this1, path1)
}
func (this0 *TreeModelImpl) RowHasChildToggled(path0 *TreePath, iter0 *TreeIter) {
	var this1 *C.GtkTreeModel
	var path1 *C.GtkTreePath
	var iter1 *C.GtkTreeIter
	if this0 != nil {
		this1 = this0.ImplementsGtkTreeModel()}
	path1 = (*C.GtkTreePath)(unsafe.Pointer(path0))
	iter1 = (*C.GtkTreeIter)(unsafe.Pointer(iter0))
	C.gtk_tree_model_row_has_child_toggled(this1, path1, iter1)
}
func (this0 *TreeModelImpl) RowInserted(path0 *TreePath, iter0 *TreeIter) {
	var this1 *C.GtkTreeModel
	var path1 *C.GtkTreePath
	var iter1 *C.GtkTreeIter
	if this0 != nil {
		this1 = this0.ImplementsGtkTreeModel()}
	path1 = (*C.GtkTreePath)(unsafe.Pointer(path0))
	iter1 = (*C.GtkTreeIter)(unsafe.Pointer(iter0))
	C.gtk_tree_model_row_inserted(this1, path1, iter1)
}
func (this0 *TreeModelImpl) SortNewWithModel() *TreeModel {
	var this1 *C.GtkTreeModel
	if this0 != nil {
		this1 = this0.ImplementsGtkTreeModel()}
	ret1 := C.gtk_tree_model_sort_new_with_model(this1)
	var ret2 *TreeModel
	ret2 = (*TreeModel)(gobject.ObjectWrap(unsafe.Pointer(ret1), false))
	return ret2
}
func (this0 *TreeModelImpl) UnrefNode(iter0 *TreeIter) {
	var this1 *C.GtkTreeModel
	var iter1 *C.GtkTreeIter
	if this0 != nil {
		this1 = this0.ImplementsGtkTreeModel()}
	iter1 = (*C.GtkTreeIter)(unsafe.Pointer(iter0))
	C.gtk_tree_model_unref_node(this1, iter1)
}
type TreeModelFilterLike interface {
	gobject.ObjectLike
	InheritedFromGtkTreeModelFilter() *C.GtkTreeModelFilter
}

type TreeModelFilter struct {
	gobject.Object
	TreeDragSourceImpl
	TreeModelImpl
}

func ToTreeModelFilter(objlike gobject.ObjectLike) *TreeModelFilter {
	c := objlike.InheritedFromGObject()
	if c == nil {
		return nil
	}
	t := (*TreeModelFilter)(nil).GetStaticType()
	obj := gobject.ObjectGrabIfType(unsafe.Pointer(c), t)
	if obj != nil {
		return (*TreeModelFilter)(obj)
	}
	panic("cannot cast to TreeModelFilter")
}

func (this0 *TreeModelFilter) InheritedFromGtkTreeModelFilter() *C.GtkTreeModelFilter {
	if this0 == nil {
		return nil
	}
	return (*C.GtkTreeModelFilter)(this0.C)
}

func (this0 *TreeModelFilter) GetStaticType() gobject.Type {
	return gobject.Type(C.gtk_tree_model_filter_get_type())
}

func TreeModelFilterGetType() gobject.Type {
	return (*TreeModelFilter)(nil).GetStaticType()
}
func (this0 *TreeModelFilter) ClearCache() {
	var this1 *C.GtkTreeModelFilter
	if this0 != nil {
		this1 = this0.InheritedFromGtkTreeModelFilter()
	}
	C.gtk_tree_model_filter_clear_cache(this1)
}
func (this0 *TreeModelFilter) ConvertChildIterToIter(child_iter0 *TreeIter) (TreeIter, bool) {
	var this1 *C.GtkTreeModelFilter
	var child_iter1 *C.GtkTreeIter
	var filter_iter1 C.GtkTreeIter
	if this0 != nil {
		this1 = this0.InheritedFromGtkTreeModelFilter()
	}
	child_iter1 = (*C.GtkTreeIter)(unsafe.Pointer(child_iter0))
	ret1 := C.gtk_tree_model_filter_convert_child_iter_to_iter(this1, &filter_iter1, child_iter1)
	var filter_iter2 TreeIter
	var ret2 bool
	filter_iter2 = *(*TreeIter)(unsafe.Pointer(&filter_iter1))
	ret2 = ret1 != 0
	return filter_iter2, ret2
}
func (this0 *TreeModelFilter) ConvertChildPathToPath(child_path0 *TreePath) *TreePath {
	var this1 *C.GtkTreeModelFilter
	var child_path1 *C.GtkTreePath
	if this0 != nil {
		this1 = this0.InheritedFromGtkTreeModelFilter()
	}
	child_path1 = (*C.GtkTreePath)(unsafe.Pointer(child_path0))
	ret1 := C.gtk_tree_model_filter_convert_child_path_to_path(this1, child_path1)
	var ret2 *TreePath
	ret2 = (*TreePath)(unsafe.Pointer(ret1))
	return ret2
}
func (this0 *TreeModelFilter) ConvertIterToChildIter(filter_iter0 *TreeIter) TreeIter {
	var this1 *C.GtkTreeModelFilter
	var filter_iter1 *C.GtkTreeIter
	var child_iter1 C.GtkTreeIter
	if this0 != nil {
		this1 = this0.InheritedFromGtkTreeModelFilter()
	}
	filter_iter1 = (*C.GtkTreeIter)(unsafe.Pointer(filter_iter0))
	C.gtk_tree_model_filter_convert_iter_to_child_iter(this1, &child_iter1, filter_iter1)
	var child_iter2 TreeIter
	child_iter2 = *(*TreeIter)(unsafe.Pointer(&child_iter1))
	return child_iter2
}
func (this0 *TreeModelFilter) ConvertPathToChildPath(filter_path0 *TreePath) *TreePath {
	var this1 *C.GtkTreeModelFilter
	var filter_path1 *C.GtkTreePath
	if this0 != nil {
		this1 = this0.InheritedFromGtkTreeModelFilter()
	}
	filter_path1 = (*C.GtkTreePath)(unsafe.Pointer(filter_path0))
	ret1 := C.gtk_tree_model_filter_convert_path_to_child_path(this1, filter_path1)
	var ret2 *TreePath
	ret2 = (*TreePath)(unsafe.Pointer(ret1))
	return ret2
}
func (this0 *TreeModelFilter) GetModel() *TreeModel {
	var this1 *C.GtkTreeModelFilter
	if this0 != nil {
		this1 = this0.InheritedFromGtkTreeModelFilter()
	}
	ret1 := C.gtk_tree_model_filter_get_model(this1)
	var ret2 *TreeModel
	ret2 = (*TreeModel)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
func (this0 *TreeModelFilter) Refilter() {
	var this1 *C.GtkTreeModelFilter
	if this0 != nil {
		this1 = this0.InheritedFromGtkTreeModelFilter()
	}
	C.gtk_tree_model_filter_refilter(this1)
}
func (this0 *TreeModelFilter) SetModifyFunc(types0 []gobject.Type, func0 TreeModelFilterModifyFunc) {
	var this1 *C.GtkTreeModelFilter
	var types1 *C.GType
	var n_columns1 C.int32_t
	var func1 unsafe.Pointer
	if this0 != nil {
		this1 = this0.InheritedFromGtkTreeModelFilter()
	}
	types1 = (*C.GType)(C.malloc(C.size_t(int(unsafe.Sizeof(*types1)) * len(types0))))
	defer C.free(unsafe.Pointer(types1))
	for i, e := range types0 {
		(*(*[999999]C.GType)(unsafe.Pointer(types1)))[i] = C.GType(e)
	}
	n_columns1 = C.int32_t(len(types0))
	if func0 != nil {
		func1 = unsafe.Pointer(&func0)}
	gobject.Holder.Grab(func1)
	C._gtk_tree_model_filter_set_modify_func(this1, n_columns1, types1, func1)
}
func (this0 *TreeModelFilter) SetVisibleColumn(column0 int) {
	var this1 *C.GtkTreeModelFilter
	var column1 C.int32_t
	if this0 != nil {
		this1 = this0.InheritedFromGtkTreeModelFilter()
	}
	column1 = C.int32_t(column0)
	C.gtk_tree_model_filter_set_visible_column(this1, column1)
}
func (this0 *TreeModelFilter) SetVisibleFunc(func0 TreeModelFilterVisibleFunc) {
	var this1 *C.GtkTreeModelFilter
	var func1 unsafe.Pointer
	if this0 != nil {
		this1 = this0.InheritedFromGtkTreeModelFilter()
	}
	if func0 != nil {
		func1 = unsafe.Pointer(&func0)}
	gobject.Holder.Grab(func1)
	C._gtk_tree_model_filter_set_visible_func(this1, func1)
}
type TreeModelFilterModifyFunc func(model *TreeModel, iter *TreeIter, value *gobject.Value, column int)
//export _GtkTreeModelFilterModifyFunc_c_wrapper
func _GtkTreeModelFilterModifyFunc_c_wrapper(model0 unsafe.Pointer, iter0 unsafe.Pointer, value0 unsafe.Pointer, column0 int32, data0 unsafe.Pointer) {
	var model1 *TreeModel
	var iter1 *TreeIter
	var value1 *gobject.Value
	var column1 int
	var data1 TreeModelFilterModifyFunc
	model1 = (*TreeModel)(gobject.ObjectWrap(unsafe.Pointer((*C.GtkTreeModel)(model0)), true))
	iter1 = (*TreeIter)(unsafe.Pointer((*C.GtkTreeIter)(iter0)))
	value1 = (*gobject.Value)(unsafe.Pointer((*C.GValue)(value0)))
	column1 = int((C.int32_t)(column0))
	data1 = *(*TreeModelFilterModifyFunc)(data0)
	data1(model1, iter1, value1, column1)
}
//export _GtkTreeModelFilterModifyFunc_c_wrapper_once
func _GtkTreeModelFilterModifyFunc_c_wrapper_once(model0 unsafe.Pointer, iter0 unsafe.Pointer, value0 unsafe.Pointer, column0 int32, data0 unsafe.Pointer) {
	_GtkTreeModelFilterModifyFunc_c_wrapper(model0, iter0, value0, column0, data0)
	gobject.Holder.Release(data0)
}
type TreeModelFilterVisibleFunc func(model *TreeModel, iter *TreeIter) bool
//export _GtkTreeModelFilterVisibleFunc_c_wrapper
func _GtkTreeModelFilterVisibleFunc_c_wrapper(model0 unsafe.Pointer, iter0 unsafe.Pointer, data0 unsafe.Pointer) int32 {
	var model1 *TreeModel
	var iter1 *TreeIter
	var data1 TreeModelFilterVisibleFunc
	model1 = (*TreeModel)(gobject.ObjectWrap(unsafe.Pointer((*C.GtkTreeModel)(model0)), true))
	iter1 = (*TreeIter)(unsafe.Pointer((*C.GtkTreeIter)(iter0)))
	data1 = *(*TreeModelFilterVisibleFunc)(data0)
	ret1 := data1(model1, iter1)
	var ret2 C.int
	ret2 = _GoBoolToCBool(ret1)
	return (int32)(ret2)
}
//export _GtkTreeModelFilterVisibleFunc_c_wrapper_once
func _GtkTreeModelFilterVisibleFunc_c_wrapper_once(model0 unsafe.Pointer, iter0 unsafe.Pointer, data0 unsafe.Pointer) int32 {
	ret := _GtkTreeModelFilterVisibleFunc_c_wrapper(model0, iter0, data0)
	gobject.Holder.Release(data0)
	return ret
}
type TreeModelFlags C.uint32_t
const (
	TreeModelFlagsItersPersist TreeModelFlags = 1
	TreeModelFlagsListOnly TreeModelFlags = 2
)
type TreeModelForeachFunc func(model *TreeModel, path *TreePath, iter *TreeIter) bool
//export _GtkTreeModelForeachFunc_c_wrapper
func _GtkTreeModelForeachFunc_c_wrapper(model0 unsafe.Pointer, path0 unsafe.Pointer, iter0 unsafe.Pointer, data0 unsafe.Pointer) int32 {
	var model1 *TreeModel
	var path1 *TreePath
	var iter1 *TreeIter
	var data1 TreeModelForeachFunc
	model1 = (*TreeModel)(gobject.ObjectWrap(unsafe.Pointer((*C.GtkTreeModel)(model0)), true))
	path1 = (*TreePath)(unsafe.Pointer((*C.GtkTreePath)(path0)))
	iter1 = (*TreeIter)(unsafe.Pointer((*C.GtkTreeIter)(iter0)))
	data1 = *(*TreeModelForeachFunc)(data0)
	ret1 := data1(model1, path1, iter1)
	var ret2 C.int
	ret2 = _GoBoolToCBool(ret1)
	return (int32)(ret2)
}
//export _GtkTreeModelForeachFunc_c_wrapper_once
func _GtkTreeModelForeachFunc_c_wrapper_once(model0 unsafe.Pointer, path0 unsafe.Pointer, iter0 unsafe.Pointer, data0 unsafe.Pointer) int32 {
	ret := _GtkTreeModelForeachFunc_c_wrapper(model0, path0, iter0, data0)
	gobject.Holder.Release(data0)
	return ret
}
type TreeModelSortLike interface {
	gobject.ObjectLike
	InheritedFromGtkTreeModelSort() *C.GtkTreeModelSort
}

type TreeModelSort struct {
	gobject.Object
	TreeDragSourceImpl
	TreeModelImpl
	TreeSortableImpl
}

func ToTreeModelSort(objlike gobject.ObjectLike) *TreeModelSort {
	c := objlike.InheritedFromGObject()
	if c == nil {
		return nil
	}
	t := (*TreeModelSort)(nil).GetStaticType()
	obj := gobject.ObjectGrabIfType(unsafe.Pointer(c), t)
	if obj != nil {
		return (*TreeModelSort)(obj)
	}
	panic("cannot cast to TreeModelSort")
}

func (this0 *TreeModelSort) InheritedFromGtkTreeModelSort() *C.GtkTreeModelSort {
	if this0 == nil {
		return nil
	}
	return (*C.GtkTreeModelSort)(this0.C)
}

func (this0 *TreeModelSort) GetStaticType() gobject.Type {
	return gobject.Type(C.gtk_tree_model_sort_get_type())
}

func TreeModelSortGetType() gobject.Type {
	return (*TreeModelSort)(nil).GetStaticType()
}
func (this0 *TreeModelSort) ClearCache() {
	var this1 *C.GtkTreeModelSort
	if this0 != nil {
		this1 = this0.InheritedFromGtkTreeModelSort()
	}
	C.gtk_tree_model_sort_clear_cache(this1)
}
func (this0 *TreeModelSort) ConvertChildIterToIter(child_iter0 *TreeIter) (TreeIter, bool) {
	var this1 *C.GtkTreeModelSort
	var child_iter1 *C.GtkTreeIter
	var sort_iter1 C.GtkTreeIter
	if this0 != nil {
		this1 = this0.InheritedFromGtkTreeModelSort()
	}
	child_iter1 = (*C.GtkTreeIter)(unsafe.Pointer(child_iter0))
	ret1 := C.gtk_tree_model_sort_convert_child_iter_to_iter(this1, &sort_iter1, child_iter1)
	var sort_iter2 TreeIter
	var ret2 bool
	sort_iter2 = *(*TreeIter)(unsafe.Pointer(&sort_iter1))
	ret2 = ret1 != 0
	return sort_iter2, ret2
}
func (this0 *TreeModelSort) ConvertChildPathToPath(child_path0 *TreePath) *TreePath {
	var this1 *C.GtkTreeModelSort
	var child_path1 *C.GtkTreePath
	if this0 != nil {
		this1 = this0.InheritedFromGtkTreeModelSort()
	}
	child_path1 = (*C.GtkTreePath)(unsafe.Pointer(child_path0))
	ret1 := C.gtk_tree_model_sort_convert_child_path_to_path(this1, child_path1)
	var ret2 *TreePath
	ret2 = (*TreePath)(unsafe.Pointer(ret1))
	return ret2
}
func (this0 *TreeModelSort) ConvertIterToChildIter(sorted_iter0 *TreeIter) TreeIter {
	var this1 *C.GtkTreeModelSort
	var sorted_iter1 *C.GtkTreeIter
	var child_iter1 C.GtkTreeIter
	if this0 != nil {
		this1 = this0.InheritedFromGtkTreeModelSort()
	}
	sorted_iter1 = (*C.GtkTreeIter)(unsafe.Pointer(sorted_iter0))
	C.gtk_tree_model_sort_convert_iter_to_child_iter(this1, &child_iter1, sorted_iter1)
	var child_iter2 TreeIter
	child_iter2 = *(*TreeIter)(unsafe.Pointer(&child_iter1))
	return child_iter2
}
func (this0 *TreeModelSort) ConvertPathToChildPath(sorted_path0 *TreePath) *TreePath {
	var this1 *C.GtkTreeModelSort
	var sorted_path1 *C.GtkTreePath
	if this0 != nil {
		this1 = this0.InheritedFromGtkTreeModelSort()
	}
	sorted_path1 = (*C.GtkTreePath)(unsafe.Pointer(sorted_path0))
	ret1 := C.gtk_tree_model_sort_convert_path_to_child_path(this1, sorted_path1)
	var ret2 *TreePath
	ret2 = (*TreePath)(unsafe.Pointer(ret1))
	return ret2
}
func (this0 *TreeModelSort) GetModel() *TreeModel {
	var this1 *C.GtkTreeModelSort
	if this0 != nil {
		this1 = this0.InheritedFromGtkTreeModelSort()
	}
	ret1 := C.gtk_tree_model_sort_get_model(this1)
	var ret2 *TreeModel
	ret2 = (*TreeModel)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
func (this0 *TreeModelSort) IterIsValid(iter0 *TreeIter) bool {
	var this1 *C.GtkTreeModelSort
	var iter1 *C.GtkTreeIter
	if this0 != nil {
		this1 = this0.InheritedFromGtkTreeModelSort()
	}
	iter1 = (*C.GtkTreeIter)(unsafe.Pointer(iter0))
	ret1 := C.gtk_tree_model_sort_iter_is_valid(this1, iter1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *TreeModelSort) ResetDefaultSortFunc() {
	var this1 *C.GtkTreeModelSort
	if this0 != nil {
		this1 = this0.InheritedFromGtkTreeModelSort()
	}
	C.gtk_tree_model_sort_reset_default_sort_func(this1)
}
type TreePath struct {}
func NewTreePath() *TreePath {
	ret1 := C.gtk_tree_path_new()
	var ret2 *TreePath
	ret2 = (*TreePath)(unsafe.Pointer(ret1))
	return ret2
}
func NewTreePathFirst() *TreePath {
	ret1 := C.gtk_tree_path_new_first()
	var ret2 *TreePath
	ret2 = (*TreePath)(unsafe.Pointer(ret1))
	return ret2
}
func NewTreePathFromString(path0 string) *TreePath {
	var path1 *C.char
	path1 = _GoStringToGString(path0)
	defer C.free(unsafe.Pointer(path1))
	ret1 := C.gtk_tree_path_new_from_string(path1)
	var ret2 *TreePath
	ret2 = (*TreePath)(unsafe.Pointer(ret1))
	return ret2
}
func (this0 *TreePath) AppendIndex(index_0 int) {
	var this1 *C.GtkTreePath
	var index_1 C.int32_t
	this1 = (*C.GtkTreePath)(unsafe.Pointer(this0))
	index_1 = C.int32_t(index_0)
	C.gtk_tree_path_append_index(this1, index_1)
}
func (this0 *TreePath) Compare(b0 *TreePath) int {
	var this1 *C.GtkTreePath
	var b1 *C.GtkTreePath
	this1 = (*C.GtkTreePath)(unsafe.Pointer(this0))
	b1 = (*C.GtkTreePath)(unsafe.Pointer(b0))
	ret1 := C.gtk_tree_path_compare(this1, b1)
	var ret2 int
	ret2 = int(ret1)
	return ret2
}
func (this0 *TreePath) Copy() *TreePath {
	var this1 *C.GtkTreePath
	this1 = (*C.GtkTreePath)(unsafe.Pointer(this0))
	ret1 := C.gtk_tree_path_copy(this1)
	var ret2 *TreePath
	ret2 = (*TreePath)(unsafe.Pointer(ret1))
	return ret2
}
func (this0 *TreePath) Down() {
	var this1 *C.GtkTreePath
	this1 = (*C.GtkTreePath)(unsafe.Pointer(this0))
	C.gtk_tree_path_down(this1)
}
func (this0 *TreePath) Free() {
	var this1 *C.GtkTreePath
	this1 = (*C.GtkTreePath)(unsafe.Pointer(this0))
	C.gtk_tree_path_free(this1)
}
func (this0 *TreePath) GetDepth() int {
	var this1 *C.GtkTreePath
	this1 = (*C.GtkTreePath)(unsafe.Pointer(this0))
	ret1 := C.gtk_tree_path_get_depth(this1)
	var ret2 int
	ret2 = int(ret1)
	return ret2
}
func (this0 *TreePath) GetIndices() (int, []int) {
	var this1 *C.GtkTreePath
	var depth1 C.int32_t
	this1 = (*C.GtkTreePath)(unsafe.Pointer(this0))
	ret1 := C.gtk_tree_path_get_indices_with_depth(this1, &depth1)
	var depth2 int
	var ret2 []int
	depth2 = int(depth1)
	ret2 = make([]int, depth1)
	for i := range ret2 {
		ret2[i] = int((*(*[999999]C.int32_t)(unsafe.Pointer(ret1)))[i])
	}
	return depth2, ret2
}
func (this0 *TreePath) IsAncestor(descendant0 *TreePath) bool {
	var this1 *C.GtkTreePath
	var descendant1 *C.GtkTreePath
	this1 = (*C.GtkTreePath)(unsafe.Pointer(this0))
	descendant1 = (*C.GtkTreePath)(unsafe.Pointer(descendant0))
	ret1 := C.gtk_tree_path_is_ancestor(this1, descendant1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *TreePath) IsDescendant(ancestor0 *TreePath) bool {
	var this1 *C.GtkTreePath
	var ancestor1 *C.GtkTreePath
	this1 = (*C.GtkTreePath)(unsafe.Pointer(this0))
	ancestor1 = (*C.GtkTreePath)(unsafe.Pointer(ancestor0))
	ret1 := C.gtk_tree_path_is_descendant(this1, ancestor1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *TreePath) Next() {
	var this1 *C.GtkTreePath
	this1 = (*C.GtkTreePath)(unsafe.Pointer(this0))
	C.gtk_tree_path_next(this1)
}
func (this0 *TreePath) PrependIndex(index_0 int) {
	var this1 *C.GtkTreePath
	var index_1 C.int32_t
	this1 = (*C.GtkTreePath)(unsafe.Pointer(this0))
	index_1 = C.int32_t(index_0)
	C.gtk_tree_path_prepend_index(this1, index_1)
}
func (this0 *TreePath) Prev() bool {
	var this1 *C.GtkTreePath
	this1 = (*C.GtkTreePath)(unsafe.Pointer(this0))
	ret1 := C.gtk_tree_path_prev(this1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *TreePath) ToString() string {
	var this1 *C.GtkTreePath
	this1 = (*C.GtkTreePath)(unsafe.Pointer(this0))
	ret1 := C.gtk_tree_path_to_string(this1)
	var ret2 string
	ret2 = C.GoString(ret1)
	C.g_free(unsafe.Pointer(ret1))
	return ret2
}
func (this0 *TreePath) Up() bool {
	var this1 *C.GtkTreePath
	this1 = (*C.GtkTreePath)(unsafe.Pointer(this0))
	ret1 := C.gtk_tree_path_up(this1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
type TreeRowReference struct {}
func NewTreeRowReference(model0 TreeModelLike, path0 *TreePath) *TreeRowReference {
	var model1 *C.GtkTreeModel
	var path1 *C.GtkTreePath
	if model0 != nil {
		model1 = model0.ImplementsGtkTreeModel()}
	path1 = (*C.GtkTreePath)(unsafe.Pointer(path0))
	ret1 := C.gtk_tree_row_reference_new(model1, path1)
	var ret2 *TreeRowReference
	ret2 = (*TreeRowReference)(unsafe.Pointer(ret1))
	return ret2
}
func NewTreeRowReferenceProxy(proxy0 gobject.ObjectLike, model0 TreeModelLike, path0 *TreePath) *TreeRowReference {
	var proxy1 *C.GObject
	var model1 *C.GtkTreeModel
	var path1 *C.GtkTreePath
	if proxy0 != nil {
		proxy1 = proxy0.InheritedFromGObject()
	}
	if model0 != nil {
		model1 = model0.ImplementsGtkTreeModel()}
	path1 = (*C.GtkTreePath)(unsafe.Pointer(path0))
	ret1 := C.gtk_tree_row_reference_new_proxy(proxy1, model1, path1)
	var ret2 *TreeRowReference
	ret2 = (*TreeRowReference)(unsafe.Pointer(ret1))
	return ret2
}
func (this0 *TreeRowReference) Copy() *TreeRowReference {
	var this1 *C.GtkTreeRowReference
	this1 = (*C.GtkTreeRowReference)(unsafe.Pointer(this0))
	ret1 := C.gtk_tree_row_reference_copy(this1)
	var ret2 *TreeRowReference
	ret2 = (*TreeRowReference)(unsafe.Pointer(ret1))
	return ret2
}
func (this0 *TreeRowReference) Free() {
	var this1 *C.GtkTreeRowReference
	this1 = (*C.GtkTreeRowReference)(unsafe.Pointer(this0))
	C.gtk_tree_row_reference_free(this1)
}
func (this0 *TreeRowReference) GetModel() *TreeModel {
	var this1 *C.GtkTreeRowReference
	this1 = (*C.GtkTreeRowReference)(unsafe.Pointer(this0))
	ret1 := C.gtk_tree_row_reference_get_model(this1)
	var ret2 *TreeModel
	ret2 = (*TreeModel)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
func (this0 *TreeRowReference) GetPath() *TreePath {
	var this1 *C.GtkTreeRowReference
	this1 = (*C.GtkTreeRowReference)(unsafe.Pointer(this0))
	ret1 := C.gtk_tree_row_reference_get_path(this1)
	var ret2 *TreePath
	ret2 = (*TreePath)(unsafe.Pointer(ret1))
	return ret2
}
func (this0 *TreeRowReference) Valid() bool {
	var this1 *C.GtkTreeRowReference
	this1 = (*C.GtkTreeRowReference)(unsafe.Pointer(this0))
	ret1 := C.gtk_tree_row_reference_valid(this1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func TreeRowReferenceDeleted(proxy0 gobject.ObjectLike, path0 *TreePath) {
	var proxy1 *C.GObject
	var path1 *C.GtkTreePath
	if proxy0 != nil {
		proxy1 = proxy0.InheritedFromGObject()
	}
	path1 = (*C.GtkTreePath)(unsafe.Pointer(path0))
	C.gtk_tree_row_reference_deleted(proxy1, path1)
}
func TreeRowReferenceInserted(proxy0 gobject.ObjectLike, path0 *TreePath) {
	var proxy1 *C.GObject
	var path1 *C.GtkTreePath
	if proxy0 != nil {
		proxy1 = proxy0.InheritedFromGObject()
	}
	path1 = (*C.GtkTreePath)(unsafe.Pointer(path0))
	C.gtk_tree_row_reference_inserted(proxy1, path1)
}
type TreeSelectionLike interface {
	gobject.ObjectLike
	InheritedFromGtkTreeSelection() *C.GtkTreeSelection
}

type TreeSelection struct {
	gobject.Object
	
}

func ToTreeSelection(objlike gobject.ObjectLike) *TreeSelection {
	c := objlike.InheritedFromGObject()
	if c == nil {
		return nil
	}
	t := (*TreeSelection)(nil).GetStaticType()
	obj := gobject.ObjectGrabIfType(unsafe.Pointer(c), t)
	if obj != nil {
		return (*TreeSelection)(obj)
	}
	panic("cannot cast to TreeSelection")
}

func (this0 *TreeSelection) InheritedFromGtkTreeSelection() *C.GtkTreeSelection {
	if this0 == nil {
		return nil
	}
	return (*C.GtkTreeSelection)(this0.C)
}

func (this0 *TreeSelection) GetStaticType() gobject.Type {
	return gobject.Type(C.gtk_tree_selection_get_type())
}

func TreeSelectionGetType() gobject.Type {
	return (*TreeSelection)(nil).GetStaticType()
}
func (this0 *TreeSelection) CountSelectedRows() int {
	var this1 *C.GtkTreeSelection
	if this0 != nil {
		this1 = this0.InheritedFromGtkTreeSelection()
	}
	ret1 := C.gtk_tree_selection_count_selected_rows(this1)
	var ret2 int
	ret2 = int(ret1)
	return ret2
}
func (this0 *TreeSelection) GetMode() SelectionMode {
	var this1 *C.GtkTreeSelection
	if this0 != nil {
		this1 = this0.InheritedFromGtkTreeSelection()
	}
	ret1 := C.gtk_tree_selection_get_mode(this1)
	var ret2 SelectionMode
	ret2 = SelectionMode(ret1)
	return ret2
}
func (this0 *TreeSelection) GetSelected() (*TreeModel, TreeIter, bool) {
	var this1 *C.GtkTreeSelection
	var model1 *C.GtkTreeModel
	var iter1 C.GtkTreeIter
	if this0 != nil {
		this1 = this0.InheritedFromGtkTreeSelection()
	}
	ret1 := C.gtk_tree_selection_get_selected(this1, &model1, &iter1)
	var model2 *TreeModel
	var iter2 TreeIter
	var ret2 bool
	model2 = (*TreeModel)(gobject.ObjectWrap(unsafe.Pointer(model1), true))
	iter2 = *(*TreeIter)(unsafe.Pointer(&iter1))
	ret2 = ret1 != 0
	return model2, iter2, ret2
}
func (this0 *TreeSelection) GetSelectedRows() (*TreeModel, []TreePath) {
	var this1 *C.GtkTreeSelection
	var model1 *C.GtkTreeModel
	if this0 != nil {
		this1 = this0.InheritedFromGtkTreeSelection()
	}
	ret1 := C.gtk_tree_selection_get_selected_rows(this1, &model1)
	var model2 *TreeModel
	var ret2 []TreePath
	model2 = (*TreeModel)(gobject.ObjectWrap(unsafe.Pointer(model1), true))
	for iter := (*_GList)(unsafe.Pointer(ret1)); iter != nil; iter = iter.next {
		var elt TreePath
		elt = *(*TreePath)(unsafe.Pointer((*C.GtkTreePath)(iter.data)))
		ret2 = append(ret2, elt)
	}
	return model2, ret2
}
func (this0 *TreeSelection) GetTreeView() *TreeView {
	var this1 *C.GtkTreeSelection
	if this0 != nil {
		this1 = this0.InheritedFromGtkTreeSelection()
	}
	ret1 := C.gtk_tree_selection_get_tree_view(this1)
	var ret2 *TreeView
	ret2 = (*TreeView)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
func (this0 *TreeSelection) IterIsSelected(iter0 *TreeIter) bool {
	var this1 *C.GtkTreeSelection
	var iter1 *C.GtkTreeIter
	if this0 != nil {
		this1 = this0.InheritedFromGtkTreeSelection()
	}
	iter1 = (*C.GtkTreeIter)(unsafe.Pointer(iter0))
	ret1 := C.gtk_tree_selection_iter_is_selected(this1, iter1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *TreeSelection) PathIsSelected(path0 *TreePath) bool {
	var this1 *C.GtkTreeSelection
	var path1 *C.GtkTreePath
	if this0 != nil {
		this1 = this0.InheritedFromGtkTreeSelection()
	}
	path1 = (*C.GtkTreePath)(unsafe.Pointer(path0))
	ret1 := C.gtk_tree_selection_path_is_selected(this1, path1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *TreeSelection) SelectAll() {
	var this1 *C.GtkTreeSelection
	if this0 != nil {
		this1 = this0.InheritedFromGtkTreeSelection()
	}
	C.gtk_tree_selection_select_all(this1)
}
func (this0 *TreeSelection) SelectIter(iter0 *TreeIter) {
	var this1 *C.GtkTreeSelection
	var iter1 *C.GtkTreeIter
	if this0 != nil {
		this1 = this0.InheritedFromGtkTreeSelection()
	}
	iter1 = (*C.GtkTreeIter)(unsafe.Pointer(iter0))
	C.gtk_tree_selection_select_iter(this1, iter1)
}
func (this0 *TreeSelection) SelectPath(path0 *TreePath) {
	var this1 *C.GtkTreeSelection
	var path1 *C.GtkTreePath
	if this0 != nil {
		this1 = this0.InheritedFromGtkTreeSelection()
	}
	path1 = (*C.GtkTreePath)(unsafe.Pointer(path0))
	C.gtk_tree_selection_select_path(this1, path1)
}
func (this0 *TreeSelection) SelectRange(start_path0 *TreePath, end_path0 *TreePath) {
	var this1 *C.GtkTreeSelection
	var start_path1 *C.GtkTreePath
	var end_path1 *C.GtkTreePath
	if this0 != nil {
		this1 = this0.InheritedFromGtkTreeSelection()
	}
	start_path1 = (*C.GtkTreePath)(unsafe.Pointer(start_path0))
	end_path1 = (*C.GtkTreePath)(unsafe.Pointer(end_path0))
	C.gtk_tree_selection_select_range(this1, start_path1, end_path1)
}
func (this0 *TreeSelection) SelectedForeach(func0 TreeSelectionForeachFunc) {
	var this1 *C.GtkTreeSelection
	var func1 unsafe.Pointer
	if this0 != nil {
		this1 = this0.InheritedFromGtkTreeSelection()
	}
	if func0 != nil {
		func1 = unsafe.Pointer(&func0)}
	C._gtk_tree_selection_selected_foreach(this1, func1)
}
func (this0 *TreeSelection) SetMode(type0 SelectionMode) {
	var this1 *C.GtkTreeSelection
	var type1 C.GtkSelectionMode
	if this0 != nil {
		this1 = this0.InheritedFromGtkTreeSelection()
	}
	type1 = C.GtkSelectionMode(type0)
	C.gtk_tree_selection_set_mode(this1, type1)
}
func (this0 *TreeSelection) SetSelectFunction(func0 TreeSelectionFunc) {
	var this1 *C.GtkTreeSelection
	var func1 unsafe.Pointer
	if this0 != nil {
		this1 = this0.InheritedFromGtkTreeSelection()
	}
	if func0 != nil {
		func1 = unsafe.Pointer(&func0)}
	gobject.Holder.Grab(func1)
	C._gtk_tree_selection_set_select_function(this1, func1)
}
func (this0 *TreeSelection) UnselectAll() {
	var this1 *C.GtkTreeSelection
	if this0 != nil {
		this1 = this0.InheritedFromGtkTreeSelection()
	}
	C.gtk_tree_selection_unselect_all(this1)
}
func (this0 *TreeSelection) UnselectIter(iter0 *TreeIter) {
	var this1 *C.GtkTreeSelection
	var iter1 *C.GtkTreeIter
	if this0 != nil {
		this1 = this0.InheritedFromGtkTreeSelection()
	}
	iter1 = (*C.GtkTreeIter)(unsafe.Pointer(iter0))
	C.gtk_tree_selection_unselect_iter(this1, iter1)
}
func (this0 *TreeSelection) UnselectPath(path0 *TreePath) {
	var this1 *C.GtkTreeSelection
	var path1 *C.GtkTreePath
	if this0 != nil {
		this1 = this0.InheritedFromGtkTreeSelection()
	}
	path1 = (*C.GtkTreePath)(unsafe.Pointer(path0))
	C.gtk_tree_selection_unselect_path(this1, path1)
}
func (this0 *TreeSelection) UnselectRange(start_path0 *TreePath, end_path0 *TreePath) {
	var this1 *C.GtkTreeSelection
	var start_path1 *C.GtkTreePath
	var end_path1 *C.GtkTreePath
	if this0 != nil {
		this1 = this0.InheritedFromGtkTreeSelection()
	}
	start_path1 = (*C.GtkTreePath)(unsafe.Pointer(start_path0))
	end_path1 = (*C.GtkTreePath)(unsafe.Pointer(end_path0))
	C.gtk_tree_selection_unselect_range(this1, start_path1, end_path1)
}
type TreeSelectionForeachFunc func(model *TreeModel, path *TreePath, iter *TreeIter)
//export _GtkTreeSelectionForeachFunc_c_wrapper
func _GtkTreeSelectionForeachFunc_c_wrapper(model0 unsafe.Pointer, path0 unsafe.Pointer, iter0 unsafe.Pointer, data0 unsafe.Pointer) {
	var model1 *TreeModel
	var path1 *TreePath
	var iter1 *TreeIter
	var data1 TreeSelectionForeachFunc
	model1 = (*TreeModel)(gobject.ObjectWrap(unsafe.Pointer((*C.GtkTreeModel)(model0)), true))
	path1 = (*TreePath)(unsafe.Pointer((*C.GtkTreePath)(path0)))
	iter1 = (*TreeIter)(unsafe.Pointer((*C.GtkTreeIter)(iter0)))
	data1 = *(*TreeSelectionForeachFunc)(data0)
	data1(model1, path1, iter1)
}
//export _GtkTreeSelectionForeachFunc_c_wrapper_once
func _GtkTreeSelectionForeachFunc_c_wrapper_once(model0 unsafe.Pointer, path0 unsafe.Pointer, iter0 unsafe.Pointer, data0 unsafe.Pointer) {
	_GtkTreeSelectionForeachFunc_c_wrapper(model0, path0, iter0, data0)
	gobject.Holder.Release(data0)
}
type TreeSelectionFunc func(selection *TreeSelection, model *TreeModel, path *TreePath, path_currently_selected bool) bool
//export _GtkTreeSelectionFunc_c_wrapper
func _GtkTreeSelectionFunc_c_wrapper(selection0 unsafe.Pointer, model0 unsafe.Pointer, path0 unsafe.Pointer, path_currently_selected0 int32, data0 unsafe.Pointer) int32 {
	var selection1 *TreeSelection
	var model1 *TreeModel
	var path1 *TreePath
	var path_currently_selected1 bool
	var data1 TreeSelectionFunc
	selection1 = (*TreeSelection)(gobject.ObjectWrap(unsafe.Pointer((*C.GtkTreeSelection)(selection0)), true))
	model1 = (*TreeModel)(gobject.ObjectWrap(unsafe.Pointer((*C.GtkTreeModel)(model0)), true))
	path1 = (*TreePath)(unsafe.Pointer((*C.GtkTreePath)(path0)))
	path_currently_selected1 = (C.int)(path_currently_selected0) != 0
	data1 = *(*TreeSelectionFunc)(data0)
	ret1 := data1(selection1, model1, path1, path_currently_selected1)
	var ret2 C.int
	ret2 = _GoBoolToCBool(ret1)
	return (int32)(ret2)
}
//export _GtkTreeSelectionFunc_c_wrapper_once
func _GtkTreeSelectionFunc_c_wrapper_once(selection0 unsafe.Pointer, model0 unsafe.Pointer, path0 unsafe.Pointer, path_currently_selected0 int32, data0 unsafe.Pointer) int32 {
	ret := _GtkTreeSelectionFunc_c_wrapper(selection0, model0, path0, path_currently_selected0, data0)
	gobject.Holder.Release(data0)
	return ret
}
type TreeSortableLike interface {
	ImplementsGtkTreeSortable() *C.GtkTreeSortable
}

type TreeSortable struct {
	gobject.Object
	TreeSortableImpl
}

type TreeSortableImpl struct {}

func ToTreeSortable(objlike gobject.ObjectLike) *TreeSortable {
	t := (*TreeSortableImpl)(nil).GetStaticType()
	c := objlike.InheritedFromGObject()
	obj := gobject.ObjectGrabIfType(unsafe.Pointer(c), t)
	if obj != nil {
		return (*TreeSortable)(obj)
	}
	panic("cannot cast to TreeSortable")
}

func (this0 *TreeSortableImpl) ImplementsGtkTreeSortable() *C.GtkTreeSortable {
	obj := uintptr(unsafe.Pointer(this0)) - unsafe.Sizeof(uintptr(0))
	return (*C.GtkTreeSortable)((*gobject.Object)(unsafe.Pointer(obj)).C)
}

func (this0 *TreeSortableImpl) GetStaticType() gobject.Type {
	return gobject.Type(C.gtk_tree_sortable_get_type())
}

func TreeSortableGetType() gobject.Type {
	return (*TreeSortableImpl)(nil).GetStaticType()
}
func (this0 *TreeSortableImpl) GetSortColumnID() (int, SortType, bool) {
	var this1 *C.GtkTreeSortable
	var sort_column_id1 C.int32_t
	var order1 C.GtkSortType
	if this0 != nil {
		this1 = this0.ImplementsGtkTreeSortable()}
	ret1 := C.gtk_tree_sortable_get_sort_column_id(this1, &sort_column_id1, &order1)
	var sort_column_id2 int
	var order2 SortType
	var ret2 bool
	sort_column_id2 = int(sort_column_id1)
	order2 = SortType(order1)
	ret2 = ret1 != 0
	return sort_column_id2, order2, ret2
}
func (this0 *TreeSortableImpl) HasDefaultSortFunc() bool {
	var this1 *C.GtkTreeSortable
	if this0 != nil {
		this1 = this0.ImplementsGtkTreeSortable()}
	ret1 := C.gtk_tree_sortable_has_default_sort_func(this1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *TreeSortableImpl) SetDefaultSortFunc(sort_func0 TreeIterCompareFunc) {
	var this1 *C.GtkTreeSortable
	var sort_func1 unsafe.Pointer
	if this0 != nil {
		this1 = this0.ImplementsGtkTreeSortable()}
	if sort_func0 != nil {
		sort_func1 = unsafe.Pointer(&sort_func0)}
	gobject.Holder.Grab(sort_func1)
	C._gtk_tree_sortable_set_default_sort_func(this1, sort_func1)
}
func (this0 *TreeSortableImpl) SetSortColumnID(sort_column_id0 int, order0 SortType) {
	var this1 *C.GtkTreeSortable
	var sort_column_id1 C.int32_t
	var order1 C.GtkSortType
	if this0 != nil {
		this1 = this0.ImplementsGtkTreeSortable()}
	sort_column_id1 = C.int32_t(sort_column_id0)
	order1 = C.GtkSortType(order0)
	C.gtk_tree_sortable_set_sort_column_id(this1, sort_column_id1, order1)
}
func (this0 *TreeSortableImpl) SetSortFunc(sort_column_id0 int, sort_func0 TreeIterCompareFunc) {
	var this1 *C.GtkTreeSortable
	var sort_column_id1 C.int32_t
	var sort_func1 unsafe.Pointer
	if this0 != nil {
		this1 = this0.ImplementsGtkTreeSortable()}
	sort_column_id1 = C.int32_t(sort_column_id0)
	if sort_func0 != nil {
		sort_func1 = unsafe.Pointer(&sort_func0)}
	gobject.Holder.Grab(sort_func1)
	C._gtk_tree_sortable_set_sort_func(this1, sort_column_id1, sort_func1)
}
func (this0 *TreeSortableImpl) SortColumnChanged() {
	var this1 *C.GtkTreeSortable
	if this0 != nil {
		this1 = this0.ImplementsGtkTreeSortable()}
	C.gtk_tree_sortable_sort_column_changed(this1)
}
type TreeStoreLike interface {
	gobject.ObjectLike
	InheritedFromGtkTreeStore() *C.GtkTreeStore
}

type TreeStore struct {
	gobject.Object
	BuildableImpl
	TreeDragDestImpl
	TreeDragSourceImpl
	TreeModelImpl
	TreeSortableImpl
}

func ToTreeStore(objlike gobject.ObjectLike) *TreeStore {
	c := objlike.InheritedFromGObject()
	if c == nil {
		return nil
	}
	t := (*TreeStore)(nil).GetStaticType()
	obj := gobject.ObjectGrabIfType(unsafe.Pointer(c), t)
	if obj != nil {
		return (*TreeStore)(obj)
	}
	panic("cannot cast to TreeStore")
}

func (this0 *TreeStore) InheritedFromGtkTreeStore() *C.GtkTreeStore {
	if this0 == nil {
		return nil
	}
	return (*C.GtkTreeStore)(this0.C)
}

func (this0 *TreeStore) GetStaticType() gobject.Type {
	return gobject.Type(C.gtk_tree_store_get_type())
}

func TreeStoreGetType() gobject.Type {
	return (*TreeStore)(nil).GetStaticType()
}
func _NewTreeStore(types0 []gobject.Type) *TreeStore {
	var types1 *C.GType
	var n_columns1 C.int32_t
	types1 = (*C.GType)(C.malloc(C.size_t(int(unsafe.Sizeof(*types1)) * len(types0))))
	defer C.free(unsafe.Pointer(types1))
	for i, e := range types0 {
		(*(*[999999]C.GType)(unsafe.Pointer(types1)))[i] = C.GType(e)
	}
	n_columns1 = C.int32_t(len(types0))
	ret1 := C.gtk_tree_store_newv(n_columns1, types1)
	var ret2 *TreeStore
	ret2 = (*TreeStore)(gobject.ObjectWrap(unsafe.Pointer(ret1), false))
	return ret2
}
func (this0 *TreeStore) _Append(parent0 *TreeIter) TreeIter {
	var this1 *C.GtkTreeStore
	var parent1 *C.GtkTreeIter
	var iter1 C.GtkTreeIter
	if this0 != nil {
		this1 = this0.InheritedFromGtkTreeStore()
	}
	parent1 = (*C.GtkTreeIter)(unsafe.Pointer(parent0))
	C.gtk_tree_store_append(this1, &iter1, parent1)
	var iter2 TreeIter
	iter2 = *(*TreeIter)(unsafe.Pointer(&iter1))
	return iter2
}
func (this0 *TreeStore) Clear() {
	var this1 *C.GtkTreeStore
	if this0 != nil {
		this1 = this0.InheritedFromGtkTreeStore()
	}
	C.gtk_tree_store_clear(this1)
}
func (this0 *TreeStore) Insert(parent0 *TreeIter, position0 int) TreeIter {
	var this1 *C.GtkTreeStore
	var parent1 *C.GtkTreeIter
	var position1 C.int32_t
	var iter1 C.GtkTreeIter
	if this0 != nil {
		this1 = this0.InheritedFromGtkTreeStore()
	}
	parent1 = (*C.GtkTreeIter)(unsafe.Pointer(parent0))
	position1 = C.int32_t(position0)
	C.gtk_tree_store_insert(this1, &iter1, parent1, position1)
	var iter2 TreeIter
	iter2 = *(*TreeIter)(unsafe.Pointer(&iter1))
	return iter2
}
func (this0 *TreeStore) InsertAfter(parent0 *TreeIter, sibling0 *TreeIter) TreeIter {
	var this1 *C.GtkTreeStore
	var parent1 *C.GtkTreeIter
	var sibling1 *C.GtkTreeIter
	var iter1 C.GtkTreeIter
	if this0 != nil {
		this1 = this0.InheritedFromGtkTreeStore()
	}
	parent1 = (*C.GtkTreeIter)(unsafe.Pointer(parent0))
	sibling1 = (*C.GtkTreeIter)(unsafe.Pointer(sibling0))
	C.gtk_tree_store_insert_after(this1, &iter1, parent1, sibling1)
	var iter2 TreeIter
	iter2 = *(*TreeIter)(unsafe.Pointer(&iter1))
	return iter2
}
func (this0 *TreeStore) InsertBefore(parent0 *TreeIter, sibling0 *TreeIter) TreeIter {
	var this1 *C.GtkTreeStore
	var parent1 *C.GtkTreeIter
	var sibling1 *C.GtkTreeIter
	var iter1 C.GtkTreeIter
	if this0 != nil {
		this1 = this0.InheritedFromGtkTreeStore()
	}
	parent1 = (*C.GtkTreeIter)(unsafe.Pointer(parent0))
	sibling1 = (*C.GtkTreeIter)(unsafe.Pointer(sibling0))
	C.gtk_tree_store_insert_before(this1, &iter1, parent1, sibling1)
	var iter2 TreeIter
	iter2 = *(*TreeIter)(unsafe.Pointer(&iter1))
	return iter2
}
// blacklisted: TreeStore.insert_with_values (method)
func (this0 *TreeStore) IsAncestor(iter0 *TreeIter, descendant0 *TreeIter) bool {
	var this1 *C.GtkTreeStore
	var iter1 *C.GtkTreeIter
	var descendant1 *C.GtkTreeIter
	if this0 != nil {
		this1 = this0.InheritedFromGtkTreeStore()
	}
	iter1 = (*C.GtkTreeIter)(unsafe.Pointer(iter0))
	descendant1 = (*C.GtkTreeIter)(unsafe.Pointer(descendant0))
	ret1 := C.gtk_tree_store_is_ancestor(this1, iter1, descendant1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *TreeStore) IterDepth(iter0 *TreeIter) int {
	var this1 *C.GtkTreeStore
	var iter1 *C.GtkTreeIter
	if this0 != nil {
		this1 = this0.InheritedFromGtkTreeStore()
	}
	iter1 = (*C.GtkTreeIter)(unsafe.Pointer(iter0))
	ret1 := C.gtk_tree_store_iter_depth(this1, iter1)
	var ret2 int
	ret2 = int(ret1)
	return ret2
}
func (this0 *TreeStore) IterIsValid(iter0 *TreeIter) bool {
	var this1 *C.GtkTreeStore
	var iter1 *C.GtkTreeIter
	if this0 != nil {
		this1 = this0.InheritedFromGtkTreeStore()
	}
	iter1 = (*C.GtkTreeIter)(unsafe.Pointer(iter0))
	ret1 := C.gtk_tree_store_iter_is_valid(this1, iter1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *TreeStore) MoveAfter(iter0 *TreeIter, position0 *TreeIter) {
	var this1 *C.GtkTreeStore
	var iter1 *C.GtkTreeIter
	var position1 *C.GtkTreeIter
	if this0 != nil {
		this1 = this0.InheritedFromGtkTreeStore()
	}
	iter1 = (*C.GtkTreeIter)(unsafe.Pointer(iter0))
	position1 = (*C.GtkTreeIter)(unsafe.Pointer(position0))
	C.gtk_tree_store_move_after(this1, iter1, position1)
}
func (this0 *TreeStore) MoveBefore(iter0 *TreeIter, position0 *TreeIter) {
	var this1 *C.GtkTreeStore
	var iter1 *C.GtkTreeIter
	var position1 *C.GtkTreeIter
	if this0 != nil {
		this1 = this0.InheritedFromGtkTreeStore()
	}
	iter1 = (*C.GtkTreeIter)(unsafe.Pointer(iter0))
	position1 = (*C.GtkTreeIter)(unsafe.Pointer(position0))
	C.gtk_tree_store_move_before(this1, iter1, position1)
}
func (this0 *TreeStore) Prepend(parent0 *TreeIter) TreeIter {
	var this1 *C.GtkTreeStore
	var parent1 *C.GtkTreeIter
	var iter1 C.GtkTreeIter
	if this0 != nil {
		this1 = this0.InheritedFromGtkTreeStore()
	}
	parent1 = (*C.GtkTreeIter)(unsafe.Pointer(parent0))
	C.gtk_tree_store_prepend(this1, &iter1, parent1)
	var iter2 TreeIter
	iter2 = *(*TreeIter)(unsafe.Pointer(&iter1))
	return iter2
}
func (this0 *TreeStore) Remove(iter0 *TreeIter) bool {
	var this1 *C.GtkTreeStore
	var iter1 *C.GtkTreeIter
	if this0 != nil {
		this1 = this0.InheritedFromGtkTreeStore()
	}
	iter1 = (*C.GtkTreeIter)(unsafe.Pointer(iter0))
	ret1 := C.gtk_tree_store_remove(this1, iter1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *TreeStore) SetColumnTypes(types0 []gobject.Type) {
	var this1 *C.GtkTreeStore
	var types1 *C.GType
	var n_columns1 C.int32_t
	if this0 != nil {
		this1 = this0.InheritedFromGtkTreeStore()
	}
	types1 = (*C.GType)(C.malloc(C.size_t(int(unsafe.Sizeof(*types1)) * len(types0))))
	defer C.free(unsafe.Pointer(types1))
	for i, e := range types0 {
		(*(*[999999]C.GType)(unsafe.Pointer(types1)))[i] = C.GType(e)
	}
	n_columns1 = C.int32_t(len(types0))
	C.gtk_tree_store_set_column_types(this1, n_columns1, types1)
}
func (this0 *TreeStore) SetValue(iter0 *TreeIter, column0 int, value0 *gobject.Value) {
	var this1 *C.GtkTreeStore
	var iter1 *C.GtkTreeIter
	var column1 C.int32_t
	var value1 *C.GValue
	if this0 != nil {
		this1 = this0.InheritedFromGtkTreeStore()
	}
	iter1 = (*C.GtkTreeIter)(unsafe.Pointer(iter0))
	column1 = C.int32_t(column0)
	value1 = (*C.GValue)(unsafe.Pointer(value0))
	C.gtk_tree_store_set_value(this1, iter1, column1, value1)
}
// blacklisted: TreeStore.set (method)
func (this0 *TreeStore) Swap(a0 *TreeIter, b0 *TreeIter) {
	var this1 *C.GtkTreeStore
	var a1 *C.GtkTreeIter
	var b1 *C.GtkTreeIter
	if this0 != nil {
		this1 = this0.InheritedFromGtkTreeStore()
	}
	a1 = (*C.GtkTreeIter)(unsafe.Pointer(a0))
	b1 = (*C.GtkTreeIter)(unsafe.Pointer(b0))
	C.gtk_tree_store_swap(this1, a1, b1)
}
type TreeViewLike interface {
	ContainerLike
	InheritedFromGtkTreeView() *C.GtkTreeView
}

type TreeView struct {
	Container
	atk.ImplementorIfaceImpl
	BuildableImpl
	ScrollableImpl
}

func ToTreeView(objlike gobject.ObjectLike) *TreeView {
	c := objlike.InheritedFromGObject()
	if c == nil {
		return nil
	}
	t := (*TreeView)(nil).GetStaticType()
	obj := gobject.ObjectGrabIfType(unsafe.Pointer(c), t)
	if obj != nil {
		return (*TreeView)(obj)
	}
	panic("cannot cast to TreeView")
}

func (this0 *TreeView) InheritedFromGtkTreeView() *C.GtkTreeView {
	if this0 == nil {
		return nil
	}
	return (*C.GtkTreeView)(this0.C)
}

func (this0 *TreeView) GetStaticType() gobject.Type {
	return gobject.Type(C.gtk_tree_view_get_type())
}

func TreeViewGetType() gobject.Type {
	return (*TreeView)(nil).GetStaticType()
}
func NewTreeView() *TreeView {
	ret1 := C.gtk_tree_view_new()
	var ret2 *TreeView
	ret2 = (*TreeView)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
func NewTreeViewWithModel(model0 TreeModelLike) *TreeView {
	var model1 *C.GtkTreeModel
	if model0 != nil {
		model1 = model0.ImplementsGtkTreeModel()}
	ret1 := C.gtk_tree_view_new_with_model(model1)
	var ret2 *TreeView
	ret2 = (*TreeView)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
func (this0 *TreeView) AppendColumn(column0 TreeViewColumnLike) int {
	var this1 *C.GtkTreeView
	var column1 *C.GtkTreeViewColumn
	if this0 != nil {
		this1 = this0.InheritedFromGtkTreeView()
	}
	if column0 != nil {
		column1 = column0.InheritedFromGtkTreeViewColumn()
	}
	ret1 := C.gtk_tree_view_append_column(this1, column1)
	var ret2 int
	ret2 = int(ret1)
	return ret2
}
func (this0 *TreeView) CollapseAll() {
	var this1 *C.GtkTreeView
	if this0 != nil {
		this1 = this0.InheritedFromGtkTreeView()
	}
	C.gtk_tree_view_collapse_all(this1)
}
func (this0 *TreeView) CollapseRow(path0 *TreePath) bool {
	var this1 *C.GtkTreeView
	var path1 *C.GtkTreePath
	if this0 != nil {
		this1 = this0.InheritedFromGtkTreeView()
	}
	path1 = (*C.GtkTreePath)(unsafe.Pointer(path0))
	ret1 := C.gtk_tree_view_collapse_row(this1, path1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *TreeView) ColumnsAutosize() {
	var this1 *C.GtkTreeView
	if this0 != nil {
		this1 = this0.InheritedFromGtkTreeView()
	}
	C.gtk_tree_view_columns_autosize(this1)
}
func (this0 *TreeView) ConvertBinWindowToTreeCoords(bx0 int, by0 int) (int, int) {
	var this1 *C.GtkTreeView
	var bx1 C.int32_t
	var by1 C.int32_t
	var tx1 C.int32_t
	var ty1 C.int32_t
	if this0 != nil {
		this1 = this0.InheritedFromGtkTreeView()
	}
	bx1 = C.int32_t(bx0)
	by1 = C.int32_t(by0)
	C.gtk_tree_view_convert_bin_window_to_tree_coords(this1, bx1, by1, &tx1, &ty1)
	var tx2 int
	var ty2 int
	tx2 = int(tx1)
	ty2 = int(ty1)
	return tx2, ty2
}
func (this0 *TreeView) ConvertBinWindowToWidgetCoords(bx0 int, by0 int) (int, int) {
	var this1 *C.GtkTreeView
	var bx1 C.int32_t
	var by1 C.int32_t
	var wx1 C.int32_t
	var wy1 C.int32_t
	if this0 != nil {
		this1 = this0.InheritedFromGtkTreeView()
	}
	bx1 = C.int32_t(bx0)
	by1 = C.int32_t(by0)
	C.gtk_tree_view_convert_bin_window_to_widget_coords(this1, bx1, by1, &wx1, &wy1)
	var wx2 int
	var wy2 int
	wx2 = int(wx1)
	wy2 = int(wy1)
	return wx2, wy2
}
func (this0 *TreeView) ConvertTreeToBinWindowCoords(tx0 int, ty0 int) (int, int) {
	var this1 *C.GtkTreeView
	var tx1 C.int32_t
	var ty1 C.int32_t
	var bx1 C.int32_t
	var by1 C.int32_t
	if this0 != nil {
		this1 = this0.InheritedFromGtkTreeView()
	}
	tx1 = C.int32_t(tx0)
	ty1 = C.int32_t(ty0)
	C.gtk_tree_view_convert_tree_to_bin_window_coords(this1, tx1, ty1, &bx1, &by1)
	var bx2 int
	var by2 int
	bx2 = int(bx1)
	by2 = int(by1)
	return bx2, by2
}
func (this0 *TreeView) ConvertTreeToWidgetCoords(tx0 int, ty0 int) (int, int) {
	var this1 *C.GtkTreeView
	var tx1 C.int32_t
	var ty1 C.int32_t
	var wx1 C.int32_t
	var wy1 C.int32_t
	if this0 != nil {
		this1 = this0.InheritedFromGtkTreeView()
	}
	tx1 = C.int32_t(tx0)
	ty1 = C.int32_t(ty0)
	C.gtk_tree_view_convert_tree_to_widget_coords(this1, tx1, ty1, &wx1, &wy1)
	var wx2 int
	var wy2 int
	wx2 = int(wx1)
	wy2 = int(wy1)
	return wx2, wy2
}
func (this0 *TreeView) ConvertWidgetToBinWindowCoords(wx0 int, wy0 int) (int, int) {
	var this1 *C.GtkTreeView
	var wx1 C.int32_t
	var wy1 C.int32_t
	var bx1 C.int32_t
	var by1 C.int32_t
	if this0 != nil {
		this1 = this0.InheritedFromGtkTreeView()
	}
	wx1 = C.int32_t(wx0)
	wy1 = C.int32_t(wy0)
	C.gtk_tree_view_convert_widget_to_bin_window_coords(this1, wx1, wy1, &bx1, &by1)
	var bx2 int
	var by2 int
	bx2 = int(bx1)
	by2 = int(by1)
	return bx2, by2
}
func (this0 *TreeView) ConvertWidgetToTreeCoords(wx0 int, wy0 int) (int, int) {
	var this1 *C.GtkTreeView
	var wx1 C.int32_t
	var wy1 C.int32_t
	var tx1 C.int32_t
	var ty1 C.int32_t
	if this0 != nil {
		this1 = this0.InheritedFromGtkTreeView()
	}
	wx1 = C.int32_t(wx0)
	wy1 = C.int32_t(wy0)
	C.gtk_tree_view_convert_widget_to_tree_coords(this1, wx1, wy1, &tx1, &ty1)
	var tx2 int
	var ty2 int
	tx2 = int(tx1)
	ty2 = int(ty1)
	return tx2, ty2
}
func (this0 *TreeView) CreateRowDragIcon(path0 *TreePath) *cairo.Surface {
	var this1 *C.GtkTreeView
	var path1 *C.GtkTreePath
	if this0 != nil {
		this1 = this0.InheritedFromGtkTreeView()
	}
	path1 = (*C.GtkTreePath)(unsafe.Pointer(path0))
	ret1 := C.gtk_tree_view_create_row_drag_icon(this1, path1)
	var ret2 *cairo.Surface
	ret2 = (*cairo.Surface)(cairo.SurfaceWrap(unsafe.Pointer(ret1), false))
	return ret2
}
func (this0 *TreeView) EnableModelDragDest(targets0 []TargetEntry, actions0 gdk.DragAction) {
	var this1 *C.GtkTreeView
	var targets1 *C.GtkTargetEntry
	var n_targets1 C.int32_t
	var actions1 C.GdkDragAction
	if this0 != nil {
		this1 = this0.InheritedFromGtkTreeView()
	}
	targets1 = (*C.GtkTargetEntry)(C.malloc(C.size_t(int(unsafe.Sizeof(*targets1)) * len(targets0))))
	defer C.free(unsafe.Pointer(targets1))
	for i, e := range targets0 {
		(*(*[999999]C.GtkTargetEntry)(unsafe.Pointer(targets1)))[i] = *(*C.GtkTargetEntry)(unsafe.Pointer(&e))
	}
	n_targets1 = C.int32_t(len(targets0))
	actions1 = C.GdkDragAction(actions0)
	C.gtk_tree_view_enable_model_drag_dest(this1, targets1, n_targets1, actions1)
}
func (this0 *TreeView) EnableModelDragSource(start_button_mask0 gdk.ModifierType, targets0 []TargetEntry, actions0 gdk.DragAction) {
	var this1 *C.GtkTreeView
	var start_button_mask1 C.GdkModifierType
	var targets1 *C.GtkTargetEntry
	var n_targets1 C.int32_t
	var actions1 C.GdkDragAction
	if this0 != nil {
		this1 = this0.InheritedFromGtkTreeView()
	}
	start_button_mask1 = C.GdkModifierType(start_button_mask0)
	targets1 = (*C.GtkTargetEntry)(C.malloc(C.size_t(int(unsafe.Sizeof(*targets1)) * len(targets0))))
	defer C.free(unsafe.Pointer(targets1))
	for i, e := range targets0 {
		(*(*[999999]C.GtkTargetEntry)(unsafe.Pointer(targets1)))[i] = *(*C.GtkTargetEntry)(unsafe.Pointer(&e))
	}
	n_targets1 = C.int32_t(len(targets0))
	actions1 = C.GdkDragAction(actions0)
	C.gtk_tree_view_enable_model_drag_source(this1, start_button_mask1, targets1, n_targets1, actions1)
}
func (this0 *TreeView) ExpandAll() {
	var this1 *C.GtkTreeView
	if this0 != nil {
		this1 = this0.InheritedFromGtkTreeView()
	}
	C.gtk_tree_view_expand_all(this1)
}
func (this0 *TreeView) ExpandRow(path0 *TreePath, open_all0 bool) bool {
	var this1 *C.GtkTreeView
	var path1 *C.GtkTreePath
	var open_all1 C.int
	if this0 != nil {
		this1 = this0.InheritedFromGtkTreeView()
	}
	path1 = (*C.GtkTreePath)(unsafe.Pointer(path0))
	open_all1 = _GoBoolToCBool(open_all0)
	ret1 := C.gtk_tree_view_expand_row(this1, path1, open_all1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *TreeView) ExpandToPath(path0 *TreePath) {
	var this1 *C.GtkTreeView
	var path1 *C.GtkTreePath
	if this0 != nil {
		this1 = this0.InheritedFromGtkTreeView()
	}
	path1 = (*C.GtkTreePath)(unsafe.Pointer(path0))
	C.gtk_tree_view_expand_to_path(this1, path1)
}
func (this0 *TreeView) GetBackgroundArea(path0 *TreePath, column0 TreeViewColumnLike) cairo.RectangleInt {
	var this1 *C.GtkTreeView
	var path1 *C.GtkTreePath
	var column1 *C.GtkTreeViewColumn
	var rect1 C.cairoRectangleInt
	if this0 != nil {
		this1 = this0.InheritedFromGtkTreeView()
	}
	path1 = (*C.GtkTreePath)(unsafe.Pointer(path0))
	if column0 != nil {
		column1 = column0.InheritedFromGtkTreeViewColumn()
	}
	C.gtk_tree_view_get_background_area(this1, path1, column1, &rect1)
	var rect2 cairo.RectangleInt
	rect2 = *(*cairo.RectangleInt)(unsafe.Pointer(&rect1))
	return rect2
}
func (this0 *TreeView) GetBinWindow() *gdk.Window {
	var this1 *C.GtkTreeView
	if this0 != nil {
		this1 = this0.InheritedFromGtkTreeView()
	}
	ret1 := C.gtk_tree_view_get_bin_window(this1)
	var ret2 *gdk.Window
	ret2 = (*gdk.Window)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
func (this0 *TreeView) GetCellArea(path0 *TreePath, column0 TreeViewColumnLike) cairo.RectangleInt {
	var this1 *C.GtkTreeView
	var path1 *C.GtkTreePath
	var column1 *C.GtkTreeViewColumn
	var rect1 C.cairoRectangleInt
	if this0 != nil {
		this1 = this0.InheritedFromGtkTreeView()
	}
	path1 = (*C.GtkTreePath)(unsafe.Pointer(path0))
	if column0 != nil {
		column1 = column0.InheritedFromGtkTreeViewColumn()
	}
	C.gtk_tree_view_get_cell_area(this1, path1, column1, &rect1)
	var rect2 cairo.RectangleInt
	rect2 = *(*cairo.RectangleInt)(unsafe.Pointer(&rect1))
	return rect2
}
func (this0 *TreeView) GetColumn(n0 int) *TreeViewColumn {
	var this1 *C.GtkTreeView
	var n1 C.int32_t
	if this0 != nil {
		this1 = this0.InheritedFromGtkTreeView()
	}
	n1 = C.int32_t(n0)
	ret1 := C.gtk_tree_view_get_column(this1, n1)
	var ret2 *TreeViewColumn
	ret2 = (*TreeViewColumn)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
func (this0 *TreeView) GetColumns() []*TreeViewColumn {
	var this1 *C.GtkTreeView
	if this0 != nil {
		this1 = this0.InheritedFromGtkTreeView()
	}
	ret1 := C.gtk_tree_view_get_columns(this1)
	var ret2 []*TreeViewColumn
	for iter := (*_GList)(unsafe.Pointer(ret1)); iter != nil; iter = iter.next {
		var elt *TreeViewColumn
		elt = (*TreeViewColumn)(gobject.ObjectWrap(unsafe.Pointer((*C.GtkTreeViewColumn)(iter.data)), true))
		ret2 = append(ret2, elt)
	}
	return ret2
}
func (this0 *TreeView) GetCursor() (*TreePath, *TreeViewColumn) {
	var this1 *C.GtkTreeView
	var path1 *C.GtkTreePath
	var focus_column1 *C.GtkTreeViewColumn
	if this0 != nil {
		this1 = this0.InheritedFromGtkTreeView()
	}
	C.gtk_tree_view_get_cursor(this1, &path1, &focus_column1)
	var path2 *TreePath
	var focus_column2 *TreeViewColumn
	path2 = (*TreePath)(unsafe.Pointer(path1))
	focus_column2 = (*TreeViewColumn)(gobject.ObjectWrap(unsafe.Pointer(focus_column1), true))
	return path2, focus_column2
}
func (this0 *TreeView) GetDestRowAtPos(drag_x0 int, drag_y0 int) (*TreePath, TreeViewDropPosition, bool) {
	var this1 *C.GtkTreeView
	var drag_x1 C.int32_t
	var drag_y1 C.int32_t
	var path1 *C.GtkTreePath
	var pos1 C.GtkTreeViewDropPosition
	if this0 != nil {
		this1 = this0.InheritedFromGtkTreeView()
	}
	drag_x1 = C.int32_t(drag_x0)
	drag_y1 = C.int32_t(drag_y0)
	ret1 := C.gtk_tree_view_get_dest_row_at_pos(this1, drag_x1, drag_y1, &path1, &pos1)
	var path2 *TreePath
	var pos2 TreeViewDropPosition
	var ret2 bool
	path2 = (*TreePath)(unsafe.Pointer(path1))
	pos2 = TreeViewDropPosition(pos1)
	ret2 = ret1 != 0
	return path2, pos2, ret2
}
func (this0 *TreeView) GetDragDestRow() (*TreePath, TreeViewDropPosition) {
	var this1 *C.GtkTreeView
	var path1 *C.GtkTreePath
	var pos1 C.GtkTreeViewDropPosition
	if this0 != nil {
		this1 = this0.InheritedFromGtkTreeView()
	}
	C.gtk_tree_view_get_drag_dest_row(this1, &path1, &pos1)
	var path2 *TreePath
	var pos2 TreeViewDropPosition
	path2 = (*TreePath)(unsafe.Pointer(path1))
	pos2 = TreeViewDropPosition(pos1)
	return path2, pos2
}
func (this0 *TreeView) GetEnableSearch() bool {
	var this1 *C.GtkTreeView
	if this0 != nil {
		this1 = this0.InheritedFromGtkTreeView()
	}
	ret1 := C.gtk_tree_view_get_enable_search(this1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *TreeView) GetEnableTreeLines() bool {
	var this1 *C.GtkTreeView
	if this0 != nil {
		this1 = this0.InheritedFromGtkTreeView()
	}
	ret1 := C.gtk_tree_view_get_enable_tree_lines(this1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *TreeView) GetExpanderColumn() *TreeViewColumn {
	var this1 *C.GtkTreeView
	if this0 != nil {
		this1 = this0.InheritedFromGtkTreeView()
	}
	ret1 := C.gtk_tree_view_get_expander_column(this1)
	var ret2 *TreeViewColumn
	ret2 = (*TreeViewColumn)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
func (this0 *TreeView) GetFixedHeightMode() bool {
	var this1 *C.GtkTreeView
	if this0 != nil {
		this1 = this0.InheritedFromGtkTreeView()
	}
	ret1 := C.gtk_tree_view_get_fixed_height_mode(this1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *TreeView) GetGridLines() TreeViewGridLines {
	var this1 *C.GtkTreeView
	if this0 != nil {
		this1 = this0.InheritedFromGtkTreeView()
	}
	ret1 := C.gtk_tree_view_get_grid_lines(this1)
	var ret2 TreeViewGridLines
	ret2 = TreeViewGridLines(ret1)
	return ret2
}
func (this0 *TreeView) GetHAdjustment() *Adjustment {
	var this1 *C.GtkTreeView
	if this0 != nil {
		this1 = this0.InheritedFromGtkTreeView()
	}
	ret1 := C.gtk_tree_view_get_hadjustment(this1)
	var ret2 *Adjustment
	ret2 = (*Adjustment)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
func (this0 *TreeView) GetHeadersClickable() bool {
	var this1 *C.GtkTreeView
	if this0 != nil {
		this1 = this0.InheritedFromGtkTreeView()
	}
	ret1 := C.gtk_tree_view_get_headers_clickable(this1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *TreeView) GetHeadersVisible() bool {
	var this1 *C.GtkTreeView
	if this0 != nil {
		this1 = this0.InheritedFromGtkTreeView()
	}
	ret1 := C.gtk_tree_view_get_headers_visible(this1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *TreeView) GetHoverExpand() bool {
	var this1 *C.GtkTreeView
	if this0 != nil {
		this1 = this0.InheritedFromGtkTreeView()
	}
	ret1 := C.gtk_tree_view_get_hover_expand(this1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *TreeView) GetHoverSelection() bool {
	var this1 *C.GtkTreeView
	if this0 != nil {
		this1 = this0.InheritedFromGtkTreeView()
	}
	ret1 := C.gtk_tree_view_get_hover_selection(this1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *TreeView) GetLevelIndentation() int {
	var this1 *C.GtkTreeView
	if this0 != nil {
		this1 = this0.InheritedFromGtkTreeView()
	}
	ret1 := C.gtk_tree_view_get_level_indentation(this1)
	var ret2 int
	ret2 = int(ret1)
	return ret2
}
func (this0 *TreeView) GetModel() *TreeModel {
	var this1 *C.GtkTreeView
	if this0 != nil {
		this1 = this0.InheritedFromGtkTreeView()
	}
	ret1 := C.gtk_tree_view_get_model(this1)
	var ret2 *TreeModel
	ret2 = (*TreeModel)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
func (this0 *TreeView) GetPathAtPos(x0 int, y0 int) (*TreePath, *TreeViewColumn, int, int, bool) {
	var this1 *C.GtkTreeView
	var x1 C.int32_t
	var y1 C.int32_t
	var path1 *C.GtkTreePath
	var column1 *C.GtkTreeViewColumn
	var cell_x1 C.int32_t
	var cell_y1 C.int32_t
	if this0 != nil {
		this1 = this0.InheritedFromGtkTreeView()
	}
	x1 = C.int32_t(x0)
	y1 = C.int32_t(y0)
	ret1 := C.gtk_tree_view_get_path_at_pos(this1, x1, y1, &path1, &column1, &cell_x1, &cell_y1)
	var path2 *TreePath
	var column2 *TreeViewColumn
	var cell_x2 int
	var cell_y2 int
	var ret2 bool
	path2 = (*TreePath)(unsafe.Pointer(path1))
	column2 = (*TreeViewColumn)(gobject.ObjectWrap(unsafe.Pointer(column1), true))
	cell_x2 = int(cell_x1)
	cell_y2 = int(cell_y1)
	ret2 = ret1 != 0
	return path2, column2, cell_x2, cell_y2, ret2
}
func (this0 *TreeView) GetReorderable() bool {
	var this1 *C.GtkTreeView
	if this0 != nil {
		this1 = this0.InheritedFromGtkTreeView()
	}
	ret1 := C.gtk_tree_view_get_reorderable(this1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *TreeView) GetRubberBanding() bool {
	var this1 *C.GtkTreeView
	if this0 != nil {
		this1 = this0.InheritedFromGtkTreeView()
	}
	ret1 := C.gtk_tree_view_get_rubber_banding(this1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *TreeView) GetRulesHint() bool {
	var this1 *C.GtkTreeView
	if this0 != nil {
		this1 = this0.InheritedFromGtkTreeView()
	}
	ret1 := C.gtk_tree_view_get_rules_hint(this1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *TreeView) GetSearchColumn() int {
	var this1 *C.GtkTreeView
	if this0 != nil {
		this1 = this0.InheritedFromGtkTreeView()
	}
	ret1 := C.gtk_tree_view_get_search_column(this1)
	var ret2 int
	ret2 = int(ret1)
	return ret2
}
func (this0 *TreeView) GetSearchEntry() *Entry {
	var this1 *C.GtkTreeView
	if this0 != nil {
		this1 = this0.InheritedFromGtkTreeView()
	}
	ret1 := C.gtk_tree_view_get_search_entry(this1)
	var ret2 *Entry
	ret2 = (*Entry)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
func (this0 *TreeView) GetSelection() *TreeSelection {
	var this1 *C.GtkTreeView
	if this0 != nil {
		this1 = this0.InheritedFromGtkTreeView()
	}
	ret1 := C.gtk_tree_view_get_selection(this1)
	var ret2 *TreeSelection
	ret2 = (*TreeSelection)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
func (this0 *TreeView) GetShowExpanders() bool {
	var this1 *C.GtkTreeView
	if this0 != nil {
		this1 = this0.InheritedFromGtkTreeView()
	}
	ret1 := C.gtk_tree_view_get_show_expanders(this1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *TreeView) GetTooltipColumn() int {
	var this1 *C.GtkTreeView
	if this0 != nil {
		this1 = this0.InheritedFromGtkTreeView()
	}
	ret1 := C.gtk_tree_view_get_tooltip_column(this1)
	var ret2 int
	ret2 = int(ret1)
	return ret2
}
func (this0 *TreeView) GetTooltipContext(x0 int, y0 int, keyboard_tip0 bool) (int, int, *TreeModel, *TreePath, TreeIter, bool) {
	var this1 *C.GtkTreeView
	var x1 C.int32_t
	var y1 C.int32_t
	var keyboard_tip1 C.int
	var model1 *C.GtkTreeModel
	var path1 *C.GtkTreePath
	var iter1 C.GtkTreeIter
	if this0 != nil {
		this1 = this0.InheritedFromGtkTreeView()
	}
	x1 = C.int32_t(x0)
	y1 = C.int32_t(y0)
	keyboard_tip1 = _GoBoolToCBool(keyboard_tip0)
	ret1 := C.gtk_tree_view_get_tooltip_context(this1, &x1, &y1, keyboard_tip1, &model1, &path1, &iter1)
	var x2 int
	var y2 int
	var model2 *TreeModel
	var path2 *TreePath
	var iter2 TreeIter
	var ret2 bool
	x2 = int(x1)
	y2 = int(y1)
	model2 = (*TreeModel)(gobject.ObjectWrap(unsafe.Pointer(model1), true))
	path2 = (*TreePath)(unsafe.Pointer(path1))
	iter2 = *(*TreeIter)(unsafe.Pointer(&iter1))
	ret2 = ret1 != 0
	return x2, y2, model2, path2, iter2, ret2
}
func (this0 *TreeView) GetVAdjustment() *Adjustment {
	var this1 *C.GtkTreeView
	if this0 != nil {
		this1 = this0.InheritedFromGtkTreeView()
	}
	ret1 := C.gtk_tree_view_get_vadjustment(this1)
	var ret2 *Adjustment
	ret2 = (*Adjustment)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
func (this0 *TreeView) GetVisibleRange() (*TreePath, *TreePath, bool) {
	var this1 *C.GtkTreeView
	var start_path1 *C.GtkTreePath
	var end_path1 *C.GtkTreePath
	if this0 != nil {
		this1 = this0.InheritedFromGtkTreeView()
	}
	ret1 := C.gtk_tree_view_get_visible_range(this1, &start_path1, &end_path1)
	var start_path2 *TreePath
	var end_path2 *TreePath
	var ret2 bool
	start_path2 = (*TreePath)(unsafe.Pointer(start_path1))
	end_path2 = (*TreePath)(unsafe.Pointer(end_path1))
	ret2 = ret1 != 0
	return start_path2, end_path2, ret2
}
func (this0 *TreeView) GetVisibleRect() cairo.RectangleInt {
	var this1 *C.GtkTreeView
	var visible_rect1 C.cairoRectangleInt
	if this0 != nil {
		this1 = this0.InheritedFromGtkTreeView()
	}
	C.gtk_tree_view_get_visible_rect(this1, &visible_rect1)
	var visible_rect2 cairo.RectangleInt
	visible_rect2 = *(*cairo.RectangleInt)(unsafe.Pointer(&visible_rect1))
	return visible_rect2
}
func (this0 *TreeView) InsertColumn(column0 TreeViewColumnLike, position0 int) int {
	var this1 *C.GtkTreeView
	var column1 *C.GtkTreeViewColumn
	var position1 C.int32_t
	if this0 != nil {
		this1 = this0.InheritedFromGtkTreeView()
	}
	if column0 != nil {
		column1 = column0.InheritedFromGtkTreeViewColumn()
	}
	position1 = C.int32_t(position0)
	ret1 := C.gtk_tree_view_insert_column(this1, column1, position1)
	var ret2 int
	ret2 = int(ret1)
	return ret2
}
func (this0 *TreeView) InsertColumnWithDataFunc(position0 int, title0 string, cell0 CellRendererLike, func0 TreeCellDataFunc) int {
	var this1 *C.GtkTreeView
	var position1 C.int32_t
	var title1 *C.char
	var cell1 *C.GtkCellRenderer
	var func1 unsafe.Pointer
	if this0 != nil {
		this1 = this0.InheritedFromGtkTreeView()
	}
	position1 = C.int32_t(position0)
	title1 = _GoStringToGString(title0)
	defer C.free(unsafe.Pointer(title1))
	if cell0 != nil {
		cell1 = cell0.InheritedFromGtkCellRenderer()
	}
	if func0 != nil {
		func1 = unsafe.Pointer(&func0)}
	gobject.Holder.Grab(func1)
	ret1 := C._gtk_tree_view_insert_column_with_data_func(this1, position1, title1, cell1, func1)
	var ret2 int
	ret2 = int(ret1)
	return ret2
}
func (this0 *TreeView) IsBlankAtPos(x0 int, y0 int) (*TreePath, *TreeViewColumn, int, int, bool) {
	var this1 *C.GtkTreeView
	var x1 C.int32_t
	var y1 C.int32_t
	var path1 *C.GtkTreePath
	var column1 *C.GtkTreeViewColumn
	var cell_x1 C.int32_t
	var cell_y1 C.int32_t
	if this0 != nil {
		this1 = this0.InheritedFromGtkTreeView()
	}
	x1 = C.int32_t(x0)
	y1 = C.int32_t(y0)
	ret1 := C.gtk_tree_view_is_blank_at_pos(this1, x1, y1, &path1, &column1, &cell_x1, &cell_y1)
	var path2 *TreePath
	var column2 *TreeViewColumn
	var cell_x2 int
	var cell_y2 int
	var ret2 bool
	path2 = (*TreePath)(unsafe.Pointer(path1))
	column2 = (*TreeViewColumn)(gobject.ObjectWrap(unsafe.Pointer(column1), false))
	cell_x2 = int(cell_x1)
	cell_y2 = int(cell_y1)
	ret2 = ret1 != 0
	return path2, column2, cell_x2, cell_y2, ret2
}
func (this0 *TreeView) IsRubberBandingActive() bool {
	var this1 *C.GtkTreeView
	if this0 != nil {
		this1 = this0.InheritedFromGtkTreeView()
	}
	ret1 := C.gtk_tree_view_is_rubber_banding_active(this1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *TreeView) MapExpandedRows(func0 TreeViewMappingFunc) {
	var this1 *C.GtkTreeView
	var func1 unsafe.Pointer
	if this0 != nil {
		this1 = this0.InheritedFromGtkTreeView()
	}
	if func0 != nil {
		func1 = unsafe.Pointer(&func0)}
	C._gtk_tree_view_map_expanded_rows(this1, func1)
}
func (this0 *TreeView) MoveColumnAfter(column0 TreeViewColumnLike, base_column0 TreeViewColumnLike) {
	var this1 *C.GtkTreeView
	var column1 *C.GtkTreeViewColumn
	var base_column1 *C.GtkTreeViewColumn
	if this0 != nil {
		this1 = this0.InheritedFromGtkTreeView()
	}
	if column0 != nil {
		column1 = column0.InheritedFromGtkTreeViewColumn()
	}
	if base_column0 != nil {
		base_column1 = base_column0.InheritedFromGtkTreeViewColumn()
	}
	C.gtk_tree_view_move_column_after(this1, column1, base_column1)
}
func (this0 *TreeView) RemoveColumn(column0 TreeViewColumnLike) int {
	var this1 *C.GtkTreeView
	var column1 *C.GtkTreeViewColumn
	if this0 != nil {
		this1 = this0.InheritedFromGtkTreeView()
	}
	if column0 != nil {
		column1 = column0.InheritedFromGtkTreeViewColumn()
	}
	ret1 := C.gtk_tree_view_remove_column(this1, column1)
	var ret2 int
	ret2 = int(ret1)
	return ret2
}
func (this0 *TreeView) RowActivated(path0 *TreePath, column0 TreeViewColumnLike) {
	var this1 *C.GtkTreeView
	var path1 *C.GtkTreePath
	var column1 *C.GtkTreeViewColumn
	if this0 != nil {
		this1 = this0.InheritedFromGtkTreeView()
	}
	path1 = (*C.GtkTreePath)(unsafe.Pointer(path0))
	if column0 != nil {
		column1 = column0.InheritedFromGtkTreeViewColumn()
	}
	C.gtk_tree_view_row_activated(this1, path1, column1)
}
func (this0 *TreeView) RowExpanded(path0 *TreePath) bool {
	var this1 *C.GtkTreeView
	var path1 *C.GtkTreePath
	if this0 != nil {
		this1 = this0.InheritedFromGtkTreeView()
	}
	path1 = (*C.GtkTreePath)(unsafe.Pointer(path0))
	ret1 := C.gtk_tree_view_row_expanded(this1, path1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *TreeView) ScrollToCell(path0 *TreePath, column0 TreeViewColumnLike, use_align0 bool, row_align0 float64, col_align0 float64) {
	var this1 *C.GtkTreeView
	var path1 *C.GtkTreePath
	var column1 *C.GtkTreeViewColumn
	var use_align1 C.int
	var row_align1 C.float
	var col_align1 C.float
	if this0 != nil {
		this1 = this0.InheritedFromGtkTreeView()
	}
	path1 = (*C.GtkTreePath)(unsafe.Pointer(path0))
	if column0 != nil {
		column1 = column0.InheritedFromGtkTreeViewColumn()
	}
	use_align1 = _GoBoolToCBool(use_align0)
	row_align1 = C.float(row_align0)
	col_align1 = C.float(col_align0)
	C.gtk_tree_view_scroll_to_cell(this1, path1, column1, use_align1, row_align1, col_align1)
}
func (this0 *TreeView) ScrollToPoint(tree_x0 int, tree_y0 int) {
	var this1 *C.GtkTreeView
	var tree_x1 C.int32_t
	var tree_y1 C.int32_t
	if this0 != nil {
		this1 = this0.InheritedFromGtkTreeView()
	}
	tree_x1 = C.int32_t(tree_x0)
	tree_y1 = C.int32_t(tree_y0)
	C.gtk_tree_view_scroll_to_point(this1, tree_x1, tree_y1)
}
func (this0 *TreeView) SetColumnDragFunction(func0 TreeViewColumnDropFunc) {
	var this1 *C.GtkTreeView
	var func1 unsafe.Pointer
	if this0 != nil {
		this1 = this0.InheritedFromGtkTreeView()
	}
	if func0 != nil {
		func1 = unsafe.Pointer(&func0)}
	gobject.Holder.Grab(func1)
	C._gtk_tree_view_set_column_drag_function(this1, func1)
}
func (this0 *TreeView) SetCursor(path0 *TreePath, focus_column0 TreeViewColumnLike, start_editing0 bool) {
	var this1 *C.GtkTreeView
	var path1 *C.GtkTreePath
	var focus_column1 *C.GtkTreeViewColumn
	var start_editing1 C.int
	if this0 != nil {
		this1 = this0.InheritedFromGtkTreeView()
	}
	path1 = (*C.GtkTreePath)(unsafe.Pointer(path0))
	if focus_column0 != nil {
		focus_column1 = focus_column0.InheritedFromGtkTreeViewColumn()
	}
	start_editing1 = _GoBoolToCBool(start_editing0)
	C.gtk_tree_view_set_cursor(this1, path1, focus_column1, start_editing1)
}
func (this0 *TreeView) SetCursorOnCell(path0 *TreePath, focus_column0 TreeViewColumnLike, focus_cell0 CellRendererLike, start_editing0 bool) {
	var this1 *C.GtkTreeView
	var path1 *C.GtkTreePath
	var focus_column1 *C.GtkTreeViewColumn
	var focus_cell1 *C.GtkCellRenderer
	var start_editing1 C.int
	if this0 != nil {
		this1 = this0.InheritedFromGtkTreeView()
	}
	path1 = (*C.GtkTreePath)(unsafe.Pointer(path0))
	if focus_column0 != nil {
		focus_column1 = focus_column0.InheritedFromGtkTreeViewColumn()
	}
	if focus_cell0 != nil {
		focus_cell1 = focus_cell0.InheritedFromGtkCellRenderer()
	}
	start_editing1 = _GoBoolToCBool(start_editing0)
	C.gtk_tree_view_set_cursor_on_cell(this1, path1, focus_column1, focus_cell1, start_editing1)
}
func (this0 *TreeView) SetDestroyCountFunc(func0 TreeDestroyCountFunc) {
	var this1 *C.GtkTreeView
	var func1 unsafe.Pointer
	if this0 != nil {
		this1 = this0.InheritedFromGtkTreeView()
	}
	if func0 != nil {
		func1 = unsafe.Pointer(&func0)}
	gobject.Holder.Grab(func1)
	C._gtk_tree_view_set_destroy_count_func(this1, func1)
}
func (this0 *TreeView) SetDragDestRow(path0 *TreePath, pos0 TreeViewDropPosition) {
	var this1 *C.GtkTreeView
	var path1 *C.GtkTreePath
	var pos1 C.GtkTreeViewDropPosition
	if this0 != nil {
		this1 = this0.InheritedFromGtkTreeView()
	}
	path1 = (*C.GtkTreePath)(unsafe.Pointer(path0))
	pos1 = C.GtkTreeViewDropPosition(pos0)
	C.gtk_tree_view_set_drag_dest_row(this1, path1, pos1)
}
func (this0 *TreeView) SetEnableSearch(enable_search0 bool) {
	var this1 *C.GtkTreeView
	var enable_search1 C.int
	if this0 != nil {
		this1 = this0.InheritedFromGtkTreeView()
	}
	enable_search1 = _GoBoolToCBool(enable_search0)
	C.gtk_tree_view_set_enable_search(this1, enable_search1)
}
func (this0 *TreeView) SetEnableTreeLines(enabled0 bool) {
	var this1 *C.GtkTreeView
	var enabled1 C.int
	if this0 != nil {
		this1 = this0.InheritedFromGtkTreeView()
	}
	enabled1 = _GoBoolToCBool(enabled0)
	C.gtk_tree_view_set_enable_tree_lines(this1, enabled1)
}
func (this0 *TreeView) SetExpanderColumn(column0 TreeViewColumnLike) {
	var this1 *C.GtkTreeView
	var column1 *C.GtkTreeViewColumn
	if this0 != nil {
		this1 = this0.InheritedFromGtkTreeView()
	}
	if column0 != nil {
		column1 = column0.InheritedFromGtkTreeViewColumn()
	}
	C.gtk_tree_view_set_expander_column(this1, column1)
}
func (this0 *TreeView) SetFixedHeightMode(enable0 bool) {
	var this1 *C.GtkTreeView
	var enable1 C.int
	if this0 != nil {
		this1 = this0.InheritedFromGtkTreeView()
	}
	enable1 = _GoBoolToCBool(enable0)
	C.gtk_tree_view_set_fixed_height_mode(this1, enable1)
}
func (this0 *TreeView) SetGridLines(grid_lines0 TreeViewGridLines) {
	var this1 *C.GtkTreeView
	var grid_lines1 C.GtkTreeViewGridLines
	if this0 != nil {
		this1 = this0.InheritedFromGtkTreeView()
	}
	grid_lines1 = C.GtkTreeViewGridLines(grid_lines0)
	C.gtk_tree_view_set_grid_lines(this1, grid_lines1)
}
// blacklisted: TreeView.set_hadjustment (method)
func (this0 *TreeView) SetHeadersClickable(setting0 bool) {
	var this1 *C.GtkTreeView
	var setting1 C.int
	if this0 != nil {
		this1 = this0.InheritedFromGtkTreeView()
	}
	setting1 = _GoBoolToCBool(setting0)
	C.gtk_tree_view_set_headers_clickable(this1, setting1)
}
func (this0 *TreeView) SetHeadersVisible(headers_visible0 bool) {
	var this1 *C.GtkTreeView
	var headers_visible1 C.int
	if this0 != nil {
		this1 = this0.InheritedFromGtkTreeView()
	}
	headers_visible1 = _GoBoolToCBool(headers_visible0)
	C.gtk_tree_view_set_headers_visible(this1, headers_visible1)
}
func (this0 *TreeView) SetHoverExpand(expand0 bool) {
	var this1 *C.GtkTreeView
	var expand1 C.int
	if this0 != nil {
		this1 = this0.InheritedFromGtkTreeView()
	}
	expand1 = _GoBoolToCBool(expand0)
	C.gtk_tree_view_set_hover_expand(this1, expand1)
}
func (this0 *TreeView) SetHoverSelection(hover0 bool) {
	var this1 *C.GtkTreeView
	var hover1 C.int
	if this0 != nil {
		this1 = this0.InheritedFromGtkTreeView()
	}
	hover1 = _GoBoolToCBool(hover0)
	C.gtk_tree_view_set_hover_selection(this1, hover1)
}
func (this0 *TreeView) SetLevelIndentation(indentation0 int) {
	var this1 *C.GtkTreeView
	var indentation1 C.int32_t
	if this0 != nil {
		this1 = this0.InheritedFromGtkTreeView()
	}
	indentation1 = C.int32_t(indentation0)
	C.gtk_tree_view_set_level_indentation(this1, indentation1)
}
func (this0 *TreeView) SetModel(model0 TreeModelLike) {
	var this1 *C.GtkTreeView
	var model1 *C.GtkTreeModel
	if this0 != nil {
		this1 = this0.InheritedFromGtkTreeView()
	}
	if model0 != nil {
		model1 = model0.ImplementsGtkTreeModel()}
	C.gtk_tree_view_set_model(this1, model1)
}
func (this0 *TreeView) SetReorderable(reorderable0 bool) {
	var this1 *C.GtkTreeView
	var reorderable1 C.int
	if this0 != nil {
		this1 = this0.InheritedFromGtkTreeView()
	}
	reorderable1 = _GoBoolToCBool(reorderable0)
	C.gtk_tree_view_set_reorderable(this1, reorderable1)
}
func (this0 *TreeView) SetRowSeparatorFunc(func0 TreeViewRowSeparatorFunc) {
	var this1 *C.GtkTreeView
	var func1 unsafe.Pointer
	if this0 != nil {
		this1 = this0.InheritedFromGtkTreeView()
	}
	if func0 != nil {
		func1 = unsafe.Pointer(&func0)}
	gobject.Holder.Grab(func1)
	C._gtk_tree_view_set_row_separator_func(this1, func1)
}
func (this0 *TreeView) SetRubberBanding(enable0 bool) {
	var this1 *C.GtkTreeView
	var enable1 C.int
	if this0 != nil {
		this1 = this0.InheritedFromGtkTreeView()
	}
	enable1 = _GoBoolToCBool(enable0)
	C.gtk_tree_view_set_rubber_banding(this1, enable1)
}
func (this0 *TreeView) SetRulesHint(setting0 bool) {
	var this1 *C.GtkTreeView
	var setting1 C.int
	if this0 != nil {
		this1 = this0.InheritedFromGtkTreeView()
	}
	setting1 = _GoBoolToCBool(setting0)
	C.gtk_tree_view_set_rules_hint(this1, setting1)
}
func (this0 *TreeView) SetSearchColumn(column0 int) {
	var this1 *C.GtkTreeView
	var column1 C.int32_t
	if this0 != nil {
		this1 = this0.InheritedFromGtkTreeView()
	}
	column1 = C.int32_t(column0)
	C.gtk_tree_view_set_search_column(this1, column1)
}
func (this0 *TreeView) SetSearchEntry(entry0 EntryLike) {
	var this1 *C.GtkTreeView
	var entry1 *C.GtkEntry
	if this0 != nil {
		this1 = this0.InheritedFromGtkTreeView()
	}
	if entry0 != nil {
		entry1 = entry0.InheritedFromGtkEntry()
	}
	C.gtk_tree_view_set_search_entry(this1, entry1)
}
func (this0 *TreeView) SetSearchEqualFunc(search_equal_func0 TreeViewSearchEqualFunc) {
	var this1 *C.GtkTreeView
	var search_equal_func1 unsafe.Pointer
	if this0 != nil {
		this1 = this0.InheritedFromGtkTreeView()
	}
	if search_equal_func0 != nil {
		search_equal_func1 = unsafe.Pointer(&search_equal_func0)}
	gobject.Holder.Grab(search_equal_func1)
	C._gtk_tree_view_set_search_equal_func(this1, search_equal_func1)
}
func (this0 *TreeView) SetSearchPositionFunc(func0 TreeViewSearchPositionFunc) {
	var this1 *C.GtkTreeView
	var func1 unsafe.Pointer
	if this0 != nil {
		this1 = this0.InheritedFromGtkTreeView()
	}
	if func0 != nil {
		func1 = unsafe.Pointer(&func0)}
	gobject.Holder.Grab(func1)
	C._gtk_tree_view_set_search_position_func(this1, func1)
}
func (this0 *TreeView) SetShowExpanders(enabled0 bool) {
	var this1 *C.GtkTreeView
	var enabled1 C.int
	if this0 != nil {
		this1 = this0.InheritedFromGtkTreeView()
	}
	enabled1 = _GoBoolToCBool(enabled0)
	C.gtk_tree_view_set_show_expanders(this1, enabled1)
}
func (this0 *TreeView) SetTooltipCell(tooltip0 TooltipLike, path0 *TreePath, column0 TreeViewColumnLike, cell0 CellRendererLike) {
	var this1 *C.GtkTreeView
	var tooltip1 *C.GtkTooltip
	var path1 *C.GtkTreePath
	var column1 *C.GtkTreeViewColumn
	var cell1 *C.GtkCellRenderer
	if this0 != nil {
		this1 = this0.InheritedFromGtkTreeView()
	}
	if tooltip0 != nil {
		tooltip1 = tooltip0.InheritedFromGtkTooltip()
	}
	path1 = (*C.GtkTreePath)(unsafe.Pointer(path0))
	if column0 != nil {
		column1 = column0.InheritedFromGtkTreeViewColumn()
	}
	if cell0 != nil {
		cell1 = cell0.InheritedFromGtkCellRenderer()
	}
	C.gtk_tree_view_set_tooltip_cell(this1, tooltip1, path1, column1, cell1)
}
func (this0 *TreeView) SetTooltipColumn(column0 int) {
	var this1 *C.GtkTreeView
	var column1 C.int32_t
	if this0 != nil {
		this1 = this0.InheritedFromGtkTreeView()
	}
	column1 = C.int32_t(column0)
	C.gtk_tree_view_set_tooltip_column(this1, column1)
}
func (this0 *TreeView) SetTooltipRow(tooltip0 TooltipLike, path0 *TreePath) {
	var this1 *C.GtkTreeView
	var tooltip1 *C.GtkTooltip
	var path1 *C.GtkTreePath
	if this0 != nil {
		this1 = this0.InheritedFromGtkTreeView()
	}
	if tooltip0 != nil {
		tooltip1 = tooltip0.InheritedFromGtkTooltip()
	}
	path1 = (*C.GtkTreePath)(unsafe.Pointer(path0))
	C.gtk_tree_view_set_tooltip_row(this1, tooltip1, path1)
}
// blacklisted: TreeView.set_vadjustment (method)
func (this0 *TreeView) UnsetRowsDragDest() {
	var this1 *C.GtkTreeView
	if this0 != nil {
		this1 = this0.InheritedFromGtkTreeView()
	}
	C.gtk_tree_view_unset_rows_drag_dest(this1)
}
func (this0 *TreeView) UnsetRowsDragSource() {
	var this1 *C.GtkTreeView
	if this0 != nil {
		this1 = this0.InheritedFromGtkTreeView()
	}
	C.gtk_tree_view_unset_rows_drag_source(this1)
}
type TreeViewColumnLike interface {
	gobject.InitiallyUnownedLike
	InheritedFromGtkTreeViewColumn() *C.GtkTreeViewColumn
}

type TreeViewColumn struct {
	gobject.InitiallyUnowned
	BuildableImpl
	CellLayoutImpl
}

func ToTreeViewColumn(objlike gobject.ObjectLike) *TreeViewColumn {
	c := objlike.InheritedFromGObject()
	if c == nil {
		return nil
	}
	t := (*TreeViewColumn)(nil).GetStaticType()
	obj := gobject.ObjectGrabIfType(unsafe.Pointer(c), t)
	if obj != nil {
		return (*TreeViewColumn)(obj)
	}
	panic("cannot cast to TreeViewColumn")
}

func (this0 *TreeViewColumn) InheritedFromGtkTreeViewColumn() *C.GtkTreeViewColumn {
	if this0 == nil {
		return nil
	}
	return (*C.GtkTreeViewColumn)(this0.C)
}

func (this0 *TreeViewColumn) GetStaticType() gobject.Type {
	return gobject.Type(C.gtk_tree_view_column_get_type())
}

func TreeViewColumnGetType() gobject.Type {
	return (*TreeViewColumn)(nil).GetStaticType()
}
func NewTreeViewColumn() *TreeViewColumn {
	ret1 := C.gtk_tree_view_column_new()
	var ret2 *TreeViewColumn
	ret2 = (*TreeViewColumn)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
func NewTreeViewColumnWithArea(area0 CellAreaLike) *TreeViewColumn {
	var area1 *C.GtkCellArea
	if area0 != nil {
		area1 = area0.InheritedFromGtkCellArea()
	}
	ret1 := C.gtk_tree_view_column_new_with_area(area1)
	var ret2 *TreeViewColumn
	ret2 = (*TreeViewColumn)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
func (this0 *TreeViewColumn) AddAttribute(cell_renderer0 CellRendererLike, attribute0 string, column0 int) {
	var this1 *C.GtkTreeViewColumn
	var cell_renderer1 *C.GtkCellRenderer
	var attribute1 *C.char
	var column1 C.int32_t
	if this0 != nil {
		this1 = this0.InheritedFromGtkTreeViewColumn()
	}
	if cell_renderer0 != nil {
		cell_renderer1 = cell_renderer0.InheritedFromGtkCellRenderer()
	}
	attribute1 = _GoStringToGString(attribute0)
	defer C.free(unsafe.Pointer(attribute1))
	column1 = C.int32_t(column0)
	C.gtk_tree_view_column_add_attribute(this1, cell_renderer1, attribute1, column1)
}
func (this0 *TreeViewColumn) CellGetPosition(cell_renderer0 CellRendererLike) (int, int, bool) {
	var this1 *C.GtkTreeViewColumn
	var cell_renderer1 *C.GtkCellRenderer
	var x_offset1 C.int32_t
	var width1 C.int32_t
	if this0 != nil {
		this1 = this0.InheritedFromGtkTreeViewColumn()
	}
	if cell_renderer0 != nil {
		cell_renderer1 = cell_renderer0.InheritedFromGtkCellRenderer()
	}
	ret1 := C.gtk_tree_view_column_cell_get_position(this1, cell_renderer1, &x_offset1, &width1)
	var x_offset2 int
	var width2 int
	var ret2 bool
	x_offset2 = int(x_offset1)
	width2 = int(width1)
	ret2 = ret1 != 0
	return x_offset2, width2, ret2
}
func (this0 *TreeViewColumn) CellGetSize(cell_area0 *cairo.RectangleInt) (int, int, int, int) {
	var this1 *C.GtkTreeViewColumn
	var cell_area1 *C.cairoRectangleInt
	var x_offset1 C.int32_t
	var y_offset1 C.int32_t
	var width1 C.int32_t
	var height1 C.int32_t
	if this0 != nil {
		this1 = this0.InheritedFromGtkTreeViewColumn()
	}
	cell_area1 = (*C.cairoRectangleInt)(unsafe.Pointer(cell_area0))
	C.gtk_tree_view_column_cell_get_size(this1, cell_area1, &x_offset1, &y_offset1, &width1, &height1)
	var x_offset2 int
	var y_offset2 int
	var width2 int
	var height2 int
	x_offset2 = int(x_offset1)
	y_offset2 = int(y_offset1)
	width2 = int(width1)
	height2 = int(height1)
	return x_offset2, y_offset2, width2, height2
}
func (this0 *TreeViewColumn) CellIsVisible() bool {
	var this1 *C.GtkTreeViewColumn
	if this0 != nil {
		this1 = this0.InheritedFromGtkTreeViewColumn()
	}
	ret1 := C.gtk_tree_view_column_cell_is_visible(this1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *TreeViewColumn) CellSetCellData(tree_model0 TreeModelLike, iter0 *TreeIter, is_expander0 bool, is_expanded0 bool) {
	var this1 *C.GtkTreeViewColumn
	var tree_model1 *C.GtkTreeModel
	var iter1 *C.GtkTreeIter
	var is_expander1 C.int
	var is_expanded1 C.int
	if this0 != nil {
		this1 = this0.InheritedFromGtkTreeViewColumn()
	}
	if tree_model0 != nil {
		tree_model1 = tree_model0.ImplementsGtkTreeModel()}
	iter1 = (*C.GtkTreeIter)(unsafe.Pointer(iter0))
	is_expander1 = _GoBoolToCBool(is_expander0)
	is_expanded1 = _GoBoolToCBool(is_expanded0)
	C.gtk_tree_view_column_cell_set_cell_data(this1, tree_model1, iter1, is_expander1, is_expanded1)
}
func (this0 *TreeViewColumn) Clear() {
	var this1 *C.GtkTreeViewColumn
	if this0 != nil {
		this1 = this0.InheritedFromGtkTreeViewColumn()
	}
	C.gtk_tree_view_column_clear(this1)
}
func (this0 *TreeViewColumn) ClearAttributes(cell_renderer0 CellRendererLike) {
	var this1 *C.GtkTreeViewColumn
	var cell_renderer1 *C.GtkCellRenderer
	if this0 != nil {
		this1 = this0.InheritedFromGtkTreeViewColumn()
	}
	if cell_renderer0 != nil {
		cell_renderer1 = cell_renderer0.InheritedFromGtkCellRenderer()
	}
	C.gtk_tree_view_column_clear_attributes(this1, cell_renderer1)
}
func (this0 *TreeViewColumn) Clicked() {
	var this1 *C.GtkTreeViewColumn
	if this0 != nil {
		this1 = this0.InheritedFromGtkTreeViewColumn()
	}
	C.gtk_tree_view_column_clicked(this1)
}
func (this0 *TreeViewColumn) FocusCell(cell0 CellRendererLike) {
	var this1 *C.GtkTreeViewColumn
	var cell1 *C.GtkCellRenderer
	if this0 != nil {
		this1 = this0.InheritedFromGtkTreeViewColumn()
	}
	if cell0 != nil {
		cell1 = cell0.InheritedFromGtkCellRenderer()
	}
	C.gtk_tree_view_column_focus_cell(this1, cell1)
}
func (this0 *TreeViewColumn) GetAlignment() float64 {
	var this1 *C.GtkTreeViewColumn
	if this0 != nil {
		this1 = this0.InheritedFromGtkTreeViewColumn()
	}
	ret1 := C.gtk_tree_view_column_get_alignment(this1)
	var ret2 float64
	ret2 = float64(ret1)
	return ret2
}
func (this0 *TreeViewColumn) GetButton() *Widget {
	var this1 *C.GtkTreeViewColumn
	if this0 != nil {
		this1 = this0.InheritedFromGtkTreeViewColumn()
	}
	ret1 := C.gtk_tree_view_column_get_button(this1)
	var ret2 *Widget
	ret2 = (*Widget)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
func (this0 *TreeViewColumn) GetClickable() bool {
	var this1 *C.GtkTreeViewColumn
	if this0 != nil {
		this1 = this0.InheritedFromGtkTreeViewColumn()
	}
	ret1 := C.gtk_tree_view_column_get_clickable(this1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *TreeViewColumn) GetExpand() bool {
	var this1 *C.GtkTreeViewColumn
	if this0 != nil {
		this1 = this0.InheritedFromGtkTreeViewColumn()
	}
	ret1 := C.gtk_tree_view_column_get_expand(this1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *TreeViewColumn) GetFixedWidth() int {
	var this1 *C.GtkTreeViewColumn
	if this0 != nil {
		this1 = this0.InheritedFromGtkTreeViewColumn()
	}
	ret1 := C.gtk_tree_view_column_get_fixed_width(this1)
	var ret2 int
	ret2 = int(ret1)
	return ret2
}
func (this0 *TreeViewColumn) GetMaxWidth() int {
	var this1 *C.GtkTreeViewColumn
	if this0 != nil {
		this1 = this0.InheritedFromGtkTreeViewColumn()
	}
	ret1 := C.gtk_tree_view_column_get_max_width(this1)
	var ret2 int
	ret2 = int(ret1)
	return ret2
}
func (this0 *TreeViewColumn) GetMinWidth() int {
	var this1 *C.GtkTreeViewColumn
	if this0 != nil {
		this1 = this0.InheritedFromGtkTreeViewColumn()
	}
	ret1 := C.gtk_tree_view_column_get_min_width(this1)
	var ret2 int
	ret2 = int(ret1)
	return ret2
}
func (this0 *TreeViewColumn) GetReorderable() bool {
	var this1 *C.GtkTreeViewColumn
	if this0 != nil {
		this1 = this0.InheritedFromGtkTreeViewColumn()
	}
	ret1 := C.gtk_tree_view_column_get_reorderable(this1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *TreeViewColumn) GetResizable() bool {
	var this1 *C.GtkTreeViewColumn
	if this0 != nil {
		this1 = this0.InheritedFromGtkTreeViewColumn()
	}
	ret1 := C.gtk_tree_view_column_get_resizable(this1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *TreeViewColumn) GetSizing() TreeViewColumnSizing {
	var this1 *C.GtkTreeViewColumn
	if this0 != nil {
		this1 = this0.InheritedFromGtkTreeViewColumn()
	}
	ret1 := C.gtk_tree_view_column_get_sizing(this1)
	var ret2 TreeViewColumnSizing
	ret2 = TreeViewColumnSizing(ret1)
	return ret2
}
func (this0 *TreeViewColumn) GetSortColumnID() int {
	var this1 *C.GtkTreeViewColumn
	if this0 != nil {
		this1 = this0.InheritedFromGtkTreeViewColumn()
	}
	ret1 := C.gtk_tree_view_column_get_sort_column_id(this1)
	var ret2 int
	ret2 = int(ret1)
	return ret2
}
func (this0 *TreeViewColumn) GetSortIndicator() bool {
	var this1 *C.GtkTreeViewColumn
	if this0 != nil {
		this1 = this0.InheritedFromGtkTreeViewColumn()
	}
	ret1 := C.gtk_tree_view_column_get_sort_indicator(this1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *TreeViewColumn) GetSortOrder() SortType {
	var this1 *C.GtkTreeViewColumn
	if this0 != nil {
		this1 = this0.InheritedFromGtkTreeViewColumn()
	}
	ret1 := C.gtk_tree_view_column_get_sort_order(this1)
	var ret2 SortType
	ret2 = SortType(ret1)
	return ret2
}
func (this0 *TreeViewColumn) GetSpacing() int {
	var this1 *C.GtkTreeViewColumn
	if this0 != nil {
		this1 = this0.InheritedFromGtkTreeViewColumn()
	}
	ret1 := C.gtk_tree_view_column_get_spacing(this1)
	var ret2 int
	ret2 = int(ret1)
	return ret2
}
func (this0 *TreeViewColumn) GetTitle() string {
	var this1 *C.GtkTreeViewColumn
	if this0 != nil {
		this1 = this0.InheritedFromGtkTreeViewColumn()
	}
	ret1 := C.gtk_tree_view_column_get_title(this1)
	var ret2 string
	ret2 = C.GoString(ret1)
	return ret2
}
func (this0 *TreeViewColumn) GetTreeView() *Widget {
	var this1 *C.GtkTreeViewColumn
	if this0 != nil {
		this1 = this0.InheritedFromGtkTreeViewColumn()
	}
	ret1 := C.gtk_tree_view_column_get_tree_view(this1)
	var ret2 *Widget
	ret2 = (*Widget)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
func (this0 *TreeViewColumn) GetVisible() bool {
	var this1 *C.GtkTreeViewColumn
	if this0 != nil {
		this1 = this0.InheritedFromGtkTreeViewColumn()
	}
	ret1 := C.gtk_tree_view_column_get_visible(this1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *TreeViewColumn) GetWidget() *Widget {
	var this1 *C.GtkTreeViewColumn
	if this0 != nil {
		this1 = this0.InheritedFromGtkTreeViewColumn()
	}
	ret1 := C.gtk_tree_view_column_get_widget(this1)
	var ret2 *Widget
	ret2 = (*Widget)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
func (this0 *TreeViewColumn) GetWidth() int {
	var this1 *C.GtkTreeViewColumn
	if this0 != nil {
		this1 = this0.InheritedFromGtkTreeViewColumn()
	}
	ret1 := C.gtk_tree_view_column_get_width(this1)
	var ret2 int
	ret2 = int(ret1)
	return ret2
}
func (this0 *TreeViewColumn) GetXOffset() int {
	var this1 *C.GtkTreeViewColumn
	if this0 != nil {
		this1 = this0.InheritedFromGtkTreeViewColumn()
	}
	ret1 := C.gtk_tree_view_column_get_x_offset(this1)
	var ret2 int
	ret2 = int(ret1)
	return ret2
}
func (this0 *TreeViewColumn) PackEnd(cell0 CellRendererLike, expand0 bool) {
	var this1 *C.GtkTreeViewColumn
	var cell1 *C.GtkCellRenderer
	var expand1 C.int
	if this0 != nil {
		this1 = this0.InheritedFromGtkTreeViewColumn()
	}
	if cell0 != nil {
		cell1 = cell0.InheritedFromGtkCellRenderer()
	}
	expand1 = _GoBoolToCBool(expand0)
	C.gtk_tree_view_column_pack_end(this1, cell1, expand1)
}
func (this0 *TreeViewColumn) PackStart(cell0 CellRendererLike, expand0 bool) {
	var this1 *C.GtkTreeViewColumn
	var cell1 *C.GtkCellRenderer
	var expand1 C.int
	if this0 != nil {
		this1 = this0.InheritedFromGtkTreeViewColumn()
	}
	if cell0 != nil {
		cell1 = cell0.InheritedFromGtkCellRenderer()
	}
	expand1 = _GoBoolToCBool(expand0)
	C.gtk_tree_view_column_pack_start(this1, cell1, expand1)
}
func (this0 *TreeViewColumn) QueueResize() {
	var this1 *C.GtkTreeViewColumn
	if this0 != nil {
		this1 = this0.InheritedFromGtkTreeViewColumn()
	}
	C.gtk_tree_view_column_queue_resize(this1)
}
func (this0 *TreeViewColumn) SetAlignment(xalign0 float64) {
	var this1 *C.GtkTreeViewColumn
	var xalign1 C.float
	if this0 != nil {
		this1 = this0.InheritedFromGtkTreeViewColumn()
	}
	xalign1 = C.float(xalign0)
	C.gtk_tree_view_column_set_alignment(this1, xalign1)
}
func (this0 *TreeViewColumn) SetCellDataFunc(cell_renderer0 CellRendererLike, func0 TreeCellDataFunc) {
	var this1 *C.GtkTreeViewColumn
	var cell_renderer1 *C.GtkCellRenderer
	var func1 unsafe.Pointer
	if this0 != nil {
		this1 = this0.InheritedFromGtkTreeViewColumn()
	}
	if cell_renderer0 != nil {
		cell_renderer1 = cell_renderer0.InheritedFromGtkCellRenderer()
	}
	if func0 != nil {
		func1 = unsafe.Pointer(&func0)}
	gobject.Holder.Grab(func1)
	C._gtk_tree_view_column_set_cell_data_func(this1, cell_renderer1, func1)
}
func (this0 *TreeViewColumn) SetClickable(clickable0 bool) {
	var this1 *C.GtkTreeViewColumn
	var clickable1 C.int
	if this0 != nil {
		this1 = this0.InheritedFromGtkTreeViewColumn()
	}
	clickable1 = _GoBoolToCBool(clickable0)
	C.gtk_tree_view_column_set_clickable(this1, clickable1)
}
func (this0 *TreeViewColumn) SetExpand(expand0 bool) {
	var this1 *C.GtkTreeViewColumn
	var expand1 C.int
	if this0 != nil {
		this1 = this0.InheritedFromGtkTreeViewColumn()
	}
	expand1 = _GoBoolToCBool(expand0)
	C.gtk_tree_view_column_set_expand(this1, expand1)
}
func (this0 *TreeViewColumn) SetFixedWidth(fixed_width0 int) {
	var this1 *C.GtkTreeViewColumn
	var fixed_width1 C.int32_t
	if this0 != nil {
		this1 = this0.InheritedFromGtkTreeViewColumn()
	}
	fixed_width1 = C.int32_t(fixed_width0)
	C.gtk_tree_view_column_set_fixed_width(this1, fixed_width1)
}
func (this0 *TreeViewColumn) SetMaxWidth(max_width0 int) {
	var this1 *C.GtkTreeViewColumn
	var max_width1 C.int32_t
	if this0 != nil {
		this1 = this0.InheritedFromGtkTreeViewColumn()
	}
	max_width1 = C.int32_t(max_width0)
	C.gtk_tree_view_column_set_max_width(this1, max_width1)
}
func (this0 *TreeViewColumn) SetMinWidth(min_width0 int) {
	var this1 *C.GtkTreeViewColumn
	var min_width1 C.int32_t
	if this0 != nil {
		this1 = this0.InheritedFromGtkTreeViewColumn()
	}
	min_width1 = C.int32_t(min_width0)
	C.gtk_tree_view_column_set_min_width(this1, min_width1)
}
func (this0 *TreeViewColumn) SetReorderable(reorderable0 bool) {
	var this1 *C.GtkTreeViewColumn
	var reorderable1 C.int
	if this0 != nil {
		this1 = this0.InheritedFromGtkTreeViewColumn()
	}
	reorderable1 = _GoBoolToCBool(reorderable0)
	C.gtk_tree_view_column_set_reorderable(this1, reorderable1)
}
func (this0 *TreeViewColumn) SetResizable(resizable0 bool) {
	var this1 *C.GtkTreeViewColumn
	var resizable1 C.int
	if this0 != nil {
		this1 = this0.InheritedFromGtkTreeViewColumn()
	}
	resizable1 = _GoBoolToCBool(resizable0)
	C.gtk_tree_view_column_set_resizable(this1, resizable1)
}
func (this0 *TreeViewColumn) SetSizing(type0 TreeViewColumnSizing) {
	var this1 *C.GtkTreeViewColumn
	var type1 C.GtkTreeViewColumnSizing
	if this0 != nil {
		this1 = this0.InheritedFromGtkTreeViewColumn()
	}
	type1 = C.GtkTreeViewColumnSizing(type0)
	C.gtk_tree_view_column_set_sizing(this1, type1)
}
func (this0 *TreeViewColumn) SetSortColumnID(sort_column_id0 int) {
	var this1 *C.GtkTreeViewColumn
	var sort_column_id1 C.int32_t
	if this0 != nil {
		this1 = this0.InheritedFromGtkTreeViewColumn()
	}
	sort_column_id1 = C.int32_t(sort_column_id0)
	C.gtk_tree_view_column_set_sort_column_id(this1, sort_column_id1)
}
func (this0 *TreeViewColumn) SetSortIndicator(setting0 bool) {
	var this1 *C.GtkTreeViewColumn
	var setting1 C.int
	if this0 != nil {
		this1 = this0.InheritedFromGtkTreeViewColumn()
	}
	setting1 = _GoBoolToCBool(setting0)
	C.gtk_tree_view_column_set_sort_indicator(this1, setting1)
}
func (this0 *TreeViewColumn) SetSortOrder(order0 SortType) {
	var this1 *C.GtkTreeViewColumn
	var order1 C.GtkSortType
	if this0 != nil {
		this1 = this0.InheritedFromGtkTreeViewColumn()
	}
	order1 = C.GtkSortType(order0)
	C.gtk_tree_view_column_set_sort_order(this1, order1)
}
func (this0 *TreeViewColumn) SetSpacing(spacing0 int) {
	var this1 *C.GtkTreeViewColumn
	var spacing1 C.int32_t
	if this0 != nil {
		this1 = this0.InheritedFromGtkTreeViewColumn()
	}
	spacing1 = C.int32_t(spacing0)
	C.gtk_tree_view_column_set_spacing(this1, spacing1)
}
func (this0 *TreeViewColumn) SetTitle(title0 string) {
	var this1 *C.GtkTreeViewColumn
	var title1 *C.char
	if this0 != nil {
		this1 = this0.InheritedFromGtkTreeViewColumn()
	}
	title1 = _GoStringToGString(title0)
	defer C.free(unsafe.Pointer(title1))
	C.gtk_tree_view_column_set_title(this1, title1)
}
func (this0 *TreeViewColumn) SetVisible(visible0 bool) {
	var this1 *C.GtkTreeViewColumn
	var visible1 C.int
	if this0 != nil {
		this1 = this0.InheritedFromGtkTreeViewColumn()
	}
	visible1 = _GoBoolToCBool(visible0)
	C.gtk_tree_view_column_set_visible(this1, visible1)
}
func (this0 *TreeViewColumn) SetWidget(widget0 WidgetLike) {
	var this1 *C.GtkTreeViewColumn
	var widget1 *C.GtkWidget
	if this0 != nil {
		this1 = this0.InheritedFromGtkTreeViewColumn()
	}
	if widget0 != nil {
		widget1 = widget0.InheritedFromGtkWidget()
	}
	C.gtk_tree_view_column_set_widget(this1, widget1)
}
type TreeViewColumnDropFunc func(tree_view *TreeView, column *TreeViewColumn, prev_column *TreeViewColumn, next_column *TreeViewColumn) bool
//export _GtkTreeViewColumnDropFunc_c_wrapper
func _GtkTreeViewColumnDropFunc_c_wrapper(tree_view0 unsafe.Pointer, column0 unsafe.Pointer, prev_column0 unsafe.Pointer, next_column0 unsafe.Pointer, data0 unsafe.Pointer) int32 {
	var tree_view1 *TreeView
	var column1 *TreeViewColumn
	var prev_column1 *TreeViewColumn
	var next_column1 *TreeViewColumn
	var data1 TreeViewColumnDropFunc
	tree_view1 = (*TreeView)(gobject.ObjectWrap(unsafe.Pointer((*C.GtkTreeView)(tree_view0)), true))
	column1 = (*TreeViewColumn)(gobject.ObjectWrap(unsafe.Pointer((*C.GtkTreeViewColumn)(column0)), true))
	prev_column1 = (*TreeViewColumn)(gobject.ObjectWrap(unsafe.Pointer((*C.GtkTreeViewColumn)(prev_column0)), true))
	next_column1 = (*TreeViewColumn)(gobject.ObjectWrap(unsafe.Pointer((*C.GtkTreeViewColumn)(next_column0)), true))
	data1 = *(*TreeViewColumnDropFunc)(data0)
	ret1 := data1(tree_view1, column1, prev_column1, next_column1)
	var ret2 C.int
	ret2 = _GoBoolToCBool(ret1)
	return (int32)(ret2)
}
//export _GtkTreeViewColumnDropFunc_c_wrapper_once
func _GtkTreeViewColumnDropFunc_c_wrapper_once(tree_view0 unsafe.Pointer, column0 unsafe.Pointer, prev_column0 unsafe.Pointer, next_column0 unsafe.Pointer, data0 unsafe.Pointer) int32 {
	ret := _GtkTreeViewColumnDropFunc_c_wrapper(tree_view0, column0, prev_column0, next_column0, data0)
	gobject.Holder.Release(data0)
	return ret
}
type TreeViewColumnSizing C.uint32_t
const (
	TreeViewColumnSizingGrowOnly TreeViewColumnSizing = 0
	TreeViewColumnSizingAutosize TreeViewColumnSizing = 1
	TreeViewColumnSizingFixed TreeViewColumnSizing = 2
)
type TreeViewDropPosition C.uint32_t
const (
	TreeViewDropPositionBefore TreeViewDropPosition = 0
	TreeViewDropPositionAfter TreeViewDropPosition = 1
	TreeViewDropPositionIntoOrBefore TreeViewDropPosition = 2
	TreeViewDropPositionIntoOrAfter TreeViewDropPosition = 3
)
type TreeViewGridLines C.uint32_t
const (
	TreeViewGridLinesNone TreeViewGridLines = 0
	TreeViewGridLinesHorizontal TreeViewGridLines = 1
	TreeViewGridLinesVertical TreeViewGridLines = 2
	TreeViewGridLinesBoth TreeViewGridLines = 3
)
type TreeViewMappingFunc func(tree_view *TreeView, path *TreePath)
//export _GtkTreeViewMappingFunc_c_wrapper
func _GtkTreeViewMappingFunc_c_wrapper(tree_view0 unsafe.Pointer, path0 unsafe.Pointer, user_data0 unsafe.Pointer) {
	var tree_view1 *TreeView
	var path1 *TreePath
	var user_data1 TreeViewMappingFunc
	tree_view1 = (*TreeView)(gobject.ObjectWrap(unsafe.Pointer((*C.GtkTreeView)(tree_view0)), true))
	path1 = (*TreePath)(unsafe.Pointer((*C.GtkTreePath)(path0)))
	user_data1 = *(*TreeViewMappingFunc)(user_data0)
	user_data1(tree_view1, path1)
}
//export _GtkTreeViewMappingFunc_c_wrapper_once
func _GtkTreeViewMappingFunc_c_wrapper_once(tree_view0 unsafe.Pointer, path0 unsafe.Pointer, user_data0 unsafe.Pointer) {
	_GtkTreeViewMappingFunc_c_wrapper(tree_view0, path0, user_data0)
	gobject.Holder.Release(user_data0)
}
type TreeViewRowSeparatorFunc func(model *TreeModel, iter *TreeIter) bool
//export _GtkTreeViewRowSeparatorFunc_c_wrapper
func _GtkTreeViewRowSeparatorFunc_c_wrapper(model0 unsafe.Pointer, iter0 unsafe.Pointer, data0 unsafe.Pointer) int32 {
	var model1 *TreeModel
	var iter1 *TreeIter
	var data1 TreeViewRowSeparatorFunc
	model1 = (*TreeModel)(gobject.ObjectWrap(unsafe.Pointer((*C.GtkTreeModel)(model0)), true))
	iter1 = (*TreeIter)(unsafe.Pointer((*C.GtkTreeIter)(iter0)))
	data1 = *(*TreeViewRowSeparatorFunc)(data0)
	ret1 := data1(model1, iter1)
	var ret2 C.int
	ret2 = _GoBoolToCBool(ret1)
	return (int32)(ret2)
}
//export _GtkTreeViewRowSeparatorFunc_c_wrapper_once
func _GtkTreeViewRowSeparatorFunc_c_wrapper_once(model0 unsafe.Pointer, iter0 unsafe.Pointer, data0 unsafe.Pointer) int32 {
	ret := _GtkTreeViewRowSeparatorFunc_c_wrapper(model0, iter0, data0)
	gobject.Holder.Release(data0)
	return ret
}
type TreeViewSearchEqualFunc func(model *TreeModel, column int, key string, iter *TreeIter) bool
//export _GtkTreeViewSearchEqualFunc_c_wrapper
func _GtkTreeViewSearchEqualFunc_c_wrapper(model0 unsafe.Pointer, column0 int32, key0 unsafe.Pointer, iter0 unsafe.Pointer, search_data0 unsafe.Pointer) int32 {
	var model1 *TreeModel
	var column1 int
	var key1 string
	var iter1 *TreeIter
	var search_data1 TreeViewSearchEqualFunc
	model1 = (*TreeModel)(gobject.ObjectWrap(unsafe.Pointer((*C.GtkTreeModel)(model0)), true))
	column1 = int((C.int32_t)(column0))
	key1 = C.GoString((*C.char)(key0))
	iter1 = (*TreeIter)(unsafe.Pointer((*C.GtkTreeIter)(iter0)))
	search_data1 = *(*TreeViewSearchEqualFunc)(search_data0)
	ret1 := search_data1(model1, column1, key1, iter1)
	var ret2 C.int
	ret2 = _GoBoolToCBool(ret1)
	return (int32)(ret2)
}
//export _GtkTreeViewSearchEqualFunc_c_wrapper_once
func _GtkTreeViewSearchEqualFunc_c_wrapper_once(model0 unsafe.Pointer, column0 int32, key0 unsafe.Pointer, iter0 unsafe.Pointer, search_data0 unsafe.Pointer) int32 {
	ret := _GtkTreeViewSearchEqualFunc_c_wrapper(model0, column0, key0, iter0, search_data0)
	gobject.Holder.Release(search_data0)
	return ret
}
type TreeViewSearchPositionFunc func(tree_view *TreeView, search_dialog *Widget)
//export _GtkTreeViewSearchPositionFunc_c_wrapper
func _GtkTreeViewSearchPositionFunc_c_wrapper(tree_view0 unsafe.Pointer, search_dialog0 unsafe.Pointer, user_data0 unsafe.Pointer) {
	var tree_view1 *TreeView
	var search_dialog1 *Widget
	var user_data1 TreeViewSearchPositionFunc
	tree_view1 = (*TreeView)(gobject.ObjectWrap(unsafe.Pointer((*C.GtkTreeView)(tree_view0)), true))
	search_dialog1 = (*Widget)(gobject.ObjectWrap(unsafe.Pointer((*C.GtkWidget)(search_dialog0)), true))
	user_data1 = *(*TreeViewSearchPositionFunc)(user_data0)
	user_data1(tree_view1, search_dialog1)
}
//export _GtkTreeViewSearchPositionFunc_c_wrapper_once
func _GtkTreeViewSearchPositionFunc_c_wrapper_once(tree_view0 unsafe.Pointer, search_dialog0 unsafe.Pointer, user_data0 unsafe.Pointer) {
	_GtkTreeViewSearchPositionFunc_c_wrapper(tree_view0, search_dialog0, user_data0)
	gobject.Holder.Release(user_data0)
}
type UIManagerLike interface {
	gobject.ObjectLike
	InheritedFromGtkUIManager() *C.GtkUIManager
}

type UIManager struct {
	gobject.Object
	BuildableImpl
}

func ToUIManager(objlike gobject.ObjectLike) *UIManager {
	c := objlike.InheritedFromGObject()
	if c == nil {
		return nil
	}
	t := (*UIManager)(nil).GetStaticType()
	obj := gobject.ObjectGrabIfType(unsafe.Pointer(c), t)
	if obj != nil {
		return (*UIManager)(obj)
	}
	panic("cannot cast to UIManager")
}

func (this0 *UIManager) InheritedFromGtkUIManager() *C.GtkUIManager {
	if this0 == nil {
		return nil
	}
	return (*C.GtkUIManager)(this0.C)
}

func (this0 *UIManager) GetStaticType() gobject.Type {
	return gobject.Type(C.gtk_ui_manager_get_type())
}

func UIManagerGetType() gobject.Type {
	return (*UIManager)(nil).GetStaticType()
}
func NewUIManager() *UIManager {
	ret1 := C.gtk_ui_manager_new()
	var ret2 *UIManager
	ret2 = (*UIManager)(gobject.ObjectWrap(unsafe.Pointer(ret1), false))
	return ret2
}
func (this0 *UIManager) AddUI(merge_id0 int, path0 string, name0 string, action0 string, type0 UIManagerItemType, top0 bool) {
	var this1 *C.GtkUIManager
	var merge_id1 C.uint32_t
	var path1 *C.char
	var name1 *C.char
	var action1 *C.char
	var type1 C.GtkUIManagerItemType
	var top1 C.int
	if this0 != nil {
		this1 = this0.InheritedFromGtkUIManager()
	}
	merge_id1 = C.uint32_t(merge_id0)
	path1 = _GoStringToGString(path0)
	defer C.free(unsafe.Pointer(path1))
	name1 = _GoStringToGString(name0)
	defer C.free(unsafe.Pointer(name1))
	action1 = _GoStringToGString(action0)
	defer C.free(unsafe.Pointer(action1))
	type1 = C.GtkUIManagerItemType(type0)
	top1 = _GoBoolToCBool(top0)
	C.gtk_ui_manager_add_ui(this1, merge_id1, path1, name1, action1, type1, top1)
}
func (this0 *UIManager) AddUIFromFile(filename0 string) (int, error) {
	var this1 *C.GtkUIManager
	var filename1 *C.char
	var err1 *C.GError
	if this0 != nil {
		this1 = this0.InheritedFromGtkUIManager()
	}
	filename1 = _GoStringToGString(filename0)
	defer C.free(unsafe.Pointer(filename1))
	ret1 := C.gtk_ui_manager_add_ui_from_file(this1, filename1, &err1)
	var ret2 int
	var err2 error
	ret2 = int(ret1)
	if err1 != nil {
		err2 = errors.New(C.GoString(((*_GError)(unsafe.Pointer(err1))).message))
		C.g_error_free(err1)
	}
	return ret2, err2
}
func (this0 *UIManager) AddUIFromString(buffer0 string, length0 int64) (int, error) {
	var this1 *C.GtkUIManager
	var buffer1 *C.char
	var length1 C.int64_t
	var err1 *C.GError
	if this0 != nil {
		this1 = this0.InheritedFromGtkUIManager()
	}
	buffer1 = _GoStringToGString(buffer0)
	defer C.free(unsafe.Pointer(buffer1))
	length1 = C.int64_t(length0)
	ret1 := C.gtk_ui_manager_add_ui_from_string(this1, buffer1, length1, &err1)
	var ret2 int
	var err2 error
	ret2 = int(ret1)
	if err1 != nil {
		err2 = errors.New(C.GoString(((*_GError)(unsafe.Pointer(err1))).message))
		C.g_error_free(err1)
	}
	return ret2, err2
}
func (this0 *UIManager) EnsureUpdate() {
	var this1 *C.GtkUIManager
	if this0 != nil {
		this1 = this0.InheritedFromGtkUIManager()
	}
	C.gtk_ui_manager_ensure_update(this1)
}
func (this0 *UIManager) GetAccelGroup() *AccelGroup {
	var this1 *C.GtkUIManager
	if this0 != nil {
		this1 = this0.InheritedFromGtkUIManager()
	}
	ret1 := C.gtk_ui_manager_get_accel_group(this1)
	var ret2 *AccelGroup
	ret2 = (*AccelGroup)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
func (this0 *UIManager) GetAction(path0 string) *Action {
	var this1 *C.GtkUIManager
	var path1 *C.char
	if this0 != nil {
		this1 = this0.InheritedFromGtkUIManager()
	}
	path1 = _GoStringToGString(path0)
	defer C.free(unsafe.Pointer(path1))
	ret1 := C.gtk_ui_manager_get_action(this1, path1)
	var ret2 *Action
	ret2 = (*Action)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
func (this0 *UIManager) GetActionGroups() []*ActionGroup {
	var this1 *C.GtkUIManager
	if this0 != nil {
		this1 = this0.InheritedFromGtkUIManager()
	}
	ret1 := C.gtk_ui_manager_get_action_groups(this1)
	var ret2 []*ActionGroup
	for iter := (*_GList)(unsafe.Pointer(ret1)); iter != nil; iter = iter.next {
		var elt *ActionGroup
		elt = (*ActionGroup)(gobject.ObjectWrap(unsafe.Pointer((*C.GtkActionGroup)(iter.data)), true))
		ret2 = append(ret2, elt)
	}
	return ret2
}
func (this0 *UIManager) GetAddTearoffs() bool {
	var this1 *C.GtkUIManager
	if this0 != nil {
		this1 = this0.InheritedFromGtkUIManager()
	}
	ret1 := C.gtk_ui_manager_get_add_tearoffs(this1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *UIManager) GetToplevels(types0 UIManagerItemType) []*Widget {
	var this1 *C.GtkUIManager
	var types1 C.GtkUIManagerItemType
	if this0 != nil {
		this1 = this0.InheritedFromGtkUIManager()
	}
	types1 = C.GtkUIManagerItemType(types0)
	ret1 := C.gtk_ui_manager_get_toplevels(this1, types1)
	var ret2 []*Widget
	for iter := (*_GSList)(unsafe.Pointer(ret1)); iter != nil; iter = iter.next {
		var elt *Widget
		elt = (*Widget)(gobject.ObjectWrap(unsafe.Pointer((*C.GtkWidget)(iter.data)), true))
		ret2 = append(ret2, elt)
	}
	return ret2
}
func (this0 *UIManager) GetUI() string {
	var this1 *C.GtkUIManager
	if this0 != nil {
		this1 = this0.InheritedFromGtkUIManager()
	}
	ret1 := C.gtk_ui_manager_get_ui(this1)
	var ret2 string
	ret2 = C.GoString(ret1)
	C.g_free(unsafe.Pointer(ret1))
	return ret2
}
func (this0 *UIManager) GetWidget(path0 string) *Widget {
	var this1 *C.GtkUIManager
	var path1 *C.char
	if this0 != nil {
		this1 = this0.InheritedFromGtkUIManager()
	}
	path1 = _GoStringToGString(path0)
	defer C.free(unsafe.Pointer(path1))
	ret1 := C.gtk_ui_manager_get_widget(this1, path1)
	var ret2 *Widget
	ret2 = (*Widget)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
func (this0 *UIManager) InsertActionGroup(action_group0 ActionGroupLike, pos0 int) {
	var this1 *C.GtkUIManager
	var action_group1 *C.GtkActionGroup
	var pos1 C.int32_t
	if this0 != nil {
		this1 = this0.InheritedFromGtkUIManager()
	}
	if action_group0 != nil {
		action_group1 = action_group0.InheritedFromGtkActionGroup()
	}
	pos1 = C.int32_t(pos0)
	C.gtk_ui_manager_insert_action_group(this1, action_group1, pos1)
}
func (this0 *UIManager) NewMergeID() int {
	var this1 *C.GtkUIManager
	if this0 != nil {
		this1 = this0.InheritedFromGtkUIManager()
	}
	ret1 := C.gtk_ui_manager_new_merge_id(this1)
	var ret2 int
	ret2 = int(ret1)
	return ret2
}
func (this0 *UIManager) RemoveActionGroup(action_group0 ActionGroupLike) {
	var this1 *C.GtkUIManager
	var action_group1 *C.GtkActionGroup
	if this0 != nil {
		this1 = this0.InheritedFromGtkUIManager()
	}
	if action_group0 != nil {
		action_group1 = action_group0.InheritedFromGtkActionGroup()
	}
	C.gtk_ui_manager_remove_action_group(this1, action_group1)
}
func (this0 *UIManager) RemoveUI(merge_id0 int) {
	var this1 *C.GtkUIManager
	var merge_id1 C.uint32_t
	if this0 != nil {
		this1 = this0.InheritedFromGtkUIManager()
	}
	merge_id1 = C.uint32_t(merge_id0)
	C.gtk_ui_manager_remove_ui(this1, merge_id1)
}
func (this0 *UIManager) SetAddTearoffs(add_tearoffs0 bool) {
	var this1 *C.GtkUIManager
	var add_tearoffs1 C.int
	if this0 != nil {
		this1 = this0.InheritedFromGtkUIManager()
	}
	add_tearoffs1 = _GoBoolToCBool(add_tearoffs0)
	C.gtk_ui_manager_set_add_tearoffs(this1, add_tearoffs1)
}
type UIManagerItemType C.uint32_t
const (
	UIManagerItemTypeAuto UIManagerItemType = 0
	UIManagerItemTypeMenubar UIManagerItemType = 1
	UIManagerItemTypeMenu UIManagerItemType = 2
	UIManagerItemTypeToolbar UIManagerItemType = 4
	UIManagerItemTypePlaceholder UIManagerItemType = 8
	UIManagerItemTypePopup UIManagerItemType = 16
	UIManagerItemTypeMenuitem UIManagerItemType = 32
	UIManagerItemTypeToolitem UIManagerItemType = 64
	UIManagerItemTypeSeparator UIManagerItemType = 128
	UIManagerItemTypeAccelerator UIManagerItemType = 256
	UIManagerItemTypePopupWithAccels UIManagerItemType = 512
)
type Unit C.uint32_t
const (
	UnitPixel Unit = 0
	UnitPoints Unit = 1
	UnitInch Unit = 2
	UnitMm Unit = 3
)
type VBoxLike interface {
	BoxLike
	InheritedFromGtkVBox() *C.GtkVBox
}

type VBox struct {
	Box
	atk.ImplementorIfaceImpl
	BuildableImpl
	OrientableImpl
}

func ToVBox(objlike gobject.ObjectLike) *VBox {
	c := objlike.InheritedFromGObject()
	if c == nil {
		return nil
	}
	t := (*VBox)(nil).GetStaticType()
	obj := gobject.ObjectGrabIfType(unsafe.Pointer(c), t)
	if obj != nil {
		return (*VBox)(obj)
	}
	panic("cannot cast to VBox")
}

func (this0 *VBox) InheritedFromGtkVBox() *C.GtkVBox {
	if this0 == nil {
		return nil
	}
	return (*C.GtkVBox)(this0.C)
}

func (this0 *VBox) GetStaticType() gobject.Type {
	return gobject.Type(C.gtk_vbox_get_type())
}

func VBoxGetType() gobject.Type {
	return (*VBox)(nil).GetStaticType()
}
func NewVBox(homogeneous0 bool, spacing0 int) *VBox {
	var homogeneous1 C.int
	var spacing1 C.int32_t
	homogeneous1 = _GoBoolToCBool(homogeneous0)
	spacing1 = C.int32_t(spacing0)
	ret1 := C.gtk_vbox_new(homogeneous1, spacing1)
	var ret2 *VBox
	ret2 = (*VBox)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
type VButtonBoxLike interface {
	ButtonBoxLike
	InheritedFromGtkVButtonBox() *C.GtkVButtonBox
}

type VButtonBox struct {
	ButtonBox
	atk.ImplementorIfaceImpl
	BuildableImpl
	OrientableImpl
}

func ToVButtonBox(objlike gobject.ObjectLike) *VButtonBox {
	c := objlike.InheritedFromGObject()
	if c == nil {
		return nil
	}
	t := (*VButtonBox)(nil).GetStaticType()
	obj := gobject.ObjectGrabIfType(unsafe.Pointer(c), t)
	if obj != nil {
		return (*VButtonBox)(obj)
	}
	panic("cannot cast to VButtonBox")
}

func (this0 *VButtonBox) InheritedFromGtkVButtonBox() *C.GtkVButtonBox {
	if this0 == nil {
		return nil
	}
	return (*C.GtkVButtonBox)(this0.C)
}

func (this0 *VButtonBox) GetStaticType() gobject.Type {
	return gobject.Type(C.gtk_vbutton_box_get_type())
}

func VButtonBoxGetType() gobject.Type {
	return (*VButtonBox)(nil).GetStaticType()
}
func NewVButtonBox() *VButtonBox {
	ret1 := C.gtk_vbutton_box_new()
	var ret2 *VButtonBox
	ret2 = (*VButtonBox)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
type VPanedLike interface {
	PanedLike
	InheritedFromGtkVPaned() *C.GtkVPaned
}

type VPaned struct {
	Paned
	atk.ImplementorIfaceImpl
	BuildableImpl
	OrientableImpl
}

func ToVPaned(objlike gobject.ObjectLike) *VPaned {
	c := objlike.InheritedFromGObject()
	if c == nil {
		return nil
	}
	t := (*VPaned)(nil).GetStaticType()
	obj := gobject.ObjectGrabIfType(unsafe.Pointer(c), t)
	if obj != nil {
		return (*VPaned)(obj)
	}
	panic("cannot cast to VPaned")
}

func (this0 *VPaned) InheritedFromGtkVPaned() *C.GtkVPaned {
	if this0 == nil {
		return nil
	}
	return (*C.GtkVPaned)(this0.C)
}

func (this0 *VPaned) GetStaticType() gobject.Type {
	return gobject.Type(C.gtk_vpaned_get_type())
}

func VPanedGetType() gobject.Type {
	return (*VPaned)(nil).GetStaticType()
}
func NewVPaned() *VPaned {
	ret1 := C.gtk_vpaned_new()
	var ret2 *VPaned
	ret2 = (*VPaned)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
type VScaleLike interface {
	ScaleLike
	InheritedFromGtkVScale() *C.GtkVScale
}

type VScale struct {
	Scale
	atk.ImplementorIfaceImpl
	BuildableImpl
	OrientableImpl
}

func ToVScale(objlike gobject.ObjectLike) *VScale {
	c := objlike.InheritedFromGObject()
	if c == nil {
		return nil
	}
	t := (*VScale)(nil).GetStaticType()
	obj := gobject.ObjectGrabIfType(unsafe.Pointer(c), t)
	if obj != nil {
		return (*VScale)(obj)
	}
	panic("cannot cast to VScale")
}

func (this0 *VScale) InheritedFromGtkVScale() *C.GtkVScale {
	if this0 == nil {
		return nil
	}
	return (*C.GtkVScale)(this0.C)
}

func (this0 *VScale) GetStaticType() gobject.Type {
	return gobject.Type(C.gtk_vscale_get_type())
}

func VScaleGetType() gobject.Type {
	return (*VScale)(nil).GetStaticType()
}
func NewVScale(adjustment0 AdjustmentLike) *VScale {
	var adjustment1 *C.GtkAdjustment
	if adjustment0 != nil {
		adjustment1 = adjustment0.InheritedFromGtkAdjustment()
	}
	ret1 := C.gtk_vscale_new(adjustment1)
	var ret2 *VScale
	ret2 = (*VScale)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
func NewVScaleWithRange(min0 float64, max0 float64, step0 float64) *VScale {
	var min1 C.double
	var max1 C.double
	var step1 C.double
	min1 = C.double(min0)
	max1 = C.double(max0)
	step1 = C.double(step0)
	ret1 := C.gtk_vscale_new_with_range(min1, max1, step1)
	var ret2 *VScale
	ret2 = (*VScale)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
type VScrollbarLike interface {
	ScrollbarLike
	InheritedFromGtkVScrollbar() *C.GtkVScrollbar
}

type VScrollbar struct {
	Scrollbar
	atk.ImplementorIfaceImpl
	BuildableImpl
	OrientableImpl
}

func ToVScrollbar(objlike gobject.ObjectLike) *VScrollbar {
	c := objlike.InheritedFromGObject()
	if c == nil {
		return nil
	}
	t := (*VScrollbar)(nil).GetStaticType()
	obj := gobject.ObjectGrabIfType(unsafe.Pointer(c), t)
	if obj != nil {
		return (*VScrollbar)(obj)
	}
	panic("cannot cast to VScrollbar")
}

func (this0 *VScrollbar) InheritedFromGtkVScrollbar() *C.GtkVScrollbar {
	if this0 == nil {
		return nil
	}
	return (*C.GtkVScrollbar)(this0.C)
}

func (this0 *VScrollbar) GetStaticType() gobject.Type {
	return gobject.Type(C.gtk_vscrollbar_get_type())
}

func VScrollbarGetType() gobject.Type {
	return (*VScrollbar)(nil).GetStaticType()
}
func NewVScrollbar(adjustment0 AdjustmentLike) *VScrollbar {
	var adjustment1 *C.GtkAdjustment
	if adjustment0 != nil {
		adjustment1 = adjustment0.InheritedFromGtkAdjustment()
	}
	ret1 := C.gtk_vscrollbar_new(adjustment1)
	var ret2 *VScrollbar
	ret2 = (*VScrollbar)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
type VSeparatorLike interface {
	SeparatorLike
	InheritedFromGtkVSeparator() *C.GtkVSeparator
}

type VSeparator struct {
	Separator
	atk.ImplementorIfaceImpl
	BuildableImpl
	OrientableImpl
}

func ToVSeparator(objlike gobject.ObjectLike) *VSeparator {
	c := objlike.InheritedFromGObject()
	if c == nil {
		return nil
	}
	t := (*VSeparator)(nil).GetStaticType()
	obj := gobject.ObjectGrabIfType(unsafe.Pointer(c), t)
	if obj != nil {
		return (*VSeparator)(obj)
	}
	panic("cannot cast to VSeparator")
}

func (this0 *VSeparator) InheritedFromGtkVSeparator() *C.GtkVSeparator {
	if this0 == nil {
		return nil
	}
	return (*C.GtkVSeparator)(this0.C)
}

func (this0 *VSeparator) GetStaticType() gobject.Type {
	return gobject.Type(C.gtk_vseparator_get_type())
}

func VSeparatorGetType() gobject.Type {
	return (*VSeparator)(nil).GetStaticType()
}
func NewVSeparator() *VSeparator {
	ret1 := C.gtk_vseparator_new()
	var ret2 *VSeparator
	ret2 = (*VSeparator)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
type ViewportLike interface {
	BinLike
	InheritedFromGtkViewport() *C.GtkViewport
}

type Viewport struct {
	Bin
	atk.ImplementorIfaceImpl
	BuildableImpl
	ScrollableImpl
}

func ToViewport(objlike gobject.ObjectLike) *Viewport {
	c := objlike.InheritedFromGObject()
	if c == nil {
		return nil
	}
	t := (*Viewport)(nil).GetStaticType()
	obj := gobject.ObjectGrabIfType(unsafe.Pointer(c), t)
	if obj != nil {
		return (*Viewport)(obj)
	}
	panic("cannot cast to Viewport")
}

func (this0 *Viewport) InheritedFromGtkViewport() *C.GtkViewport {
	if this0 == nil {
		return nil
	}
	return (*C.GtkViewport)(this0.C)
}

func (this0 *Viewport) GetStaticType() gobject.Type {
	return gobject.Type(C.gtk_viewport_get_type())
}

func ViewportGetType() gobject.Type {
	return (*Viewport)(nil).GetStaticType()
}
func NewViewport(hadjustment0 AdjustmentLike, vadjustment0 AdjustmentLike) *Viewport {
	var hadjustment1 *C.GtkAdjustment
	var vadjustment1 *C.GtkAdjustment
	if hadjustment0 != nil {
		hadjustment1 = hadjustment0.InheritedFromGtkAdjustment()
	}
	if vadjustment0 != nil {
		vadjustment1 = vadjustment0.InheritedFromGtkAdjustment()
	}
	ret1 := C.gtk_viewport_new(hadjustment1, vadjustment1)
	var ret2 *Viewport
	ret2 = (*Viewport)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
func (this0 *Viewport) GetBinWindow() *gdk.Window {
	var this1 *C.GtkViewport
	if this0 != nil {
		this1 = this0.InheritedFromGtkViewport()
	}
	ret1 := C.gtk_viewport_get_bin_window(this1)
	var ret2 *gdk.Window
	ret2 = (*gdk.Window)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
func (this0 *Viewport) GetHAdjustment() *Adjustment {
	var this1 *C.GtkViewport
	if this0 != nil {
		this1 = this0.InheritedFromGtkViewport()
	}
	ret1 := C.gtk_viewport_get_hadjustment(this1)
	var ret2 *Adjustment
	ret2 = (*Adjustment)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
func (this0 *Viewport) GetShadowType() ShadowType {
	var this1 *C.GtkViewport
	if this0 != nil {
		this1 = this0.InheritedFromGtkViewport()
	}
	ret1 := C.gtk_viewport_get_shadow_type(this1)
	var ret2 ShadowType
	ret2 = ShadowType(ret1)
	return ret2
}
func (this0 *Viewport) GetVAdjustment() *Adjustment {
	var this1 *C.GtkViewport
	if this0 != nil {
		this1 = this0.InheritedFromGtkViewport()
	}
	ret1 := C.gtk_viewport_get_vadjustment(this1)
	var ret2 *Adjustment
	ret2 = (*Adjustment)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
func (this0 *Viewport) GetViewWindow() *gdk.Window {
	var this1 *C.GtkViewport
	if this0 != nil {
		this1 = this0.InheritedFromGtkViewport()
	}
	ret1 := C.gtk_viewport_get_view_window(this1)
	var ret2 *gdk.Window
	ret2 = (*gdk.Window)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
func (this0 *Viewport) SetHAdjustment(adjustment0 AdjustmentLike) {
	var this1 *C.GtkViewport
	var adjustment1 *C.GtkAdjustment
	if this0 != nil {
		this1 = this0.InheritedFromGtkViewport()
	}
	if adjustment0 != nil {
		adjustment1 = adjustment0.InheritedFromGtkAdjustment()
	}
	C.gtk_viewport_set_hadjustment(this1, adjustment1)
}
func (this0 *Viewport) SetShadowType(type0 ShadowType) {
	var this1 *C.GtkViewport
	var type1 C.GtkShadowType
	if this0 != nil {
		this1 = this0.InheritedFromGtkViewport()
	}
	type1 = C.GtkShadowType(type0)
	C.gtk_viewport_set_shadow_type(this1, type1)
}
func (this0 *Viewport) SetVAdjustment(adjustment0 AdjustmentLike) {
	var this1 *C.GtkViewport
	var adjustment1 *C.GtkAdjustment
	if this0 != nil {
		this1 = this0.InheritedFromGtkViewport()
	}
	if adjustment0 != nil {
		adjustment1 = adjustment0.InheritedFromGtkAdjustment()
	}
	C.gtk_viewport_set_vadjustment(this1, adjustment1)
}
type VolumeButtonLike interface {
	ScaleButtonLike
	InheritedFromGtkVolumeButton() *C.GtkVolumeButton
}

type VolumeButton struct {
	ScaleButton
	atk.ImplementorIfaceImpl
	ActivatableImpl
	BuildableImpl
	OrientableImpl
}

func ToVolumeButton(objlike gobject.ObjectLike) *VolumeButton {
	c := objlike.InheritedFromGObject()
	if c == nil {
		return nil
	}
	t := (*VolumeButton)(nil).GetStaticType()
	obj := gobject.ObjectGrabIfType(unsafe.Pointer(c), t)
	if obj != nil {
		return (*VolumeButton)(obj)
	}
	panic("cannot cast to VolumeButton")
}

func (this0 *VolumeButton) InheritedFromGtkVolumeButton() *C.GtkVolumeButton {
	if this0 == nil {
		return nil
	}
	return (*C.GtkVolumeButton)(this0.C)
}

func (this0 *VolumeButton) GetStaticType() gobject.Type {
	return gobject.Type(C.gtk_volume_button_get_type())
}

func VolumeButtonGetType() gobject.Type {
	return (*VolumeButton)(nil).GetStaticType()
}
func NewVolumeButton() *VolumeButton {
	ret1 := C.gtk_volume_button_new()
	var ret2 *VolumeButton
	ret2 = (*VolumeButton)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
type WidgetLike interface {
	gobject.InitiallyUnownedLike
	InheritedFromGtkWidget() *C.GtkWidget
}

type Widget struct {
	gobject.InitiallyUnowned
	atk.ImplementorIfaceImpl
	BuildableImpl
}

func ToWidget(objlike gobject.ObjectLike) *Widget {
	c := objlike.InheritedFromGObject()
	if c == nil {
		return nil
	}
	t := (*Widget)(nil).GetStaticType()
	obj := gobject.ObjectGrabIfType(unsafe.Pointer(c), t)
	if obj != nil {
		return (*Widget)(obj)
	}
	panic("cannot cast to Widget")
}

func (this0 *Widget) InheritedFromGtkWidget() *C.GtkWidget {
	if this0 == nil {
		return nil
	}
	return (*C.GtkWidget)(this0.C)
}

func (this0 *Widget) GetStaticType() gobject.Type {
	return gobject.Type(C.gtk_widget_get_type())
}

func WidgetGetType() gobject.Type {
	return (*Widget)(nil).GetStaticType()
}
func WidgetGetDefaultDirection() TextDirection {
	ret1 := C.gtk_widget_get_default_direction()
	var ret2 TextDirection
	ret2 = TextDirection(ret1)
	return ret2
}
func WidgetGetDefaultStyle() *Style {
	ret1 := C.gtk_widget_get_default_style()
	var ret2 *Style
	ret2 = (*Style)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
func WidgetPopCompositeChild() {
	C.gtk_widget_pop_composite_child()
}
func WidgetPushCompositeChild() {
	C.gtk_widget_push_composite_child()
}
func WidgetSetDefaultDirection(dir0 TextDirection) {
	var dir1 C.GtkTextDirection
	dir1 = C.GtkTextDirection(dir0)
	C.gtk_widget_set_default_direction(dir1)
}
func (this0 *Widget) Activate() bool {
	var this1 *C.GtkWidget
	if this0 != nil {
		this1 = this0.InheritedFromGtkWidget()
	}
	ret1 := C.gtk_widget_activate(this1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *Widget) AddAccelerator(accel_signal0 string, accel_group0 AccelGroupLike, accel_key0 int, accel_mods0 gdk.ModifierType, accel_flags0 AccelFlags) {
	var this1 *C.GtkWidget
	var accel_signal1 *C.char
	var accel_group1 *C.GtkAccelGroup
	var accel_key1 C.uint32_t
	var accel_mods1 C.GdkModifierType
	var accel_flags1 C.GtkAccelFlags
	if this0 != nil {
		this1 = this0.InheritedFromGtkWidget()
	}
	accel_signal1 = _GoStringToGString(accel_signal0)
	defer C.free(unsafe.Pointer(accel_signal1))
	if accel_group0 != nil {
		accel_group1 = accel_group0.InheritedFromGtkAccelGroup()
	}
	accel_key1 = C.uint32_t(accel_key0)
	accel_mods1 = C.GdkModifierType(accel_mods0)
	accel_flags1 = C.GtkAccelFlags(accel_flags0)
	C.gtk_widget_add_accelerator(this1, accel_signal1, accel_group1, accel_key1, accel_mods1, accel_flags1)
}
func (this0 *Widget) AddDeviceEvents(device0 gdk.DeviceLike, events0 gdk.EventMask) {
	var this1 *C.GtkWidget
	var device1 *C.GdkDevice
	var events1 C.GdkEventMask
	if this0 != nil {
		this1 = this0.InheritedFromGtkWidget()
	}
	if device0 != nil {
		device1 = device0.InheritedFromGdkDevice()
	}
	events1 = C.GdkEventMask(events0)
	C.gtk_widget_add_device_events(this1, device1, events1)
}
func (this0 *Widget) AddEvents(events0 int) {
	var this1 *C.GtkWidget
	var events1 C.int32_t
	if this0 != nil {
		this1 = this0.InheritedFromGtkWidget()
	}
	events1 = C.int32_t(events0)
	C.gtk_widget_add_events(this1, events1)
}
func (this0 *Widget) AddMnemonicLabel(label0 WidgetLike) {
	var this1 *C.GtkWidget
	var label1 *C.GtkWidget
	if this0 != nil {
		this1 = this0.InheritedFromGtkWidget()
	}
	if label0 != nil {
		label1 = label0.InheritedFromGtkWidget()
	}
	C.gtk_widget_add_mnemonic_label(this1, label1)
}
func (this0 *Widget) CanActivateAccel(signal_id0 int) bool {
	var this1 *C.GtkWidget
	var signal_id1 C.uint32_t
	if this0 != nil {
		this1 = this0.InheritedFromGtkWidget()
	}
	signal_id1 = C.uint32_t(signal_id0)
	ret1 := C.gtk_widget_can_activate_accel(this1, signal_id1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *Widget) ChildFocus(direction0 DirectionType) bool {
	var this1 *C.GtkWidget
	var direction1 C.GtkDirectionType
	if this0 != nil {
		this1 = this0.InheritedFromGtkWidget()
	}
	direction1 = C.GtkDirectionType(direction0)
	ret1 := C.gtk_widget_child_focus(this1, direction1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *Widget) ChildNotify(child_property0 string) {
	var this1 *C.GtkWidget
	var child_property1 *C.char
	if this0 != nil {
		this1 = this0.InheritedFromGtkWidget()
	}
	child_property1 = _GoStringToGString(child_property0)
	defer C.free(unsafe.Pointer(child_property1))
	C.gtk_widget_child_notify(this1, child_property1)
}
func (this0 *Widget) ClassPath() (int, string, string) {
	var this1 *C.GtkWidget
	var path_length1 C.uint32_t
	var path1 *C.char
	var path_reversed1 *C.char
	if this0 != nil {
		this1 = this0.InheritedFromGtkWidget()
	}
	C.gtk_widget_class_path(this1, &path_length1, &path1, &path_reversed1)
	var path_length2 int
	var path2 string
	var path_reversed2 string
	path_length2 = int(path_length1)
	path2 = C.GoString(path1)
	C.g_free(unsafe.Pointer(path1))
	path_reversed2 = C.GoString(path_reversed1)
	C.g_free(unsafe.Pointer(path_reversed1))
	return path_length2, path2, path_reversed2
}
func (this0 *Widget) ComputeExpand(orientation0 Orientation) bool {
	var this1 *C.GtkWidget
	var orientation1 C.GtkOrientation
	if this0 != nil {
		this1 = this0.InheritedFromGtkWidget()
	}
	orientation1 = C.GtkOrientation(orientation0)
	ret1 := C.gtk_widget_compute_expand(this1, orientation1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *Widget) CreatePangoContext() *pango.Context {
	var this1 *C.GtkWidget
	if this0 != nil {
		this1 = this0.InheritedFromGtkWidget()
	}
	ret1 := C.gtk_widget_create_pango_context(this1)
	var ret2 *pango.Context
	ret2 = (*pango.Context)(gobject.ObjectWrap(unsafe.Pointer(ret1), false))
	return ret2
}
func (this0 *Widget) CreatePangoLayout(text0 string) *pango.Layout {
	var this1 *C.GtkWidget
	var text1 *C.char
	if this0 != nil {
		this1 = this0.InheritedFromGtkWidget()
	}
	text1 = _GoStringToGString(text0)
	defer C.free(unsafe.Pointer(text1))
	ret1 := C.gtk_widget_create_pango_layout(this1, text1)
	var ret2 *pango.Layout
	ret2 = (*pango.Layout)(gobject.ObjectWrap(unsafe.Pointer(ret1), false))
	return ret2
}
func (this0 *Widget) Destroy() {
	var this1 *C.GtkWidget
	if this0 != nil {
		this1 = this0.InheritedFromGtkWidget()
	}
	C.gtk_widget_destroy(this1)
}
func (this0 *Widget) Destroyed(widget_pointer0 WidgetLike) *Widget {
	var this1 *C.GtkWidget
	var widget_pointer1 *C.GtkWidget
	if this0 != nil {
		this1 = this0.InheritedFromGtkWidget()
	}
	if widget_pointer0 != nil {
		widget_pointer1 = widget_pointer0.InheritedFromGtkWidget()
	}
	C.gtk_widget_destroyed(this1, &widget_pointer1)
	var widget_pointer2 *Widget
	widget_pointer2 = (*Widget)(gobject.ObjectWrap(unsafe.Pointer(widget_pointer1), true))
	return widget_pointer2
}
func (this0 *Widget) DeviceIsShadowed(device0 gdk.DeviceLike) bool {
	var this1 *C.GtkWidget
	var device1 *C.GdkDevice
	if this0 != nil {
		this1 = this0.InheritedFromGtkWidget()
	}
	if device0 != nil {
		device1 = device0.InheritedFromGdkDevice()
	}
	ret1 := C.gtk_widget_device_is_shadowed(this1, device1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *Widget) DragBegin(targets0 *TargetList, actions0 gdk.DragAction, button0 int, event0 *gdk.Event) *gdk.DragContext {
	var this1 *C.GtkWidget
	var targets1 *C.GtkTargetList
	var actions1 C.GdkDragAction
	var button1 C.int32_t
	var event1 *C.GdkEvent
	if this0 != nil {
		this1 = this0.InheritedFromGtkWidget()
	}
	targets1 = (*C.GtkTargetList)(unsafe.Pointer(targets0))
	actions1 = C.GdkDragAction(actions0)
	button1 = C.int32_t(button0)
	ret1 := C.gtk_drag_begin(this1, targets1, actions1, button1, event1)
	var ret2 *gdk.DragContext
	ret2 = (*gdk.DragContext)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
func (this0 *Widget) DragCheckThreshold(start_x0 int, start_y0 int, current_x0 int, current_y0 int) bool {
	var this1 *C.GtkWidget
	var start_x1 C.int32_t
	var start_y1 C.int32_t
	var current_x1 C.int32_t
	var current_y1 C.int32_t
	if this0 != nil {
		this1 = this0.InheritedFromGtkWidget()
	}
	start_x1 = C.int32_t(start_x0)
	start_y1 = C.int32_t(start_y0)
	current_x1 = C.int32_t(current_x0)
	current_y1 = C.int32_t(current_y0)
	ret1 := C.gtk_drag_check_threshold(this1, start_x1, start_y1, current_x1, current_y1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *Widget) DragDestAddImageTargets() {
	var this1 *C.GtkWidget
	if this0 != nil {
		this1 = this0.InheritedFromGtkWidget()
	}
	C.gtk_drag_dest_add_image_targets(this1)
}
func (this0 *Widget) DragDestAddTextTargets() {
	var this1 *C.GtkWidget
	if this0 != nil {
		this1 = this0.InheritedFromGtkWidget()
	}
	C.gtk_drag_dest_add_text_targets(this1)
}
func (this0 *Widget) DragDestAddURITargets() {
	var this1 *C.GtkWidget
	if this0 != nil {
		this1 = this0.InheritedFromGtkWidget()
	}
	C.gtk_drag_dest_add_uri_targets(this1)
}
func (this0 *Widget) DragDestFindTarget(context0 gdk.DragContextLike, target_list0 *TargetList) gdk.Atom {
	var this1 *C.GtkWidget
	var context1 *C.GdkDragContext
	var target_list1 *C.GtkTargetList
	if this0 != nil {
		this1 = this0.InheritedFromGtkWidget()
	}
	if context0 != nil {
		context1 = context0.InheritedFromGdkDragContext()
	}
	target_list1 = (*C.GtkTargetList)(unsafe.Pointer(target_list0))
	ret1 := C.gtk_drag_dest_find_target(this1, context1, target_list1)
	var ret2 gdk.Atom
	ret2 = gdk.Atom{unsafe.Pointer(ret1)}
	return ret2
}
func (this0 *Widget) DragDestGetTargetList() *TargetList {
	var this1 *C.GtkWidget
	if this0 != nil {
		this1 = this0.InheritedFromGtkWidget()
	}
	ret1 := C.gtk_drag_dest_get_target_list(this1)
	var ret2 *TargetList
	ret2 = (*TargetList)(unsafe.Pointer(ret1))
	return ret2
}
func (this0 *Widget) DragDestGetTrackMotion() bool {
	var this1 *C.GtkWidget
	if this0 != nil {
		this1 = this0.InheritedFromGtkWidget()
	}
	ret1 := C.gtk_drag_dest_get_track_motion(this1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *Widget) DragDestSet(flags0 DestDefaults, targets0 []TargetEntry, actions0 gdk.DragAction) {
	var this1 *C.GtkWidget
	var flags1 C.GtkDestDefaults
	var targets1 *C.GtkTargetEntry
	var n_targets1 C.int32_t
	var actions1 C.GdkDragAction
	if this0 != nil {
		this1 = this0.InheritedFromGtkWidget()
	}
	flags1 = C.GtkDestDefaults(flags0)
	targets1 = (*C.GtkTargetEntry)(C.malloc(C.size_t(int(unsafe.Sizeof(*targets1)) * len(targets0))))
	defer C.free(unsafe.Pointer(targets1))
	for i, e := range targets0 {
		(*(*[999999]C.GtkTargetEntry)(unsafe.Pointer(targets1)))[i] = *(*C.GtkTargetEntry)(unsafe.Pointer(&e))
	}
	n_targets1 = C.int32_t(len(targets0))
	actions1 = C.GdkDragAction(actions0)
	C.gtk_drag_dest_set(this1, flags1, targets1, n_targets1, actions1)
}
func (this0 *Widget) DragDestSetProxy(proxy_window0 gdk.WindowLike, protocol0 gdk.DragProtocol, use_coordinates0 bool) {
	var this1 *C.GtkWidget
	var proxy_window1 *C.GdkWindow
	var protocol1 C.GdkDragProtocol
	var use_coordinates1 C.int
	if this0 != nil {
		this1 = this0.InheritedFromGtkWidget()
	}
	if proxy_window0 != nil {
		proxy_window1 = proxy_window0.InheritedFromGdkWindow()
	}
	protocol1 = C.GdkDragProtocol(protocol0)
	use_coordinates1 = _GoBoolToCBool(use_coordinates0)
	C.gtk_drag_dest_set_proxy(this1, proxy_window1, protocol1, use_coordinates1)
}
func (this0 *Widget) DragDestSetTargetList(target_list0 *TargetList) {
	var this1 *C.GtkWidget
	var target_list1 *C.GtkTargetList
	if this0 != nil {
		this1 = this0.InheritedFromGtkWidget()
	}
	target_list1 = (*C.GtkTargetList)(unsafe.Pointer(target_list0))
	C.gtk_drag_dest_set_target_list(this1, target_list1)
}
func (this0 *Widget) DragDestSetTrackMotion(track_motion0 bool) {
	var this1 *C.GtkWidget
	var track_motion1 C.int
	if this0 != nil {
		this1 = this0.InheritedFromGtkWidget()
	}
	track_motion1 = _GoBoolToCBool(track_motion0)
	C.gtk_drag_dest_set_track_motion(this1, track_motion1)
}
func (this0 *Widget) DragDestUnset() {
	var this1 *C.GtkWidget
	if this0 != nil {
		this1 = this0.InheritedFromGtkWidget()
	}
	C.gtk_drag_dest_unset(this1)
}
func (this0 *Widget) DragGetData(context0 gdk.DragContextLike, target0 gdk.Atom, time_0 int) {
	var this1 *C.GtkWidget
	var context1 *C.GdkDragContext
	var target1 C.GdkAtom
	var time_1 C.uint32_t
	if this0 != nil {
		this1 = this0.InheritedFromGtkWidget()
	}
	if context0 != nil {
		context1 = context0.InheritedFromGdkDragContext()
	}
	target1 = *(*C.GdkAtom)(unsafe.Pointer(&target0))
	time_1 = C.uint32_t(time_0)
	C.gtk_drag_get_data(this1, context1, target1, time_1)
}
func (this0 *Widget) DragHighlight() {
	var this1 *C.GtkWidget
	if this0 != nil {
		this1 = this0.InheritedFromGtkWidget()
	}
	C.gtk_drag_highlight(this1)
}
func (this0 *Widget) DragSourceAddImageTargets() {
	var this1 *C.GtkWidget
	if this0 != nil {
		this1 = this0.InheritedFromGtkWidget()
	}
	C.gtk_drag_source_add_image_targets(this1)
}
func (this0 *Widget) DragSourceAddTextTargets() {
	var this1 *C.GtkWidget
	if this0 != nil {
		this1 = this0.InheritedFromGtkWidget()
	}
	C.gtk_drag_source_add_text_targets(this1)
}
func (this0 *Widget) DragSourceAddURITargets() {
	var this1 *C.GtkWidget
	if this0 != nil {
		this1 = this0.InheritedFromGtkWidget()
	}
	C.gtk_drag_source_add_uri_targets(this1)
}
func (this0 *Widget) DragSourceGetTargetList() *TargetList {
	var this1 *C.GtkWidget
	if this0 != nil {
		this1 = this0.InheritedFromGtkWidget()
	}
	ret1 := C.gtk_drag_source_get_target_list(this1)
	var ret2 *TargetList
	ret2 = (*TargetList)(unsafe.Pointer(ret1))
	return ret2
}
func (this0 *Widget) DragSourceSet(start_button_mask0 gdk.ModifierType, targets0 []TargetEntry, actions0 gdk.DragAction) {
	var this1 *C.GtkWidget
	var start_button_mask1 C.GdkModifierType
	var targets1 *C.GtkTargetEntry
	var n_targets1 C.int32_t
	var actions1 C.GdkDragAction
	if this0 != nil {
		this1 = this0.InheritedFromGtkWidget()
	}
	start_button_mask1 = C.GdkModifierType(start_button_mask0)
	targets1 = (*C.GtkTargetEntry)(C.malloc(C.size_t(int(unsafe.Sizeof(*targets1)) * len(targets0))))
	defer C.free(unsafe.Pointer(targets1))
	for i, e := range targets0 {
		(*(*[999999]C.GtkTargetEntry)(unsafe.Pointer(targets1)))[i] = *(*C.GtkTargetEntry)(unsafe.Pointer(&e))
	}
	n_targets1 = C.int32_t(len(targets0))
	actions1 = C.GdkDragAction(actions0)
	C.gtk_drag_source_set(this1, start_button_mask1, targets1, n_targets1, actions1)
}
func (this0 *Widget) DragSourceSetIconGIcon(icon0 gio.IconLike) {
	var this1 *C.GtkWidget
	var icon1 *C.GIcon
	if this0 != nil {
		this1 = this0.InheritedFromGtkWidget()
	}
	if icon0 != nil {
		icon1 = icon0.ImplementsGIcon()}
	C.gtk_drag_source_set_icon_gicon(this1, icon1)
}
func (this0 *Widget) DragSourceSetIconName(icon_name0 string) {
	var this1 *C.GtkWidget
	var icon_name1 *C.char
	if this0 != nil {
		this1 = this0.InheritedFromGtkWidget()
	}
	icon_name1 = _GoStringToGString(icon_name0)
	defer C.free(unsafe.Pointer(icon_name1))
	C.gtk_drag_source_set_icon_name(this1, icon_name1)
}
func (this0 *Widget) DragSourceSetIconPixbuf(pixbuf0 gdkpixbuf.PixbufLike) {
	var this1 *C.GtkWidget
	var pixbuf1 *C.GdkPixbuf
	if this0 != nil {
		this1 = this0.InheritedFromGtkWidget()
	}
	if pixbuf0 != nil {
		pixbuf1 = pixbuf0.InheritedFromGdkPixbuf()
	}
	C.gtk_drag_source_set_icon_pixbuf(this1, pixbuf1)
}
func (this0 *Widget) DragSourceSetIconStock(stock_id0 string) {
	var this1 *C.GtkWidget
	var stock_id1 *C.char
	if this0 != nil {
		this1 = this0.InheritedFromGtkWidget()
	}
	stock_id1 = _GoStringToGString(stock_id0)
	defer C.free(unsafe.Pointer(stock_id1))
	C.gtk_drag_source_set_icon_stock(this1, stock_id1)
}
func (this0 *Widget) DragSourceSetTargetList(target_list0 *TargetList) {
	var this1 *C.GtkWidget
	var target_list1 *C.GtkTargetList
	if this0 != nil {
		this1 = this0.InheritedFromGtkWidget()
	}
	target_list1 = (*C.GtkTargetList)(unsafe.Pointer(target_list0))
	C.gtk_drag_source_set_target_list(this1, target_list1)
}
func (this0 *Widget) DragSourceUnset() {
	var this1 *C.GtkWidget
	if this0 != nil {
		this1 = this0.InheritedFromGtkWidget()
	}
	C.gtk_drag_source_unset(this1)
}
func (this0 *Widget) DragUnhighlight() {
	var this1 *C.GtkWidget
	if this0 != nil {
		this1 = this0.InheritedFromGtkWidget()
	}
	C.gtk_drag_unhighlight(this1)
}
func (this0 *Widget) Draw(cr0 *cairo.Context) {
	var this1 *C.GtkWidget
	var cr1 *C.cairoContext
	if this0 != nil {
		this1 = this0.InheritedFromGtkWidget()
	}
	if cr0 != nil {
		cr1 = (*C.cairoContext)(cr0.C)
	}
	C.gtk_widget_draw(this1, cr1)
}
func (this0 *Widget) EnsureStyle() {
	var this1 *C.GtkWidget
	if this0 != nil {
		this1 = this0.InheritedFromGtkWidget()
	}
	C.gtk_widget_ensure_style(this1)
}
func (this0 *Widget) ErrorBell() {
	var this1 *C.GtkWidget
	if this0 != nil {
		this1 = this0.InheritedFromGtkWidget()
	}
	C.gtk_widget_error_bell(this1)
}
func (this0 *Widget) Event(event0 *gdk.Event) bool {
	var this1 *C.GtkWidget
	var event1 *C.GdkEvent
	if this0 != nil {
		this1 = this0.InheritedFromGtkWidget()
	}
	ret1 := C.gtk_widget_event(this1, event1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *Widget) FreezeChildNotify() {
	var this1 *C.GtkWidget
	if this0 != nil {
		this1 = this0.InheritedFromGtkWidget()
	}
	C.gtk_widget_freeze_child_notify(this1)
}
func (this0 *Widget) GetAccessible() *atk.Object {
	var this1 *C.GtkWidget
	if this0 != nil {
		this1 = this0.InheritedFromGtkWidget()
	}
	ret1 := C.gtk_widget_get_accessible(this1)
	var ret2 *atk.Object
	ret2 = (*atk.Object)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
func (this0 *Widget) GetAllocatedHeight() int {
	var this1 *C.GtkWidget
	if this0 != nil {
		this1 = this0.InheritedFromGtkWidget()
	}
	ret1 := C.gtk_widget_get_allocated_height(this1)
	var ret2 int
	ret2 = int(ret1)
	return ret2
}
func (this0 *Widget) GetAllocatedWidth() int {
	var this1 *C.GtkWidget
	if this0 != nil {
		this1 = this0.InheritedFromGtkWidget()
	}
	ret1 := C.gtk_widget_get_allocated_width(this1)
	var ret2 int
	ret2 = int(ret1)
	return ret2
}
func (this0 *Widget) GetAllocation() cairo.RectangleInt {
	var this1 *C.GtkWidget
	var allocation1 C.cairoRectangleInt
	if this0 != nil {
		this1 = this0.InheritedFromGtkWidget()
	}
	C.gtk_widget_get_allocation(this1, &allocation1)
	var allocation2 cairo.RectangleInt
	allocation2 = *(*cairo.RectangleInt)(unsafe.Pointer(&allocation1))
	return allocation2
}
func (this0 *Widget) GetAncestor(widget_type0 gobject.Type) *Widget {
	var this1 *C.GtkWidget
	var widget_type1 C.GType
	if this0 != nil {
		this1 = this0.InheritedFromGtkWidget()
	}
	widget_type1 = C.GType(widget_type0)
	ret1 := C.gtk_widget_get_ancestor(this1, widget_type1)
	var ret2 *Widget
	ret2 = (*Widget)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
func (this0 *Widget) GetAppPaintable() bool {
	var this1 *C.GtkWidget
	if this0 != nil {
		this1 = this0.InheritedFromGtkWidget()
	}
	ret1 := C.gtk_widget_get_app_paintable(this1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *Widget) GetCanDefault() bool {
	var this1 *C.GtkWidget
	if this0 != nil {
		this1 = this0.InheritedFromGtkWidget()
	}
	ret1 := C.gtk_widget_get_can_default(this1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *Widget) GetCanFocus() bool {
	var this1 *C.GtkWidget
	if this0 != nil {
		this1 = this0.InheritedFromGtkWidget()
	}
	ret1 := C.gtk_widget_get_can_focus(this1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *Widget) GetChildRequisition() Requisition {
	var this1 *C.GtkWidget
	var requisition1 C.GtkRequisition
	if this0 != nil {
		this1 = this0.InheritedFromGtkWidget()
	}
	C.gtk_widget_get_child_requisition(this1, &requisition1)
	var requisition2 Requisition
	requisition2 = *(*Requisition)(unsafe.Pointer(&requisition1))
	return requisition2
}
func (this0 *Widget) GetChildVisible() bool {
	var this1 *C.GtkWidget
	if this0 != nil {
		this1 = this0.InheritedFromGtkWidget()
	}
	ret1 := C.gtk_widget_get_child_visible(this1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *Widget) GetClipboard(selection0 gdk.Atom) *Clipboard {
	var this1 *C.GtkWidget
	var selection1 C.GdkAtom
	if this0 != nil {
		this1 = this0.InheritedFromGtkWidget()
	}
	selection1 = *(*C.GdkAtom)(unsafe.Pointer(&selection0))
	ret1 := C.gtk_widget_get_clipboard(this1, selection1)
	var ret2 *Clipboard
	ret2 = (*Clipboard)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
func (this0 *Widget) GetCompositeName() string {
	var this1 *C.GtkWidget
	if this0 != nil {
		this1 = this0.InheritedFromGtkWidget()
	}
	ret1 := C.gtk_widget_get_composite_name(this1)
	var ret2 string
	ret2 = C.GoString(ret1)
	C.g_free(unsafe.Pointer(ret1))
	return ret2
}
func (this0 *Widget) GetDeviceEnabled(device0 gdk.DeviceLike) bool {
	var this1 *C.GtkWidget
	var device1 *C.GdkDevice
	if this0 != nil {
		this1 = this0.InheritedFromGtkWidget()
	}
	if device0 != nil {
		device1 = device0.InheritedFromGdkDevice()
	}
	ret1 := C.gtk_widget_get_device_enabled(this1, device1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *Widget) GetDeviceEvents(device0 gdk.DeviceLike) gdk.EventMask {
	var this1 *C.GtkWidget
	var device1 *C.GdkDevice
	if this0 != nil {
		this1 = this0.InheritedFromGtkWidget()
	}
	if device0 != nil {
		device1 = device0.InheritedFromGdkDevice()
	}
	ret1 := C.gtk_widget_get_device_events(this1, device1)
	var ret2 gdk.EventMask
	ret2 = gdk.EventMask(ret1)
	return ret2
}
func (this0 *Widget) GetDirection() TextDirection {
	var this1 *C.GtkWidget
	if this0 != nil {
		this1 = this0.InheritedFromGtkWidget()
	}
	ret1 := C.gtk_widget_get_direction(this1)
	var ret2 TextDirection
	ret2 = TextDirection(ret1)
	return ret2
}
func (this0 *Widget) GetDisplay() *gdk.Display {
	var this1 *C.GtkWidget
	if this0 != nil {
		this1 = this0.InheritedFromGtkWidget()
	}
	ret1 := C.gtk_widget_get_display(this1)
	var ret2 *gdk.Display
	ret2 = (*gdk.Display)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
func (this0 *Widget) GetDoubleBuffered() bool {
	var this1 *C.GtkWidget
	if this0 != nil {
		this1 = this0.InheritedFromGtkWidget()
	}
	ret1 := C.gtk_widget_get_double_buffered(this1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *Widget) GetEvents() int {
	var this1 *C.GtkWidget
	if this0 != nil {
		this1 = this0.InheritedFromGtkWidget()
	}
	ret1 := C.gtk_widget_get_events(this1)
	var ret2 int
	ret2 = int(ret1)
	return ret2
}
func (this0 *Widget) GetHAlign() Align {
	var this1 *C.GtkWidget
	if this0 != nil {
		this1 = this0.InheritedFromGtkWidget()
	}
	ret1 := C.gtk_widget_get_halign(this1)
	var ret2 Align
	ret2 = Align(ret1)
	return ret2
}
func (this0 *Widget) GetHasTooltip() bool {
	var this1 *C.GtkWidget
	if this0 != nil {
		this1 = this0.InheritedFromGtkWidget()
	}
	ret1 := C.gtk_widget_get_has_tooltip(this1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *Widget) GetHasWindow() bool {
	var this1 *C.GtkWidget
	if this0 != nil {
		this1 = this0.InheritedFromGtkWidget()
	}
	ret1 := C.gtk_widget_get_has_window(this1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *Widget) GetHExpand() bool {
	var this1 *C.GtkWidget
	if this0 != nil {
		this1 = this0.InheritedFromGtkWidget()
	}
	ret1 := C.gtk_widget_get_hexpand(this1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *Widget) GetHExpandSet() bool {
	var this1 *C.GtkWidget
	if this0 != nil {
		this1 = this0.InheritedFromGtkWidget()
	}
	ret1 := C.gtk_widget_get_hexpand_set(this1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *Widget) GetMapped() bool {
	var this1 *C.GtkWidget
	if this0 != nil {
		this1 = this0.InheritedFromGtkWidget()
	}
	ret1 := C.gtk_widget_get_mapped(this1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *Widget) GetMarginBottom() int {
	var this1 *C.GtkWidget
	if this0 != nil {
		this1 = this0.InheritedFromGtkWidget()
	}
	ret1 := C.gtk_widget_get_margin_bottom(this1)
	var ret2 int
	ret2 = int(ret1)
	return ret2
}
func (this0 *Widget) GetMarginLeft() int {
	var this1 *C.GtkWidget
	if this0 != nil {
		this1 = this0.InheritedFromGtkWidget()
	}
	ret1 := C.gtk_widget_get_margin_left(this1)
	var ret2 int
	ret2 = int(ret1)
	return ret2
}
func (this0 *Widget) GetMarginRight() int {
	var this1 *C.GtkWidget
	if this0 != nil {
		this1 = this0.InheritedFromGtkWidget()
	}
	ret1 := C.gtk_widget_get_margin_right(this1)
	var ret2 int
	ret2 = int(ret1)
	return ret2
}
func (this0 *Widget) GetMarginTop() int {
	var this1 *C.GtkWidget
	if this0 != nil {
		this1 = this0.InheritedFromGtkWidget()
	}
	ret1 := C.gtk_widget_get_margin_top(this1)
	var ret2 int
	ret2 = int(ret1)
	return ret2
}
func (this0 *Widget) GetModifierStyle() *RcStyle {
	var this1 *C.GtkWidget
	if this0 != nil {
		this1 = this0.InheritedFromGtkWidget()
	}
	ret1 := C.gtk_widget_get_modifier_style(this1)
	var ret2 *RcStyle
	ret2 = (*RcStyle)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
func (this0 *Widget) GetName() string {
	var this1 *C.GtkWidget
	if this0 != nil {
		this1 = this0.InheritedFromGtkWidget()
	}
	ret1 := C.gtk_widget_get_name(this1)
	var ret2 string
	ret2 = C.GoString(ret1)
	return ret2
}
func (this0 *Widget) GetNoShowAll() bool {
	var this1 *C.GtkWidget
	if this0 != nil {
		this1 = this0.InheritedFromGtkWidget()
	}
	ret1 := C.gtk_widget_get_no_show_all(this1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *Widget) GetPangoContext() *pango.Context {
	var this1 *C.GtkWidget
	if this0 != nil {
		this1 = this0.InheritedFromGtkWidget()
	}
	ret1 := C.gtk_widget_get_pango_context(this1)
	var ret2 *pango.Context
	ret2 = (*pango.Context)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
func (this0 *Widget) GetParent() *Widget {
	var this1 *C.GtkWidget
	if this0 != nil {
		this1 = this0.InheritedFromGtkWidget()
	}
	ret1 := C.gtk_widget_get_parent(this1)
	var ret2 *Widget
	ret2 = (*Widget)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
func (this0 *Widget) GetParentWindow() *gdk.Window {
	var this1 *C.GtkWidget
	if this0 != nil {
		this1 = this0.InheritedFromGtkWidget()
	}
	ret1 := C.gtk_widget_get_parent_window(this1)
	var ret2 *gdk.Window
	ret2 = (*gdk.Window)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
func (this0 *Widget) GetPath() *WidgetPath {
	var this1 *C.GtkWidget
	if this0 != nil {
		this1 = this0.InheritedFromGtkWidget()
	}
	ret1 := C.gtk_widget_get_path(this1)
	var ret2 *WidgetPath
	ret2 = (*WidgetPath)(unsafe.Pointer(ret1))
	return ret2
}
func (this0 *Widget) GetPointer() (int, int) {
	var this1 *C.GtkWidget
	var x1 C.int32_t
	var y1 C.int32_t
	if this0 != nil {
		this1 = this0.InheritedFromGtkWidget()
	}
	C.gtk_widget_get_pointer(this1, &x1, &y1)
	var x2 int
	var y2 int
	x2 = int(x1)
	y2 = int(y1)
	return x2, y2
}
func (this0 *Widget) GetPreferredHeight() (int, int) {
	var this1 *C.GtkWidget
	var minimum_height1 C.int32_t
	var natural_height1 C.int32_t
	if this0 != nil {
		this1 = this0.InheritedFromGtkWidget()
	}
	C.gtk_widget_get_preferred_height(this1, &minimum_height1, &natural_height1)
	var minimum_height2 int
	var natural_height2 int
	minimum_height2 = int(minimum_height1)
	natural_height2 = int(natural_height1)
	return minimum_height2, natural_height2
}
func (this0 *Widget) GetPreferredHeightForWidth(width0 int) (int, int) {
	var this1 *C.GtkWidget
	var width1 C.int32_t
	var minimum_height1 C.int32_t
	var natural_height1 C.int32_t
	if this0 != nil {
		this1 = this0.InheritedFromGtkWidget()
	}
	width1 = C.int32_t(width0)
	C.gtk_widget_get_preferred_height_for_width(this1, width1, &minimum_height1, &natural_height1)
	var minimum_height2 int
	var natural_height2 int
	minimum_height2 = int(minimum_height1)
	natural_height2 = int(natural_height1)
	return minimum_height2, natural_height2
}
func (this0 *Widget) GetPreferredSize() (Requisition, Requisition) {
	var this1 *C.GtkWidget
	var minimum_size1 C.GtkRequisition
	var natural_size1 C.GtkRequisition
	if this0 != nil {
		this1 = this0.InheritedFromGtkWidget()
	}
	C.gtk_widget_get_preferred_size(this1, &minimum_size1, &natural_size1)
	var minimum_size2 Requisition
	var natural_size2 Requisition
	minimum_size2 = *(*Requisition)(unsafe.Pointer(&minimum_size1))
	natural_size2 = *(*Requisition)(unsafe.Pointer(&natural_size1))
	return minimum_size2, natural_size2
}
func (this0 *Widget) GetPreferredWidth() (int, int) {
	var this1 *C.GtkWidget
	var minimum_width1 C.int32_t
	var natural_width1 C.int32_t
	if this0 != nil {
		this1 = this0.InheritedFromGtkWidget()
	}
	C.gtk_widget_get_preferred_width(this1, &minimum_width1, &natural_width1)
	var minimum_width2 int
	var natural_width2 int
	minimum_width2 = int(minimum_width1)
	natural_width2 = int(natural_width1)
	return minimum_width2, natural_width2
}
func (this0 *Widget) GetPreferredWidthForHeight(height0 int) (int, int) {
	var this1 *C.GtkWidget
	var height1 C.int32_t
	var minimum_width1 C.int32_t
	var natural_width1 C.int32_t
	if this0 != nil {
		this1 = this0.InheritedFromGtkWidget()
	}
	height1 = C.int32_t(height0)
	C.gtk_widget_get_preferred_width_for_height(this1, height1, &minimum_width1, &natural_width1)
	var minimum_width2 int
	var natural_width2 int
	minimum_width2 = int(minimum_width1)
	natural_width2 = int(natural_width1)
	return minimum_width2, natural_width2
}
func (this0 *Widget) GetRealized() bool {
	var this1 *C.GtkWidget
	if this0 != nil {
		this1 = this0.InheritedFromGtkWidget()
	}
	ret1 := C.gtk_widget_get_realized(this1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *Widget) GetReceivesDefault() bool {
	var this1 *C.GtkWidget
	if this0 != nil {
		this1 = this0.InheritedFromGtkWidget()
	}
	ret1 := C.gtk_widget_get_receives_default(this1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *Widget) GetRequestMode() SizeRequestMode {
	var this1 *C.GtkWidget
	if this0 != nil {
		this1 = this0.InheritedFromGtkWidget()
	}
	ret1 := C.gtk_widget_get_request_mode(this1)
	var ret2 SizeRequestMode
	ret2 = SizeRequestMode(ret1)
	return ret2
}
func (this0 *Widget) GetRequisition() Requisition {
	var this1 *C.GtkWidget
	var requisition1 C.GtkRequisition
	if this0 != nil {
		this1 = this0.InheritedFromGtkWidget()
	}
	C.gtk_widget_get_requisition(this1, &requisition1)
	var requisition2 Requisition
	requisition2 = *(*Requisition)(unsafe.Pointer(&requisition1))
	return requisition2
}
func (this0 *Widget) GetRootWindow() *gdk.Window {
	var this1 *C.GtkWidget
	if this0 != nil {
		this1 = this0.InheritedFromGtkWidget()
	}
	ret1 := C.gtk_widget_get_root_window(this1)
	var ret2 *gdk.Window
	ret2 = (*gdk.Window)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
func (this0 *Widget) GetScreen() *gdk.Screen {
	var this1 *C.GtkWidget
	if this0 != nil {
		this1 = this0.InheritedFromGtkWidget()
	}
	ret1 := C.gtk_widget_get_screen(this1)
	var ret2 *gdk.Screen
	ret2 = (*gdk.Screen)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
func (this0 *Widget) GetSensitive() bool {
	var this1 *C.GtkWidget
	if this0 != nil {
		this1 = this0.InheritedFromGtkWidget()
	}
	ret1 := C.gtk_widget_get_sensitive(this1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *Widget) GetSettings() *Settings {
	var this1 *C.GtkWidget
	if this0 != nil {
		this1 = this0.InheritedFromGtkWidget()
	}
	ret1 := C.gtk_widget_get_settings(this1)
	var ret2 *Settings
	ret2 = (*Settings)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
func (this0 *Widget) GetSizeRequest() (int, int) {
	var this1 *C.GtkWidget
	var width1 C.int32_t
	var height1 C.int32_t
	if this0 != nil {
		this1 = this0.InheritedFromGtkWidget()
	}
	C.gtk_widget_get_size_request(this1, &width1, &height1)
	var width2 int
	var height2 int
	width2 = int(width1)
	height2 = int(height1)
	return width2, height2
}
func (this0 *Widget) GetState() StateType {
	var this1 *C.GtkWidget
	if this0 != nil {
		this1 = this0.InheritedFromGtkWidget()
	}
	ret1 := C.gtk_widget_get_state(this1)
	var ret2 StateType
	ret2 = StateType(ret1)
	return ret2
}
func (this0 *Widget) GetStateFlags() StateFlags {
	var this1 *C.GtkWidget
	if this0 != nil {
		this1 = this0.InheritedFromGtkWidget()
	}
	ret1 := C.gtk_widget_get_state_flags(this1)
	var ret2 StateFlags
	ret2 = StateFlags(ret1)
	return ret2
}
func (this0 *Widget) GetStyle() *Style {
	var this1 *C.GtkWidget
	if this0 != nil {
		this1 = this0.InheritedFromGtkWidget()
	}
	ret1 := C.gtk_widget_get_style(this1)
	var ret2 *Style
	ret2 = (*Style)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
func (this0 *Widget) GetStyleContext() *StyleContext {
	var this1 *C.GtkWidget
	if this0 != nil {
		this1 = this0.InheritedFromGtkWidget()
	}
	ret1 := C.gtk_widget_get_style_context(this1)
	var ret2 *StyleContext
	ret2 = (*StyleContext)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
func (this0 *Widget) GetSupportMultidevice() bool {
	var this1 *C.GtkWidget
	if this0 != nil {
		this1 = this0.InheritedFromGtkWidget()
	}
	ret1 := C.gtk_widget_get_support_multidevice(this1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *Widget) GetTooltipMarkup() string {
	var this1 *C.GtkWidget
	if this0 != nil {
		this1 = this0.InheritedFromGtkWidget()
	}
	ret1 := C.gtk_widget_get_tooltip_markup(this1)
	var ret2 string
	ret2 = C.GoString(ret1)
	C.g_free(unsafe.Pointer(ret1))
	return ret2
}
func (this0 *Widget) GetTooltipText() string {
	var this1 *C.GtkWidget
	if this0 != nil {
		this1 = this0.InheritedFromGtkWidget()
	}
	ret1 := C.gtk_widget_get_tooltip_text(this1)
	var ret2 string
	ret2 = C.GoString(ret1)
	C.g_free(unsafe.Pointer(ret1))
	return ret2
}
func (this0 *Widget) GetTooltipWindow() *Window {
	var this1 *C.GtkWidget
	if this0 != nil {
		this1 = this0.InheritedFromGtkWidget()
	}
	ret1 := C.gtk_widget_get_tooltip_window(this1)
	var ret2 *Window
	ret2 = (*Window)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
func (this0 *Widget) GetToplevel() *Widget {
	var this1 *C.GtkWidget
	if this0 != nil {
		this1 = this0.InheritedFromGtkWidget()
	}
	ret1 := C.gtk_widget_get_toplevel(this1)
	var ret2 *Widget
	ret2 = (*Widget)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
func (this0 *Widget) GetVAlign() Align {
	var this1 *C.GtkWidget
	if this0 != nil {
		this1 = this0.InheritedFromGtkWidget()
	}
	ret1 := C.gtk_widget_get_valign(this1)
	var ret2 Align
	ret2 = Align(ret1)
	return ret2
}
func (this0 *Widget) GetVExpand() bool {
	var this1 *C.GtkWidget
	if this0 != nil {
		this1 = this0.InheritedFromGtkWidget()
	}
	ret1 := C.gtk_widget_get_vexpand(this1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *Widget) GetVExpandSet() bool {
	var this1 *C.GtkWidget
	if this0 != nil {
		this1 = this0.InheritedFromGtkWidget()
	}
	ret1 := C.gtk_widget_get_vexpand_set(this1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *Widget) GetVisible() bool {
	var this1 *C.GtkWidget
	if this0 != nil {
		this1 = this0.InheritedFromGtkWidget()
	}
	ret1 := C.gtk_widget_get_visible(this1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *Widget) GetVisual() *gdk.Visual {
	var this1 *C.GtkWidget
	if this0 != nil {
		this1 = this0.InheritedFromGtkWidget()
	}
	ret1 := C.gtk_widget_get_visual(this1)
	var ret2 *gdk.Visual
	ret2 = (*gdk.Visual)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
func (this0 *Widget) GetWindow() *gdk.Window {
	var this1 *C.GtkWidget
	if this0 != nil {
		this1 = this0.InheritedFromGtkWidget()
	}
	ret1 := C.gtk_widget_get_window(this1)
	var ret2 *gdk.Window
	ret2 = (*gdk.Window)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
func (this0 *Widget) GrabAdd() {
	var this1 *C.GtkWidget
	if this0 != nil {
		this1 = this0.InheritedFromGtkWidget()
	}
	C.gtk_grab_add(this1)
}
func (this0 *Widget) GrabDefault() {
	var this1 *C.GtkWidget
	if this0 != nil {
		this1 = this0.InheritedFromGtkWidget()
	}
	C.gtk_widget_grab_default(this1)
}
func (this0 *Widget) GrabFocus() {
	var this1 *C.GtkWidget
	if this0 != nil {
		this1 = this0.InheritedFromGtkWidget()
	}
	C.gtk_widget_grab_focus(this1)
}
func (this0 *Widget) GrabRemove() {
	var this1 *C.GtkWidget
	if this0 != nil {
		this1 = this0.InheritedFromGtkWidget()
	}
	C.gtk_grab_remove(this1)
}
func (this0 *Widget) HasDefault() bool {
	var this1 *C.GtkWidget
	if this0 != nil {
		this1 = this0.InheritedFromGtkWidget()
	}
	ret1 := C.gtk_widget_has_default(this1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *Widget) HasFocus() bool {
	var this1 *C.GtkWidget
	if this0 != nil {
		this1 = this0.InheritedFromGtkWidget()
	}
	ret1 := C.gtk_widget_has_focus(this1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *Widget) HasGrab() bool {
	var this1 *C.GtkWidget
	if this0 != nil {
		this1 = this0.InheritedFromGtkWidget()
	}
	ret1 := C.gtk_widget_has_grab(this1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *Widget) HasRcStyle() bool {
	var this1 *C.GtkWidget
	if this0 != nil {
		this1 = this0.InheritedFromGtkWidget()
	}
	ret1 := C.gtk_widget_has_rc_style(this1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *Widget) HasScreen() bool {
	var this1 *C.GtkWidget
	if this0 != nil {
		this1 = this0.InheritedFromGtkWidget()
	}
	ret1 := C.gtk_widget_has_screen(this1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *Widget) HasVisibleFocus() bool {
	var this1 *C.GtkWidget
	if this0 != nil {
		this1 = this0.InheritedFromGtkWidget()
	}
	ret1 := C.gtk_widget_has_visible_focus(this1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *Widget) Hide() {
	var this1 *C.GtkWidget
	if this0 != nil {
		this1 = this0.InheritedFromGtkWidget()
	}
	C.gtk_widget_hide(this1)
}
func (this0 *Widget) HideOnDelete() bool {
	var this1 *C.GtkWidget
	if this0 != nil {
		this1 = this0.InheritedFromGtkWidget()
	}
	ret1 := C.gtk_widget_hide_on_delete(this1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *Widget) InDestruction() bool {
	var this1 *C.GtkWidget
	if this0 != nil {
		this1 = this0.InheritedFromGtkWidget()
	}
	ret1 := C.gtk_widget_in_destruction(this1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *Widget) InputShapeCombineRegion(region0 *cairo.Region) {
	var this1 *C.GtkWidget
	var region1 *C.cairoRegion
	if this0 != nil {
		this1 = this0.InheritedFromGtkWidget()
	}
	if region0 != nil {
		region1 = (*C.cairoRegion)(region0.C)
	}
	C.gtk_widget_input_shape_combine_region(this1, region1)
}
func (this0 *Widget) Intersect(area0 *cairo.RectangleInt, intersection0 *cairo.RectangleInt) bool {
	var this1 *C.GtkWidget
	var area1 *C.cairoRectangleInt
	var intersection1 *C.cairoRectangleInt
	if this0 != nil {
		this1 = this0.InheritedFromGtkWidget()
	}
	area1 = (*C.cairoRectangleInt)(unsafe.Pointer(area0))
	intersection1 = (*C.cairoRectangleInt)(unsafe.Pointer(intersection0))
	ret1 := C.gtk_widget_intersect(this1, area1, intersection1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *Widget) IsAncestor(ancestor0 WidgetLike) bool {
	var this1 *C.GtkWidget
	var ancestor1 *C.GtkWidget
	if this0 != nil {
		this1 = this0.InheritedFromGtkWidget()
	}
	if ancestor0 != nil {
		ancestor1 = ancestor0.InheritedFromGtkWidget()
	}
	ret1 := C.gtk_widget_is_ancestor(this1, ancestor1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *Widget) IsComposited() bool {
	var this1 *C.GtkWidget
	if this0 != nil {
		this1 = this0.InheritedFromGtkWidget()
	}
	ret1 := C.gtk_widget_is_composited(this1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *Widget) IsDrawable() bool {
	var this1 *C.GtkWidget
	if this0 != nil {
		this1 = this0.InheritedFromGtkWidget()
	}
	ret1 := C.gtk_widget_is_drawable(this1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *Widget) IsFocus() bool {
	var this1 *C.GtkWidget
	if this0 != nil {
		this1 = this0.InheritedFromGtkWidget()
	}
	ret1 := C.gtk_widget_is_focus(this1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *Widget) IsSensitive() bool {
	var this1 *C.GtkWidget
	if this0 != nil {
		this1 = this0.InheritedFromGtkWidget()
	}
	ret1 := C.gtk_widget_is_sensitive(this1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *Widget) IsToplevel() bool {
	var this1 *C.GtkWidget
	if this0 != nil {
		this1 = this0.InheritedFromGtkWidget()
	}
	ret1 := C.gtk_widget_is_toplevel(this1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *Widget) KeynavFailed(direction0 DirectionType) bool {
	var this1 *C.GtkWidget
	var direction1 C.GtkDirectionType
	if this0 != nil {
		this1 = this0.InheritedFromGtkWidget()
	}
	direction1 = C.GtkDirectionType(direction0)
	ret1 := C.gtk_widget_keynav_failed(this1, direction1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *Widget) ListAccelClosures() []gobject.Closure {
	var this1 *C.GtkWidget
	if this0 != nil {
		this1 = this0.InheritedFromGtkWidget()
	}
	ret1 := C.gtk_widget_list_accel_closures(this1)
	var ret2 []gobject.Closure
	for iter := (*_GList)(unsafe.Pointer(ret1)); iter != nil; iter = iter.next {
		var elt gobject.Closure
		elt = *(*gobject.Closure)(unsafe.Pointer((*C.GClosure)(iter.data)))
		ret2 = append(ret2, elt)
	}
	return ret2
}
func (this0 *Widget) ListMnemonicLabels() []*Widget {
	var this1 *C.GtkWidget
	if this0 != nil {
		this1 = this0.InheritedFromGtkWidget()
	}
	ret1 := C.gtk_widget_list_mnemonic_labels(this1)
	var ret2 []*Widget
	for iter := (*_GList)(unsafe.Pointer(ret1)); iter != nil; iter = iter.next {
		var elt *Widget
		elt = (*Widget)(gobject.ObjectWrap(unsafe.Pointer((*C.GtkWidget)(iter.data)), true))
		ret2 = append(ret2, elt)
	}
	return ret2
}
func (this0 *Widget) Map() {
	var this1 *C.GtkWidget
	if this0 != nil {
		this1 = this0.InheritedFromGtkWidget()
	}
	C.gtk_widget_map(this1)
}
func (this0 *Widget) MnemonicActivate(group_cycling0 bool) bool {
	var this1 *C.GtkWidget
	var group_cycling1 C.int
	if this0 != nil {
		this1 = this0.InheritedFromGtkWidget()
	}
	group_cycling1 = _GoBoolToCBool(group_cycling0)
	ret1 := C.gtk_widget_mnemonic_activate(this1, group_cycling1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *Widget) ModifyBase(state0 StateType, color0 *gdk.Color) {
	var this1 *C.GtkWidget
	var state1 C.GtkStateType
	var color1 *C.GdkColor
	if this0 != nil {
		this1 = this0.InheritedFromGtkWidget()
	}
	state1 = C.GtkStateType(state0)
	color1 = (*C.GdkColor)(unsafe.Pointer(color0))
	C.gtk_widget_modify_base(this1, state1, color1)
}
func (this0 *Widget) ModifyBg(state0 StateType, color0 *gdk.Color) {
	var this1 *C.GtkWidget
	var state1 C.GtkStateType
	var color1 *C.GdkColor
	if this0 != nil {
		this1 = this0.InheritedFromGtkWidget()
	}
	state1 = C.GtkStateType(state0)
	color1 = (*C.GdkColor)(unsafe.Pointer(color0))
	C.gtk_widget_modify_bg(this1, state1, color1)
}
func (this0 *Widget) ModifyCursor(primary0 *gdk.Color, secondary0 *gdk.Color) {
	var this1 *C.GtkWidget
	var primary1 *C.GdkColor
	var secondary1 *C.GdkColor
	if this0 != nil {
		this1 = this0.InheritedFromGtkWidget()
	}
	primary1 = (*C.GdkColor)(unsafe.Pointer(primary0))
	secondary1 = (*C.GdkColor)(unsafe.Pointer(secondary0))
	C.gtk_widget_modify_cursor(this1, primary1, secondary1)
}
func (this0 *Widget) ModifyFg(state0 StateType, color0 *gdk.Color) {
	var this1 *C.GtkWidget
	var state1 C.GtkStateType
	var color1 *C.GdkColor
	if this0 != nil {
		this1 = this0.InheritedFromGtkWidget()
	}
	state1 = C.GtkStateType(state0)
	color1 = (*C.GdkColor)(unsafe.Pointer(color0))
	C.gtk_widget_modify_fg(this1, state1, color1)
}
func (this0 *Widget) ModifyFont(font_desc0 *pango.FontDescription) {
	var this1 *C.GtkWidget
	var font_desc1 *C.PangoFontDescription
	if this0 != nil {
		this1 = this0.InheritedFromGtkWidget()
	}
	font_desc1 = (*C.PangoFontDescription)(unsafe.Pointer(font_desc0))
	C.gtk_widget_modify_font(this1, font_desc1)
}
func (this0 *Widget) ModifyStyle(style0 RcStyleLike) {
	var this1 *C.GtkWidget
	var style1 *C.GtkRcStyle
	if this0 != nil {
		this1 = this0.InheritedFromGtkWidget()
	}
	if style0 != nil {
		style1 = style0.InheritedFromGtkRcStyle()
	}
	C.gtk_widget_modify_style(this1, style1)
}
func (this0 *Widget) ModifyText(state0 StateType, color0 *gdk.Color) {
	var this1 *C.GtkWidget
	var state1 C.GtkStateType
	var color1 *C.GdkColor
	if this0 != nil {
		this1 = this0.InheritedFromGtkWidget()
	}
	state1 = C.GtkStateType(state0)
	color1 = (*C.GdkColor)(unsafe.Pointer(color0))
	C.gtk_widget_modify_text(this1, state1, color1)
}
func (this0 *Widget) OverrideBackgroundColor(state0 StateFlags, color0 *gdk.RGBA) {
	var this1 *C.GtkWidget
	var state1 C.GtkStateFlags
	var color1 *C.GdkRGBA
	if this0 != nil {
		this1 = this0.InheritedFromGtkWidget()
	}
	state1 = C.GtkStateFlags(state0)
	color1 = (*C.GdkRGBA)(unsafe.Pointer(color0))
	C.gtk_widget_override_background_color(this1, state1, color1)
}
func (this0 *Widget) OverrideColor(state0 StateFlags, color0 *gdk.RGBA) {
	var this1 *C.GtkWidget
	var state1 C.GtkStateFlags
	var color1 *C.GdkRGBA
	if this0 != nil {
		this1 = this0.InheritedFromGtkWidget()
	}
	state1 = C.GtkStateFlags(state0)
	color1 = (*C.GdkRGBA)(unsafe.Pointer(color0))
	C.gtk_widget_override_color(this1, state1, color1)
}
func (this0 *Widget) OverrideCursor(cursor0 *gdk.RGBA, secondary_cursor0 *gdk.RGBA) {
	var this1 *C.GtkWidget
	var cursor1 *C.GdkRGBA
	var secondary_cursor1 *C.GdkRGBA
	if this0 != nil {
		this1 = this0.InheritedFromGtkWidget()
	}
	cursor1 = (*C.GdkRGBA)(unsafe.Pointer(cursor0))
	secondary_cursor1 = (*C.GdkRGBA)(unsafe.Pointer(secondary_cursor0))
	C.gtk_widget_override_cursor(this1, cursor1, secondary_cursor1)
}
func (this0 *Widget) OverrideFont(font_desc0 *pango.FontDescription) {
	var this1 *C.GtkWidget
	var font_desc1 *C.PangoFontDescription
	if this0 != nil {
		this1 = this0.InheritedFromGtkWidget()
	}
	font_desc1 = (*C.PangoFontDescription)(unsafe.Pointer(font_desc0))
	C.gtk_widget_override_font(this1, font_desc1)
}
func (this0 *Widget) OverrideSymbolicColor(name0 string, color0 *gdk.RGBA) {
	var this1 *C.GtkWidget
	var name1 *C.char
	var color1 *C.GdkRGBA
	if this0 != nil {
		this1 = this0.InheritedFromGtkWidget()
	}
	name1 = _GoStringToGString(name0)
	defer C.free(unsafe.Pointer(name1))
	color1 = (*C.GdkRGBA)(unsafe.Pointer(color0))
	C.gtk_widget_override_symbolic_color(this1, name1, color1)
}
func (this0 *Widget) Path() (int, string, string) {
	var this1 *C.GtkWidget
	var path_length1 C.uint32_t
	var path1 *C.char
	var path_reversed1 *C.char
	if this0 != nil {
		this1 = this0.InheritedFromGtkWidget()
	}
	C.gtk_widget_path(this1, &path_length1, &path1, &path_reversed1)
	var path_length2 int
	var path2 string
	var path_reversed2 string
	path_length2 = int(path_length1)
	path2 = C.GoString(path1)
	C.g_free(unsafe.Pointer(path1))
	path_reversed2 = C.GoString(path_reversed1)
	C.g_free(unsafe.Pointer(path_reversed1))
	return path_length2, path2, path_reversed2
}
func (this0 *Widget) QueueComputeExpand() {
	var this1 *C.GtkWidget
	if this0 != nil {
		this1 = this0.InheritedFromGtkWidget()
	}
	C.gtk_widget_queue_compute_expand(this1)
}
func (this0 *Widget) QueueDraw() {
	var this1 *C.GtkWidget
	if this0 != nil {
		this1 = this0.InheritedFromGtkWidget()
	}
	C.gtk_widget_queue_draw(this1)
}
func (this0 *Widget) QueueDrawArea(x0 int, y0 int, width0 int, height0 int) {
	var this1 *C.GtkWidget
	var x1 C.int32_t
	var y1 C.int32_t
	var width1 C.int32_t
	var height1 C.int32_t
	if this0 != nil {
		this1 = this0.InheritedFromGtkWidget()
	}
	x1 = C.int32_t(x0)
	y1 = C.int32_t(y0)
	width1 = C.int32_t(width0)
	height1 = C.int32_t(height0)
	C.gtk_widget_queue_draw_area(this1, x1, y1, width1, height1)
}
func (this0 *Widget) QueueDrawRegion(region0 *cairo.Region) {
	var this1 *C.GtkWidget
	var region1 *C.cairoRegion
	if this0 != nil {
		this1 = this0.InheritedFromGtkWidget()
	}
	if region0 != nil {
		region1 = (*C.cairoRegion)(region0.C)
	}
	C.gtk_widget_queue_draw_region(this1, region1)
}
func (this0 *Widget) QueueResize() {
	var this1 *C.GtkWidget
	if this0 != nil {
		this1 = this0.InheritedFromGtkWidget()
	}
	C.gtk_widget_queue_resize(this1)
}
func (this0 *Widget) QueueResizeNoRedraw() {
	var this1 *C.GtkWidget
	if this0 != nil {
		this1 = this0.InheritedFromGtkWidget()
	}
	C.gtk_widget_queue_resize_no_redraw(this1)
}
func (this0 *Widget) Realize() {
	var this1 *C.GtkWidget
	if this0 != nil {
		this1 = this0.InheritedFromGtkWidget()
	}
	C.gtk_widget_realize(this1)
}
func (this0 *Widget) RegionIntersect(region0 *cairo.Region) *cairo.Region {
	var this1 *C.GtkWidget
	var region1 *C.cairoRegion
	if this0 != nil {
		this1 = this0.InheritedFromGtkWidget()
	}
	if region0 != nil {
		region1 = (*C.cairoRegion)(region0.C)
	}
	ret1 := C.gtk_widget_region_intersect(this1, region1)
	var ret2 *cairo.Region
	ret2 = (*cairo.Region)(cairo.RegionWrap(unsafe.Pointer(ret1), false))
	return ret2
}
func (this0 *Widget) RemoveAccelerator(accel_group0 AccelGroupLike, accel_key0 int, accel_mods0 gdk.ModifierType) bool {
	var this1 *C.GtkWidget
	var accel_group1 *C.GtkAccelGroup
	var accel_key1 C.uint32_t
	var accel_mods1 C.GdkModifierType
	if this0 != nil {
		this1 = this0.InheritedFromGtkWidget()
	}
	if accel_group0 != nil {
		accel_group1 = accel_group0.InheritedFromGtkAccelGroup()
	}
	accel_key1 = C.uint32_t(accel_key0)
	accel_mods1 = C.GdkModifierType(accel_mods0)
	ret1 := C.gtk_widget_remove_accelerator(this1, accel_group1, accel_key1, accel_mods1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *Widget) RemoveMnemonicLabel(label0 WidgetLike) {
	var this1 *C.GtkWidget
	var label1 *C.GtkWidget
	if this0 != nil {
		this1 = this0.InheritedFromGtkWidget()
	}
	if label0 != nil {
		label1 = label0.InheritedFromGtkWidget()
	}
	C.gtk_widget_remove_mnemonic_label(this1, label1)
}
func (this0 *Widget) RenderIcon(stock_id0 string, size0 int, detail0 string) *gdkpixbuf.Pixbuf {
	var this1 *C.GtkWidget
	var stock_id1 *C.char
	var size1 C.int32_t
	var detail1 *C.char
	if this0 != nil {
		this1 = this0.InheritedFromGtkWidget()
	}
	stock_id1 = _GoStringToGString(stock_id0)
	defer C.free(unsafe.Pointer(stock_id1))
	size1 = C.int32_t(size0)
	detail1 = _GoStringToGString(detail0)
	defer C.free(unsafe.Pointer(detail1))
	ret1 := C.gtk_widget_render_icon(this1, stock_id1, size1, detail1)
	var ret2 *gdkpixbuf.Pixbuf
	ret2 = (*gdkpixbuf.Pixbuf)(gobject.ObjectWrap(unsafe.Pointer(ret1), false))
	return ret2
}
func (this0 *Widget) RenderIconPixbuf(stock_id0 string, size0 int) *gdkpixbuf.Pixbuf {
	var this1 *C.GtkWidget
	var stock_id1 *C.char
	var size1 C.int32_t
	if this0 != nil {
		this1 = this0.InheritedFromGtkWidget()
	}
	stock_id1 = _GoStringToGString(stock_id0)
	defer C.free(unsafe.Pointer(stock_id1))
	size1 = C.int32_t(size0)
	ret1 := C.gtk_widget_render_icon_pixbuf(this1, stock_id1, size1)
	var ret2 *gdkpixbuf.Pixbuf
	ret2 = (*gdkpixbuf.Pixbuf)(gobject.ObjectWrap(unsafe.Pointer(ret1), false))
	return ret2
}
func (this0 *Widget) Reparent(new_parent0 WidgetLike) {
	var this1 *C.GtkWidget
	var new_parent1 *C.GtkWidget
	if this0 != nil {
		this1 = this0.InheritedFromGtkWidget()
	}
	if new_parent0 != nil {
		new_parent1 = new_parent0.InheritedFromGtkWidget()
	}
	C.gtk_widget_reparent(this1, new_parent1)
}
func (this0 *Widget) ResetRcStyles() {
	var this1 *C.GtkWidget
	if this0 != nil {
		this1 = this0.InheritedFromGtkWidget()
	}
	C.gtk_widget_reset_rc_styles(this1)
}
func (this0 *Widget) ResetStyle() {
	var this1 *C.GtkWidget
	if this0 != nil {
		this1 = this0.InheritedFromGtkWidget()
	}
	C.gtk_widget_reset_style(this1)
}
func (this0 *Widget) SendExpose(event0 *gdk.Event) int {
	var this1 *C.GtkWidget
	var event1 *C.GdkEvent
	if this0 != nil {
		this1 = this0.InheritedFromGtkWidget()
	}
	ret1 := C.gtk_widget_send_expose(this1, event1)
	var ret2 int
	ret2 = int(ret1)
	return ret2
}
func (this0 *Widget) SendFocusChange(event0 *gdk.Event) bool {
	var this1 *C.GtkWidget
	var event1 *C.GdkEvent
	if this0 != nil {
		this1 = this0.InheritedFromGtkWidget()
	}
	ret1 := C.gtk_widget_send_focus_change(this1, event1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *Widget) SetAccelPath(accel_path0 string, accel_group0 AccelGroupLike) {
	var this1 *C.GtkWidget
	var accel_path1 *C.char
	var accel_group1 *C.GtkAccelGroup
	if this0 != nil {
		this1 = this0.InheritedFromGtkWidget()
	}
	accel_path1 = _GoStringToGString(accel_path0)
	defer C.free(unsafe.Pointer(accel_path1))
	if accel_group0 != nil {
		accel_group1 = accel_group0.InheritedFromGtkAccelGroup()
	}
	C.gtk_widget_set_accel_path(this1, accel_path1, accel_group1)
}
func (this0 *Widget) SetAllocation(allocation0 *cairo.RectangleInt) {
	var this1 *C.GtkWidget
	var allocation1 *C.cairoRectangleInt
	if this0 != nil {
		this1 = this0.InheritedFromGtkWidget()
	}
	allocation1 = (*C.cairoRectangleInt)(unsafe.Pointer(allocation0))
	C.gtk_widget_set_allocation(this1, allocation1)
}
func (this0 *Widget) SetAppPaintable(app_paintable0 bool) {
	var this1 *C.GtkWidget
	var app_paintable1 C.int
	if this0 != nil {
		this1 = this0.InheritedFromGtkWidget()
	}
	app_paintable1 = _GoBoolToCBool(app_paintable0)
	C.gtk_widget_set_app_paintable(this1, app_paintable1)
}
func (this0 *Widget) SetCanDefault(can_default0 bool) {
	var this1 *C.GtkWidget
	var can_default1 C.int
	if this0 != nil {
		this1 = this0.InheritedFromGtkWidget()
	}
	can_default1 = _GoBoolToCBool(can_default0)
	C.gtk_widget_set_can_default(this1, can_default1)
}
func (this0 *Widget) SetCanFocus(can_focus0 bool) {
	var this1 *C.GtkWidget
	var can_focus1 C.int
	if this0 != nil {
		this1 = this0.InheritedFromGtkWidget()
	}
	can_focus1 = _GoBoolToCBool(can_focus0)
	C.gtk_widget_set_can_focus(this1, can_focus1)
}
func (this0 *Widget) SetChildVisible(is_visible0 bool) {
	var this1 *C.GtkWidget
	var is_visible1 C.int
	if this0 != nil {
		this1 = this0.InheritedFromGtkWidget()
	}
	is_visible1 = _GoBoolToCBool(is_visible0)
	C.gtk_widget_set_child_visible(this1, is_visible1)
}
func (this0 *Widget) SetCompositeName(name0 string) {
	var this1 *C.GtkWidget
	var name1 *C.char
	if this0 != nil {
		this1 = this0.InheritedFromGtkWidget()
	}
	name1 = _GoStringToGString(name0)
	defer C.free(unsafe.Pointer(name1))
	C.gtk_widget_set_composite_name(this1, name1)
}
func (this0 *Widget) SetDeviceEnabled(device0 gdk.DeviceLike, enabled0 bool) {
	var this1 *C.GtkWidget
	var device1 *C.GdkDevice
	var enabled1 C.int
	if this0 != nil {
		this1 = this0.InheritedFromGtkWidget()
	}
	if device0 != nil {
		device1 = device0.InheritedFromGdkDevice()
	}
	enabled1 = _GoBoolToCBool(enabled0)
	C.gtk_widget_set_device_enabled(this1, device1, enabled1)
}
func (this0 *Widget) SetDeviceEvents(device0 gdk.DeviceLike, events0 gdk.EventMask) {
	var this1 *C.GtkWidget
	var device1 *C.GdkDevice
	var events1 C.GdkEventMask
	if this0 != nil {
		this1 = this0.InheritedFromGtkWidget()
	}
	if device0 != nil {
		device1 = device0.InheritedFromGdkDevice()
	}
	events1 = C.GdkEventMask(events0)
	C.gtk_widget_set_device_events(this1, device1, events1)
}
func (this0 *Widget) SetDirection(dir0 TextDirection) {
	var this1 *C.GtkWidget
	var dir1 C.GtkTextDirection
	if this0 != nil {
		this1 = this0.InheritedFromGtkWidget()
	}
	dir1 = C.GtkTextDirection(dir0)
	C.gtk_widget_set_direction(this1, dir1)
}
func (this0 *Widget) SetDoubleBuffered(double_buffered0 bool) {
	var this1 *C.GtkWidget
	var double_buffered1 C.int
	if this0 != nil {
		this1 = this0.InheritedFromGtkWidget()
	}
	double_buffered1 = _GoBoolToCBool(double_buffered0)
	C.gtk_widget_set_double_buffered(this1, double_buffered1)
}
func (this0 *Widget) SetEvents(events0 int) {
	var this1 *C.GtkWidget
	var events1 C.int32_t
	if this0 != nil {
		this1 = this0.InheritedFromGtkWidget()
	}
	events1 = C.int32_t(events0)
	C.gtk_widget_set_events(this1, events1)
}
func (this0 *Widget) SetHAlign(align0 Align) {
	var this1 *C.GtkWidget
	var align1 C.GtkAlign
	if this0 != nil {
		this1 = this0.InheritedFromGtkWidget()
	}
	align1 = C.GtkAlign(align0)
	C.gtk_widget_set_halign(this1, align1)
}
func (this0 *Widget) SetHasTooltip(has_tooltip0 bool) {
	var this1 *C.GtkWidget
	var has_tooltip1 C.int
	if this0 != nil {
		this1 = this0.InheritedFromGtkWidget()
	}
	has_tooltip1 = _GoBoolToCBool(has_tooltip0)
	C.gtk_widget_set_has_tooltip(this1, has_tooltip1)
}
func (this0 *Widget) SetHasWindow(has_window0 bool) {
	var this1 *C.GtkWidget
	var has_window1 C.int
	if this0 != nil {
		this1 = this0.InheritedFromGtkWidget()
	}
	has_window1 = _GoBoolToCBool(has_window0)
	C.gtk_widget_set_has_window(this1, has_window1)
}
func (this0 *Widget) SetHExpand(expand0 bool) {
	var this1 *C.GtkWidget
	var expand1 C.int
	if this0 != nil {
		this1 = this0.InheritedFromGtkWidget()
	}
	expand1 = _GoBoolToCBool(expand0)
	C.gtk_widget_set_hexpand(this1, expand1)
}
func (this0 *Widget) SetHExpandSet(set0 bool) {
	var this1 *C.GtkWidget
	var set1 C.int
	if this0 != nil {
		this1 = this0.InheritedFromGtkWidget()
	}
	set1 = _GoBoolToCBool(set0)
	C.gtk_widget_set_hexpand_set(this1, set1)
}
func (this0 *Widget) SetMapped(mapped0 bool) {
	var this1 *C.GtkWidget
	var mapped1 C.int
	if this0 != nil {
		this1 = this0.InheritedFromGtkWidget()
	}
	mapped1 = _GoBoolToCBool(mapped0)
	C.gtk_widget_set_mapped(this1, mapped1)
}
func (this0 *Widget) SetMarginBottom(margin0 int) {
	var this1 *C.GtkWidget
	var margin1 C.int32_t
	if this0 != nil {
		this1 = this0.InheritedFromGtkWidget()
	}
	margin1 = C.int32_t(margin0)
	C.gtk_widget_set_margin_bottom(this1, margin1)
}
func (this0 *Widget) SetMarginLeft(margin0 int) {
	var this1 *C.GtkWidget
	var margin1 C.int32_t
	if this0 != nil {
		this1 = this0.InheritedFromGtkWidget()
	}
	margin1 = C.int32_t(margin0)
	C.gtk_widget_set_margin_left(this1, margin1)
}
func (this0 *Widget) SetMarginRight(margin0 int) {
	var this1 *C.GtkWidget
	var margin1 C.int32_t
	if this0 != nil {
		this1 = this0.InheritedFromGtkWidget()
	}
	margin1 = C.int32_t(margin0)
	C.gtk_widget_set_margin_right(this1, margin1)
}
func (this0 *Widget) SetMarginTop(margin0 int) {
	var this1 *C.GtkWidget
	var margin1 C.int32_t
	if this0 != nil {
		this1 = this0.InheritedFromGtkWidget()
	}
	margin1 = C.int32_t(margin0)
	C.gtk_widget_set_margin_top(this1, margin1)
}
func (this0 *Widget) SetName(name0 string) {
	var this1 *C.GtkWidget
	var name1 *C.char
	if this0 != nil {
		this1 = this0.InheritedFromGtkWidget()
	}
	name1 = _GoStringToGString(name0)
	defer C.free(unsafe.Pointer(name1))
	C.gtk_widget_set_name(this1, name1)
}
func (this0 *Widget) SetNoShowAll(no_show_all0 bool) {
	var this1 *C.GtkWidget
	var no_show_all1 C.int
	if this0 != nil {
		this1 = this0.InheritedFromGtkWidget()
	}
	no_show_all1 = _GoBoolToCBool(no_show_all0)
	C.gtk_widget_set_no_show_all(this1, no_show_all1)
}
func (this0 *Widget) SetParent(parent0 WidgetLike) {
	var this1 *C.GtkWidget
	var parent1 *C.GtkWidget
	if this0 != nil {
		this1 = this0.InheritedFromGtkWidget()
	}
	if parent0 != nil {
		parent1 = parent0.InheritedFromGtkWidget()
	}
	C.gtk_widget_set_parent(this1, parent1)
}
func (this0 *Widget) SetParentWindow(parent_window0 gdk.WindowLike) {
	var this1 *C.GtkWidget
	var parent_window1 *C.GdkWindow
	if this0 != nil {
		this1 = this0.InheritedFromGtkWidget()
	}
	if parent_window0 != nil {
		parent_window1 = parent_window0.InheritedFromGdkWindow()
	}
	C.gtk_widget_set_parent_window(this1, parent_window1)
}
func (this0 *Widget) SetRealized(realized0 bool) {
	var this1 *C.GtkWidget
	var realized1 C.int
	if this0 != nil {
		this1 = this0.InheritedFromGtkWidget()
	}
	realized1 = _GoBoolToCBool(realized0)
	C.gtk_widget_set_realized(this1, realized1)
}
func (this0 *Widget) SetReceivesDefault(receives_default0 bool) {
	var this1 *C.GtkWidget
	var receives_default1 C.int
	if this0 != nil {
		this1 = this0.InheritedFromGtkWidget()
	}
	receives_default1 = _GoBoolToCBool(receives_default0)
	C.gtk_widget_set_receives_default(this1, receives_default1)
}
func (this0 *Widget) SetRedrawOnAllocate(redraw_on_allocate0 bool) {
	var this1 *C.GtkWidget
	var redraw_on_allocate1 C.int
	if this0 != nil {
		this1 = this0.InheritedFromGtkWidget()
	}
	redraw_on_allocate1 = _GoBoolToCBool(redraw_on_allocate0)
	C.gtk_widget_set_redraw_on_allocate(this1, redraw_on_allocate1)
}
func (this0 *Widget) SetSensitive(sensitive0 bool) {
	var this1 *C.GtkWidget
	var sensitive1 C.int
	if this0 != nil {
		this1 = this0.InheritedFromGtkWidget()
	}
	sensitive1 = _GoBoolToCBool(sensitive0)
	C.gtk_widget_set_sensitive(this1, sensitive1)
}
func (this0 *Widget) SetSizeRequest(width0 int, height0 int) {
	var this1 *C.GtkWidget
	var width1 C.int32_t
	var height1 C.int32_t
	if this0 != nil {
		this1 = this0.InheritedFromGtkWidget()
	}
	width1 = C.int32_t(width0)
	height1 = C.int32_t(height0)
	C.gtk_widget_set_size_request(this1, width1, height1)
}
func (this0 *Widget) SetState(state0 StateType) {
	var this1 *C.GtkWidget
	var state1 C.GtkStateType
	if this0 != nil {
		this1 = this0.InheritedFromGtkWidget()
	}
	state1 = C.GtkStateType(state0)
	C.gtk_widget_set_state(this1, state1)
}
func (this0 *Widget) SetStateFlags(flags0 StateFlags, clear0 bool) {
	var this1 *C.GtkWidget
	var flags1 C.GtkStateFlags
	var clear1 C.int
	if this0 != nil {
		this1 = this0.InheritedFromGtkWidget()
	}
	flags1 = C.GtkStateFlags(flags0)
	clear1 = _GoBoolToCBool(clear0)
	C.gtk_widget_set_state_flags(this1, flags1, clear1)
}
func (this0 *Widget) SetStyle(style0 StyleLike) {
	var this1 *C.GtkWidget
	var style1 *C.GtkStyle
	if this0 != nil {
		this1 = this0.InheritedFromGtkWidget()
	}
	if style0 != nil {
		style1 = style0.InheritedFromGtkStyle()
	}
	C.gtk_widget_set_style(this1, style1)
}
func (this0 *Widget) SetSupportMultidevice(support_multidevice0 bool) {
	var this1 *C.GtkWidget
	var support_multidevice1 C.int
	if this0 != nil {
		this1 = this0.InheritedFromGtkWidget()
	}
	support_multidevice1 = _GoBoolToCBool(support_multidevice0)
	C.gtk_widget_set_support_multidevice(this1, support_multidevice1)
}
func (this0 *Widget) SetTooltipMarkup(markup0 string) {
	var this1 *C.GtkWidget
	var markup1 *C.char
	if this0 != nil {
		this1 = this0.InheritedFromGtkWidget()
	}
	markup1 = _GoStringToGString(markup0)
	defer C.free(unsafe.Pointer(markup1))
	C.gtk_widget_set_tooltip_markup(this1, markup1)
}
func (this0 *Widget) SetTooltipText(text0 string) {
	var this1 *C.GtkWidget
	var text1 *C.char
	if this0 != nil {
		this1 = this0.InheritedFromGtkWidget()
	}
	text1 = _GoStringToGString(text0)
	defer C.free(unsafe.Pointer(text1))
	C.gtk_widget_set_tooltip_text(this1, text1)
}
func (this0 *Widget) SetTooltipWindow(custom_window0 WindowLike) {
	var this1 *C.GtkWidget
	var custom_window1 *C.GtkWindow
	if this0 != nil {
		this1 = this0.InheritedFromGtkWidget()
	}
	if custom_window0 != nil {
		custom_window1 = custom_window0.InheritedFromGtkWindow()
	}
	C.gtk_widget_set_tooltip_window(this1, custom_window1)
}
func (this0 *Widget) SetVAlign(align0 Align) {
	var this1 *C.GtkWidget
	var align1 C.GtkAlign
	if this0 != nil {
		this1 = this0.InheritedFromGtkWidget()
	}
	align1 = C.GtkAlign(align0)
	C.gtk_widget_set_valign(this1, align1)
}
func (this0 *Widget) SetVExpand(expand0 bool) {
	var this1 *C.GtkWidget
	var expand1 C.int
	if this0 != nil {
		this1 = this0.InheritedFromGtkWidget()
	}
	expand1 = _GoBoolToCBool(expand0)
	C.gtk_widget_set_vexpand(this1, expand1)
}
func (this0 *Widget) SetVExpandSet(set0 bool) {
	var this1 *C.GtkWidget
	var set1 C.int
	if this0 != nil {
		this1 = this0.InheritedFromGtkWidget()
	}
	set1 = _GoBoolToCBool(set0)
	C.gtk_widget_set_vexpand_set(this1, set1)
}
func (this0 *Widget) SetVisible(visible0 bool) {
	var this1 *C.GtkWidget
	var visible1 C.int
	if this0 != nil {
		this1 = this0.InheritedFromGtkWidget()
	}
	visible1 = _GoBoolToCBool(visible0)
	C.gtk_widget_set_visible(this1, visible1)
}
func (this0 *Widget) SetVisual(visual0 gdk.VisualLike) {
	var this1 *C.GtkWidget
	var visual1 *C.GdkVisual
	if this0 != nil {
		this1 = this0.InheritedFromGtkWidget()
	}
	if visual0 != nil {
		visual1 = visual0.InheritedFromGdkVisual()
	}
	C.gtk_widget_set_visual(this1, visual1)
}
func (this0 *Widget) SetWindow(window0 gdk.WindowLike) {
	var this1 *C.GtkWidget
	var window1 *C.GdkWindow
	if this0 != nil {
		this1 = this0.InheritedFromGtkWidget()
	}
	if window0 != nil {
		window1 = window0.InheritedFromGdkWindow()
	}
	C.gtk_widget_set_window(this1, window1)
}
func (this0 *Widget) ShapeCombineRegion(region0 *cairo.Region) {
	var this1 *C.GtkWidget
	var region1 *C.cairoRegion
	if this0 != nil {
		this1 = this0.InheritedFromGtkWidget()
	}
	if region0 != nil {
		region1 = (*C.cairoRegion)(region0.C)
	}
	C.gtk_widget_shape_combine_region(this1, region1)
}
func (this0 *Widget) Show() {
	var this1 *C.GtkWidget
	if this0 != nil {
		this1 = this0.InheritedFromGtkWidget()
	}
	C.gtk_widget_show(this1)
}
func (this0 *Widget) ShowAll() {
	var this1 *C.GtkWidget
	if this0 != nil {
		this1 = this0.InheritedFromGtkWidget()
	}
	C.gtk_widget_show_all(this1)
}
func (this0 *Widget) ShowNow() {
	var this1 *C.GtkWidget
	if this0 != nil {
		this1 = this0.InheritedFromGtkWidget()
	}
	C.gtk_widget_show_now(this1)
}
func (this0 *Widget) SizeAllocate(allocation0 *cairo.RectangleInt) {
	var this1 *C.GtkWidget
	var allocation1 *C.cairoRectangleInt
	if this0 != nil {
		this1 = this0.InheritedFromGtkWidget()
	}
	allocation1 = (*C.cairoRectangleInt)(unsafe.Pointer(allocation0))
	C.gtk_widget_size_allocate(this1, allocation1)
}
func (this0 *Widget) SizeRequest() Requisition {
	var this1 *C.GtkWidget
	var requisition1 C.GtkRequisition
	if this0 != nil {
		this1 = this0.InheritedFromGtkWidget()
	}
	C.gtk_widget_size_request(this1, &requisition1)
	var requisition2 Requisition
	requisition2 = *(*Requisition)(unsafe.Pointer(&requisition1))
	return requisition2
}
func (this0 *Widget) StyleAttach() {
	var this1 *C.GtkWidget
	if this0 != nil {
		this1 = this0.InheritedFromGtkWidget()
	}
	C.gtk_widget_style_attach(this1)
}
func (this0 *Widget) StyleGetProperty(property_name0 string, value0 *gobject.Value) {
	var this1 *C.GtkWidget
	var property_name1 *C.char
	var value1 *C.GValue
	if this0 != nil {
		this1 = this0.InheritedFromGtkWidget()
	}
	property_name1 = _GoStringToGString(property_name0)
	defer C.free(unsafe.Pointer(property_name1))
	value1 = (*C.GValue)(unsafe.Pointer(value0))
	C.gtk_widget_style_get_property(this1, property_name1, value1)
}
func (this0 *Widget) ThawChildNotify() {
	var this1 *C.GtkWidget
	if this0 != nil {
		this1 = this0.InheritedFromGtkWidget()
	}
	C.gtk_widget_thaw_child_notify(this1)
}
func (this0 *Widget) TranslateCoordinates(dest_widget0 WidgetLike, src_x0 int, src_y0 int) (int, int, bool) {
	var this1 *C.GtkWidget
	var dest_widget1 *C.GtkWidget
	var src_x1 C.int32_t
	var src_y1 C.int32_t
	var dest_x1 C.int32_t
	var dest_y1 C.int32_t
	if this0 != nil {
		this1 = this0.InheritedFromGtkWidget()
	}
	if dest_widget0 != nil {
		dest_widget1 = dest_widget0.InheritedFromGtkWidget()
	}
	src_x1 = C.int32_t(src_x0)
	src_y1 = C.int32_t(src_y0)
	ret1 := C.gtk_widget_translate_coordinates(this1, dest_widget1, src_x1, src_y1, &dest_x1, &dest_y1)
	var dest_x2 int
	var dest_y2 int
	var ret2 bool
	dest_x2 = int(dest_x1)
	dest_y2 = int(dest_y1)
	ret2 = ret1 != 0
	return dest_x2, dest_y2, ret2
}
func (this0 *Widget) TriggerTooltipQuery() {
	var this1 *C.GtkWidget
	if this0 != nil {
		this1 = this0.InheritedFromGtkWidget()
	}
	C.gtk_widget_trigger_tooltip_query(this1)
}
func (this0 *Widget) Unmap() {
	var this1 *C.GtkWidget
	if this0 != nil {
		this1 = this0.InheritedFromGtkWidget()
	}
	C.gtk_widget_unmap(this1)
}
func (this0 *Widget) Unparent() {
	var this1 *C.GtkWidget
	if this0 != nil {
		this1 = this0.InheritedFromGtkWidget()
	}
	C.gtk_widget_unparent(this1)
}
func (this0 *Widget) Unrealize() {
	var this1 *C.GtkWidget
	if this0 != nil {
		this1 = this0.InheritedFromGtkWidget()
	}
	C.gtk_widget_unrealize(this1)
}
func (this0 *Widget) UnsetStateFlags(flags0 StateFlags) {
	var this1 *C.GtkWidget
	var flags1 C.GtkStateFlags
	if this0 != nil {
		this1 = this0.InheritedFromGtkWidget()
	}
	flags1 = C.GtkStateFlags(flags0)
	C.gtk_widget_unset_state_flags(this1, flags1)
}
type WidgetAuxInfo struct {
	Width int32
	Height int32
	HAlign uint32
	VAlign uint32
	Margin Border
}
type WidgetHelpType C.uint32_t
const (
	WidgetHelpTypeTooltip WidgetHelpType = 0
	WidgetHelpTypeWhatsThis WidgetHelpType = 1
)
type WidgetPath struct {}
func NewWidgetPath() *WidgetPath {
	ret1 := C.gtk_widget_path_new()
	var ret2 *WidgetPath
	ret2 = (*WidgetPath)(unsafe.Pointer(ret1))
	return ret2
}
func (this0 *WidgetPath) AppendForWidget(widget0 WidgetLike) int {
	var this1 *C.GtkWidgetPath
	var widget1 *C.GtkWidget
	this1 = (*C.GtkWidgetPath)(unsafe.Pointer(this0))
	if widget0 != nil {
		widget1 = widget0.InheritedFromGtkWidget()
	}
	ret1 := C.gtk_widget_path_append_for_widget(this1, widget1)
	var ret2 int
	ret2 = int(ret1)
	return ret2
}
func (this0 *WidgetPath) AppendType(type0 gobject.Type) int {
	var this1 *C.GtkWidgetPath
	var type1 C.GType
	this1 = (*C.GtkWidgetPath)(unsafe.Pointer(this0))
	type1 = C.GType(type0)
	ret1 := C.gtk_widget_path_append_type(this1, type1)
	var ret2 int
	ret2 = int(ret1)
	return ret2
}
func (this0 *WidgetPath) AppendWithSiblings(siblings0 *WidgetPath, sibling_index0 int) int {
	var this1 *C.GtkWidgetPath
	var siblings1 *C.GtkWidgetPath
	var sibling_index1 C.uint32_t
	this1 = (*C.GtkWidgetPath)(unsafe.Pointer(this0))
	siblings1 = (*C.GtkWidgetPath)(unsafe.Pointer(siblings0))
	sibling_index1 = C.uint32_t(sibling_index0)
	ret1 := C.gtk_widget_path_append_with_siblings(this1, siblings1, sibling_index1)
	var ret2 int
	ret2 = int(ret1)
	return ret2
}
func (this0 *WidgetPath) Copy() *WidgetPath {
	var this1 *C.GtkWidgetPath
	this1 = (*C.GtkWidgetPath)(unsafe.Pointer(this0))
	ret1 := C.gtk_widget_path_copy(this1)
	var ret2 *WidgetPath
	ret2 = (*WidgetPath)(unsafe.Pointer(ret1))
	return ret2
}
func (this0 *WidgetPath) Free() {
	var this1 *C.GtkWidgetPath
	this1 = (*C.GtkWidgetPath)(unsafe.Pointer(this0))
	C.gtk_widget_path_free(this1)
}
func (this0 *WidgetPath) GetObjectType() gobject.Type {
	var this1 *C.GtkWidgetPath
	this1 = (*C.GtkWidgetPath)(unsafe.Pointer(this0))
	ret1 := C.gtk_widget_path_get_object_type(this1)
	var ret2 gobject.Type
	ret2 = gobject.Type(ret1)
	return ret2
}
func (this0 *WidgetPath) HasParent(type0 gobject.Type) bool {
	var this1 *C.GtkWidgetPath
	var type1 C.GType
	this1 = (*C.GtkWidgetPath)(unsafe.Pointer(this0))
	type1 = C.GType(type0)
	ret1 := C.gtk_widget_path_has_parent(this1, type1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *WidgetPath) IsType(type0 gobject.Type) bool {
	var this1 *C.GtkWidgetPath
	var type1 C.GType
	this1 = (*C.GtkWidgetPath)(unsafe.Pointer(this0))
	type1 = C.GType(type0)
	ret1 := C.gtk_widget_path_is_type(this1, type1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *WidgetPath) IterAddClass(pos0 int, name0 string) {
	var this1 *C.GtkWidgetPath
	var pos1 C.int32_t
	var name1 *C.char
	this1 = (*C.GtkWidgetPath)(unsafe.Pointer(this0))
	pos1 = C.int32_t(pos0)
	name1 = _GoStringToGString(name0)
	defer C.free(unsafe.Pointer(name1))
	C.gtk_widget_path_iter_add_class(this1, pos1, name1)
}
func (this0 *WidgetPath) IterAddRegion(pos0 int, name0 string, flags0 RegionFlags) {
	var this1 *C.GtkWidgetPath
	var pos1 C.int32_t
	var name1 *C.char
	var flags1 C.GtkRegionFlags
	this1 = (*C.GtkWidgetPath)(unsafe.Pointer(this0))
	pos1 = C.int32_t(pos0)
	name1 = _GoStringToGString(name0)
	defer C.free(unsafe.Pointer(name1))
	flags1 = C.GtkRegionFlags(flags0)
	C.gtk_widget_path_iter_add_region(this1, pos1, name1, flags1)
}
func (this0 *WidgetPath) IterClearClasses(pos0 int) {
	var this1 *C.GtkWidgetPath
	var pos1 C.int32_t
	this1 = (*C.GtkWidgetPath)(unsafe.Pointer(this0))
	pos1 = C.int32_t(pos0)
	C.gtk_widget_path_iter_clear_classes(this1, pos1)
}
func (this0 *WidgetPath) IterClearRegions(pos0 int) {
	var this1 *C.GtkWidgetPath
	var pos1 C.int32_t
	this1 = (*C.GtkWidgetPath)(unsafe.Pointer(this0))
	pos1 = C.int32_t(pos0)
	C.gtk_widget_path_iter_clear_regions(this1, pos1)
}
func (this0 *WidgetPath) IterGetName(pos0 int) string {
	var this1 *C.GtkWidgetPath
	var pos1 C.int32_t
	this1 = (*C.GtkWidgetPath)(unsafe.Pointer(this0))
	pos1 = C.int32_t(pos0)
	ret1 := C.gtk_widget_path_iter_get_name(this1, pos1)
	var ret2 string
	ret2 = C.GoString(ret1)
	return ret2
}
func (this0 *WidgetPath) IterGetObjectType(pos0 int) gobject.Type {
	var this1 *C.GtkWidgetPath
	var pos1 C.int32_t
	this1 = (*C.GtkWidgetPath)(unsafe.Pointer(this0))
	pos1 = C.int32_t(pos0)
	ret1 := C.gtk_widget_path_iter_get_object_type(this1, pos1)
	var ret2 gobject.Type
	ret2 = gobject.Type(ret1)
	return ret2
}
func (this0 *WidgetPath) IterGetSiblingIndex(pos0 int) int {
	var this1 *C.GtkWidgetPath
	var pos1 C.int32_t
	this1 = (*C.GtkWidgetPath)(unsafe.Pointer(this0))
	pos1 = C.int32_t(pos0)
	ret1 := C.gtk_widget_path_iter_get_sibling_index(this1, pos1)
	var ret2 int
	ret2 = int(ret1)
	return ret2
}
func (this0 *WidgetPath) IterGetSiblings(pos0 int) *WidgetPath {
	var this1 *C.GtkWidgetPath
	var pos1 C.int32_t
	this1 = (*C.GtkWidgetPath)(unsafe.Pointer(this0))
	pos1 = C.int32_t(pos0)
	ret1 := C.gtk_widget_path_iter_get_siblings(this1, pos1)
	var ret2 *WidgetPath
	ret2 = (*WidgetPath)(unsafe.Pointer(ret1))
	return ret2
}
func (this0 *WidgetPath) IterHasClass(pos0 int, name0 string) bool {
	var this1 *C.GtkWidgetPath
	var pos1 C.int32_t
	var name1 *C.char
	this1 = (*C.GtkWidgetPath)(unsafe.Pointer(this0))
	pos1 = C.int32_t(pos0)
	name1 = _GoStringToGString(name0)
	defer C.free(unsafe.Pointer(name1))
	ret1 := C.gtk_widget_path_iter_has_class(this1, pos1, name1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *WidgetPath) IterHasName(pos0 int, name0 string) bool {
	var this1 *C.GtkWidgetPath
	var pos1 C.int32_t
	var name1 *C.char
	this1 = (*C.GtkWidgetPath)(unsafe.Pointer(this0))
	pos1 = C.int32_t(pos0)
	name1 = _GoStringToGString(name0)
	defer C.free(unsafe.Pointer(name1))
	ret1 := C.gtk_widget_path_iter_has_name(this1, pos1, name1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *WidgetPath) IterHasQClass(pos0 int, qname0 int) bool {
	var this1 *C.GtkWidgetPath
	var pos1 C.int32_t
	var qname1 C.uint32_t
	this1 = (*C.GtkWidgetPath)(unsafe.Pointer(this0))
	pos1 = C.int32_t(pos0)
	qname1 = C.uint32_t(qname0)
	ret1 := C.gtk_widget_path_iter_has_qclass(this1, pos1, qname1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *WidgetPath) IterHasQName(pos0 int, qname0 int) bool {
	var this1 *C.GtkWidgetPath
	var pos1 C.int32_t
	var qname1 C.uint32_t
	this1 = (*C.GtkWidgetPath)(unsafe.Pointer(this0))
	pos1 = C.int32_t(pos0)
	qname1 = C.uint32_t(qname0)
	ret1 := C.gtk_widget_path_iter_has_qname(this1, pos1, qname1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *WidgetPath) IterHasQRegion(pos0 int, qname0 int) (RegionFlags, bool) {
	var this1 *C.GtkWidgetPath
	var pos1 C.int32_t
	var qname1 C.uint32_t
	var flags1 C.GtkRegionFlags
	this1 = (*C.GtkWidgetPath)(unsafe.Pointer(this0))
	pos1 = C.int32_t(pos0)
	qname1 = C.uint32_t(qname0)
	ret1 := C.gtk_widget_path_iter_has_qregion(this1, pos1, qname1, &flags1)
	var flags2 RegionFlags
	var ret2 bool
	flags2 = RegionFlags(flags1)
	ret2 = ret1 != 0
	return flags2, ret2
}
func (this0 *WidgetPath) IterHasRegion(pos0 int, name0 string) (RegionFlags, bool) {
	var this1 *C.GtkWidgetPath
	var pos1 C.int32_t
	var name1 *C.char
	var flags1 C.GtkRegionFlags
	this1 = (*C.GtkWidgetPath)(unsafe.Pointer(this0))
	pos1 = C.int32_t(pos0)
	name1 = _GoStringToGString(name0)
	defer C.free(unsafe.Pointer(name1))
	ret1 := C.gtk_widget_path_iter_has_region(this1, pos1, name1, &flags1)
	var flags2 RegionFlags
	var ret2 bool
	flags2 = RegionFlags(flags1)
	ret2 = ret1 != 0
	return flags2, ret2
}
func (this0 *WidgetPath) IterListClasses(pos0 int) []string {
	var this1 *C.GtkWidgetPath
	var pos1 C.int32_t
	this1 = (*C.GtkWidgetPath)(unsafe.Pointer(this0))
	pos1 = C.int32_t(pos0)
	ret1 := C.gtk_widget_path_iter_list_classes(this1, pos1)
	var ret2 []string
	for iter := (*_GSList)(unsafe.Pointer(ret1)); iter != nil; iter = iter.next {
		var elt string
		elt = C.GoString((*C.char)(iter.data))
		ret2 = append(ret2, elt)
	}
	return ret2
}
func (this0 *WidgetPath) IterListRegions(pos0 int) []string {
	var this1 *C.GtkWidgetPath
	var pos1 C.int32_t
	this1 = (*C.GtkWidgetPath)(unsafe.Pointer(this0))
	pos1 = C.int32_t(pos0)
	ret1 := C.gtk_widget_path_iter_list_regions(this1, pos1)
	var ret2 []string
	for iter := (*_GSList)(unsafe.Pointer(ret1)); iter != nil; iter = iter.next {
		var elt string
		elt = C.GoString((*C.char)(iter.data))
		ret2 = append(ret2, elt)
	}
	return ret2
}
func (this0 *WidgetPath) IterRemoveClass(pos0 int, name0 string) {
	var this1 *C.GtkWidgetPath
	var pos1 C.int32_t
	var name1 *C.char
	this1 = (*C.GtkWidgetPath)(unsafe.Pointer(this0))
	pos1 = C.int32_t(pos0)
	name1 = _GoStringToGString(name0)
	defer C.free(unsafe.Pointer(name1))
	C.gtk_widget_path_iter_remove_class(this1, pos1, name1)
}
func (this0 *WidgetPath) IterRemoveRegion(pos0 int, name0 string) {
	var this1 *C.GtkWidgetPath
	var pos1 C.int32_t
	var name1 *C.char
	this1 = (*C.GtkWidgetPath)(unsafe.Pointer(this0))
	pos1 = C.int32_t(pos0)
	name1 = _GoStringToGString(name0)
	defer C.free(unsafe.Pointer(name1))
	C.gtk_widget_path_iter_remove_region(this1, pos1, name1)
}
func (this0 *WidgetPath) IterSetName(pos0 int, name0 string) {
	var this1 *C.GtkWidgetPath
	var pos1 C.int32_t
	var name1 *C.char
	this1 = (*C.GtkWidgetPath)(unsafe.Pointer(this0))
	pos1 = C.int32_t(pos0)
	name1 = _GoStringToGString(name0)
	defer C.free(unsafe.Pointer(name1))
	C.gtk_widget_path_iter_set_name(this1, pos1, name1)
}
func (this0 *WidgetPath) IterSetObjectType(pos0 int, type0 gobject.Type) {
	var this1 *C.GtkWidgetPath
	var pos1 C.int32_t
	var type1 C.GType
	this1 = (*C.GtkWidgetPath)(unsafe.Pointer(this0))
	pos1 = C.int32_t(pos0)
	type1 = C.GType(type0)
	C.gtk_widget_path_iter_set_object_type(this1, pos1, type1)
}
func (this0 *WidgetPath) Length() int {
	var this1 *C.GtkWidgetPath
	this1 = (*C.GtkWidgetPath)(unsafe.Pointer(this0))
	ret1 := C.gtk_widget_path_length(this1)
	var ret2 int
	ret2 = int(ret1)
	return ret2
}
func (this0 *WidgetPath) PrependType(type0 gobject.Type) {
	var this1 *C.GtkWidgetPath
	var type1 C.GType
	this1 = (*C.GtkWidgetPath)(unsafe.Pointer(this0))
	type1 = C.GType(type0)
	C.gtk_widget_path_prepend_type(this1, type1)
}
func (this0 *WidgetPath) ToString() string {
	var this1 *C.GtkWidgetPath
	this1 = (*C.GtkWidgetPath)(unsafe.Pointer(this0))
	ret1 := C.gtk_widget_path_to_string(this1)
	var ret2 string
	ret2 = C.GoString(ret1)
	C.g_free(unsafe.Pointer(ret1))
	return ret2
}
type WindowLike interface {
	BinLike
	InheritedFromGtkWindow() *C.GtkWindow
}

type Window struct {
	Bin
	atk.ImplementorIfaceImpl
	BuildableImpl
}

func ToWindow(objlike gobject.ObjectLike) *Window {
	c := objlike.InheritedFromGObject()
	if c == nil {
		return nil
	}
	t := (*Window)(nil).GetStaticType()
	obj := gobject.ObjectGrabIfType(unsafe.Pointer(c), t)
	if obj != nil {
		return (*Window)(obj)
	}
	panic("cannot cast to Window")
}

func (this0 *Window) InheritedFromGtkWindow() *C.GtkWindow {
	if this0 == nil {
		return nil
	}
	return (*C.GtkWindow)(this0.C)
}

func (this0 *Window) GetStaticType() gobject.Type {
	return gobject.Type(C.gtk_window_get_type())
}

func WindowGetType() gobject.Type {
	return (*Window)(nil).GetStaticType()
}
func NewWindow(type0 WindowType) *Window {
	var type1 C.GtkWindowType
	type1 = C.GtkWindowType(type0)
	ret1 := C.gtk_window_new(type1)
	var ret2 *Window
	ret2 = (*Window)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
func WindowGetDefaultIconList() []*gdkpixbuf.Pixbuf {
	ret1 := C.gtk_window_get_default_icon_list()
	var ret2 []*gdkpixbuf.Pixbuf
	for iter := (*_GList)(unsafe.Pointer(ret1)); iter != nil; iter = iter.next {
		var elt *gdkpixbuf.Pixbuf
		elt = (*gdkpixbuf.Pixbuf)(gobject.ObjectWrap(unsafe.Pointer((*C.GdkPixbuf)(iter.data)), true))
		ret2 = append(ret2, elt)
	}
	return ret2
}
func WindowGetDefaultIconName() string {
	ret1 := C.gtk_window_get_default_icon_name()
	var ret2 string
	ret2 = C.GoString(ret1)
	return ret2
}
func WindowListToplevels() []*Widget {
	ret1 := C.gtk_window_list_toplevels()
	var ret2 []*Widget
	for iter := (*_GList)(unsafe.Pointer(ret1)); iter != nil; iter = iter.next {
		var elt *Widget
		elt = (*Widget)(gobject.ObjectWrap(unsafe.Pointer((*C.GtkWidget)(iter.data)), true))
		ret2 = append(ret2, elt)
	}
	return ret2
}
func WindowSetAutoStartupNotification(setting0 bool) {
	var setting1 C.int
	setting1 = _GoBoolToCBool(setting0)
	C.gtk_window_set_auto_startup_notification(setting1)
}
func WindowSetDefaultIcon(icon0 gdkpixbuf.PixbufLike) {
	var icon1 *C.GdkPixbuf
	if icon0 != nil {
		icon1 = icon0.InheritedFromGdkPixbuf()
	}
	C.gtk_window_set_default_icon(icon1)
}
func WindowSetDefaultIconFromFile(filename0 string) (bool, error) {
	var filename1 *C.char
	var err1 *C.GError
	filename1 = _GoStringToGString(filename0)
	defer C.free(unsafe.Pointer(filename1))
	ret1 := C.gtk_window_set_default_icon_from_file(filename1, &err1)
	var ret2 bool
	var err2 error
	ret2 = ret1 != 0
	if err1 != nil {
		err2 = errors.New(C.GoString(((*_GError)(unsafe.Pointer(err1))).message))
		C.g_error_free(err1)
	}
	return ret2, err2
}
func WindowSetDefaultIconList(list0 []*gdkpixbuf.Pixbuf) {
	var list1 *C.GList
	C.gtk_window_set_default_icon_list(list1)
}
func WindowSetDefaultIconName(name0 string) {
	var name1 *C.char
	name1 = _GoStringToGString(name0)
	defer C.free(unsafe.Pointer(name1))
	C.gtk_window_set_default_icon_name(name1)
}
func (this0 *Window) ActivateDefault() bool {
	var this1 *C.GtkWindow
	if this0 != nil {
		this1 = this0.InheritedFromGtkWindow()
	}
	ret1 := C.gtk_window_activate_default(this1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *Window) ActivateFocus() bool {
	var this1 *C.GtkWindow
	if this0 != nil {
		this1 = this0.InheritedFromGtkWindow()
	}
	ret1 := C.gtk_window_activate_focus(this1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *Window) ActivateKey(event0 *gdk.EventKey) bool {
	var this1 *C.GtkWindow
	var event1 *C.GdkEventKey
	if this0 != nil {
		this1 = this0.InheritedFromGtkWindow()
	}
	event1 = (*C.GdkEventKey)(unsafe.Pointer(event0))
	ret1 := C.gtk_window_activate_key(this1, event1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *Window) AddAccelGroup(accel_group0 AccelGroupLike) {
	var this1 *C.GtkWindow
	var accel_group1 *C.GtkAccelGroup
	if this0 != nil {
		this1 = this0.InheritedFromGtkWindow()
	}
	if accel_group0 != nil {
		accel_group1 = accel_group0.InheritedFromGtkAccelGroup()
	}
	C.gtk_window_add_accel_group(this1, accel_group1)
}
func (this0 *Window) AddMnemonic(keyval0 int, target0 WidgetLike) {
	var this1 *C.GtkWindow
	var keyval1 C.uint32_t
	var target1 *C.GtkWidget
	if this0 != nil {
		this1 = this0.InheritedFromGtkWindow()
	}
	keyval1 = C.uint32_t(keyval0)
	if target0 != nil {
		target1 = target0.InheritedFromGtkWidget()
	}
	C.gtk_window_add_mnemonic(this1, keyval1, target1)
}
func (this0 *Window) BeginMoveDrag(button0 int, root_x0 int, root_y0 int, timestamp0 int) {
	var this1 *C.GtkWindow
	var button1 C.int32_t
	var root_x1 C.int32_t
	var root_y1 C.int32_t
	var timestamp1 C.uint32_t
	if this0 != nil {
		this1 = this0.InheritedFromGtkWindow()
	}
	button1 = C.int32_t(button0)
	root_x1 = C.int32_t(root_x0)
	root_y1 = C.int32_t(root_y0)
	timestamp1 = C.uint32_t(timestamp0)
	C.gtk_window_begin_move_drag(this1, button1, root_x1, root_y1, timestamp1)
}
func (this0 *Window) BeginResizeDrag(edge0 gdk.WindowEdge, button0 int, root_x0 int, root_y0 int, timestamp0 int) {
	var this1 *C.GtkWindow
	var edge1 C.GdkWindowEdge
	var button1 C.int32_t
	var root_x1 C.int32_t
	var root_y1 C.int32_t
	var timestamp1 C.uint32_t
	if this0 != nil {
		this1 = this0.InheritedFromGtkWindow()
	}
	edge1 = C.GdkWindowEdge(edge0)
	button1 = C.int32_t(button0)
	root_x1 = C.int32_t(root_x0)
	root_y1 = C.int32_t(root_y0)
	timestamp1 = C.uint32_t(timestamp0)
	C.gtk_window_begin_resize_drag(this1, edge1, button1, root_x1, root_y1, timestamp1)
}
func (this0 *Window) Deiconify() {
	var this1 *C.GtkWindow
	if this0 != nil {
		this1 = this0.InheritedFromGtkWindow()
	}
	C.gtk_window_deiconify(this1)
}
func (this0 *Window) Fullscreen() {
	var this1 *C.GtkWindow
	if this0 != nil {
		this1 = this0.InheritedFromGtkWindow()
	}
	C.gtk_window_fullscreen(this1)
}
func (this0 *Window) GetAcceptFocus() bool {
	var this1 *C.GtkWindow
	if this0 != nil {
		this1 = this0.InheritedFromGtkWindow()
	}
	ret1 := C.gtk_window_get_accept_focus(this1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *Window) GetApplication() *Application {
	var this1 *C.GtkWindow
	if this0 != nil {
		this1 = this0.InheritedFromGtkWindow()
	}
	ret1 := C.gtk_window_get_application(this1)
	var ret2 *Application
	ret2 = (*Application)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
func (this0 *Window) GetDecorated() bool {
	var this1 *C.GtkWindow
	if this0 != nil {
		this1 = this0.InheritedFromGtkWindow()
	}
	ret1 := C.gtk_window_get_decorated(this1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *Window) GetDefaultSize() (int, int) {
	var this1 *C.GtkWindow
	var width1 C.int32_t
	var height1 C.int32_t
	if this0 != nil {
		this1 = this0.InheritedFromGtkWindow()
	}
	C.gtk_window_get_default_size(this1, &width1, &height1)
	var width2 int
	var height2 int
	width2 = int(width1)
	height2 = int(height1)
	return width2, height2
}
func (this0 *Window) GetDefaultWidget() *Widget {
	var this1 *C.GtkWindow
	if this0 != nil {
		this1 = this0.InheritedFromGtkWindow()
	}
	ret1 := C.gtk_window_get_default_widget(this1)
	var ret2 *Widget
	ret2 = (*Widget)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
func (this0 *Window) GetDeletable() bool {
	var this1 *C.GtkWindow
	if this0 != nil {
		this1 = this0.InheritedFromGtkWindow()
	}
	ret1 := C.gtk_window_get_deletable(this1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *Window) GetDestroyWithParent() bool {
	var this1 *C.GtkWindow
	if this0 != nil {
		this1 = this0.InheritedFromGtkWindow()
	}
	ret1 := C.gtk_window_get_destroy_with_parent(this1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *Window) GetFocus() *Widget {
	var this1 *C.GtkWindow
	if this0 != nil {
		this1 = this0.InheritedFromGtkWindow()
	}
	ret1 := C.gtk_window_get_focus(this1)
	var ret2 *Widget
	ret2 = (*Widget)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
func (this0 *Window) GetFocusOnMap() bool {
	var this1 *C.GtkWindow
	if this0 != nil {
		this1 = this0.InheritedFromGtkWindow()
	}
	ret1 := C.gtk_window_get_focus_on_map(this1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *Window) GetFocusVisible() bool {
	var this1 *C.GtkWindow
	if this0 != nil {
		this1 = this0.InheritedFromGtkWindow()
	}
	ret1 := C.gtk_window_get_focus_visible(this1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *Window) GetGravity() gdk.Gravity {
	var this1 *C.GtkWindow
	if this0 != nil {
		this1 = this0.InheritedFromGtkWindow()
	}
	ret1 := C.gtk_window_get_gravity(this1)
	var ret2 gdk.Gravity
	ret2 = gdk.Gravity(ret1)
	return ret2
}
func (this0 *Window) GetGroup() *WindowGroup {
	var this1 *C.GtkWindow
	if this0 != nil {
		this1 = this0.InheritedFromGtkWindow()
	}
	ret1 := C.gtk_window_get_group(this1)
	var ret2 *WindowGroup
	ret2 = (*WindowGroup)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
func (this0 *Window) GetHasResizeGrip() bool {
	var this1 *C.GtkWindow
	if this0 != nil {
		this1 = this0.InheritedFromGtkWindow()
	}
	ret1 := C.gtk_window_get_has_resize_grip(this1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *Window) GetIcon() *gdkpixbuf.Pixbuf {
	var this1 *C.GtkWindow
	if this0 != nil {
		this1 = this0.InheritedFromGtkWindow()
	}
	ret1 := C.gtk_window_get_icon(this1)
	var ret2 *gdkpixbuf.Pixbuf
	ret2 = (*gdkpixbuf.Pixbuf)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
func (this0 *Window) GetIconList() []*gdkpixbuf.Pixbuf {
	var this1 *C.GtkWindow
	if this0 != nil {
		this1 = this0.InheritedFromGtkWindow()
	}
	ret1 := C.gtk_window_get_icon_list(this1)
	var ret2 []*gdkpixbuf.Pixbuf
	for iter := (*_GList)(unsafe.Pointer(ret1)); iter != nil; iter = iter.next {
		var elt *gdkpixbuf.Pixbuf
		elt = (*gdkpixbuf.Pixbuf)(gobject.ObjectWrap(unsafe.Pointer((*C.GdkPixbuf)(iter.data)), true))
		ret2 = append(ret2, elt)
	}
	return ret2
}
func (this0 *Window) GetIconName() string {
	var this1 *C.GtkWindow
	if this0 != nil {
		this1 = this0.InheritedFromGtkWindow()
	}
	ret1 := C.gtk_window_get_icon_name(this1)
	var ret2 string
	ret2 = C.GoString(ret1)
	return ret2
}
func (this0 *Window) GetMnemonicModifier() gdk.ModifierType {
	var this1 *C.GtkWindow
	if this0 != nil {
		this1 = this0.InheritedFromGtkWindow()
	}
	ret1 := C.gtk_window_get_mnemonic_modifier(this1)
	var ret2 gdk.ModifierType
	ret2 = gdk.ModifierType(ret1)
	return ret2
}
func (this0 *Window) GetMnemonicsVisible() bool {
	var this1 *C.GtkWindow
	if this0 != nil {
		this1 = this0.InheritedFromGtkWindow()
	}
	ret1 := C.gtk_window_get_mnemonics_visible(this1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *Window) GetModal() bool {
	var this1 *C.GtkWindow
	if this0 != nil {
		this1 = this0.InheritedFromGtkWindow()
	}
	ret1 := C.gtk_window_get_modal(this1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *Window) GetOpacity() float64 {
	var this1 *C.GtkWindow
	if this0 != nil {
		this1 = this0.InheritedFromGtkWindow()
	}
	ret1 := C.gtk_window_get_opacity(this1)
	var ret2 float64
	ret2 = float64(ret1)
	return ret2
}
func (this0 *Window) GetPosition() (int, int) {
	var this1 *C.GtkWindow
	var root_x1 C.int32_t
	var root_y1 C.int32_t
	if this0 != nil {
		this1 = this0.InheritedFromGtkWindow()
	}
	C.gtk_window_get_position(this1, &root_x1, &root_y1)
	var root_x2 int
	var root_y2 int
	root_x2 = int(root_x1)
	root_y2 = int(root_y1)
	return root_x2, root_y2
}
func (this0 *Window) GetResizable() bool {
	var this1 *C.GtkWindow
	if this0 != nil {
		this1 = this0.InheritedFromGtkWindow()
	}
	ret1 := C.gtk_window_get_resizable(this1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *Window) GetResizeGripArea() (cairo.RectangleInt, bool) {
	var this1 *C.GtkWindow
	var rect1 C.cairoRectangleInt
	if this0 != nil {
		this1 = this0.InheritedFromGtkWindow()
	}
	ret1 := C.gtk_window_get_resize_grip_area(this1, &rect1)
	var rect2 cairo.RectangleInt
	var ret2 bool
	rect2 = *(*cairo.RectangleInt)(unsafe.Pointer(&rect1))
	ret2 = ret1 != 0
	return rect2, ret2
}
func (this0 *Window) GetRole() string {
	var this1 *C.GtkWindow
	if this0 != nil {
		this1 = this0.InheritedFromGtkWindow()
	}
	ret1 := C.gtk_window_get_role(this1)
	var ret2 string
	ret2 = C.GoString(ret1)
	return ret2
}
func (this0 *Window) GetScreen() *gdk.Screen {
	var this1 *C.GtkWindow
	if this0 != nil {
		this1 = this0.InheritedFromGtkWindow()
	}
	ret1 := C.gtk_window_get_screen(this1)
	var ret2 *gdk.Screen
	ret2 = (*gdk.Screen)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
func (this0 *Window) GetSize() (int, int) {
	var this1 *C.GtkWindow
	var width1 C.int32_t
	var height1 C.int32_t
	if this0 != nil {
		this1 = this0.InheritedFromGtkWindow()
	}
	C.gtk_window_get_size(this1, &width1, &height1)
	var width2 int
	var height2 int
	width2 = int(width1)
	height2 = int(height1)
	return width2, height2
}
func (this0 *Window) GetSkipPagerHint() bool {
	var this1 *C.GtkWindow
	if this0 != nil {
		this1 = this0.InheritedFromGtkWindow()
	}
	ret1 := C.gtk_window_get_skip_pager_hint(this1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *Window) GetSkipTaskbarHint() bool {
	var this1 *C.GtkWindow
	if this0 != nil {
		this1 = this0.InheritedFromGtkWindow()
	}
	ret1 := C.gtk_window_get_skip_taskbar_hint(this1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *Window) GetTitle() string {
	var this1 *C.GtkWindow
	if this0 != nil {
		this1 = this0.InheritedFromGtkWindow()
	}
	ret1 := C.gtk_window_get_title(this1)
	var ret2 string
	ret2 = C.GoString(ret1)
	return ret2
}
func (this0 *Window) GetTransientFor() *Window {
	var this1 *C.GtkWindow
	if this0 != nil {
		this1 = this0.InheritedFromGtkWindow()
	}
	ret1 := C.gtk_window_get_transient_for(this1)
	var ret2 *Window
	ret2 = (*Window)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
func (this0 *Window) GetTypeHint() gdk.WindowTypeHint {
	var this1 *C.GtkWindow
	if this0 != nil {
		this1 = this0.InheritedFromGtkWindow()
	}
	ret1 := C.gtk_window_get_type_hint(this1)
	var ret2 gdk.WindowTypeHint
	ret2 = gdk.WindowTypeHint(ret1)
	return ret2
}
func (this0 *Window) GetUrgencyHint() bool {
	var this1 *C.GtkWindow
	if this0 != nil {
		this1 = this0.InheritedFromGtkWindow()
	}
	ret1 := C.gtk_window_get_urgency_hint(this1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *Window) GetWindowType() WindowType {
	var this1 *C.GtkWindow
	if this0 != nil {
		this1 = this0.InheritedFromGtkWindow()
	}
	ret1 := C.gtk_window_get_window_type(this1)
	var ret2 WindowType
	ret2 = WindowType(ret1)
	return ret2
}
func (this0 *Window) HasGroup() bool {
	var this1 *C.GtkWindow
	if this0 != nil {
		this1 = this0.InheritedFromGtkWindow()
	}
	ret1 := C.gtk_window_has_group(this1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *Window) HasToplevelFocus() bool {
	var this1 *C.GtkWindow
	if this0 != nil {
		this1 = this0.InheritedFromGtkWindow()
	}
	ret1 := C.gtk_window_has_toplevel_focus(this1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *Window) Iconify() {
	var this1 *C.GtkWindow
	if this0 != nil {
		this1 = this0.InheritedFromGtkWindow()
	}
	C.gtk_window_iconify(this1)
}
func (this0 *Window) IsActive() bool {
	var this1 *C.GtkWindow
	if this0 != nil {
		this1 = this0.InheritedFromGtkWindow()
	}
	ret1 := C.gtk_window_is_active(this1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *Window) Maximize() {
	var this1 *C.GtkWindow
	if this0 != nil {
		this1 = this0.InheritedFromGtkWindow()
	}
	C.gtk_window_maximize(this1)
}
func (this0 *Window) MnemonicActivate(keyval0 int, modifier0 gdk.ModifierType) bool {
	var this1 *C.GtkWindow
	var keyval1 C.uint32_t
	var modifier1 C.GdkModifierType
	if this0 != nil {
		this1 = this0.InheritedFromGtkWindow()
	}
	keyval1 = C.uint32_t(keyval0)
	modifier1 = C.GdkModifierType(modifier0)
	ret1 := C.gtk_window_mnemonic_activate(this1, keyval1, modifier1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *Window) Move(x0 int, y0 int) {
	var this1 *C.GtkWindow
	var x1 C.int32_t
	var y1 C.int32_t
	if this0 != nil {
		this1 = this0.InheritedFromGtkWindow()
	}
	x1 = C.int32_t(x0)
	y1 = C.int32_t(y0)
	C.gtk_window_move(this1, x1, y1)
}
func (this0 *Window) ParseGeometry(geometry0 string) bool {
	var this1 *C.GtkWindow
	var geometry1 *C.char
	if this0 != nil {
		this1 = this0.InheritedFromGtkWindow()
	}
	geometry1 = _GoStringToGString(geometry0)
	defer C.free(unsafe.Pointer(geometry1))
	ret1 := C.gtk_window_parse_geometry(this1, geometry1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *Window) Present() {
	var this1 *C.GtkWindow
	if this0 != nil {
		this1 = this0.InheritedFromGtkWindow()
	}
	C.gtk_window_present(this1)
}
func (this0 *Window) PresentWithTime(timestamp0 int) {
	var this1 *C.GtkWindow
	var timestamp1 C.uint32_t
	if this0 != nil {
		this1 = this0.InheritedFromGtkWindow()
	}
	timestamp1 = C.uint32_t(timestamp0)
	C.gtk_window_present_with_time(this1, timestamp1)
}
func (this0 *Window) PropagateKeyEvent(event0 *gdk.EventKey) bool {
	var this1 *C.GtkWindow
	var event1 *C.GdkEventKey
	if this0 != nil {
		this1 = this0.InheritedFromGtkWindow()
	}
	event1 = (*C.GdkEventKey)(unsafe.Pointer(event0))
	ret1 := C.gtk_window_propagate_key_event(this1, event1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *Window) RemoveAccelGroup(accel_group0 AccelGroupLike) {
	var this1 *C.GtkWindow
	var accel_group1 *C.GtkAccelGroup
	if this0 != nil {
		this1 = this0.InheritedFromGtkWindow()
	}
	if accel_group0 != nil {
		accel_group1 = accel_group0.InheritedFromGtkAccelGroup()
	}
	C.gtk_window_remove_accel_group(this1, accel_group1)
}
func (this0 *Window) RemoveMnemonic(keyval0 int, target0 WidgetLike) {
	var this1 *C.GtkWindow
	var keyval1 C.uint32_t
	var target1 *C.GtkWidget
	if this0 != nil {
		this1 = this0.InheritedFromGtkWindow()
	}
	keyval1 = C.uint32_t(keyval0)
	if target0 != nil {
		target1 = target0.InheritedFromGtkWidget()
	}
	C.gtk_window_remove_mnemonic(this1, keyval1, target1)
}
func (this0 *Window) ReshowWithInitialSize() {
	var this1 *C.GtkWindow
	if this0 != nil {
		this1 = this0.InheritedFromGtkWindow()
	}
	C.gtk_window_reshow_with_initial_size(this1)
}
func (this0 *Window) Resize(width0 int, height0 int) {
	var this1 *C.GtkWindow
	var width1 C.int32_t
	var height1 C.int32_t
	if this0 != nil {
		this1 = this0.InheritedFromGtkWindow()
	}
	width1 = C.int32_t(width0)
	height1 = C.int32_t(height0)
	C.gtk_window_resize(this1, width1, height1)
}
func (this0 *Window) ResizeGripIsVisible() bool {
	var this1 *C.GtkWindow
	if this0 != nil {
		this1 = this0.InheritedFromGtkWindow()
	}
	ret1 := C.gtk_window_resize_grip_is_visible(this1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func (this0 *Window) ResizeToGeometry(width0 int, height0 int) {
	var this1 *C.GtkWindow
	var width1 C.int32_t
	var height1 C.int32_t
	if this0 != nil {
		this1 = this0.InheritedFromGtkWindow()
	}
	width1 = C.int32_t(width0)
	height1 = C.int32_t(height0)
	C.gtk_window_resize_to_geometry(this1, width1, height1)
}
func (this0 *Window) SetAcceptFocus(setting0 bool) {
	var this1 *C.GtkWindow
	var setting1 C.int
	if this0 != nil {
		this1 = this0.InheritedFromGtkWindow()
	}
	setting1 = _GoBoolToCBool(setting0)
	C.gtk_window_set_accept_focus(this1, setting1)
}
func (this0 *Window) SetApplication(application0 ApplicationLike) {
	var this1 *C.GtkWindow
	var application1 *C.GtkApplication
	if this0 != nil {
		this1 = this0.InheritedFromGtkWindow()
	}
	if application0 != nil {
		application1 = application0.InheritedFromGtkApplication()
	}
	C.gtk_window_set_application(this1, application1)
}
func (this0 *Window) SetDecorated(setting0 bool) {
	var this1 *C.GtkWindow
	var setting1 C.int
	if this0 != nil {
		this1 = this0.InheritedFromGtkWindow()
	}
	setting1 = _GoBoolToCBool(setting0)
	C.gtk_window_set_decorated(this1, setting1)
}
func (this0 *Window) SetDefault(default_widget0 WidgetLike) {
	var this1 *C.GtkWindow
	var default_widget1 *C.GtkWidget
	if this0 != nil {
		this1 = this0.InheritedFromGtkWindow()
	}
	if default_widget0 != nil {
		default_widget1 = default_widget0.InheritedFromGtkWidget()
	}
	C.gtk_window_set_default(this1, default_widget1)
}
func (this0 *Window) SetDefaultGeometry(width0 int, height0 int) {
	var this1 *C.GtkWindow
	var width1 C.int32_t
	var height1 C.int32_t
	if this0 != nil {
		this1 = this0.InheritedFromGtkWindow()
	}
	width1 = C.int32_t(width0)
	height1 = C.int32_t(height0)
	C.gtk_window_set_default_geometry(this1, width1, height1)
}
func (this0 *Window) SetDefaultSize(width0 int, height0 int) {
	var this1 *C.GtkWindow
	var width1 C.int32_t
	var height1 C.int32_t
	if this0 != nil {
		this1 = this0.InheritedFromGtkWindow()
	}
	width1 = C.int32_t(width0)
	height1 = C.int32_t(height0)
	C.gtk_window_set_default_size(this1, width1, height1)
}
func (this0 *Window) SetDeletable(setting0 bool) {
	var this1 *C.GtkWindow
	var setting1 C.int
	if this0 != nil {
		this1 = this0.InheritedFromGtkWindow()
	}
	setting1 = _GoBoolToCBool(setting0)
	C.gtk_window_set_deletable(this1, setting1)
}
func (this0 *Window) SetDestroyWithParent(setting0 bool) {
	var this1 *C.GtkWindow
	var setting1 C.int
	if this0 != nil {
		this1 = this0.InheritedFromGtkWindow()
	}
	setting1 = _GoBoolToCBool(setting0)
	C.gtk_window_set_destroy_with_parent(this1, setting1)
}
func (this0 *Window) SetFocus(focus0 WidgetLike) {
	var this1 *C.GtkWindow
	var focus1 *C.GtkWidget
	if this0 != nil {
		this1 = this0.InheritedFromGtkWindow()
	}
	if focus0 != nil {
		focus1 = focus0.InheritedFromGtkWidget()
	}
	C.gtk_window_set_focus(this1, focus1)
}
func (this0 *Window) SetFocusOnMap(setting0 bool) {
	var this1 *C.GtkWindow
	var setting1 C.int
	if this0 != nil {
		this1 = this0.InheritedFromGtkWindow()
	}
	setting1 = _GoBoolToCBool(setting0)
	C.gtk_window_set_focus_on_map(this1, setting1)
}
func (this0 *Window) SetFocusVisible(setting0 bool) {
	var this1 *C.GtkWindow
	var setting1 C.int
	if this0 != nil {
		this1 = this0.InheritedFromGtkWindow()
	}
	setting1 = _GoBoolToCBool(setting0)
	C.gtk_window_set_focus_visible(this1, setting1)
}
func (this0 *Window) SetGeometryHints(geometry_widget0 WidgetLike, geometry0 *gdk.Geometry, geom_mask0 gdk.WindowHints) {
	var this1 *C.GtkWindow
	var geometry_widget1 *C.GtkWidget
	var geometry1 *C.GdkGeometry
	var geom_mask1 C.GdkWindowHints
	if this0 != nil {
		this1 = this0.InheritedFromGtkWindow()
	}
	if geometry_widget0 != nil {
		geometry_widget1 = geometry_widget0.InheritedFromGtkWidget()
	}
	geometry1 = (*C.GdkGeometry)(unsafe.Pointer(geometry0))
	geom_mask1 = C.GdkWindowHints(geom_mask0)
	C.gtk_window_set_geometry_hints(this1, geometry_widget1, geometry1, geom_mask1)
}
func (this0 *Window) SetGravity(gravity0 gdk.Gravity) {
	var this1 *C.GtkWindow
	var gravity1 C.GdkGravity
	if this0 != nil {
		this1 = this0.InheritedFromGtkWindow()
	}
	gravity1 = C.GdkGravity(gravity0)
	C.gtk_window_set_gravity(this1, gravity1)
}
func (this0 *Window) SetHasResizeGrip(value0 bool) {
	var this1 *C.GtkWindow
	var value1 C.int
	if this0 != nil {
		this1 = this0.InheritedFromGtkWindow()
	}
	value1 = _GoBoolToCBool(value0)
	C.gtk_window_set_has_resize_grip(this1, value1)
}
func (this0 *Window) SetHasUserRefCount(setting0 bool) {
	var this1 *C.GtkWindow
	var setting1 C.int
	if this0 != nil {
		this1 = this0.InheritedFromGtkWindow()
	}
	setting1 = _GoBoolToCBool(setting0)
	C.gtk_window_set_has_user_ref_count(this1, setting1)
}
func (this0 *Window) SetIcon(icon0 gdkpixbuf.PixbufLike) {
	var this1 *C.GtkWindow
	var icon1 *C.GdkPixbuf
	if this0 != nil {
		this1 = this0.InheritedFromGtkWindow()
	}
	if icon0 != nil {
		icon1 = icon0.InheritedFromGdkPixbuf()
	}
	C.gtk_window_set_icon(this1, icon1)
}
func (this0 *Window) SetIconFromFile(filename0 string) (bool, error) {
	var this1 *C.GtkWindow
	var filename1 *C.char
	var err1 *C.GError
	if this0 != nil {
		this1 = this0.InheritedFromGtkWindow()
	}
	filename1 = _GoStringToGString(filename0)
	defer C.free(unsafe.Pointer(filename1))
	ret1 := C.gtk_window_set_icon_from_file(this1, filename1, &err1)
	var ret2 bool
	var err2 error
	ret2 = ret1 != 0
	if err1 != nil {
		err2 = errors.New(C.GoString(((*_GError)(unsafe.Pointer(err1))).message))
		C.g_error_free(err1)
	}
	return ret2, err2
}
func (this0 *Window) SetIconList(list0 []*gdkpixbuf.Pixbuf) {
	var this1 *C.GtkWindow
	var list1 *C.GList
	if this0 != nil {
		this1 = this0.InheritedFromGtkWindow()
	}
	C.gtk_window_set_icon_list(this1, list1)
}
func (this0 *Window) SetIconName(name0 string) {
	var this1 *C.GtkWindow
	var name1 *C.char
	if this0 != nil {
		this1 = this0.InheritedFromGtkWindow()
	}
	name1 = _GoStringToGString(name0)
	defer C.free(unsafe.Pointer(name1))
	C.gtk_window_set_icon_name(this1, name1)
}
func (this0 *Window) SetKeepAbove(setting0 bool) {
	var this1 *C.GtkWindow
	var setting1 C.int
	if this0 != nil {
		this1 = this0.InheritedFromGtkWindow()
	}
	setting1 = _GoBoolToCBool(setting0)
	C.gtk_window_set_keep_above(this1, setting1)
}
func (this0 *Window) SetKeepBelow(setting0 bool) {
	var this1 *C.GtkWindow
	var setting1 C.int
	if this0 != nil {
		this1 = this0.InheritedFromGtkWindow()
	}
	setting1 = _GoBoolToCBool(setting0)
	C.gtk_window_set_keep_below(this1, setting1)
}
func (this0 *Window) SetMnemonicModifier(modifier0 gdk.ModifierType) {
	var this1 *C.GtkWindow
	var modifier1 C.GdkModifierType
	if this0 != nil {
		this1 = this0.InheritedFromGtkWindow()
	}
	modifier1 = C.GdkModifierType(modifier0)
	C.gtk_window_set_mnemonic_modifier(this1, modifier1)
}
func (this0 *Window) SetMnemonicsVisible(setting0 bool) {
	var this1 *C.GtkWindow
	var setting1 C.int
	if this0 != nil {
		this1 = this0.InheritedFromGtkWindow()
	}
	setting1 = _GoBoolToCBool(setting0)
	C.gtk_window_set_mnemonics_visible(this1, setting1)
}
func (this0 *Window) SetModal(modal0 bool) {
	var this1 *C.GtkWindow
	var modal1 C.int
	if this0 != nil {
		this1 = this0.InheritedFromGtkWindow()
	}
	modal1 = _GoBoolToCBool(modal0)
	C.gtk_window_set_modal(this1, modal1)
}
func (this0 *Window) SetOpacity(opacity0 float64) {
	var this1 *C.GtkWindow
	var opacity1 C.double
	if this0 != nil {
		this1 = this0.InheritedFromGtkWindow()
	}
	opacity1 = C.double(opacity0)
	C.gtk_window_set_opacity(this1, opacity1)
}
func (this0 *Window) SetPosition(position0 WindowPosition) {
	var this1 *C.GtkWindow
	var position1 C.GtkWindowPosition
	if this0 != nil {
		this1 = this0.InheritedFromGtkWindow()
	}
	position1 = C.GtkWindowPosition(position0)
	C.gtk_window_set_position(this1, position1)
}
func (this0 *Window) SetResizable(resizable0 bool) {
	var this1 *C.GtkWindow
	var resizable1 C.int
	if this0 != nil {
		this1 = this0.InheritedFromGtkWindow()
	}
	resizable1 = _GoBoolToCBool(resizable0)
	C.gtk_window_set_resizable(this1, resizable1)
}
func (this0 *Window) SetRole(role0 string) {
	var this1 *C.GtkWindow
	var role1 *C.char
	if this0 != nil {
		this1 = this0.InheritedFromGtkWindow()
	}
	role1 = _GoStringToGString(role0)
	defer C.free(unsafe.Pointer(role1))
	C.gtk_window_set_role(this1, role1)
}
func (this0 *Window) SetScreen(screen0 gdk.ScreenLike) {
	var this1 *C.GtkWindow
	var screen1 *C.GdkScreen
	if this0 != nil {
		this1 = this0.InheritedFromGtkWindow()
	}
	if screen0 != nil {
		screen1 = screen0.InheritedFromGdkScreen()
	}
	C.gtk_window_set_screen(this1, screen1)
}
func (this0 *Window) SetSkipPagerHint(setting0 bool) {
	var this1 *C.GtkWindow
	var setting1 C.int
	if this0 != nil {
		this1 = this0.InheritedFromGtkWindow()
	}
	setting1 = _GoBoolToCBool(setting0)
	C.gtk_window_set_skip_pager_hint(this1, setting1)
}
func (this0 *Window) SetSkipTaskbarHint(setting0 bool) {
	var this1 *C.GtkWindow
	var setting1 C.int
	if this0 != nil {
		this1 = this0.InheritedFromGtkWindow()
	}
	setting1 = _GoBoolToCBool(setting0)
	C.gtk_window_set_skip_taskbar_hint(this1, setting1)
}
func (this0 *Window) SetStartupID(startup_id0 string) {
	var this1 *C.GtkWindow
	var startup_id1 *C.char
	if this0 != nil {
		this1 = this0.InheritedFromGtkWindow()
	}
	startup_id1 = _GoStringToGString(startup_id0)
	defer C.free(unsafe.Pointer(startup_id1))
	C.gtk_window_set_startup_id(this1, startup_id1)
}
func (this0 *Window) SetTitle(title0 string) {
	var this1 *C.GtkWindow
	var title1 *C.char
	if this0 != nil {
		this1 = this0.InheritedFromGtkWindow()
	}
	title1 = _GoStringToGString(title0)
	defer C.free(unsafe.Pointer(title1))
	C.gtk_window_set_title(this1, title1)
}
func (this0 *Window) SetTransientFor(parent0 WindowLike) {
	var this1 *C.GtkWindow
	var parent1 *C.GtkWindow
	if this0 != nil {
		this1 = this0.InheritedFromGtkWindow()
	}
	if parent0 != nil {
		parent1 = parent0.InheritedFromGtkWindow()
	}
	C.gtk_window_set_transient_for(this1, parent1)
}
func (this0 *Window) SetTypeHint(hint0 gdk.WindowTypeHint) {
	var this1 *C.GtkWindow
	var hint1 C.GdkWindowTypeHint
	if this0 != nil {
		this1 = this0.InheritedFromGtkWindow()
	}
	hint1 = C.GdkWindowTypeHint(hint0)
	C.gtk_window_set_type_hint(this1, hint1)
}
func (this0 *Window) SetUrgencyHint(setting0 bool) {
	var this1 *C.GtkWindow
	var setting1 C.int
	if this0 != nil {
		this1 = this0.InheritedFromGtkWindow()
	}
	setting1 = _GoBoolToCBool(setting0)
	C.gtk_window_set_urgency_hint(this1, setting1)
}
func (this0 *Window) SetWMClass(wmclass_name0 string, wmclass_class0 string) {
	var this1 *C.GtkWindow
	var wmclass_name1 *C.char
	var wmclass_class1 *C.char
	if this0 != nil {
		this1 = this0.InheritedFromGtkWindow()
	}
	wmclass_name1 = _GoStringToGString(wmclass_name0)
	defer C.free(unsafe.Pointer(wmclass_name1))
	wmclass_class1 = _GoStringToGString(wmclass_class0)
	defer C.free(unsafe.Pointer(wmclass_class1))
	C.gtk_window_set_wmclass(this1, wmclass_name1, wmclass_class1)
}
func (this0 *Window) Stick() {
	var this1 *C.GtkWindow
	if this0 != nil {
		this1 = this0.InheritedFromGtkWindow()
	}
	C.gtk_window_stick(this1)
}
func (this0 *Window) Unfullscreen() {
	var this1 *C.GtkWindow
	if this0 != nil {
		this1 = this0.InheritedFromGtkWindow()
	}
	C.gtk_window_unfullscreen(this1)
}
func (this0 *Window) Unmaximize() {
	var this1 *C.GtkWindow
	if this0 != nil {
		this1 = this0.InheritedFromGtkWindow()
	}
	C.gtk_window_unmaximize(this1)
}
func (this0 *Window) Unstick() {
	var this1 *C.GtkWindow
	if this0 != nil {
		this1 = this0.InheritedFromGtkWindow()
	}
	C.gtk_window_unstick(this1)
}
type WindowGeometryInfo struct {}
type WindowGroupLike interface {
	gobject.ObjectLike
	InheritedFromGtkWindowGroup() *C.GtkWindowGroup
}

type WindowGroup struct {
	gobject.Object
	
}

func ToWindowGroup(objlike gobject.ObjectLike) *WindowGroup {
	c := objlike.InheritedFromGObject()
	if c == nil {
		return nil
	}
	t := (*WindowGroup)(nil).GetStaticType()
	obj := gobject.ObjectGrabIfType(unsafe.Pointer(c), t)
	if obj != nil {
		return (*WindowGroup)(obj)
	}
	panic("cannot cast to WindowGroup")
}

func (this0 *WindowGroup) InheritedFromGtkWindowGroup() *C.GtkWindowGroup {
	if this0 == nil {
		return nil
	}
	return (*C.GtkWindowGroup)(this0.C)
}

func (this0 *WindowGroup) GetStaticType() gobject.Type {
	return gobject.Type(C.gtk_window_group_get_type())
}

func WindowGroupGetType() gobject.Type {
	return (*WindowGroup)(nil).GetStaticType()
}
func NewWindowGroup() *WindowGroup {
	ret1 := C.gtk_window_group_new()
	var ret2 *WindowGroup
	ret2 = (*WindowGroup)(gobject.ObjectWrap(unsafe.Pointer(ret1), false))
	return ret2
}
func (this0 *WindowGroup) AddWindow(window0 WindowLike) {
	var this1 *C.GtkWindowGroup
	var window1 *C.GtkWindow
	if this0 != nil {
		this1 = this0.InheritedFromGtkWindowGroup()
	}
	if window0 != nil {
		window1 = window0.InheritedFromGtkWindow()
	}
	C.gtk_window_group_add_window(this1, window1)
}
func (this0 *WindowGroup) GetCurrentDeviceGrab(device0 gdk.DeviceLike) *Widget {
	var this1 *C.GtkWindowGroup
	var device1 *C.GdkDevice
	if this0 != nil {
		this1 = this0.InheritedFromGtkWindowGroup()
	}
	if device0 != nil {
		device1 = device0.InheritedFromGdkDevice()
	}
	ret1 := C.gtk_window_group_get_current_device_grab(this1, device1)
	var ret2 *Widget
	ret2 = (*Widget)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
func (this0 *WindowGroup) GetCurrentGrab() *Widget {
	var this1 *C.GtkWindowGroup
	if this0 != nil {
		this1 = this0.InheritedFromGtkWindowGroup()
	}
	ret1 := C.gtk_window_group_get_current_grab(this1)
	var ret2 *Widget
	ret2 = (*Widget)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
func (this0 *WindowGroup) ListWindows() []*Window {
	var this1 *C.GtkWindowGroup
	if this0 != nil {
		this1 = this0.InheritedFromGtkWindowGroup()
	}
	ret1 := C.gtk_window_group_list_windows(this1)
	var ret2 []*Window
	for iter := (*_GList)(unsafe.Pointer(ret1)); iter != nil; iter = iter.next {
		var elt *Window
		elt = (*Window)(gobject.ObjectWrap(unsafe.Pointer((*C.GtkWindow)(iter.data)), true))
		ret2 = append(ret2, elt)
	}
	return ret2
}
func (this0 *WindowGroup) RemoveWindow(window0 WindowLike) {
	var this1 *C.GtkWindowGroup
	var window1 *C.GtkWindow
	if this0 != nil {
		this1 = this0.InheritedFromGtkWindowGroup()
	}
	if window0 != nil {
		window1 = window0.InheritedFromGtkWindow()
	}
	C.gtk_window_group_remove_window(this1, window1)
}
type WindowPosition C.uint32_t
const (
	WindowPositionNone WindowPosition = 0
	WindowPositionCenter WindowPosition = 1
	WindowPositionMouse WindowPosition = 2
	WindowPositionCenterAlways WindowPosition = 3
	WindowPositionCenterOnParent WindowPosition = 4
)
type WindowType C.uint32_t
const (
	WindowTypeToplevel WindowType = 0
	WindowTypePopup WindowType = 1
)
type WrapMode C.uint32_t
const (
	WrapModeNone WrapMode = 0
	WrapModeChar WrapMode = 1
	WrapModeWord WrapMode = 2
	WrapModeWordChar WrapMode = 3
)
func AccelGroupsActivate(object0 gobject.ObjectLike, accel_key0 int, accel_mods0 gdk.ModifierType) bool {
	var object1 *C.GObject
	var accel_key1 C.uint32_t
	var accel_mods1 C.GdkModifierType
	if object0 != nil {
		object1 = object0.InheritedFromGObject()
	}
	accel_key1 = C.uint32_t(accel_key0)
	accel_mods1 = C.GdkModifierType(accel_mods0)
	ret1 := C.gtk_accel_groups_activate(object1, accel_key1, accel_mods1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func AccelGroupsFromObject(object0 gobject.ObjectLike) []*AccelGroup {
	var object1 *C.GObject
	if object0 != nil {
		object1 = object0.InheritedFromGObject()
	}
	ret1 := C.gtk_accel_groups_from_object(object1)
	var ret2 []*AccelGroup
	for iter := (*_GSList)(unsafe.Pointer(ret1)); iter != nil; iter = iter.next {
		var elt *AccelGroup
		elt = (*AccelGroup)(gobject.ObjectWrap(unsafe.Pointer((*C.GtkAccelGroup)(iter.data)), true))
		ret2 = append(ret2, elt)
	}
	return ret2
}
func AcceleratorGetDefaultModMask() gdk.ModifierType {
	ret1 := C.gtk_accelerator_get_default_mod_mask()
	var ret2 gdk.ModifierType
	ret2 = gdk.ModifierType(ret1)
	return ret2
}
func AcceleratorGetLabel(accelerator_key0 int, accelerator_mods0 gdk.ModifierType) string {
	var accelerator_key1 C.uint32_t
	var accelerator_mods1 C.GdkModifierType
	accelerator_key1 = C.uint32_t(accelerator_key0)
	accelerator_mods1 = C.GdkModifierType(accelerator_mods0)
	ret1 := C.gtk_accelerator_get_label(accelerator_key1, accelerator_mods1)
	var ret2 string
	ret2 = C.GoString(ret1)
	C.g_free(unsafe.Pointer(ret1))
	return ret2
}
func AcceleratorName(accelerator_key0 int, accelerator_mods0 gdk.ModifierType) string {
	var accelerator_key1 C.uint32_t
	var accelerator_mods1 C.GdkModifierType
	accelerator_key1 = C.uint32_t(accelerator_key0)
	accelerator_mods1 = C.GdkModifierType(accelerator_mods0)
	ret1 := C.gtk_accelerator_name(accelerator_key1, accelerator_mods1)
	var ret2 string
	ret2 = C.GoString(ret1)
	C.g_free(unsafe.Pointer(ret1))
	return ret2
}
func AcceleratorParse(accelerator0 string) (int, gdk.ModifierType) {
	var accelerator1 *C.char
	var accelerator_key1 C.uint32_t
	var accelerator_mods1 C.GdkModifierType
	accelerator1 = _GoStringToGString(accelerator0)
	defer C.free(unsafe.Pointer(accelerator1))
	C.gtk_accelerator_parse(accelerator1, &accelerator_key1, &accelerator_mods1)
	var accelerator_key2 int
	var accelerator_mods2 gdk.ModifierType
	accelerator_key2 = int(accelerator_key1)
	accelerator_mods2 = gdk.ModifierType(accelerator_mods1)
	return accelerator_key2, accelerator_mods2
}
func AcceleratorSetDefaultModMask(default_mod_mask0 gdk.ModifierType) {
	var default_mod_mask1 C.GdkModifierType
	default_mod_mask1 = C.GdkModifierType(default_mod_mask0)
	C.gtk_accelerator_set_default_mod_mask(default_mod_mask1)
}
func AcceleratorValid(keyval0 int, modifiers0 gdk.ModifierType) bool {
	var keyval1 C.uint32_t
	var modifiers1 C.GdkModifierType
	keyval1 = C.uint32_t(keyval0)
	modifiers1 = C.GdkModifierType(modifiers0)
	ret1 := C.gtk_accelerator_valid(keyval1, modifiers1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func AlternativeDialogButtonOrder(screen0 gdk.ScreenLike) bool {
	var screen1 *C.GdkScreen
	if screen0 != nil {
		screen1 = screen0.InheritedFromGdkScreen()
	}
	ret1 := C.gtk_alternative_dialog_button_order(screen1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
// blacklisted: binding_entry_add_signal_from_string (function)
// blacklisted: binding_entry_add_signall (function)
// blacklisted: binding_entry_remove (function)
// blacklisted: binding_entry_skip (function)
// blacklisted: binding_set_find (function)
func BindingsActivate(object0 gobject.ObjectLike, keyval0 int, modifiers0 gdk.ModifierType) bool {
	var object1 *C.GObject
	var keyval1 C.uint32_t
	var modifiers1 C.GdkModifierType
	if object0 != nil {
		object1 = object0.InheritedFromGObject()
	}
	keyval1 = C.uint32_t(keyval0)
	modifiers1 = C.GdkModifierType(modifiers0)
	ret1 := C.gtk_bindings_activate(object1, keyval1, modifiers1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func BindingsActivateEvent(object0 gobject.ObjectLike, event0 *gdk.EventKey) bool {
	var object1 *C.GObject
	var event1 *C.GdkEventKey
	if object0 != nil {
		object1 = object0.InheritedFromGObject()
	}
	event1 = (*C.GdkEventKey)(unsafe.Pointer(event0))
	ret1 := C.gtk_bindings_activate_event(object1, event1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func BuilderErrorQuark() int {
	ret1 := C.gtk_builder_error_quark()
	var ret2 int
	ret2 = int(ret1)
	return ret2
}
func CairoShouldDrawWindow(cr0 *cairo.Context, window0 gdk.WindowLike) bool {
	var cr1 *C.cairoContext
	var window1 *C.GdkWindow
	if cr0 != nil {
		cr1 = (*C.cairoContext)(cr0.C)
	}
	if window0 != nil {
		window1 = window0.InheritedFromGdkWindow()
	}
	ret1 := C.gtk_cairo_should_draw_window(cr1, window1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func CairoTransformToWindow(cr0 *cairo.Context, widget0 WidgetLike, window0 gdk.WindowLike) {
	var cr1 *C.cairoContext
	var widget1 *C.GtkWidget
	var window1 *C.GdkWindow
	if cr0 != nil {
		cr1 = (*C.cairoContext)(cr0.C)
	}
	if widget0 != nil {
		widget1 = widget0.InheritedFromGtkWidget()
	}
	if window0 != nil {
		window1 = window0.InheritedFromGdkWindow()
	}
	C.gtk_cairo_transform_to_window(cr1, widget1, window1)
}
func CheckVersion(required_major0 int, required_minor0 int, required_micro0 int) string {
	var required_major1 C.uint32_t
	var required_minor1 C.uint32_t
	var required_micro1 C.uint32_t
	required_major1 = C.uint32_t(required_major0)
	required_minor1 = C.uint32_t(required_minor0)
	required_micro1 = C.uint32_t(required_micro0)
	ret1 := C.gtk_check_version(required_major1, required_minor1, required_micro1)
	var ret2 string
	ret2 = C.GoString(ret1)
	return ret2
}
func CssProviderErrorQuark() int {
	ret1 := C.gtk_css_provider_error_quark()
	var ret2 int
	ret2 = int(ret1)
	return ret2
}
func DeviceGrabAdd(widget0 WidgetLike, device0 gdk.DeviceLike, block_others0 bool) {
	var widget1 *C.GtkWidget
	var device1 *C.GdkDevice
	var block_others1 C.int
	if widget0 != nil {
		widget1 = widget0.InheritedFromGtkWidget()
	}
	if device0 != nil {
		device1 = device0.InheritedFromGdkDevice()
	}
	block_others1 = _GoBoolToCBool(block_others0)
	C.gtk_device_grab_add(widget1, device1, block_others1)
}
func DeviceGrabRemove(widget0 WidgetLike, device0 gdk.DeviceLike) {
	var widget1 *C.GtkWidget
	var device1 *C.GdkDevice
	if widget0 != nil {
		widget1 = widget0.InheritedFromGtkWidget()
	}
	if device0 != nil {
		device1 = device0.InheritedFromGdkDevice()
	}
	C.gtk_device_grab_remove(widget1, device1)
}
func DisableSetlocale() {
	C.gtk_disable_setlocale()
}
func DistributeNaturalAllocation(extra_space0 int, n_requested_sizes0 int, sizes0 *RequestedSize) int {
	var extra_space1 C.int32_t
	var n_requested_sizes1 C.uint32_t
	var sizes1 *C.GtkRequestedSize
	extra_space1 = C.int32_t(extra_space0)
	n_requested_sizes1 = C.uint32_t(n_requested_sizes0)
	sizes1 = (*C.GtkRequestedSize)(unsafe.Pointer(sizes0))
	ret1 := C.gtk_distribute_natural_allocation(extra_space1, n_requested_sizes1, sizes1)
	var ret2 int
	ret2 = int(ret1)
	return ret2
}
func DragFinish(context0 gdk.DragContextLike, success0 bool, del0 bool, time_0 int) {
	var context1 *C.GdkDragContext
	var success1 C.int
	var del1 C.int
	var time_1 C.uint32_t
	if context0 != nil {
		context1 = context0.InheritedFromGdkDragContext()
	}
	success1 = _GoBoolToCBool(success0)
	del1 = _GoBoolToCBool(del0)
	time_1 = C.uint32_t(time_0)
	C.gtk_drag_finish(context1, success1, del1, time_1)
}
func DragGetSourceWidget(context0 gdk.DragContextLike) *Widget {
	var context1 *C.GdkDragContext
	if context0 != nil {
		context1 = context0.InheritedFromGdkDragContext()
	}
	ret1 := C.gtk_drag_get_source_widget(context1)
	var ret2 *Widget
	ret2 = (*Widget)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
func DragSetIconDefault(context0 gdk.DragContextLike) {
	var context1 *C.GdkDragContext
	if context0 != nil {
		context1 = context0.InheritedFromGdkDragContext()
	}
	C.gtk_drag_set_icon_default(context1)
}
func DragSetIconGIcon(context0 gdk.DragContextLike, icon0 gio.IconLike, hot_x0 int, hot_y0 int) {
	var context1 *C.GdkDragContext
	var icon1 *C.GIcon
	var hot_x1 C.int32_t
	var hot_y1 C.int32_t
	if context0 != nil {
		context1 = context0.InheritedFromGdkDragContext()
	}
	if icon0 != nil {
		icon1 = icon0.ImplementsGIcon()}
	hot_x1 = C.int32_t(hot_x0)
	hot_y1 = C.int32_t(hot_y0)
	C.gtk_drag_set_icon_gicon(context1, icon1, hot_x1, hot_y1)
}
func DragSetIconName(context0 gdk.DragContextLike, icon_name0 string, hot_x0 int, hot_y0 int) {
	var context1 *C.GdkDragContext
	var icon_name1 *C.char
	var hot_x1 C.int32_t
	var hot_y1 C.int32_t
	if context0 != nil {
		context1 = context0.InheritedFromGdkDragContext()
	}
	icon_name1 = _GoStringToGString(icon_name0)
	defer C.free(unsafe.Pointer(icon_name1))
	hot_x1 = C.int32_t(hot_x0)
	hot_y1 = C.int32_t(hot_y0)
	C.gtk_drag_set_icon_name(context1, icon_name1, hot_x1, hot_y1)
}
func DragSetIconPixbuf(context0 gdk.DragContextLike, pixbuf0 gdkpixbuf.PixbufLike, hot_x0 int, hot_y0 int) {
	var context1 *C.GdkDragContext
	var pixbuf1 *C.GdkPixbuf
	var hot_x1 C.int32_t
	var hot_y1 C.int32_t
	if context0 != nil {
		context1 = context0.InheritedFromGdkDragContext()
	}
	if pixbuf0 != nil {
		pixbuf1 = pixbuf0.InheritedFromGdkPixbuf()
	}
	hot_x1 = C.int32_t(hot_x0)
	hot_y1 = C.int32_t(hot_y0)
	C.gtk_drag_set_icon_pixbuf(context1, pixbuf1, hot_x1, hot_y1)
}
func DragSetIconStock(context0 gdk.DragContextLike, stock_id0 string, hot_x0 int, hot_y0 int) {
	var context1 *C.GdkDragContext
	var stock_id1 *C.char
	var hot_x1 C.int32_t
	var hot_y1 C.int32_t
	if context0 != nil {
		context1 = context0.InheritedFromGdkDragContext()
	}
	stock_id1 = _GoStringToGString(stock_id0)
	defer C.free(unsafe.Pointer(stock_id1))
	hot_x1 = C.int32_t(hot_x0)
	hot_y1 = C.int32_t(hot_y0)
	C.gtk_drag_set_icon_stock(context1, stock_id1, hot_x1, hot_y1)
}
func DragSetIconSurface(context0 gdk.DragContextLike, surface0 cairo.SurfaceLike) {
	var context1 *C.GdkDragContext
	var surface1 *C.cairoSurface
	if context0 != nil {
		context1 = context0.InheritedFromGdkDragContext()
	}
	if surface0 != nil {
		surface1 = (*C.cairoSurface)(surface0.InheritedFromCairoSurface().C)
	}
	C.gtk_drag_set_icon_surface(context1, surface1)
}
func DragSetIconWidget(context0 gdk.DragContextLike, widget0 WidgetLike, hot_x0 int, hot_y0 int) {
	var context1 *C.GdkDragContext
	var widget1 *C.GtkWidget
	var hot_x1 C.int32_t
	var hot_y1 C.int32_t
	if context0 != nil {
		context1 = context0.InheritedFromGdkDragContext()
	}
	if widget0 != nil {
		widget1 = widget0.InheritedFromGtkWidget()
	}
	hot_x1 = C.int32_t(hot_x0)
	hot_y1 = C.int32_t(hot_y0)
	C.gtk_drag_set_icon_widget(context1, widget1, hot_x1, hot_y1)
}
func DrawInsertionCursor(widget0 WidgetLike, cr0 *cairo.Context, location0 *cairo.RectangleInt, is_primary0 bool, direction0 TextDirection, draw_arrow0 bool) {
	var widget1 *C.GtkWidget
	var cr1 *C.cairoContext
	var location1 *C.cairoRectangleInt
	var is_primary1 C.int
	var direction1 C.GtkTextDirection
	var draw_arrow1 C.int
	if widget0 != nil {
		widget1 = widget0.InheritedFromGtkWidget()
	}
	if cr0 != nil {
		cr1 = (*C.cairoContext)(cr0.C)
	}
	location1 = (*C.cairoRectangleInt)(unsafe.Pointer(location0))
	is_primary1 = _GoBoolToCBool(is_primary0)
	direction1 = C.GtkTextDirection(direction0)
	draw_arrow1 = _GoBoolToCBool(draw_arrow0)
	C.gtk_draw_insertion_cursor(widget1, cr1, location1, is_primary1, direction1, draw_arrow1)
}
func EventsPending() bool {
	ret1 := C.gtk_events_pending()
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func False() bool {
	ret1 := C.gtk_false()
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func FileChooserErrorQuark() int {
	ret1 := C.gtk_file_chooser_error_quark()
	var ret2 int
	ret2 = int(ret1)
	return ret2
}
func GetBinaryAge() int {
	ret1 := C.gtk_get_binary_age()
	var ret2 int
	ret2 = int(ret1)
	return ret2
}
func GetCurrentEvent() *gdk.Event {
	ret1 := C.gtk_get_current_event()
	var ret2 *gdk.Event
	ret2 = (*gdk.Event)(unsafe.Pointer(ret1))
	return ret2
}
func GetCurrentEventDevice() *gdk.Device {
	ret1 := C.gtk_get_current_event_device()
	var ret2 *gdk.Device
	ret2 = (*gdk.Device)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
func GetCurrentEventState() (gdk.ModifierType, bool) {
	var state1 C.GdkModifierType
	ret1 := C.gtk_get_current_event_state(&state1)
	var state2 gdk.ModifierType
	var ret2 bool
	state2 = gdk.ModifierType(state1)
	ret2 = ret1 != 0
	return state2, ret2
}
func GetCurrentEventTime() int {
	ret1 := C.gtk_get_current_event_time()
	var ret2 int
	ret2 = int(ret1)
	return ret2
}
func GetDebugFlags() int {
	ret1 := C.gtk_get_debug_flags()
	var ret2 int
	ret2 = int(ret1)
	return ret2
}
func GetDefaultLanguage() *pango.Language {
	ret1 := C.gtk_get_default_language()
	var ret2 *pango.Language
	ret2 = (*pango.Language)(unsafe.Pointer(ret1))
	return ret2
}
func GetEventWidget(event0 *gdk.Event) *Widget {
	var event1 *C.GdkEvent
	ret1 := C.gtk_get_event_widget(event1)
	var ret2 *Widget
	ret2 = (*Widget)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
func GetInterfaceAge() int {
	ret1 := C.gtk_get_interface_age()
	var ret2 int
	ret2 = int(ret1)
	return ret2
}
func GetMajorVersion() int {
	ret1 := C.gtk_get_major_version()
	var ret2 int
	ret2 = int(ret1)
	return ret2
}
func GetMicroVersion() int {
	ret1 := C.gtk_get_micro_version()
	var ret2 int
	ret2 = int(ret1)
	return ret2
}
func GetMinorVersion() int {
	ret1 := C.gtk_get_minor_version()
	var ret2 int
	ret2 = int(ret1)
	return ret2
}
func GrabGetCurrent() *Widget {
	ret1 := C.gtk_grab_get_current()
	var ret2 *Widget
	ret2 = (*Widget)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
func IconSizeFromName(name0 string) int {
	var name1 *C.char
	name1 = _GoStringToGString(name0)
	defer C.free(unsafe.Pointer(name1))
	ret1 := C.gtk_icon_size_from_name(name1)
	var ret2 int
	ret2 = int(ret1)
	return ret2
}
func IconSizeGetName(size0 int) string {
	var size1 C.int32_t
	size1 = C.int32_t(size0)
	ret1 := C.gtk_icon_size_get_name(size1)
	var ret2 string
	ret2 = C.GoString(ret1)
	return ret2
}
func IconSizeLookup(size0 int) (int, int, bool) {
	var size1 C.int32_t
	var width1 C.int32_t
	var height1 C.int32_t
	size1 = C.int32_t(size0)
	ret1 := C.gtk_icon_size_lookup(size1, &width1, &height1)
	var width2 int
	var height2 int
	var ret2 bool
	width2 = int(width1)
	height2 = int(height1)
	ret2 = ret1 != 0
	return width2, height2, ret2
}
func IconSizeLookupForSettings(settings0 SettingsLike, size0 int) (int, int, bool) {
	var settings1 *C.GtkSettings
	var size1 C.int32_t
	var width1 C.int32_t
	var height1 C.int32_t
	if settings0 != nil {
		settings1 = settings0.InheritedFromGtkSettings()
	}
	size1 = C.int32_t(size0)
	ret1 := C.gtk_icon_size_lookup_for_settings(settings1, size1, &width1, &height1)
	var width2 int
	var height2 int
	var ret2 bool
	width2 = int(width1)
	height2 = int(height1)
	ret2 = ret1 != 0
	return width2, height2, ret2
}
func IconSizeRegister(name0 string, width0 int, height0 int) int {
	var name1 *C.char
	var width1 C.int32_t
	var height1 C.int32_t
	name1 = _GoStringToGString(name0)
	defer C.free(unsafe.Pointer(name1))
	width1 = C.int32_t(width0)
	height1 = C.int32_t(height0)
	ret1 := C.gtk_icon_size_register(name1, width1, height1)
	var ret2 int
	ret2 = int(ret1)
	return ret2
}
func IconSizeRegisterAlias(alias0 string, target0 int) {
	var alias1 *C.char
	var target1 C.int32_t
	alias1 = _GoStringToGString(alias0)
	defer C.free(unsafe.Pointer(alias1))
	target1 = C.int32_t(target0)
	C.gtk_icon_size_register_alias(alias1, target1)
}
func IconThemeErrorQuark() int {
	ret1 := C.gtk_icon_theme_error_quark()
	var ret2 int
	ret2 = int(ret1)
	return ret2
}
func Init(argv0 []string) []string {
	var argv1 **C.char
	var argc1 C.int32_t
	argv1 = (**C.char)(C.malloc(C.size_t(int(unsafe.Sizeof(*argv1)) * len(argv0))))
	defer C.free(unsafe.Pointer(argv1))
	for i, e := range argv0 {
		(*(*[999999]*C.char)(unsafe.Pointer(argv1)))[i] = _GoStringToGString(e)
		defer C.free(unsafe.Pointer((*(*[999999]*C.char)(unsafe.Pointer(argv1)))[i]))
	}
	argc1 = C.int32_t(len(argv0))
	C.gtk_init(&argc1, &argv1)
	var argv2 []string
	argv2 = make([]string, argc1)
	for i := range argv2 {
		argv2[i] = C.GoString((*(*[999999]*C.char)(unsafe.Pointer(argv1)))[i])
	}
	return argv2
}
func InitCheck(argv0 []string) ([]string, bool) {
	var argv1 **C.char
	var argc1 C.int32_t
	argv1 = (**C.char)(C.malloc(C.size_t(int(unsafe.Sizeof(*argv1)) * len(argv0))))
	defer C.free(unsafe.Pointer(argv1))
	for i, e := range argv0 {
		(*(*[999999]*C.char)(unsafe.Pointer(argv1)))[i] = _GoStringToGString(e)
		defer C.free(unsafe.Pointer((*(*[999999]*C.char)(unsafe.Pointer(argv1)))[i]))
	}
	argc1 = C.int32_t(len(argv0))
	ret1 := C.gtk_init_check(&argc1, &argv1)
	var argv2 []string
	var ret2 bool
	argv2 = make([]string, argc1)
	for i := range argv2 {
		argv2[i] = C.GoString((*(*[999999]*C.char)(unsafe.Pointer(argv1)))[i])
	}
	ret2 = ret1 != 0
	return argv2, ret2
}
// blacklisted: init_with_args (function)
func KeySnooperRemove(snooper_handler_id0 int) {
	var snooper_handler_id1 C.uint32_t
	snooper_handler_id1 = C.uint32_t(snooper_handler_id0)
	C.gtk_key_snooper_remove(snooper_handler_id1)
}
func _Main() {
	C.gtk_main()
}
func MainDoEvent(event0 *gdk.Event) {
	var event1 *C.GdkEvent
	C.gtk_main_do_event(event1)
}
func MainIteration() bool {
	ret1 := C.gtk_main_iteration()
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func MainIterationDo(blocking0 bool) bool {
	var blocking1 C.int
	blocking1 = _GoBoolToCBool(blocking0)
	ret1 := C.gtk_main_iteration_do(blocking1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func MainLevel() int {
	ret1 := C.gtk_main_level()
	var ret2 int
	ret2 = int(ret1)
	return ret2
}
func MainQuit() {
	C.gtk_main_quit()
}
func PaintArrow(style0 StyleLike, cr0 *cairo.Context, state_type0 StateType, shadow_type0 ShadowType, widget0 WidgetLike, detail0 string, arrow_type0 ArrowType, fill0 bool, x0 int, y0 int, width0 int, height0 int) {
	var style1 *C.GtkStyle
	var cr1 *C.cairoContext
	var state_type1 C.GtkStateType
	var shadow_type1 C.GtkShadowType
	var widget1 *C.GtkWidget
	var detail1 *C.char
	var arrow_type1 C.GtkArrowType
	var fill1 C.int
	var x1 C.int32_t
	var y1 C.int32_t
	var width1 C.int32_t
	var height1 C.int32_t
	if style0 != nil {
		style1 = style0.InheritedFromGtkStyle()
	}
	if cr0 != nil {
		cr1 = (*C.cairoContext)(cr0.C)
	}
	state_type1 = C.GtkStateType(state_type0)
	shadow_type1 = C.GtkShadowType(shadow_type0)
	if widget0 != nil {
		widget1 = widget0.InheritedFromGtkWidget()
	}
	detail1 = _GoStringToGString(detail0)
	defer C.free(unsafe.Pointer(detail1))
	arrow_type1 = C.GtkArrowType(arrow_type0)
	fill1 = _GoBoolToCBool(fill0)
	x1 = C.int32_t(x0)
	y1 = C.int32_t(y0)
	width1 = C.int32_t(width0)
	height1 = C.int32_t(height0)
	C.gtk_paint_arrow(style1, cr1, state_type1, shadow_type1, widget1, detail1, arrow_type1, fill1, x1, y1, width1, height1)
}
func PaintBox(style0 StyleLike, cr0 *cairo.Context, state_type0 StateType, shadow_type0 ShadowType, widget0 WidgetLike, detail0 string, x0 int, y0 int, width0 int, height0 int) {
	var style1 *C.GtkStyle
	var cr1 *C.cairoContext
	var state_type1 C.GtkStateType
	var shadow_type1 C.GtkShadowType
	var widget1 *C.GtkWidget
	var detail1 *C.char
	var x1 C.int32_t
	var y1 C.int32_t
	var width1 C.int32_t
	var height1 C.int32_t
	if style0 != nil {
		style1 = style0.InheritedFromGtkStyle()
	}
	if cr0 != nil {
		cr1 = (*C.cairoContext)(cr0.C)
	}
	state_type1 = C.GtkStateType(state_type0)
	shadow_type1 = C.GtkShadowType(shadow_type0)
	if widget0 != nil {
		widget1 = widget0.InheritedFromGtkWidget()
	}
	detail1 = _GoStringToGString(detail0)
	defer C.free(unsafe.Pointer(detail1))
	x1 = C.int32_t(x0)
	y1 = C.int32_t(y0)
	width1 = C.int32_t(width0)
	height1 = C.int32_t(height0)
	C.gtk_paint_box(style1, cr1, state_type1, shadow_type1, widget1, detail1, x1, y1, width1, height1)
}
func PaintBoxGap(style0 StyleLike, cr0 *cairo.Context, state_type0 StateType, shadow_type0 ShadowType, widget0 WidgetLike, detail0 string, x0 int, y0 int, width0 int, height0 int, gap_side0 PositionType, gap_x0 int, gap_width0 int) {
	var style1 *C.GtkStyle
	var cr1 *C.cairoContext
	var state_type1 C.GtkStateType
	var shadow_type1 C.GtkShadowType
	var widget1 *C.GtkWidget
	var detail1 *C.char
	var x1 C.int32_t
	var y1 C.int32_t
	var width1 C.int32_t
	var height1 C.int32_t
	var gap_side1 C.GtkPositionType
	var gap_x1 C.int32_t
	var gap_width1 C.int32_t
	if style0 != nil {
		style1 = style0.InheritedFromGtkStyle()
	}
	if cr0 != nil {
		cr1 = (*C.cairoContext)(cr0.C)
	}
	state_type1 = C.GtkStateType(state_type0)
	shadow_type1 = C.GtkShadowType(shadow_type0)
	if widget0 != nil {
		widget1 = widget0.InheritedFromGtkWidget()
	}
	detail1 = _GoStringToGString(detail0)
	defer C.free(unsafe.Pointer(detail1))
	x1 = C.int32_t(x0)
	y1 = C.int32_t(y0)
	width1 = C.int32_t(width0)
	height1 = C.int32_t(height0)
	gap_side1 = C.GtkPositionType(gap_side0)
	gap_x1 = C.int32_t(gap_x0)
	gap_width1 = C.int32_t(gap_width0)
	C.gtk_paint_box_gap(style1, cr1, state_type1, shadow_type1, widget1, detail1, x1, y1, width1, height1, gap_side1, gap_x1, gap_width1)
}
func PaintCheck(style0 StyleLike, cr0 *cairo.Context, state_type0 StateType, shadow_type0 ShadowType, widget0 WidgetLike, detail0 string, x0 int, y0 int, width0 int, height0 int) {
	var style1 *C.GtkStyle
	var cr1 *C.cairoContext
	var state_type1 C.GtkStateType
	var shadow_type1 C.GtkShadowType
	var widget1 *C.GtkWidget
	var detail1 *C.char
	var x1 C.int32_t
	var y1 C.int32_t
	var width1 C.int32_t
	var height1 C.int32_t
	if style0 != nil {
		style1 = style0.InheritedFromGtkStyle()
	}
	if cr0 != nil {
		cr1 = (*C.cairoContext)(cr0.C)
	}
	state_type1 = C.GtkStateType(state_type0)
	shadow_type1 = C.GtkShadowType(shadow_type0)
	if widget0 != nil {
		widget1 = widget0.InheritedFromGtkWidget()
	}
	detail1 = _GoStringToGString(detail0)
	defer C.free(unsafe.Pointer(detail1))
	x1 = C.int32_t(x0)
	y1 = C.int32_t(y0)
	width1 = C.int32_t(width0)
	height1 = C.int32_t(height0)
	C.gtk_paint_check(style1, cr1, state_type1, shadow_type1, widget1, detail1, x1, y1, width1, height1)
}
func PaintDiamond(style0 StyleLike, cr0 *cairo.Context, state_type0 StateType, shadow_type0 ShadowType, widget0 WidgetLike, detail0 string, x0 int, y0 int, width0 int, height0 int) {
	var style1 *C.GtkStyle
	var cr1 *C.cairoContext
	var state_type1 C.GtkStateType
	var shadow_type1 C.GtkShadowType
	var widget1 *C.GtkWidget
	var detail1 *C.char
	var x1 C.int32_t
	var y1 C.int32_t
	var width1 C.int32_t
	var height1 C.int32_t
	if style0 != nil {
		style1 = style0.InheritedFromGtkStyle()
	}
	if cr0 != nil {
		cr1 = (*C.cairoContext)(cr0.C)
	}
	state_type1 = C.GtkStateType(state_type0)
	shadow_type1 = C.GtkShadowType(shadow_type0)
	if widget0 != nil {
		widget1 = widget0.InheritedFromGtkWidget()
	}
	detail1 = _GoStringToGString(detail0)
	defer C.free(unsafe.Pointer(detail1))
	x1 = C.int32_t(x0)
	y1 = C.int32_t(y0)
	width1 = C.int32_t(width0)
	height1 = C.int32_t(height0)
	C.gtk_paint_diamond(style1, cr1, state_type1, shadow_type1, widget1, detail1, x1, y1, width1, height1)
}
func PaintExpander(style0 StyleLike, cr0 *cairo.Context, state_type0 StateType, widget0 WidgetLike, detail0 string, x0 int, y0 int, expander_style0 ExpanderStyle) {
	var style1 *C.GtkStyle
	var cr1 *C.cairoContext
	var state_type1 C.GtkStateType
	var widget1 *C.GtkWidget
	var detail1 *C.char
	var x1 C.int32_t
	var y1 C.int32_t
	var expander_style1 C.GtkExpanderStyle
	if style0 != nil {
		style1 = style0.InheritedFromGtkStyle()
	}
	if cr0 != nil {
		cr1 = (*C.cairoContext)(cr0.C)
	}
	state_type1 = C.GtkStateType(state_type0)
	if widget0 != nil {
		widget1 = widget0.InheritedFromGtkWidget()
	}
	detail1 = _GoStringToGString(detail0)
	defer C.free(unsafe.Pointer(detail1))
	x1 = C.int32_t(x0)
	y1 = C.int32_t(y0)
	expander_style1 = C.GtkExpanderStyle(expander_style0)
	C.gtk_paint_expander(style1, cr1, state_type1, widget1, detail1, x1, y1, expander_style1)
}
func PaintExtension(style0 StyleLike, cr0 *cairo.Context, state_type0 StateType, shadow_type0 ShadowType, widget0 WidgetLike, detail0 string, x0 int, y0 int, width0 int, height0 int, gap_side0 PositionType) {
	var style1 *C.GtkStyle
	var cr1 *C.cairoContext
	var state_type1 C.GtkStateType
	var shadow_type1 C.GtkShadowType
	var widget1 *C.GtkWidget
	var detail1 *C.char
	var x1 C.int32_t
	var y1 C.int32_t
	var width1 C.int32_t
	var height1 C.int32_t
	var gap_side1 C.GtkPositionType
	if style0 != nil {
		style1 = style0.InheritedFromGtkStyle()
	}
	if cr0 != nil {
		cr1 = (*C.cairoContext)(cr0.C)
	}
	state_type1 = C.GtkStateType(state_type0)
	shadow_type1 = C.GtkShadowType(shadow_type0)
	if widget0 != nil {
		widget1 = widget0.InheritedFromGtkWidget()
	}
	detail1 = _GoStringToGString(detail0)
	defer C.free(unsafe.Pointer(detail1))
	x1 = C.int32_t(x0)
	y1 = C.int32_t(y0)
	width1 = C.int32_t(width0)
	height1 = C.int32_t(height0)
	gap_side1 = C.GtkPositionType(gap_side0)
	C.gtk_paint_extension(style1, cr1, state_type1, shadow_type1, widget1, detail1, x1, y1, width1, height1, gap_side1)
}
func PaintFlatBox(style0 StyleLike, cr0 *cairo.Context, state_type0 StateType, shadow_type0 ShadowType, widget0 WidgetLike, detail0 string, x0 int, y0 int, width0 int, height0 int) {
	var style1 *C.GtkStyle
	var cr1 *C.cairoContext
	var state_type1 C.GtkStateType
	var shadow_type1 C.GtkShadowType
	var widget1 *C.GtkWidget
	var detail1 *C.char
	var x1 C.int32_t
	var y1 C.int32_t
	var width1 C.int32_t
	var height1 C.int32_t
	if style0 != nil {
		style1 = style0.InheritedFromGtkStyle()
	}
	if cr0 != nil {
		cr1 = (*C.cairoContext)(cr0.C)
	}
	state_type1 = C.GtkStateType(state_type0)
	shadow_type1 = C.GtkShadowType(shadow_type0)
	if widget0 != nil {
		widget1 = widget0.InheritedFromGtkWidget()
	}
	detail1 = _GoStringToGString(detail0)
	defer C.free(unsafe.Pointer(detail1))
	x1 = C.int32_t(x0)
	y1 = C.int32_t(y0)
	width1 = C.int32_t(width0)
	height1 = C.int32_t(height0)
	C.gtk_paint_flat_box(style1, cr1, state_type1, shadow_type1, widget1, detail1, x1, y1, width1, height1)
}
func PaintFocus(style0 StyleLike, cr0 *cairo.Context, state_type0 StateType, widget0 WidgetLike, detail0 string, x0 int, y0 int, width0 int, height0 int) {
	var style1 *C.GtkStyle
	var cr1 *C.cairoContext
	var state_type1 C.GtkStateType
	var widget1 *C.GtkWidget
	var detail1 *C.char
	var x1 C.int32_t
	var y1 C.int32_t
	var width1 C.int32_t
	var height1 C.int32_t
	if style0 != nil {
		style1 = style0.InheritedFromGtkStyle()
	}
	if cr0 != nil {
		cr1 = (*C.cairoContext)(cr0.C)
	}
	state_type1 = C.GtkStateType(state_type0)
	if widget0 != nil {
		widget1 = widget0.InheritedFromGtkWidget()
	}
	detail1 = _GoStringToGString(detail0)
	defer C.free(unsafe.Pointer(detail1))
	x1 = C.int32_t(x0)
	y1 = C.int32_t(y0)
	width1 = C.int32_t(width0)
	height1 = C.int32_t(height0)
	C.gtk_paint_focus(style1, cr1, state_type1, widget1, detail1, x1, y1, width1, height1)
}
func PaintHandle(style0 StyleLike, cr0 *cairo.Context, state_type0 StateType, shadow_type0 ShadowType, widget0 WidgetLike, detail0 string, x0 int, y0 int, width0 int, height0 int, orientation0 Orientation) {
	var style1 *C.GtkStyle
	var cr1 *C.cairoContext
	var state_type1 C.GtkStateType
	var shadow_type1 C.GtkShadowType
	var widget1 *C.GtkWidget
	var detail1 *C.char
	var x1 C.int32_t
	var y1 C.int32_t
	var width1 C.int32_t
	var height1 C.int32_t
	var orientation1 C.GtkOrientation
	if style0 != nil {
		style1 = style0.InheritedFromGtkStyle()
	}
	if cr0 != nil {
		cr1 = (*C.cairoContext)(cr0.C)
	}
	state_type1 = C.GtkStateType(state_type0)
	shadow_type1 = C.GtkShadowType(shadow_type0)
	if widget0 != nil {
		widget1 = widget0.InheritedFromGtkWidget()
	}
	detail1 = _GoStringToGString(detail0)
	defer C.free(unsafe.Pointer(detail1))
	x1 = C.int32_t(x0)
	y1 = C.int32_t(y0)
	width1 = C.int32_t(width0)
	height1 = C.int32_t(height0)
	orientation1 = C.GtkOrientation(orientation0)
	C.gtk_paint_handle(style1, cr1, state_type1, shadow_type1, widget1, detail1, x1, y1, width1, height1, orientation1)
}
func PaintHLine(style0 StyleLike, cr0 *cairo.Context, state_type0 StateType, widget0 WidgetLike, detail0 string, x10 int, x20 int, y0 int) {
	var style1 *C.GtkStyle
	var cr1 *C.cairoContext
	var state_type1 C.GtkStateType
	var widget1 *C.GtkWidget
	var detail1 *C.char
	var x11 C.int32_t
	var x21 C.int32_t
	var y1 C.int32_t
	if style0 != nil {
		style1 = style0.InheritedFromGtkStyle()
	}
	if cr0 != nil {
		cr1 = (*C.cairoContext)(cr0.C)
	}
	state_type1 = C.GtkStateType(state_type0)
	if widget0 != nil {
		widget1 = widget0.InheritedFromGtkWidget()
	}
	detail1 = _GoStringToGString(detail0)
	defer C.free(unsafe.Pointer(detail1))
	x11 = C.int32_t(x10)
	x21 = C.int32_t(x20)
	y1 = C.int32_t(y0)
	C.gtk_paint_hline(style1, cr1, state_type1, widget1, detail1, x11, x21, y1)
}
func PaintLayout(style0 StyleLike, cr0 *cairo.Context, state_type0 StateType, use_text0 bool, widget0 WidgetLike, detail0 string, x0 int, y0 int, layout0 pango.LayoutLike) {
	var style1 *C.GtkStyle
	var cr1 *C.cairoContext
	var state_type1 C.GtkStateType
	var use_text1 C.int
	var widget1 *C.GtkWidget
	var detail1 *C.char
	var x1 C.int32_t
	var y1 C.int32_t
	var layout1 *C.PangoLayout
	if style0 != nil {
		style1 = style0.InheritedFromGtkStyle()
	}
	if cr0 != nil {
		cr1 = (*C.cairoContext)(cr0.C)
	}
	state_type1 = C.GtkStateType(state_type0)
	use_text1 = _GoBoolToCBool(use_text0)
	if widget0 != nil {
		widget1 = widget0.InheritedFromGtkWidget()
	}
	detail1 = _GoStringToGString(detail0)
	defer C.free(unsafe.Pointer(detail1))
	x1 = C.int32_t(x0)
	y1 = C.int32_t(y0)
	if layout0 != nil {
		layout1 = layout0.InheritedFromPangoLayout()
	}
	C.gtk_paint_layout(style1, cr1, state_type1, use_text1, widget1, detail1, x1, y1, layout1)
}
func PaintOption(style0 StyleLike, cr0 *cairo.Context, state_type0 StateType, shadow_type0 ShadowType, widget0 WidgetLike, detail0 string, x0 int, y0 int, width0 int, height0 int) {
	var style1 *C.GtkStyle
	var cr1 *C.cairoContext
	var state_type1 C.GtkStateType
	var shadow_type1 C.GtkShadowType
	var widget1 *C.GtkWidget
	var detail1 *C.char
	var x1 C.int32_t
	var y1 C.int32_t
	var width1 C.int32_t
	var height1 C.int32_t
	if style0 != nil {
		style1 = style0.InheritedFromGtkStyle()
	}
	if cr0 != nil {
		cr1 = (*C.cairoContext)(cr0.C)
	}
	state_type1 = C.GtkStateType(state_type0)
	shadow_type1 = C.GtkShadowType(shadow_type0)
	if widget0 != nil {
		widget1 = widget0.InheritedFromGtkWidget()
	}
	detail1 = _GoStringToGString(detail0)
	defer C.free(unsafe.Pointer(detail1))
	x1 = C.int32_t(x0)
	y1 = C.int32_t(y0)
	width1 = C.int32_t(width0)
	height1 = C.int32_t(height0)
	C.gtk_paint_option(style1, cr1, state_type1, shadow_type1, widget1, detail1, x1, y1, width1, height1)
}
func PaintResizeGrip(style0 StyleLike, cr0 *cairo.Context, state_type0 StateType, widget0 WidgetLike, detail0 string, edge0 gdk.WindowEdge, x0 int, y0 int, width0 int, height0 int) {
	var style1 *C.GtkStyle
	var cr1 *C.cairoContext
	var state_type1 C.GtkStateType
	var widget1 *C.GtkWidget
	var detail1 *C.char
	var edge1 C.GdkWindowEdge
	var x1 C.int32_t
	var y1 C.int32_t
	var width1 C.int32_t
	var height1 C.int32_t
	if style0 != nil {
		style1 = style0.InheritedFromGtkStyle()
	}
	if cr0 != nil {
		cr1 = (*C.cairoContext)(cr0.C)
	}
	state_type1 = C.GtkStateType(state_type0)
	if widget0 != nil {
		widget1 = widget0.InheritedFromGtkWidget()
	}
	detail1 = _GoStringToGString(detail0)
	defer C.free(unsafe.Pointer(detail1))
	edge1 = C.GdkWindowEdge(edge0)
	x1 = C.int32_t(x0)
	y1 = C.int32_t(y0)
	width1 = C.int32_t(width0)
	height1 = C.int32_t(height0)
	C.gtk_paint_resize_grip(style1, cr1, state_type1, widget1, detail1, edge1, x1, y1, width1, height1)
}
func PaintShadow(style0 StyleLike, cr0 *cairo.Context, state_type0 StateType, shadow_type0 ShadowType, widget0 WidgetLike, detail0 string, x0 int, y0 int, width0 int, height0 int) {
	var style1 *C.GtkStyle
	var cr1 *C.cairoContext
	var state_type1 C.GtkStateType
	var shadow_type1 C.GtkShadowType
	var widget1 *C.GtkWidget
	var detail1 *C.char
	var x1 C.int32_t
	var y1 C.int32_t
	var width1 C.int32_t
	var height1 C.int32_t
	if style0 != nil {
		style1 = style0.InheritedFromGtkStyle()
	}
	if cr0 != nil {
		cr1 = (*C.cairoContext)(cr0.C)
	}
	state_type1 = C.GtkStateType(state_type0)
	shadow_type1 = C.GtkShadowType(shadow_type0)
	if widget0 != nil {
		widget1 = widget0.InheritedFromGtkWidget()
	}
	detail1 = _GoStringToGString(detail0)
	defer C.free(unsafe.Pointer(detail1))
	x1 = C.int32_t(x0)
	y1 = C.int32_t(y0)
	width1 = C.int32_t(width0)
	height1 = C.int32_t(height0)
	C.gtk_paint_shadow(style1, cr1, state_type1, shadow_type1, widget1, detail1, x1, y1, width1, height1)
}
func PaintShadowGap(style0 StyleLike, cr0 *cairo.Context, state_type0 StateType, shadow_type0 ShadowType, widget0 WidgetLike, detail0 string, x0 int, y0 int, width0 int, height0 int, gap_side0 PositionType, gap_x0 int, gap_width0 int) {
	var style1 *C.GtkStyle
	var cr1 *C.cairoContext
	var state_type1 C.GtkStateType
	var shadow_type1 C.GtkShadowType
	var widget1 *C.GtkWidget
	var detail1 *C.char
	var x1 C.int32_t
	var y1 C.int32_t
	var width1 C.int32_t
	var height1 C.int32_t
	var gap_side1 C.GtkPositionType
	var gap_x1 C.int32_t
	var gap_width1 C.int32_t
	if style0 != nil {
		style1 = style0.InheritedFromGtkStyle()
	}
	if cr0 != nil {
		cr1 = (*C.cairoContext)(cr0.C)
	}
	state_type1 = C.GtkStateType(state_type0)
	shadow_type1 = C.GtkShadowType(shadow_type0)
	if widget0 != nil {
		widget1 = widget0.InheritedFromGtkWidget()
	}
	detail1 = _GoStringToGString(detail0)
	defer C.free(unsafe.Pointer(detail1))
	x1 = C.int32_t(x0)
	y1 = C.int32_t(y0)
	width1 = C.int32_t(width0)
	height1 = C.int32_t(height0)
	gap_side1 = C.GtkPositionType(gap_side0)
	gap_x1 = C.int32_t(gap_x0)
	gap_width1 = C.int32_t(gap_width0)
	C.gtk_paint_shadow_gap(style1, cr1, state_type1, shadow_type1, widget1, detail1, x1, y1, width1, height1, gap_side1, gap_x1, gap_width1)
}
func PaintSlider(style0 StyleLike, cr0 *cairo.Context, state_type0 StateType, shadow_type0 ShadowType, widget0 WidgetLike, detail0 string, x0 int, y0 int, width0 int, height0 int, orientation0 Orientation) {
	var style1 *C.GtkStyle
	var cr1 *C.cairoContext
	var state_type1 C.GtkStateType
	var shadow_type1 C.GtkShadowType
	var widget1 *C.GtkWidget
	var detail1 *C.char
	var x1 C.int32_t
	var y1 C.int32_t
	var width1 C.int32_t
	var height1 C.int32_t
	var orientation1 C.GtkOrientation
	if style0 != nil {
		style1 = style0.InheritedFromGtkStyle()
	}
	if cr0 != nil {
		cr1 = (*C.cairoContext)(cr0.C)
	}
	state_type1 = C.GtkStateType(state_type0)
	shadow_type1 = C.GtkShadowType(shadow_type0)
	if widget0 != nil {
		widget1 = widget0.InheritedFromGtkWidget()
	}
	detail1 = _GoStringToGString(detail0)
	defer C.free(unsafe.Pointer(detail1))
	x1 = C.int32_t(x0)
	y1 = C.int32_t(y0)
	width1 = C.int32_t(width0)
	height1 = C.int32_t(height0)
	orientation1 = C.GtkOrientation(orientation0)
	C.gtk_paint_slider(style1, cr1, state_type1, shadow_type1, widget1, detail1, x1, y1, width1, height1, orientation1)
}
func PaintSpinner(style0 StyleLike, cr0 *cairo.Context, state_type0 StateType, widget0 WidgetLike, detail0 string, step0 int, x0 int, y0 int, width0 int, height0 int) {
	var style1 *C.GtkStyle
	var cr1 *C.cairoContext
	var state_type1 C.GtkStateType
	var widget1 *C.GtkWidget
	var detail1 *C.char
	var step1 C.uint32_t
	var x1 C.int32_t
	var y1 C.int32_t
	var width1 C.int32_t
	var height1 C.int32_t
	if style0 != nil {
		style1 = style0.InheritedFromGtkStyle()
	}
	if cr0 != nil {
		cr1 = (*C.cairoContext)(cr0.C)
	}
	state_type1 = C.GtkStateType(state_type0)
	if widget0 != nil {
		widget1 = widget0.InheritedFromGtkWidget()
	}
	detail1 = _GoStringToGString(detail0)
	defer C.free(unsafe.Pointer(detail1))
	step1 = C.uint32_t(step0)
	x1 = C.int32_t(x0)
	y1 = C.int32_t(y0)
	width1 = C.int32_t(width0)
	height1 = C.int32_t(height0)
	C.gtk_paint_spinner(style1, cr1, state_type1, widget1, detail1, step1, x1, y1, width1, height1)
}
func PaintTab(style0 StyleLike, cr0 *cairo.Context, state_type0 StateType, shadow_type0 ShadowType, widget0 WidgetLike, detail0 string, x0 int, y0 int, width0 int, height0 int) {
	var style1 *C.GtkStyle
	var cr1 *C.cairoContext
	var state_type1 C.GtkStateType
	var shadow_type1 C.GtkShadowType
	var widget1 *C.GtkWidget
	var detail1 *C.char
	var x1 C.int32_t
	var y1 C.int32_t
	var width1 C.int32_t
	var height1 C.int32_t
	if style0 != nil {
		style1 = style0.InheritedFromGtkStyle()
	}
	if cr0 != nil {
		cr1 = (*C.cairoContext)(cr0.C)
	}
	state_type1 = C.GtkStateType(state_type0)
	shadow_type1 = C.GtkShadowType(shadow_type0)
	if widget0 != nil {
		widget1 = widget0.InheritedFromGtkWidget()
	}
	detail1 = _GoStringToGString(detail0)
	defer C.free(unsafe.Pointer(detail1))
	x1 = C.int32_t(x0)
	y1 = C.int32_t(y0)
	width1 = C.int32_t(width0)
	height1 = C.int32_t(height0)
	C.gtk_paint_tab(style1, cr1, state_type1, shadow_type1, widget1, detail1, x1, y1, width1, height1)
}
func PaintVLine(style0 StyleLike, cr0 *cairo.Context, state_type0 StateType, widget0 WidgetLike, detail0 string, y1_0 int, y2_0 int, x0 int) {
	var style1 *C.GtkStyle
	var cr1 *C.cairoContext
	var state_type1 C.GtkStateType
	var widget1 *C.GtkWidget
	var detail1 *C.char
	var y1_1 C.int32_t
	var y2_1 C.int32_t
	var x1 C.int32_t
	if style0 != nil {
		style1 = style0.InheritedFromGtkStyle()
	}
	if cr0 != nil {
		cr1 = (*C.cairoContext)(cr0.C)
	}
	state_type1 = C.GtkStateType(state_type0)
	if widget0 != nil {
		widget1 = widget0.InheritedFromGtkWidget()
	}
	detail1 = _GoStringToGString(detail0)
	defer C.free(unsafe.Pointer(detail1))
	y1_1 = C.int32_t(y1_0)
	y2_1 = C.int32_t(y2_0)
	x1 = C.int32_t(x0)
	C.gtk_paint_vline(style1, cr1, state_type1, widget1, detail1, y1_1, y2_1, x1)
}
// blacklisted: paper_size_get_default (function)
// blacklisted: paper_size_get_paper_sizes (function)
func ParseArgs(argv0 []string) ([]string, bool) {
	var argv1 **C.char
	var argc1 C.int32_t
	argv1 = (**C.char)(C.malloc(C.size_t(int(unsafe.Sizeof(*argv1)) * len(argv0))))
	defer C.free(unsafe.Pointer(argv1))
	for i, e := range argv0 {
		(*(*[999999]*C.char)(unsafe.Pointer(argv1)))[i] = _GoStringToGString(e)
		defer C.free(unsafe.Pointer((*(*[999999]*C.char)(unsafe.Pointer(argv1)))[i]))
	}
	argc1 = C.int32_t(len(argv0))
	ret1 := C.gtk_parse_args(&argc1, &argv1)
	var argv2 []string
	var ret2 bool
	argv2 = make([]string, argc1)
	for i := range argv2 {
		argv2[i] = C.GoString((*(*[999999]*C.char)(unsafe.Pointer(argv1)))[i])
	}
	ret2 = ret1 != 0
	return argv2, ret2
}
func PrintErrorQuark() int {
	ret1 := C.gtk_print_error_quark()
	var ret2 int
	ret2 = int(ret1)
	return ret2
}
// blacklisted: print_run_page_setup_dialog (function)
// blacklisted: print_run_page_setup_dialog_async (function)
func PropagateEvent(widget0 WidgetLike, event0 *gdk.Event) {
	var widget1 *C.GtkWidget
	var event1 *C.GdkEvent
	if widget0 != nil {
		widget1 = widget0.InheritedFromGtkWidget()
	}
	C.gtk_propagate_event(widget1, event1)
}
func RcAddDefaultFile(filename0 string) {
	var filename1 *C.char
	filename1 = _GoStringToGString(filename0)
	defer C.free(unsafe.Pointer(filename1))
	C.gtk_rc_add_default_file(filename1)
}
func RcFindModuleInPath(module_file0 string) string {
	var module_file1 *C.char
	module_file1 = _GoStringToGString(module_file0)
	defer C.free(unsafe.Pointer(module_file1))
	ret1 := C.gtk_rc_find_module_in_path(module_file1)
	var ret2 string
	ret2 = C.GoString(ret1)
	C.g_free(unsafe.Pointer(ret1))
	return ret2
}
// blacklisted: rc_find_pixmap_in_path (function)
func RcGetDefaultFiles() []string {
	ret1 := C.gtk_rc_get_default_files()
	var ret2 []string
	for i := range ret2 {
		ret2[i] = C.GoString((*(*[999999]*C.char)(unsafe.Pointer(ret1)))[i])
	}
	return ret2
}
func RcGetIMModuleFile() string {
	ret1 := C.gtk_rc_get_im_module_file()
	var ret2 string
	ret2 = C.GoString(ret1)
	C.g_free(unsafe.Pointer(ret1))
	return ret2
}
func RcGetIMModulePath() string {
	ret1 := C.gtk_rc_get_im_module_path()
	var ret2 string
	ret2 = C.GoString(ret1)
	C.g_free(unsafe.Pointer(ret1))
	return ret2
}
func RcGetModuleDir() string {
	ret1 := C.gtk_rc_get_module_dir()
	var ret2 string
	ret2 = C.GoString(ret1)
	C.g_free(unsafe.Pointer(ret1))
	return ret2
}
func RcGetStyle(widget0 WidgetLike) *Style {
	var widget1 *C.GtkWidget
	if widget0 != nil {
		widget1 = widget0.InheritedFromGtkWidget()
	}
	ret1 := C.gtk_rc_get_style(widget1)
	var ret2 *Style
	ret2 = (*Style)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
func RcGetStyleByPaths(settings0 SettingsLike, widget_path0 string, class_path0 string, type0 gobject.Type) *Style {
	var settings1 *C.GtkSettings
	var widget_path1 *C.char
	var class_path1 *C.char
	var type1 C.GType
	if settings0 != nil {
		settings1 = settings0.InheritedFromGtkSettings()
	}
	widget_path1 = _GoStringToGString(widget_path0)
	defer C.free(unsafe.Pointer(widget_path1))
	class_path1 = _GoStringToGString(class_path0)
	defer C.free(unsafe.Pointer(class_path1))
	type1 = C.GType(type0)
	ret1 := C.gtk_rc_get_style_by_paths(settings1, widget_path1, class_path1, type1)
	var ret2 *Style
	ret2 = (*Style)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
func RcGetThemeDir() string {
	ret1 := C.gtk_rc_get_theme_dir()
	var ret2 string
	ret2 = C.GoString(ret1)
	C.g_free(unsafe.Pointer(ret1))
	return ret2
}
func RcParse(filename0 string) {
	var filename1 *C.char
	filename1 = _GoStringToGString(filename0)
	defer C.free(unsafe.Pointer(filename1))
	C.gtk_rc_parse(filename1)
}
// blacklisted: rc_parse_color (function)
// blacklisted: rc_parse_color_full (function)
// blacklisted: rc_parse_priority (function)
// blacklisted: rc_parse_state (function)
func RcParseString(rc_string0 string) {
	var rc_string1 *C.char
	rc_string1 = _GoStringToGString(rc_string0)
	defer C.free(unsafe.Pointer(rc_string1))
	C.gtk_rc_parse_string(rc_string1)
}
// blacklisted: rc_property_parse_border (function)
// blacklisted: rc_property_parse_color (function)
// blacklisted: rc_property_parse_enum (function)
// blacklisted: rc_property_parse_flags (function)
// blacklisted: rc_property_parse_requisition (function)
func RcReparseAll() bool {
	ret1 := C.gtk_rc_reparse_all()
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func RcReparseAllForSettings(settings0 SettingsLike, force_load0 bool) bool {
	var settings1 *C.GtkSettings
	var force_load1 C.int
	if settings0 != nil {
		settings1 = settings0.InheritedFromGtkSettings()
	}
	force_load1 = _GoBoolToCBool(force_load0)
	ret1 := C.gtk_rc_reparse_all_for_settings(settings1, force_load1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func RcResetStyles(settings0 SettingsLike) {
	var settings1 *C.GtkSettings
	if settings0 != nil {
		settings1 = settings0.InheritedFromGtkSettings()
	}
	C.gtk_rc_reset_styles(settings1)
}
func RcSetDefaultFiles(filenames0 []string) {
	var filenames1 **C.char
	filenames1 = (**C.char)(C.malloc(C.size_t(int(unsafe.Sizeof(*filenames1)) * (len(filenames0) + 1))))
	defer C.free(unsafe.Pointer(filenames1))
	for i, e := range filenames0 {
		(*(*[999999]*C.char)(unsafe.Pointer(filenames1)))[i] = _GoStringToGString(e)
		defer C.free(unsafe.Pointer((*(*[999999]*C.char)(unsafe.Pointer(filenames1)))[i]))
	}
	(*(*[999999]*C.char)(unsafe.Pointer(filenames1)))[len(filenames0)] = nil
	C.gtk_rc_set_default_files(filenames1)
}
func RecentChooserErrorQuark() int {
	ret1 := C.gtk_recent_chooser_error_quark()
	var ret2 int
	ret2 = int(ret1)
	return ret2
}
func RecentManagerErrorQuark() int {
	ret1 := C.gtk_recent_manager_error_quark()
	var ret2 int
	ret2 = int(ret1)
	return ret2
}
func RenderActivity(context0 StyleContextLike, cr0 *cairo.Context, x0 float64, y0 float64, width0 float64, height0 float64) {
	var context1 *C.GtkStyleContext
	var cr1 *C.cairoContext
	var x1 C.double
	var y1 C.double
	var width1 C.double
	var height1 C.double
	if context0 != nil {
		context1 = context0.InheritedFromGtkStyleContext()
	}
	if cr0 != nil {
		cr1 = (*C.cairoContext)(cr0.C)
	}
	x1 = C.double(x0)
	y1 = C.double(y0)
	width1 = C.double(width0)
	height1 = C.double(height0)
	C.gtk_render_activity(context1, cr1, x1, y1, width1, height1)
}
func RenderArrow(context0 StyleContextLike, cr0 *cairo.Context, angle0 float64, x0 float64, y0 float64, size0 float64) {
	var context1 *C.GtkStyleContext
	var cr1 *C.cairoContext
	var angle1 C.double
	var x1 C.double
	var y1 C.double
	var size1 C.double
	if context0 != nil {
		context1 = context0.InheritedFromGtkStyleContext()
	}
	if cr0 != nil {
		cr1 = (*C.cairoContext)(cr0.C)
	}
	angle1 = C.double(angle0)
	x1 = C.double(x0)
	y1 = C.double(y0)
	size1 = C.double(size0)
	C.gtk_render_arrow(context1, cr1, angle1, x1, y1, size1)
}
func RenderBackground(context0 StyleContextLike, cr0 *cairo.Context, x0 float64, y0 float64, width0 float64, height0 float64) {
	var context1 *C.GtkStyleContext
	var cr1 *C.cairoContext
	var x1 C.double
	var y1 C.double
	var width1 C.double
	var height1 C.double
	if context0 != nil {
		context1 = context0.InheritedFromGtkStyleContext()
	}
	if cr0 != nil {
		cr1 = (*C.cairoContext)(cr0.C)
	}
	x1 = C.double(x0)
	y1 = C.double(y0)
	width1 = C.double(width0)
	height1 = C.double(height0)
	C.gtk_render_background(context1, cr1, x1, y1, width1, height1)
}
func RenderCheck(context0 StyleContextLike, cr0 *cairo.Context, x0 float64, y0 float64, width0 float64, height0 float64) {
	var context1 *C.GtkStyleContext
	var cr1 *C.cairoContext
	var x1 C.double
	var y1 C.double
	var width1 C.double
	var height1 C.double
	if context0 != nil {
		context1 = context0.InheritedFromGtkStyleContext()
	}
	if cr0 != nil {
		cr1 = (*C.cairoContext)(cr0.C)
	}
	x1 = C.double(x0)
	y1 = C.double(y0)
	width1 = C.double(width0)
	height1 = C.double(height0)
	C.gtk_render_check(context1, cr1, x1, y1, width1, height1)
}
func RenderExpander(context0 StyleContextLike, cr0 *cairo.Context, x0 float64, y0 float64, width0 float64, height0 float64) {
	var context1 *C.GtkStyleContext
	var cr1 *C.cairoContext
	var x1 C.double
	var y1 C.double
	var width1 C.double
	var height1 C.double
	if context0 != nil {
		context1 = context0.InheritedFromGtkStyleContext()
	}
	if cr0 != nil {
		cr1 = (*C.cairoContext)(cr0.C)
	}
	x1 = C.double(x0)
	y1 = C.double(y0)
	width1 = C.double(width0)
	height1 = C.double(height0)
	C.gtk_render_expander(context1, cr1, x1, y1, width1, height1)
}
func RenderExtension(context0 StyleContextLike, cr0 *cairo.Context, x0 float64, y0 float64, width0 float64, height0 float64, gap_side0 PositionType) {
	var context1 *C.GtkStyleContext
	var cr1 *C.cairoContext
	var x1 C.double
	var y1 C.double
	var width1 C.double
	var height1 C.double
	var gap_side1 C.GtkPositionType
	if context0 != nil {
		context1 = context0.InheritedFromGtkStyleContext()
	}
	if cr0 != nil {
		cr1 = (*C.cairoContext)(cr0.C)
	}
	x1 = C.double(x0)
	y1 = C.double(y0)
	width1 = C.double(width0)
	height1 = C.double(height0)
	gap_side1 = C.GtkPositionType(gap_side0)
	C.gtk_render_extension(context1, cr1, x1, y1, width1, height1, gap_side1)
}
func RenderFocus(context0 StyleContextLike, cr0 *cairo.Context, x0 float64, y0 float64, width0 float64, height0 float64) {
	var context1 *C.GtkStyleContext
	var cr1 *C.cairoContext
	var x1 C.double
	var y1 C.double
	var width1 C.double
	var height1 C.double
	if context0 != nil {
		context1 = context0.InheritedFromGtkStyleContext()
	}
	if cr0 != nil {
		cr1 = (*C.cairoContext)(cr0.C)
	}
	x1 = C.double(x0)
	y1 = C.double(y0)
	width1 = C.double(width0)
	height1 = C.double(height0)
	C.gtk_render_focus(context1, cr1, x1, y1, width1, height1)
}
func RenderFrame(context0 StyleContextLike, cr0 *cairo.Context, x0 float64, y0 float64, width0 float64, height0 float64) {
	var context1 *C.GtkStyleContext
	var cr1 *C.cairoContext
	var x1 C.double
	var y1 C.double
	var width1 C.double
	var height1 C.double
	if context0 != nil {
		context1 = context0.InheritedFromGtkStyleContext()
	}
	if cr0 != nil {
		cr1 = (*C.cairoContext)(cr0.C)
	}
	x1 = C.double(x0)
	y1 = C.double(y0)
	width1 = C.double(width0)
	height1 = C.double(height0)
	C.gtk_render_frame(context1, cr1, x1, y1, width1, height1)
}
func RenderFrameGap(context0 StyleContextLike, cr0 *cairo.Context, x0 float64, y0 float64, width0 float64, height0 float64, gap_side0 PositionType, xy0_gap0 float64, xy1_gap0 float64) {
	var context1 *C.GtkStyleContext
	var cr1 *C.cairoContext
	var x1 C.double
	var y1 C.double
	var width1 C.double
	var height1 C.double
	var gap_side1 C.GtkPositionType
	var xy0_gap1 C.double
	var xy1_gap1 C.double
	if context0 != nil {
		context1 = context0.InheritedFromGtkStyleContext()
	}
	if cr0 != nil {
		cr1 = (*C.cairoContext)(cr0.C)
	}
	x1 = C.double(x0)
	y1 = C.double(y0)
	width1 = C.double(width0)
	height1 = C.double(height0)
	gap_side1 = C.GtkPositionType(gap_side0)
	xy0_gap1 = C.double(xy0_gap0)
	xy1_gap1 = C.double(xy1_gap0)
	C.gtk_render_frame_gap(context1, cr1, x1, y1, width1, height1, gap_side1, xy0_gap1, xy1_gap1)
}
func RenderHandle(context0 StyleContextLike, cr0 *cairo.Context, x0 float64, y0 float64, width0 float64, height0 float64) {
	var context1 *C.GtkStyleContext
	var cr1 *C.cairoContext
	var x1 C.double
	var y1 C.double
	var width1 C.double
	var height1 C.double
	if context0 != nil {
		context1 = context0.InheritedFromGtkStyleContext()
	}
	if cr0 != nil {
		cr1 = (*C.cairoContext)(cr0.C)
	}
	x1 = C.double(x0)
	y1 = C.double(y0)
	width1 = C.double(width0)
	height1 = C.double(height0)
	C.gtk_render_handle(context1, cr1, x1, y1, width1, height1)
}
func RenderIcon(context0 StyleContextLike, cr0 *cairo.Context, pixbuf0 gdkpixbuf.PixbufLike, x0 float64, y0 float64) {
	var context1 *C.GtkStyleContext
	var cr1 *C.cairoContext
	var pixbuf1 *C.GdkPixbuf
	var x1 C.double
	var y1 C.double
	if context0 != nil {
		context1 = context0.InheritedFromGtkStyleContext()
	}
	if cr0 != nil {
		cr1 = (*C.cairoContext)(cr0.C)
	}
	if pixbuf0 != nil {
		pixbuf1 = pixbuf0.InheritedFromGdkPixbuf()
	}
	x1 = C.double(x0)
	y1 = C.double(y0)
	C.gtk_render_icon(context1, cr1, pixbuf1, x1, y1)
}
func RenderIconPixbuf(context0 StyleContextLike, source0 *IconSource, size0 int) *gdkpixbuf.Pixbuf {
	var context1 *C.GtkStyleContext
	var source1 *C.GtkIconSource
	var size1 C.int32_t
	if context0 != nil {
		context1 = context0.InheritedFromGtkStyleContext()
	}
	source1 = (*C.GtkIconSource)(unsafe.Pointer(source0))
	size1 = C.int32_t(size0)
	ret1 := C.gtk_render_icon_pixbuf(context1, source1, size1)
	var ret2 *gdkpixbuf.Pixbuf
	ret2 = (*gdkpixbuf.Pixbuf)(gobject.ObjectWrap(unsafe.Pointer(ret1), false))
	return ret2
}
func RenderLayout(context0 StyleContextLike, cr0 *cairo.Context, x0 float64, y0 float64, layout0 pango.LayoutLike) {
	var context1 *C.GtkStyleContext
	var cr1 *C.cairoContext
	var x1 C.double
	var y1 C.double
	var layout1 *C.PangoLayout
	if context0 != nil {
		context1 = context0.InheritedFromGtkStyleContext()
	}
	if cr0 != nil {
		cr1 = (*C.cairoContext)(cr0.C)
	}
	x1 = C.double(x0)
	y1 = C.double(y0)
	if layout0 != nil {
		layout1 = layout0.InheritedFromPangoLayout()
	}
	C.gtk_render_layout(context1, cr1, x1, y1, layout1)
}
func RenderLine(context0 StyleContextLike, cr0 *cairo.Context, x00 float64, y00 float64, x10 float64, y10 float64) {
	var context1 *C.GtkStyleContext
	var cr1 *C.cairoContext
	var x01 C.double
	var y01 C.double
	var x11 C.double
	var y11 C.double
	if context0 != nil {
		context1 = context0.InheritedFromGtkStyleContext()
	}
	if cr0 != nil {
		cr1 = (*C.cairoContext)(cr0.C)
	}
	x01 = C.double(x00)
	y01 = C.double(y00)
	x11 = C.double(x10)
	y11 = C.double(y10)
	C.gtk_render_line(context1, cr1, x01, y01, x11, y11)
}
func RenderOption(context0 StyleContextLike, cr0 *cairo.Context, x0 float64, y0 float64, width0 float64, height0 float64) {
	var context1 *C.GtkStyleContext
	var cr1 *C.cairoContext
	var x1 C.double
	var y1 C.double
	var width1 C.double
	var height1 C.double
	if context0 != nil {
		context1 = context0.InheritedFromGtkStyleContext()
	}
	if cr0 != nil {
		cr1 = (*C.cairoContext)(cr0.C)
	}
	x1 = C.double(x0)
	y1 = C.double(y0)
	width1 = C.double(width0)
	height1 = C.double(height0)
	C.gtk_render_option(context1, cr1, x1, y1, width1, height1)
}
func RenderSlider(context0 StyleContextLike, cr0 *cairo.Context, x0 float64, y0 float64, width0 float64, height0 float64, orientation0 Orientation) {
	var context1 *C.GtkStyleContext
	var cr1 *C.cairoContext
	var x1 C.double
	var y1 C.double
	var width1 C.double
	var height1 C.double
	var orientation1 C.GtkOrientation
	if context0 != nil {
		context1 = context0.InheritedFromGtkStyleContext()
	}
	if cr0 != nil {
		cr1 = (*C.cairoContext)(cr0.C)
	}
	x1 = C.double(x0)
	y1 = C.double(y0)
	width1 = C.double(width0)
	height1 = C.double(height0)
	orientation1 = C.GtkOrientation(orientation0)
	C.gtk_render_slider(context1, cr1, x1, y1, width1, height1, orientation1)
}
func RGBToHSV(r0 float64, g0 float64, b0 float64) (float64, float64, float64) {
	var r1 C.double
	var g1 C.double
	var b1 C.double
	var h1 C.double
	var s1 C.double
	var v1 C.double
	r1 = C.double(r0)
	g1 = C.double(g0)
	b1 = C.double(b0)
	C.gtk_rgb_to_hsv(r1, g1, b1, &h1, &s1, &v1)
	var h2 float64
	var s2 float64
	var v2 float64
	h2 = float64(h1)
	s2 = float64(s1)
	v2 = float64(v1)
	return h2, s2, v2
}
func SelectionAddTarget(widget0 WidgetLike, selection0 gdk.Atom, target0 gdk.Atom, info0 int) {
	var widget1 *C.GtkWidget
	var selection1 C.GdkAtom
	var target1 C.GdkAtom
	var info1 C.uint32_t
	if widget0 != nil {
		widget1 = widget0.InheritedFromGtkWidget()
	}
	selection1 = *(*C.GdkAtom)(unsafe.Pointer(&selection0))
	target1 = *(*C.GdkAtom)(unsafe.Pointer(&target0))
	info1 = C.uint32_t(info0)
	C.gtk_selection_add_target(widget1, selection1, target1, info1)
}
func SelectionAddTargets(widget0 WidgetLike, selection0 gdk.Atom, targets0 []TargetEntry) {
	var widget1 *C.GtkWidget
	var selection1 C.GdkAtom
	var targets1 *C.GtkTargetEntry
	var ntargets1 C.uint32_t
	if widget0 != nil {
		widget1 = widget0.InheritedFromGtkWidget()
	}
	selection1 = *(*C.GdkAtom)(unsafe.Pointer(&selection0))
	targets1 = (*C.GtkTargetEntry)(C.malloc(C.size_t(int(unsafe.Sizeof(*targets1)) * len(targets0))))
	defer C.free(unsafe.Pointer(targets1))
	for i, e := range targets0 {
		(*(*[999999]C.GtkTargetEntry)(unsafe.Pointer(targets1)))[i] = *(*C.GtkTargetEntry)(unsafe.Pointer(&e))
	}
	ntargets1 = C.uint32_t(len(targets0))
	C.gtk_selection_add_targets(widget1, selection1, targets1, ntargets1)
}
func SelectionClearTargets(widget0 WidgetLike, selection0 gdk.Atom) {
	var widget1 *C.GtkWidget
	var selection1 C.GdkAtom
	if widget0 != nil {
		widget1 = widget0.InheritedFromGtkWidget()
	}
	selection1 = *(*C.GdkAtom)(unsafe.Pointer(&selection0))
	C.gtk_selection_clear_targets(widget1, selection1)
}
func SelectionConvert(widget0 WidgetLike, selection0 gdk.Atom, target0 gdk.Atom, time_0 int) bool {
	var widget1 *C.GtkWidget
	var selection1 C.GdkAtom
	var target1 C.GdkAtom
	var time_1 C.uint32_t
	if widget0 != nil {
		widget1 = widget0.InheritedFromGtkWidget()
	}
	selection1 = *(*C.GdkAtom)(unsafe.Pointer(&selection0))
	target1 = *(*C.GdkAtom)(unsafe.Pointer(&target0))
	time_1 = C.uint32_t(time_0)
	ret1 := C.gtk_selection_convert(widget1, selection1, target1, time_1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func SelectionOwnerSet(widget0 WidgetLike, selection0 gdk.Atom, time_0 int) bool {
	var widget1 *C.GtkWidget
	var selection1 C.GdkAtom
	var time_1 C.uint32_t
	if widget0 != nil {
		widget1 = widget0.InheritedFromGtkWidget()
	}
	selection1 = *(*C.GdkAtom)(unsafe.Pointer(&selection0))
	time_1 = C.uint32_t(time_0)
	ret1 := C.gtk_selection_owner_set(widget1, selection1, time_1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func SelectionOwnerSetForDisplay(display0 gdk.DisplayLike, widget0 WidgetLike, selection0 gdk.Atom, time_0 int) bool {
	var display1 *C.GdkDisplay
	var widget1 *C.GtkWidget
	var selection1 C.GdkAtom
	var time_1 C.uint32_t
	if display0 != nil {
		display1 = display0.InheritedFromGdkDisplay()
	}
	if widget0 != nil {
		widget1 = widget0.InheritedFromGtkWidget()
	}
	selection1 = *(*C.GdkAtom)(unsafe.Pointer(&selection0))
	time_1 = C.uint32_t(time_0)
	ret1 := C.gtk_selection_owner_set_for_display(display1, widget1, selection1, time_1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func SelectionRemoveAll(widget0 WidgetLike) {
	var widget1 *C.GtkWidget
	if widget0 != nil {
		widget1 = widget0.InheritedFromGtkWidget()
	}
	C.gtk_selection_remove_all(widget1)
}
func SetDebugFlags(flags0 int) {
	var flags1 C.uint32_t
	flags1 = C.uint32_t(flags0)
	C.gtk_set_debug_flags(flags1)
}
func ShowURI(screen0 gdk.ScreenLike, uri0 string, timestamp0 int) (bool, error) {
	var screen1 *C.GdkScreen
	var uri1 *C.char
	var timestamp1 C.uint32_t
	var err1 *C.GError
	if screen0 != nil {
		screen1 = screen0.InheritedFromGdkScreen()
	}
	uri1 = _GoStringToGString(uri0)
	defer C.free(unsafe.Pointer(uri1))
	timestamp1 = C.uint32_t(timestamp0)
	ret1 := C.gtk_show_uri(screen1, uri1, timestamp1, &err1)
	var ret2 bool
	var err2 error
	ret2 = ret1 != 0
	if err1 != nil {
		err2 = errors.New(C.GoString(((*_GError)(unsafe.Pointer(err1))).message))
		C.g_error_free(err1)
	}
	return ret2, err2
}
// blacklisted: stock_add (function)
// blacklisted: stock_add_static (function)
func StockListIDs() []string {
	ret1 := C.gtk_stock_list_ids()
	var ret2 []string
	for iter := (*_GSList)(unsafe.Pointer(ret1)); iter != nil; iter = iter.next {
		var elt string
		elt = C.GoString((*C.char)(iter.data))
		C.g_free(unsafe.Pointer((*C.char)(iter.data)))
		ret2 = append(ret2, elt)
	}
	return ret2
}
// blacklisted: stock_lookup (function)
// blacklisted: stock_set_translate_func (function)
func TargetTableFree(targets0 []TargetEntry) {
	var targets1 *C.GtkTargetEntry
	var n_targets1 C.int32_t
	targets1 = (*C.GtkTargetEntry)(C.malloc(C.size_t(int(unsafe.Sizeof(*targets1)) * len(targets0))))
	defer C.free(unsafe.Pointer(targets1))
	for i, e := range targets0 {
		(*(*[999999]C.GtkTargetEntry)(unsafe.Pointer(targets1)))[i] = *(*C.GtkTargetEntry)(unsafe.Pointer(&e))
	}
	n_targets1 = C.int32_t(len(targets0))
	C.gtk_target_table_free(targets1, n_targets1)
}
func TargetTableNewFromList(list0 *TargetList) (int, []TargetEntry) {
	var list1 *C.GtkTargetList
	var n_targets1 C.int32_t
	list1 = (*C.GtkTargetList)(unsafe.Pointer(list0))
	ret1 := C.gtk_target_table_new_from_list(list1, &n_targets1)
	var n_targets2 int
	var ret2 []TargetEntry
	n_targets2 = int(n_targets1)
	ret2 = make([]TargetEntry, n_targets1)
	for i := range ret2 {
		ret2[i] = *(*TargetEntry)(unsafe.Pointer(&(*(*[999999]C.GtkTargetEntry)(unsafe.Pointer(ret1)))[i]))
	}
	return n_targets2, ret2
}
func TargetsIncludeImage(targets0 []gdk.Atom, writable0 bool) bool {
	var targets1 *C.GdkAtom
	var n_targets1 C.int32_t
	var writable1 C.int
	targets1 = (*C.GdkAtom)(C.malloc(C.size_t(int(unsafe.Sizeof(*targets1)) * len(targets0))))
	defer C.free(unsafe.Pointer(targets1))
	for i, e := range targets0 {
		(*(*[999999]C.GdkAtom)(unsafe.Pointer(targets1)))[i] = *(*C.GdkAtom)(unsafe.Pointer(&e))
	}
	n_targets1 = C.int32_t(len(targets0))
	writable1 = _GoBoolToCBool(writable0)
	ret1 := C.gtk_targets_include_image(targets1, n_targets1, writable1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func TargetsIncludeRichText(targets0 []gdk.Atom, buffer0 TextBufferLike) bool {
	var targets1 *C.GdkAtom
	var n_targets1 C.int32_t
	var buffer1 *C.GtkTextBuffer
	targets1 = (*C.GdkAtom)(C.malloc(C.size_t(int(unsafe.Sizeof(*targets1)) * len(targets0))))
	defer C.free(unsafe.Pointer(targets1))
	for i, e := range targets0 {
		(*(*[999999]C.GdkAtom)(unsafe.Pointer(targets1)))[i] = *(*C.GdkAtom)(unsafe.Pointer(&e))
	}
	n_targets1 = C.int32_t(len(targets0))
	if buffer0 != nil {
		buffer1 = buffer0.InheritedFromGtkTextBuffer()
	}
	ret1 := C.gtk_targets_include_rich_text(targets1, n_targets1, buffer1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func TargetsIncludeText(targets0 []gdk.Atom) bool {
	var targets1 *C.GdkAtom
	var n_targets1 C.int32_t
	targets1 = (*C.GdkAtom)(C.malloc(C.size_t(int(unsafe.Sizeof(*targets1)) * len(targets0))))
	defer C.free(unsafe.Pointer(targets1))
	for i, e := range targets0 {
		(*(*[999999]C.GdkAtom)(unsafe.Pointer(targets1)))[i] = *(*C.GdkAtom)(unsafe.Pointer(&e))
	}
	n_targets1 = C.int32_t(len(targets0))
	ret1 := C.gtk_targets_include_text(targets1, n_targets1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func TargetsIncludeURI(targets0 []gdk.Atom) bool {
	var targets1 *C.GdkAtom
	var n_targets1 C.int32_t
	targets1 = (*C.GdkAtom)(C.malloc(C.size_t(int(unsafe.Sizeof(*targets1)) * len(targets0))))
	defer C.free(unsafe.Pointer(targets1))
	for i, e := range targets0 {
		(*(*[999999]C.GdkAtom)(unsafe.Pointer(targets1)))[i] = *(*C.GdkAtom)(unsafe.Pointer(&e))
	}
	n_targets1 = C.int32_t(len(targets0))
	ret1 := C.gtk_targets_include_uri(targets1, n_targets1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func TestCreateSimpleWindow(window_title0 string, dialog_text0 string) *Widget {
	var window_title1 *C.char
	var dialog_text1 *C.char
	window_title1 = _GoStringToGString(window_title0)
	defer C.free(unsafe.Pointer(window_title1))
	dialog_text1 = _GoStringToGString(dialog_text0)
	defer C.free(unsafe.Pointer(dialog_text1))
	ret1 := C.gtk_test_create_simple_window(window_title1, dialog_text1)
	var ret2 *Widget
	ret2 = (*Widget)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
func TestFindLabel(widget0 WidgetLike, label_pattern0 string) *Widget {
	var widget1 *C.GtkWidget
	var label_pattern1 *C.char
	if widget0 != nil {
		widget1 = widget0.InheritedFromGtkWidget()
	}
	label_pattern1 = _GoStringToGString(label_pattern0)
	defer C.free(unsafe.Pointer(label_pattern1))
	ret1 := C.gtk_test_find_label(widget1, label_pattern1)
	var ret2 *Widget
	ret2 = (*Widget)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
func TestFindSibling(base_widget0 WidgetLike, widget_type0 gobject.Type) *Widget {
	var base_widget1 *C.GtkWidget
	var widget_type1 C.GType
	if base_widget0 != nil {
		base_widget1 = base_widget0.InheritedFromGtkWidget()
	}
	widget_type1 = C.GType(widget_type0)
	ret1 := C.gtk_test_find_sibling(base_widget1, widget_type1)
	var ret2 *Widget
	ret2 = (*Widget)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
func TestFindWidget(widget0 WidgetLike, label_pattern0 string, widget_type0 gobject.Type) *Widget {
	var widget1 *C.GtkWidget
	var label_pattern1 *C.char
	var widget_type1 C.GType
	if widget0 != nil {
		widget1 = widget0.InheritedFromGtkWidget()
	}
	label_pattern1 = _GoStringToGString(label_pattern0)
	defer C.free(unsafe.Pointer(label_pattern1))
	widget_type1 = C.GType(widget_type0)
	ret1 := C.gtk_test_find_widget(widget1, label_pattern1, widget_type1)
	var ret2 *Widget
	ret2 = (*Widget)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	return ret2
}
func TestListAllTypes() (int, []gobject.Type) {
	var n_types1 C.uint32_t
	ret1 := C.gtk_test_list_all_types(&n_types1)
	var n_types2 int
	var ret2 []gobject.Type
	n_types2 = int(n_types1)
	ret2 = make([]gobject.Type, n_types1)
	for i := range ret2 {
		ret2[i] = gobject.Type((*(*[999999]C.GType)(unsafe.Pointer(ret1)))[i])
	}
	return n_types2, ret2
}
func TestRegisterAllTypes() {
	C.gtk_test_register_all_types()
}
func TestSliderGetValue(widget0 WidgetLike) float64 {
	var widget1 *C.GtkWidget
	if widget0 != nil {
		widget1 = widget0.InheritedFromGtkWidget()
	}
	ret1 := C.gtk_test_slider_get_value(widget1)
	var ret2 float64
	ret2 = float64(ret1)
	return ret2
}
func TestSliderSetPerc(widget0 WidgetLike, percentage0 float64) {
	var widget1 *C.GtkWidget
	var percentage1 C.double
	if widget0 != nil {
		widget1 = widget0.InheritedFromGtkWidget()
	}
	percentage1 = C.double(percentage0)
	C.gtk_test_slider_set_perc(widget1, percentage1)
}
func TestSpinButtonClick(spinner0 SpinButtonLike, button0 int, upwards0 bool) bool {
	var spinner1 *C.GtkSpinButton
	var button1 C.uint32_t
	var upwards1 C.int
	if spinner0 != nil {
		spinner1 = spinner0.InheritedFromGtkSpinButton()
	}
	button1 = C.uint32_t(button0)
	upwards1 = _GoBoolToCBool(upwards0)
	ret1 := C.gtk_test_spin_button_click(spinner1, button1, upwards1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func TestTextGet(widget0 WidgetLike) string {
	var widget1 *C.GtkWidget
	if widget0 != nil {
		widget1 = widget0.InheritedFromGtkWidget()
	}
	ret1 := C.gtk_test_text_get(widget1)
	var ret2 string
	ret2 = C.GoString(ret1)
	C.g_free(unsafe.Pointer(ret1))
	return ret2
}
func TestTextSet(widget0 WidgetLike, string0 string) {
	var widget1 *C.GtkWidget
	var string1 *C.char
	if widget0 != nil {
		widget1 = widget0.InheritedFromGtkWidget()
	}
	string1 = _GoStringToGString(string0)
	defer C.free(unsafe.Pointer(string1))
	C.gtk_test_text_set(widget1, string1)
}
func TestWidgetClick(widget0 WidgetLike, button0 int, modifiers0 gdk.ModifierType) bool {
	var widget1 *C.GtkWidget
	var button1 C.uint32_t
	var modifiers1 C.GdkModifierType
	if widget0 != nil {
		widget1 = widget0.InheritedFromGtkWidget()
	}
	button1 = C.uint32_t(button0)
	modifiers1 = C.GdkModifierType(modifiers0)
	ret1 := C.gtk_test_widget_click(widget1, button1, modifiers1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func TestWidgetSendKey(widget0 WidgetLike, keyval0 int, modifiers0 gdk.ModifierType) bool {
	var widget1 *C.GtkWidget
	var keyval1 C.uint32_t
	var modifiers1 C.GdkModifierType
	if widget0 != nil {
		widget1 = widget0.InheritedFromGtkWidget()
	}
	keyval1 = C.uint32_t(keyval0)
	modifiers1 = C.GdkModifierType(modifiers0)
	ret1 := C.gtk_test_widget_send_key(widget1, keyval1, modifiers1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func TreeGetRowDragData(selection_data0 *SelectionData) (*TreeModel, *TreePath, bool) {
	var selection_data1 *C.GtkSelectionData
	var tree_model1 *C.GtkTreeModel
	var path1 *C.GtkTreePath
	selection_data1 = (*C.GtkSelectionData)(unsafe.Pointer(selection_data0))
	ret1 := C.gtk_tree_get_row_drag_data(selection_data1, &tree_model1, &path1)
	var tree_model2 *TreeModel
	var path2 *TreePath
	var ret2 bool
	tree_model2 = (*TreeModel)(gobject.ObjectWrap(unsafe.Pointer(tree_model1), false))
	path2 = (*TreePath)(unsafe.Pointer(path1))
	ret2 = ret1 != 0
	return tree_model2, path2, ret2
}
// blacklisted: tree_row_reference_deleted (function)
// blacklisted: tree_row_reference_inserted (function)
func TreeSetRowDragData(selection_data0 *SelectionData, tree_model0 TreeModelLike, path0 *TreePath) bool {
	var selection_data1 *C.GtkSelectionData
	var tree_model1 *C.GtkTreeModel
	var path1 *C.GtkTreePath
	selection_data1 = (*C.GtkSelectionData)(unsafe.Pointer(selection_data0))
	if tree_model0 != nil {
		tree_model1 = tree_model0.ImplementsGtkTreeModel()}
	path1 = (*C.GtkTreePath)(unsafe.Pointer(path0))
	ret1 := C.gtk_tree_set_row_drag_data(selection_data1, tree_model1, path1)
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}
func True() bool {
	ret1 := C.gtk_true()
	var ret2 bool
	ret2 = ret1 != 0
	return ret2
}


//----------------------------------------------------------------------------
// Custom utils
//----------------------------------------------------------------------------

func for_pairs(slice []interface{}, closure func(key, value interface{})) {
	if len(slice) & 1 != 0 {
		panic("the number of arguments must be even (key/value pairs)")
	}

	var key interface{}
	for i, value := range slice {
		if i & 1 == 0 {
			key = value
		} else {
			closure(key, value)
		}
	}
}

func panic_if_not_type(ok bool, expected_type string, value interface{}) {
	if !ok {
		msg := fmt.Sprintf("expected type for argument: %s, got: %T",
			expected_type, value)
		panic(msg)
	}
}

//----------------------------------------------------------------------------
// Main
//----------------------------------------------------------------------------

func Main() {
	gobject.FQueue.Start(100)
	_Main()
	gobject.FQueue.Stop()
}

//----------------------------------------------------------------------------
// TreePath
//----------------------------------------------------------------------------

func NewTreePathFromIndices(indices ...int) *TreePath {
	this := NewTreePath()
	for _, i := range indices {
		this.AppendIndex(i)
	}

	return this
}

//----------------------------------------------------------------------------
// TreeViewColumn
//----------------------------------------------------------------------------

func NewTreeViewColumnWithAttributes(title string, renderer CellRendererLike, attrs ...interface{}) *TreeViewColumn {
	c := NewTreeViewColumn()
	c.SetTitle(title)
	c.PackStart(renderer, true)
	for_pairs(attrs, func(key, value interface{}) {
		attr_name, ok := key.(string)
		panic_if_not_type(ok, "string", key)
		attr_col, ok := value.(int)
		panic_if_not_type(ok, "int", value)

		c.AddAttribute(renderer, attr_name, attr_col)
	})
	return c
}

//----------------------------------------------------------------------------
// CellLayout
//----------------------------------------------------------------------------

func (this *CellLayoutImpl) SetAttributes(renderer CellRendererLike, attrs ...interface{}) {
	this.ClearAttributes(renderer)
	for_pairs(attrs, func(key, value interface{}) {
		attr_name, ok := key.(string)
		panic_if_not_type(ok, "string", key)
		attr_col, ok := value.(int)
		panic_if_not_type(ok, "int", value)

		this.AddAttribute(renderer, attr_name, attr_col)
	})
}

//----------------------------------------------------------------------------
// InfoBar
//----------------------------------------------------------------------------

func NewInfoBarWithButtons(buttons ...interface{}) *InfoBar {
	bar := NewInfoBar()
	for_pairs(buttons, func(key, value interface{}) {
		text, ok := key.(string)
		panic_if_not_type(ok, "string", key)
		response, ok := value.(ResponseType)
		panic_if_not_type(ok, "ResponseType", value)
		bar.AddButton(text, response)
	})

	return bar
}

func (this *InfoBar) AddButton(text string, response ResponseType) *Widget {
	return this._AddButton(text, int(response))
}

//----------------------------------------------------------------------------
// Dialog
//----------------------------------------------------------------------------

func NewDialogWithButtons(title string, parent *Window, flags DialogFlags, buttons ...interface{}) *Dialog {
	dialog := NewDialog()

	if title != "" {
		dialog.SetTitle(title)
	}

	if parent != nil {
		dialog.SetTransientFor(parent)
	}

	if flags & DialogFlagsModal != 0 {
		dialog.SetModal(true)
	}

	if flags & DialogFlagsDestroyWithParent != 0 {
		dialog.SetDestroyWithParent(true)
	}

	for_pairs(buttons, func(key, value interface{}) {
		text, ok := key.(string)
		panic_if_not_type(ok, "string", key)
		response, ok := value.(ResponseType)
		panic_if_not_type(ok, "ResponseType", value)
		dialog.AddButton(text, response)
	})

	return dialog
}

func (this *Dialog) AddButton(text string, response ResponseType) *Widget {
	return this._AddButton(text, int(response))
}

func (this *Dialog) Run() ResponseType {
	return ResponseType(this._Run())
}

//----------------------------------------------------------------------------
// MessageDialog
//----------------------------------------------------------------------------

func NewMessageDialog(parent0 WindowLike, flags0 DialogFlags, type0 MessageType,
		buttons0 ButtonsType, format string, args ...interface{}) *MessageDialog {
	var parent1 *C.GtkWindow
	var flags1 C.GtkDialogFlags
	var type1 C.GtkMessageType
	var buttons1 C.GtkButtonsType
	if parent0 != nil {
		parent1 = parent0.InheritedFromGtkWindow()
	}
	flags1 = C.GtkDialogFlags(flags0)
	type1 = C.GtkMessageType(type0)
	buttons1 = C.GtkButtonsType(buttons0)
	ret1 := C.gtk_message_dialog_new(parent1, flags1, type1, buttons1, nil)
	var ret2 *MessageDialog
	ret2 = (*MessageDialog)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	ret2.SetProperty("text", fmt.Sprintf(format, args...))
	return ret2
}

func NewMessageDialogWithMarkup(parent0 WindowLike, flags0 DialogFlags, type0 MessageType,
		buttons0 ButtonsType, format string, args ...interface{}) *MessageDialog {
	var parent1 *C.GtkWindow
	var flags1 C.GtkDialogFlags
	var type1 C.GtkMessageType
	var buttons1 C.GtkButtonsType
	if parent0 != nil {
		parent1 = parent0.InheritedFromGtkWindow()
	}
	flags1 = C.GtkDialogFlags(flags0)
	type1 = C.GtkMessageType(type0)
	buttons1 = C.GtkButtonsType(buttons0)
	ret1 := C.gtk_message_dialog_new(parent1, flags1, type1, buttons1, nil)
	var ret2 *MessageDialog
	ret2 = (*MessageDialog)(gobject.ObjectWrap(unsafe.Pointer(ret1), true))
	ret2.SetMarkup(fmt.Sprintf(format, args...))
	return ret2
}

func (this *Dialog) FormatSecondaryText(format string, args ...interface{}) {
	this.SetProperty("secondary-use-markup", false)
	this.SetProperty("secondary-text", fmt.Sprintf(format, args...))
}

func (this *Dialog) FormatSecondaryMarkup(format string, args ...interface{}) {
	this.SetProperty("secondary-use-markup", true)
	this.SetProperty("secondary-text", fmt.Sprintf(format, args...))
}

//----------------------------------------------------------------------------
// TextBuffer
//----------------------------------------------------------------------------

func (this *TextBuffer) CreateTag(tag_name string, properties ...interface{}) *TextTag {
	tag := NewTextTag(tag_name)
	for_pairs(properties, func(key, value interface{}) {
		name, ok := key.(string)
		panic_if_not_type(ok, "string", key)
		tag.SetProperty(name, value)
	})
	this.GetTagTable().Add(tag)
	return tag
}

func (this *TextBuffer) InsertWithTags(iter *TextIter, text string, length int, tags ...*TextTag) {
	start_offset := iter.GetOffset()
	this.Insert(iter, text, length)
	if len(tags) == 0 {
		return
	}

	start := this.GetIterAtOffset(start_offset)

	for _, tag := range tags {
		this.ApplyTag(tag, &start, iter)
	}
}

func (this *TextBuffer) InsertWithTagsByName(iter *TextIter, text string, length int, tags ...string) {
	start_offset := iter.GetOffset()
	this.Insert(iter, text, length)
	if len(tags) == 0 {
		return
	}

	start := this.GetIterAtOffset(start_offset)

	for _, tag := range tags {
		this.ApplyTagByName(tag, &start, iter)
	}
}

//----------------------------------------------------------------------------
// TreeStore
//----------------------------------------------------------------------------

func NewTreeStore(types ...gobject.Type) *TreeStore {
	return _NewTreeStore(types)
}

func (this *TreeStore) Append(parent *TreeIter, values ...interface{}) TreeIter {
	iter := this._Append(parent)
	for i, v := range values {
		var gvalue gobject.Value
		gvalue.Init(this.GetColumnType(i))
		gvalue.SetGoInterface(v)
		this.SetValue(&iter, i, &gvalue)
		gvalue.Unset()
	}
	return iter
}

func (this *TreeStore) Set(iter *TreeIter, columnspecs ...interface{}) {
	for_pairs(columnspecs, func(key, value interface{}) {
		column, ok := key.(int)
		panic_if_not_type(ok, "int", key)

		var gvalue gobject.Value
		gvalue.Init(this.GetColumnType(column))
		gvalue.SetGoInterface(value)
		this.SetValue(iter, column, &gvalue)
		gvalue.Unset()
	})
}

//----------------------------------------------------------------------------
// ListStore
//----------------------------------------------------------------------------

func NewListStore(types ...gobject.Type) *ListStore {
	return _NewListStore(types)
}

func (this *ListStore) Append(values ...interface{}) TreeIter {
	iter := this._Append()
	for i, v := range values {
		var gvalue gobject.Value
		gvalue.Init(this.GetColumnType(i))
		gvalue.SetGoInterface(v)
		this.SetValue(&iter, i, &gvalue)
		gvalue.Unset()
	}
	return iter
}

func (this *ListStore) Set(iter *TreeIter, columnspecs ...interface{}) {
	for_pairs(columnspecs, func(key, value interface{}) {
		column, ok := key.(int)
		panic_if_not_type(ok, "int", key)

		var gvalue gobject.Value
		gvalue.Init(this.GetColumnType(column))
		gvalue.SetGoInterface(value)
		this.SetValue(iter, column, &gvalue)
		gvalue.Unset()
	})
}

//----------------------------------------------------------------------------
// TreeModelImpl
//----------------------------------------------------------------------------

func (this *TreeModelImpl) Get(iter *TreeIter, columnspecs ...interface{}) {
	for_pairs(columnspecs, func(key, value interface{}) {
		column, ok := key.(int)
		panic_if_not_type(ok, "int", key)
		gvalue := this.GetValue(iter, column)
		gvalue.GetGoInterface(value)
		gvalue.Unset()
	})
}

//----------------------------------------------------------------------------
// ActionGroup and related structs
//----------------------------------------------------------------------------

type ActionEntry struct {
	Name string
	StockID string
	Label string
	Accelerator string
	Tooltip string
	Callback interface{}
}

type ToggleActionEntry struct {
	Name string
	StockID string
	Label string
	Accelerator string
	Tooltip string
	Callback interface{}
	IsActive bool
}

type RadioActionEntry struct {
	Name string
	StockID string
	Label string
	Accelerator string
	Tooltip string
	Value int
}

func (this *ActionGroup) AddActions(actions []ActionEntry) {
	for i := range actions {
		a := &actions[i]
		action := NewAction(a.Name, a.Label, a.Tooltip, a.StockID)
		if a.Callback != nil {
			action.Connect("activate", a.Callback)
		}
		this.AddActionWithAccel(action, a.Accelerator)
	}
}

func (this *ActionGroup) AddToggleActions(actions []ToggleActionEntry) {
	for i := range actions {
		a := &actions[i]
		action := NewToggleAction(a.Name, a.Label, a.Tooltip, a.StockID)
		action.SetActive(a.IsActive)
		if a.Callback != nil {
			action.Connect("activate", a.Callback)
		}
		this.AddActionWithAccel(action, a.Accelerator)
	}
}

func (this *ActionGroup) AddRadioActions(actions []RadioActionEntry, value int, on_change interface{}) {
	if len(actions) == 0 {
		return
	}

	var group *C.GSList
	var first_action *RadioAction

	for i := range actions {
		a := &actions[i]
		action := NewRadioAction(a.Name, a.Label, a.Tooltip, a.StockID, a.Value)
		if i == 0 {
			first_action = action
		}

		C.gtk_radio_action_set_group(action.InheritedFromGtkRadioAction(), group)
		group = C.gtk_radio_action_get_group(action.InheritedFromGtkRadioAction())

		if a.Value == value {
			action.SetActive(true)
		}

		this.AddActionWithAccel(action, a.Accelerator)
	}

	if on_change != nil {
		first_action.Connect("changed", on_change)
	}
}

//----------------------------------------------------------------------------
// Container
//----------------------------------------------------------------------------

func (this *Container) FindChildProperty(name string) *gobject.ParamSpec {
	cname := C.CString(name)
	ret := C._gtk_container_find_child_property(this.InheritedFromGtkContainer(), cname)
	C.free(unsafe.Pointer(cname))
	return (*gobject.ParamSpec)(gobject.ParamSpecWrap(unsafe.Pointer(ret), true))
}

func (this *Container) ChildGet(child WidgetLike, props ...interface{}) {
	for_pairs(props, func(key, value interface{}) {
		name, ok := key.(string)
		panic_if_not_type(ok, "string", key)
		pspec := this.FindChildProperty(name)
		if pspec == nil {
			panic("Container has no property with that name: " + name)
		}
		var gvalue gobject.Value
		gvalue.Init(pspec.GetValueType())
		this.ChildGetProperty(child, name, &gvalue)
		gvalue.GetGoInterface(value)
		gvalue.Unset()
	})
}

func (this *Container) ChildSet(child WidgetLike, props ...interface{}) {
	for_pairs(props, func(key, value interface{}) {
		name, ok := key.(string)
		panic_if_not_type(ok, "string", key)
		pspec := this.FindProperty(name)
		if pspec == nil {
			panic("Container has no property with that name: " + name)
		}
		var gvalue gobject.Value
		gvalue.Init(pspec.GetValueType())
		gvalue.SetGoInterface(value)
		this.ChildSetProperty(child, name, &gvalue)
		gvalue.Unset()
	})
}

//----------------------------------------------------------------------------
// Builder
//----------------------------------------------------------------------------

func (this *Builder) ConnectSignals(recv interface{}) {
	t := reflect.TypeOf(recv)
	this.ConnectSignalsFull(func(builder *Builder, object *gobject.Object, signal_name, handler_name string, connect_object *gobject.Object, flags gobject.ConnectFlags) {
		// TODO: I'm ignoring here a lot is it ok?

		meth, ok := t.MethodByName(handler_name)
		if !ok {
			println("could not find signal handler: '" + handler_name + "'")
			return
		}

		object.ConnectMethod(signal_name, meth.Func.Interface(), recv)
	})
}

//----------------------------------------------------------------------------
// StockItem
//----------------------------------------------------------------------------

type StockItem struct {
	StockID string
	Label string
	Modifier gdk.ModifierType
	Keyval uint32
	TranslationDomain string
}

func (this *StockItem) alloc_c(c *_CStockItem) {
	c.StockID = _GoStringToGString(this.StockID)
	c.Label = _GoStringToGString(this.Label)
	c.Modifier = C.GdkModifierType(this.Modifier)
	c.Keyval = C.uint32_t(this.Keyval)
	c.TranslationDomain = _GoStringToGString(this.TranslationDomain)
}

type _CStockItem struct {
	StockID *C.char
	Label *C.char
	Modifier C.GdkModifierType
	Keyval C.uint32_t
	TranslationDomain *C.char
}

func (this *_CStockItem) free() {
	if this.StockID != nil {
		C.free(unsafe.Pointer(this.StockID))
	}
	if this.Label != nil {
		C.free(unsafe.Pointer(this.Label))
	}
	if this.TranslationDomain != nil {
		C.free(unsafe.Pointer(this.TranslationDomain))
	}
}

func StockAddItems(items []StockItem) {
	citems := make([]_CStockItem, len(items))
	for i, item := range items {
		item.alloc_c(&citems[i])
		defer citems[i].free()
	}

	first := (*C.GtkStockItem)(unsafe.Pointer(&citems[0]))
	C.gtk_stock_add(first, C.uint32_t(len(citems)))
}

func StockLookup(stock_id string) (StockItem, bool) {
	var stockitem StockItem
	var cstockitem _CStockItem
	cstock_id := _GoStringToGString(stock_id)
	ok := C.gtk_stock_lookup(cstock_id, (*C.GtkStockItem)(unsafe.Pointer(&cstockitem))) != 0
	C.free(unsafe.Pointer(cstock_id))
	if !ok {
		return stockitem, false
	}

	if cstockitem.StockID != nil {
		stockitem.StockID = C.GoString(cstockitem.StockID)
	}
	if cstockitem.Label != nil {
		stockitem.Label = C.GoString(cstockitem.Label)
	}
	if cstockitem.TranslationDomain != nil {
		stockitem.TranslationDomain = C.GoString(cstockitem.TranslationDomain)
	}
	stockitem.Keyval = uint32(cstockitem.Keyval)
	stockitem.Modifier = gdk.ModifierType(cstockitem.Modifier)

	return stockitem, true
}

//----------------------------------------------------------------------------
// Menu
//----------------------------------------------------------------------------

func (this *Menu) Popup(parent_menu_shell WidgetLike, parent_menu_item WidgetLike, func_ MenuPositionFunc, button int, activate_time int) {
	this.PopupForDevice(nil, parent_menu_shell, parent_menu_item, func_, button, activate_time)
}

func (this *Menu) AttachToWidget(attach_widget0 WidgetLike) {
	C.gtk_menu_attach_to_widget(this.InheritedFromGtkMenu(),
		attach_widget0.InheritedFromGtkWidget(), nil)
}